{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/components/wizard/shared/useMultiSourceManagement.ts"],"sourcesContent":["/**\n * Enhanced Multi-Source Management Hook\n * \n * Handles flashcards, files, and study materials selection\n * for wizard components. Extends the existing useFileManagement\n * pattern to support multiple source types.\n */\n\nimport { useState, useEffect, useCallback } from 'react';\nimport axiosInstance, { axiosApi } from '@/lib/axios';\nimport { normalizeProjectId } from '@/lib/projectId';\nimport { getProjectScoped } from '@/lib/projectApi';\nimport { isTestMode } from '@/features/projects/services/upload-utils';\n\n// ============================================================================\n// Types and Interfaces\n// ============================================================================\n\nexport interface SourceItem {\n  id: string;\n  name?: string;\n  title?: string;\n  description?: string;\n  size?: number;\n  created_at?: string;\n  updated_at?: string;\n  file_type?: string;\n  flashcard_count?: number;\n  type: 'flashcard' | 'file' | 'study_material';\n}\n\nexport interface SelectedSources {\n  flashcards: { ids: string[]; groundOnly: boolean };\n  files: { ids: string[]; groundOnly: boolean };\n  studyMaterials: { ids: string[]; groundOnly: boolean };\n}\n\ninterface UseMultiSourceManagementOptions {\n  projectId: string;\n  supportedTypes?: Array<'flashcards' | 'files' | 'studyMaterials'>;\n  onSourcesChange?: (sources: SelectedSources) => void;\n  autoLoad?: boolean;\n}\n\ninterface UseMultiSourceManagementReturn {\n  // Source data\n  flashcards: SourceItem[];\n  files: SourceItem[];\n  studyMaterials: SourceItem[];\n  \n  // Upload handling\n  uploadedFiles: File[];\n  \n  // Loading states\n  isLoadingFlashcards: boolean;\n  isLoadingFiles: boolean;\n  isLoadingStudyMaterials: boolean;\n  \n  // Selection state\n  selectedSources: SelectedSources;\n  \n  // Search\n  searchTerm: string;\n  \n  // Actions\n  setSelectedSources: (sources: SelectedSources) => void;\n  setSearchTerm: (term: string) => void;\n  handleFileUpload: (files: File[]) => Promise<void>;\n  removeUploadedFile: (index: number) => void;\n  refreshSources: () => Promise<void>;\n  clearSelection: () => void;\n  \n  // Computed values\n  totalSelectedCount: number;\n  hasMinimumSelection: boolean;\n  isAnyLoading: boolean;\n}\n\n// ============================================================================\n// Default Values\n// ============================================================================\n\nconst DEFAULT_SELECTED_SOURCES: SelectedSources = {\n  flashcards: { ids: [], groundOnly: false },\n  files: { ids: [], groundOnly: false },\n  studyMaterials: { ids: [], groundOnly: false },\n};\n\nconst DEFAULT_SUPPORTED_TYPES: Array<'flashcards' | 'files' | 'studyMaterials'> = ['flashcards', 'files', 'studyMaterials']\n\n// ============================================================================\n// Hook Implementation\n// ============================================================================\n\nexport const useMultiSourceManagement = ({\n  projectId,\n  supportedTypes = DEFAULT_SUPPORTED_TYPES,\n  onSourcesChange,\n  autoLoad = true,\n}: UseMultiSourceManagementOptions): UseMultiSourceManagementReturn => {\n  const [flashcards, setFlashcards] = useState<SourceItem[]>([]);\n  const [files, setFiles] = useState<SourceItem[]>([]);\n  const [studyMaterials, setStudyMaterials] = useState<SourceItem[]>([]);\n  const [uploadedFiles, setUploadedFiles] = useState<File[]>([]);\n  \n  const [isLoadingFlashcards, setIsLoadingFlashcards] = useState(false);\n  const [isLoadingFiles, setIsLoadingFiles] = useState(false);\n  const [isLoadingStudyMaterials, setIsLoadingStudyMaterials] = useState(false);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  \n  const [selectedSources, setSelectedSourcesState] = useState<SelectedSources>(DEFAULT_SELECTED_SOURCES);\n  const [searchTerm, setSearchTerm] = useState('');\n\n  const loadFlashcards = useCallback(async () => {\n    if (!supportedTypes.includes('flashcards')) return;\n    if (isLoadingFlashcards) return;\n    setIsLoadingFlashcards(true);\n    try {\n      const response: any = await getProjectScoped(`flashcard-sets/`, projectId);\n      const raw = response?.data ?? response ?? []\n      const flashcardData = (Array.isArray(raw) ? raw : raw?.results || []).map((deck: any) => ({\n        id: deck.id,\n        title: deck.title,\n        description: deck.description,\n        flashcard_count: deck.flashcard_count || 0,\n        created_at: deck.created_at,\n        updated_at: deck.updated_at,\n        type: 'flashcard' as const,\n      }));\n      setFlashcards(flashcardData);\n    } catch (error: any) {\n      console.error('Failed to load flashcards:', error);\n      if (isTestMode() && (error?.code === 'ERR_NETWORK' || !error?.response)) {\n        setFlashcards([]);\n      } else {\n        setFlashcards([]);\n      }\n    } finally {\n      setIsLoadingFlashcards(false);\n    }\n  }, [projectId, supportedTypes, isLoadingFlashcards]);\n  \n  const loadFiles = useCallback(async () => {\n    if (!supportedTypes.includes('files')) return;\n    if (isLoadingFiles) return;\n    setIsLoadingFiles(true);\n    try {\n      // Project detail includes uploaded_files\n      const res = await (axiosApi as any).get(`projects/${projectId}/`);\n      const project = res?.data || {};\n      const uploaded = Array.isArray(project.uploaded_files) ? project.uploaded_files : [];\n      const fileData = uploaded.map((file: any) => ({\n        id: file.id,\n        name: file.original_name || (file.file ? String(file.file).split('/').pop() : ''),\n        description: '',\n        size: file.file_size,\n        file_type: file.content_type,\n        created_at: file.uploaded_at,\n        type: 'file' as const,\n      }));\n      setFiles(fileData);\n    } catch (error: any) {\n      console.error('Failed to load files:', error);\n      if (isTestMode() && (error?.code === 'ERR_NETWORK' || !error?.response)) {\n        setFiles([]);\n      } else {\n        setFiles([]);\n      }\n    } finally {\n      setIsLoadingFiles(false);\n    }\n  }, [projectId, supportedTypes, isLoadingFiles]);\n  \n  const loadStudyMaterials = useCallback(async () => {\n    if (!supportedTypes.includes('studyMaterials')) return;\n    if (isLoadingStudyMaterials) return;\n    setIsLoadingStudyMaterials(true);\n    try {\n      // Study materials live under non-API prefix\n      const pid = normalizeProjectId(projectId);\n      const res = await (axiosInstance as any).get(`/study_materials/study_materials/`, {\n        params: { project: pid }\n      });\n      const raw = res?.data ?? [];\n      const list = Array.isArray(raw) ? raw : raw?.results || [];\n      // Filter by project if backend ignores query param\n      const filtered = list.filter((m: any) => !m.project || String(m.project) === String(pid));\n      const materialData = filtered.map((material: any) => ({\n        id: material.id,\n        title: material.title,\n        name: material.title,\n        description: material.description,\n        created_at: material.created_at,\n        updated_at: material.updated_at,\n        type: 'study_material' as const,\n      }));\n      setStudyMaterials(materialData);\n    } catch (error: any) {\n      console.error('Failed to load study materials:', error);\n      if (isTestMode() && (error?.code === 'ERR_NETWORK' || !error?.response)) {\n        setStudyMaterials([]);\n      } else {\n        setStudyMaterials([]);\n      }\n    } finally {\n      setIsLoadingStudyMaterials(false);\n    }\n  }, [projectId, supportedTypes, isLoadingStudyMaterials]);\n\n  const handleFileUpload = useCallback(async (files: File[]) => {\n    setUploadedFiles(prev => [...prev, ...files]);\n    try {\n      for (const file of files) {\n        const formData = new FormData();\n        formData.append('file', file);\n        const response = await (axiosApi as any).post(`projects/${projectId}/upload_file/`, formData, {\n          headers: { 'Content-Type': 'multipart/form-data' }\n        });\n        if (response.status === 200 || response.status === 201) {\n          console.log('✅ File uploaded successfully:', file.name);\n        }\n      }\n      setTimeout(() => { loadFiles(); }, 1000);\n    } catch (error) {\n      console.error('❌ File upload failed:', error);\n    }\n  }, [projectId, loadFiles]);\n\n  const removeUploadedFile = useCallback((index: number) => {\n    setUploadedFiles(prev => prev.filter((_, i) => i !== index));\n  }, []);\n\n  const setSelectedSources = useCallback((sources: SelectedSources) => {\n    setSelectedSourcesState(sources);\n    onSourcesChange?.(sources);\n  }, [onSourcesChange]);\n\n  const clearSelection = useCallback(() => {\n    setSelectedSources(DEFAULT_SELECTED_SOURCES);\n    setUploadedFiles([]);\n    setSearchTerm('');\n  }, [setSelectedSources]);\n\n  const refreshSources = useCallback(async () => {\n    if (isRefreshing) return;\n    setIsRefreshing(true);\n    try {\n      await Promise.all([\n        loadFlashcards(),\n        loadFiles(),\n        loadStudyMaterials(),\n      ]);\n    } finally {\n      setIsRefreshing(false);\n    }\n  }, [isRefreshing, loadFlashcards, loadFiles, loadStudyMaterials]);\n\n  useEffect(() => {\n    if (autoLoad && projectId) {\n      refreshSources();\n    }\n  }, [autoLoad, projectId, refreshSources]);\n\n  const totalSelectedCount = \n    selectedSources.flashcards.ids.length +\n    selectedSources.files.ids.length +\n    selectedSources.studyMaterials.ids.length +\n    uploadedFiles.length;\n  \n  const hasMinimumSelection = totalSelectedCount >= 1;\n  const isAnyLoading = isLoadingFlashcards || isLoadingFiles || isLoadingStudyMaterials;\n  \n  return {\n    flashcards,\n    files,\n    studyMaterials,\n    uploadedFiles,\n    isLoadingFlashcards,\n    isLoadingFiles,\n    isLoadingStudyMaterials,\n    selectedSources,\n    searchTerm,\n    setSelectedSources,\n    setSearchTerm,\n    handleFileUpload,\n    removeUploadedFile,\n    refreshSources,\n    clearSelection,\n    totalSelectedCount,\n    hasMinimumSelection,\n    isAnyLoading,\n  };\n};\n\nexport default useMultiSourceManagement;\n"],"names":["useMultiSourceManagement","DEFAULT_SELECTED_SOURCES","flashcards","ids","groundOnly","files","studyMaterials","DEFAULT_SUPPORTED_TYPES","projectId","supportedTypes","onSourcesChange","autoLoad","setFlashcards","useState","setFiles","setStudyMaterials","uploadedFiles","setUploadedFiles","isLoadingFlashcards","setIsLoadingFlashcards","isLoadingFiles","setIsLoadingFiles","isLoadingStudyMaterials","setIsLoadingStudyMaterials","isRefreshing","setIsRefreshing","selectedSources","setSelectedSourcesState","searchTerm","setSearchTerm","loadFlashcards","useCallback","includes","response","getProjectScoped","raw","data","flashcardData","Array","isArray","results","map","deck","id","title","description","flashcard_count","created_at","updated_at","type","error","console","isTestMode","code","loadFiles","res","axiosApi","get","project","uploaded","uploaded_files","fileData","file","name","original_name","String","split","pop","size","file_size","file_type","content_type","uploaded_at","loadStudyMaterials","pid","normalizeProjectId","axiosInstance","params","list","filtered","filter","m","materialData","material","handleFileUpload","prev","formData","FormData","append","post","headers","status","log","setTimeout","removeUploadedFile","index","_","i","setSelectedSources","sources","clearSelection","refreshSources","Promise","all","useEffect","totalSelectedCount","length","hasMinimumSelection","isAnyLoading"],"mappings":"AAAA;;;;;;CAMC;;;;;;;;;;;IAgSD,OAAwC;eAAxC;;IAxMaA,wBAAwB;eAAxBA;;;uBAtFoC;+DACT;2BACL;4BACF;6BACN;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkE3B,+EAA+E;AAC/E,iBAAiB;AACjB,+EAA+E;AAE/E,MAAMC,2BAA4C;IAChDC,YAAY;QAAEC,KAAK,EAAE;QAAEC,YAAY;IAAM;IACzCC,OAAO;QAAEF,KAAK,EAAE;QAAEC,YAAY;IAAM;IACpCE,gBAAgB;QAAEH,KAAK,EAAE;QAAEC,YAAY;IAAM;AAC/C;AAEA,MAAMG,0BAA4E;IAAC;IAAc;IAAS;CAAiB;AAMpH,MAAMP,2BAA2B,CAAC,EACvCQ,SAAS,EACTC,iBAAiBF,uBAAuB,EACxCG,eAAe,EACfC,WAAW,IAAI,EACiB;IAChC,MAAM,CAACT,YAAYU,cAAc,GAAGC,IAAAA,eAAQ,EAAe,EAAE;IAC7D,MAAM,CAACR,OAAOS,SAAS,GAAGD,IAAAA,eAAQ,EAAe,EAAE;IACnD,MAAM,CAACP,gBAAgBS,kBAAkB,GAAGF,IAAAA,eAAQ,EAAe,EAAE;IACrE,MAAM,CAACG,eAAeC,iBAAiB,GAAGJ,IAAAA,eAAQ,EAAS,EAAE;IAE7D,MAAM,CAACK,qBAAqBC,uBAAuB,GAAGN,IAAAA,eAAQ,EAAC;IAC/D,MAAM,CAACO,gBAAgBC,kBAAkB,GAAGR,IAAAA,eAAQ,EAAC;IACrD,MAAM,CAACS,yBAAyBC,2BAA2B,GAAGV,IAAAA,eAAQ,EAAC;IACvE,MAAM,CAACW,cAAcC,gBAAgB,GAAGZ,IAAAA,eAAQ,EAAC;IAEjD,MAAM,CAACa,iBAAiBC,wBAAwB,GAAGd,IAAAA,eAAQ,EAAkBZ;IAC7E,MAAM,CAAC2B,YAAYC,cAAc,GAAGhB,IAAAA,eAAQ,EAAC;IAE7C,MAAMiB,iBAAiBC,IAAAA,kBAAW,EAAC;QACjC,IAAI,CAACtB,eAAeuB,QAAQ,CAAC,eAAe;QAC5C,IAAId,qBAAqB;QACzBC,uBAAuB;QACvB,IAAI;YACF,MAAMc,WAAgB,MAAMC,IAAAA,4BAAgB,EAAC,CAAC,eAAe,CAAC,EAAE1B;YAChE,MAAM2B,MAAMF,UAAUG,QAAQH,YAAY,EAAE;YAC5C,MAAMI,gBAAgB,AAACC,CAAAA,MAAMC,OAAO,CAACJ,OAAOA,MAAMA,KAAKK,WAAW,EAAE,AAAD,EAAGC,GAAG,CAAC,CAACC,OAAe,CAAA;oBACxFC,IAAID,KAAKC,EAAE;oBACXC,OAAOF,KAAKE,KAAK;oBACjBC,aAAaH,KAAKG,WAAW;oBAC7BC,iBAAiBJ,KAAKI,eAAe,IAAI;oBACzCC,YAAYL,KAAKK,UAAU;oBAC3BC,YAAYN,KAAKM,UAAU;oBAC3BC,MAAM;gBACR,CAAA;YACArC,cAAcyB;QAChB,EAAE,OAAOa,OAAY;YACnBC,QAAQD,KAAK,CAAC,8BAA8BA;YAC5C,IAAIE,IAAAA,uBAAU,OAAOF,CAAAA,OAAOG,SAAS,iBAAiB,CAACH,OAAOjB,QAAO,GAAI;gBACvErB,cAAc,EAAE;YAClB,OAAO;gBACLA,cAAc,EAAE;YAClB;QACF,SAAU;YACRO,uBAAuB;QACzB;IACF,GAAG;QAACX;QAAWC;QAAgBS;KAAoB;IAEnD,MAAMoC,YAAYvB,IAAAA,kBAAW,EAAC;QAC5B,IAAI,CAACtB,eAAeuB,QAAQ,CAAC,UAAU;QACvC,IAAIZ,gBAAgB;QACpBC,kBAAkB;QAClB,IAAI;YACF,yCAAyC;YACzC,MAAMkC,MAAM,MAAM,AAACC,eAAQ,CAASC,GAAG,CAAC,CAAC,SAAS,EAAEjD,UAAU,CAAC,CAAC;YAChE,MAAMkD,UAAUH,KAAKnB,QAAQ,CAAC;YAC9B,MAAMuB,WAAWrB,MAAMC,OAAO,CAACmB,QAAQE,cAAc,IAAIF,QAAQE,cAAc,GAAG,EAAE;YACpF,MAAMC,WAAWF,SAASlB,GAAG,CAAC,CAACqB,OAAe,CAAA;oBAC5CnB,IAAImB,KAAKnB,EAAE;oBACXoB,MAAMD,KAAKE,aAAa,IAAKF,CAAAA,KAAKA,IAAI,GAAGG,OAAOH,KAAKA,IAAI,EAAEI,KAAK,CAAC,KAAKC,GAAG,KAAK,EAAC;oBAC/EtB,aAAa;oBACbuB,MAAMN,KAAKO,SAAS;oBACpBC,WAAWR,KAAKS,YAAY;oBAC5BxB,YAAYe,KAAKU,WAAW;oBAC5BvB,MAAM;gBACR,CAAA;YACAnC,SAAS+C;QACX,EAAE,OAAOX,OAAY;YACnBC,QAAQD,KAAK,CAAC,yBAAyBA;YACvC,IAAIE,IAAAA,uBAAU,OAAOF,CAAAA,OAAOG,SAAS,iBAAiB,CAACH,OAAOjB,QAAO,GAAI;gBACvEnB,SAAS,EAAE;YACb,OAAO;gBACLA,SAAS,EAAE;YACb;QACF,SAAU;YACRO,kBAAkB;QACpB;IACF,GAAG;QAACb;QAAWC;QAAgBW;KAAe;IAE9C,MAAMqD,qBAAqB1C,IAAAA,kBAAW,EAAC;QACrC,IAAI,CAACtB,eAAeuB,QAAQ,CAAC,mBAAmB;QAChD,IAAIV,yBAAyB;QAC7BC,2BAA2B;QAC3B,IAAI;YACF,4CAA4C;YAC5C,MAAMmD,MAAMC,IAAAA,6BAAkB,EAACnE;YAC/B,MAAM+C,MAAM,MAAM,AAACqB,cAAa,CAASnB,GAAG,CAAC,CAAC,iCAAiC,CAAC,EAAE;gBAChFoB,QAAQ;oBAAEnB,SAASgB;gBAAI;YACzB;YACA,MAAMvC,MAAMoB,KAAKnB,QAAQ,EAAE;YAC3B,MAAM0C,OAAOxC,MAAMC,OAAO,CAACJ,OAAOA,MAAMA,KAAKK,WAAW,EAAE;YAC1D,mDAAmD;YACnD,MAAMuC,WAAWD,KAAKE,MAAM,CAAC,CAACC,IAAW,CAACA,EAAEvB,OAAO,IAAIO,OAAOgB,EAAEvB,OAAO,MAAMO,OAAOS;YACpF,MAAMQ,eAAeH,SAAStC,GAAG,CAAC,CAAC0C,WAAmB,CAAA;oBACpDxC,IAAIwC,SAASxC,EAAE;oBACfC,OAAOuC,SAASvC,KAAK;oBACrBmB,MAAMoB,SAASvC,KAAK;oBACpBC,aAAasC,SAAStC,WAAW;oBACjCE,YAAYoC,SAASpC,UAAU;oBAC/BC,YAAYmC,SAASnC,UAAU;oBAC/BC,MAAM;gBACR,CAAA;YACAlC,kBAAkBmE;QACpB,EAAE,OAAOhC,OAAY;YACnBC,QAAQD,KAAK,CAAC,mCAAmCA;YACjD,IAAIE,IAAAA,uBAAU,OAAOF,CAAAA,OAAOG,SAAS,iBAAiB,CAACH,OAAOjB,QAAO,GAAI;gBACvElB,kBAAkB,EAAE;YACtB,OAAO;gBACLA,kBAAkB,EAAE;YACtB;QACF,SAAU;YACRQ,2BAA2B;QAC7B;IACF,GAAG;QAACf;QAAWC;QAAgBa;KAAwB;IAEvD,MAAM8D,mBAAmBrD,IAAAA,kBAAW,EAAC,OAAO1B;QAC1CY,iBAAiBoE,CAAAA,OAAQ;mBAAIA;mBAAShF;aAAM;QAC5C,IAAI;YACF,KAAK,MAAMyD,QAAQzD,MAAO;gBACxB,MAAMiF,WAAW,IAAIC;gBACrBD,SAASE,MAAM,CAAC,QAAQ1B;gBACxB,MAAM7B,WAAW,MAAM,AAACuB,eAAQ,CAASiC,IAAI,CAAC,CAAC,SAAS,EAAEjF,UAAU,aAAa,CAAC,EAAE8E,UAAU;oBAC5FI,SAAS;wBAAE,gBAAgB;oBAAsB;gBACnD;gBACA,IAAIzD,SAAS0D,MAAM,KAAK,OAAO1D,SAAS0D,MAAM,KAAK,KAAK;oBACtDxC,QAAQyC,GAAG,CAAC,iCAAiC9B,KAAKC,IAAI;gBACxD;YACF;YACA8B,WAAW;gBAAQvC;YAAa,GAAG;QACrC,EAAE,OAAOJ,OAAO;YACdC,QAAQD,KAAK,CAAC,yBAAyBA;QACzC;IACF,GAAG;QAAC1C;QAAW8C;KAAU;IAEzB,MAAMwC,qBAAqB/D,IAAAA,kBAAW,EAAC,CAACgE;QACtC9E,iBAAiBoE,CAAAA,OAAQA,KAAKL,MAAM,CAAC,CAACgB,GAAGC,IAAMA,MAAMF;IACvD,GAAG,EAAE;IAEL,MAAMG,qBAAqBnE,IAAAA,kBAAW,EAAC,CAACoE;QACtCxE,wBAAwBwE;QACxBzF,kBAAkByF;IACpB,GAAG;QAACzF;KAAgB;IAEpB,MAAM0F,iBAAiBrE,IAAAA,kBAAW,EAAC;QACjCmE,mBAAmBjG;QACnBgB,iBAAiB,EAAE;QACnBY,cAAc;IAChB,GAAG;QAACqE;KAAmB;IAEvB,MAAMG,iBAAiBtE,IAAAA,kBAAW,EAAC;QACjC,IAAIP,cAAc;QAClBC,gBAAgB;QAChB,IAAI;YACF,MAAM6E,QAAQC,GAAG,CAAC;gBAChBzE;gBACAwB;gBACAmB;aACD;QACH,SAAU;YACRhD,gBAAgB;QAClB;IACF,GAAG;QAACD;QAAcM;QAAgBwB;QAAWmB;KAAmB;IAEhE+B,IAAAA,gBAAS,EAAC;QACR,IAAI7F,YAAYH,WAAW;YACzB6F;QACF;IACF,GAAG;QAAC1F;QAAUH;QAAW6F;KAAe;IAExC,MAAMI,qBACJ/E,gBAAgBxB,UAAU,CAACC,GAAG,CAACuG,MAAM,GACrChF,gBAAgBrB,KAAK,CAACF,GAAG,CAACuG,MAAM,GAChChF,gBAAgBpB,cAAc,CAACH,GAAG,CAACuG,MAAM,GACzC1F,cAAc0F,MAAM;IAEtB,MAAMC,sBAAsBF,sBAAsB;IAClD,MAAMG,eAAe1F,uBAAuBE,kBAAkBE;IAE9D,OAAO;QACLpB;QACAG;QACAC;QACAU;QACAE;QACAE;QACAE;QACAI;QACAE;QACAsE;QACArE;QACAuD;QACAU;QACAO;QACAD;QACAK;QACAE;QACAC;IACF;AACF;MAEA,WAAe5G"}