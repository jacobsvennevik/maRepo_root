8046e77cb8a8b28c635490fd96b89c46
/**
 * Enhanced Multi-Source Management Hook
 * 
 * Handles flashcards, files, and study materials selection
 * for wizard components. Extends the existing useFileManagement
 * pattern to support multiple source types.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return _default;
    },
    useMultiSourceManagement: function() {
        return useMultiSourceManagement;
    }
});
const _react = require("react");
const _axios = /*#__PURE__*/ _interop_require_wildcard(require("../../../lib/axios"));
const _projectId = require("../../../lib/projectId");
const _projectApi = require("../../../lib/projectApi");
const _uploadutils = require("../../../features/projects/services/upload-utils");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
// ============================================================================
// Default Values
// ============================================================================
const DEFAULT_SELECTED_SOURCES = {
    flashcards: {
        ids: [],
        groundOnly: false
    },
    files: {
        ids: [],
        groundOnly: false
    },
    studyMaterials: {
        ids: [],
        groundOnly: false
    }
};
const DEFAULT_SUPPORTED_TYPES = [
    'flashcards',
    'files',
    'studyMaterials'
];
const useMultiSourceManagement = ({ projectId, supportedTypes = DEFAULT_SUPPORTED_TYPES, onSourcesChange, autoLoad = true })=>{
    const [flashcards, setFlashcards] = (0, _react.useState)([]);
    const [files, setFiles] = (0, _react.useState)([]);
    const [studyMaterials, setStudyMaterials] = (0, _react.useState)([]);
    const [uploadedFiles, setUploadedFiles] = (0, _react.useState)([]);
    const [isLoadingFlashcards, setIsLoadingFlashcards] = (0, _react.useState)(false);
    const [isLoadingFiles, setIsLoadingFiles] = (0, _react.useState)(false);
    const [isLoadingStudyMaterials, setIsLoadingStudyMaterials] = (0, _react.useState)(false);
    const [isRefreshing, setIsRefreshing] = (0, _react.useState)(false);
    const [selectedSources, setSelectedSourcesState] = (0, _react.useState)(DEFAULT_SELECTED_SOURCES);
    const [searchTerm, setSearchTerm] = (0, _react.useState)('');
    const loadFlashcards = (0, _react.useCallback)(async ()=>{
        if (!supportedTypes.includes('flashcards')) return;
        if (isLoadingFlashcards) return;
        setIsLoadingFlashcards(true);
        try {
            const response = await (0, _projectApi.getProjectScoped)(`flashcard-sets/`, projectId);
            const raw = response?.data ?? response ?? [];
            const flashcardData = (Array.isArray(raw) ? raw : raw?.results || []).map((deck)=>({
                    id: deck.id,
                    title: deck.title,
                    description: deck.description,
                    flashcard_count: deck.flashcard_count || 0,
                    created_at: deck.created_at,
                    updated_at: deck.updated_at,
                    type: 'flashcard'
                }));
            setFlashcards(flashcardData);
        } catch (error) {
            console.error('Failed to load flashcards:', error);
            if ((0, _uploadutils.isTestMode)() && (error?.code === 'ERR_NETWORK' || !error?.response)) {
                setFlashcards([]);
            } else {
                setFlashcards([]);
            }
        } finally{
            setIsLoadingFlashcards(false);
        }
    }, [
        projectId,
        supportedTypes,
        isLoadingFlashcards
    ]);
    const loadFiles = (0, _react.useCallback)(async ()=>{
        if (!supportedTypes.includes('files')) return;
        if (isLoadingFiles) return;
        setIsLoadingFiles(true);
        try {
            // Project detail includes uploaded_files
            const res = await _axios.axiosApi.get(`projects/${projectId}/`);
            const project = res?.data || {};
            const uploaded = Array.isArray(project.uploaded_files) ? project.uploaded_files : [];
            const fileData = uploaded.map((file)=>({
                    id: file.id,
                    name: file.original_name || (file.file ? String(file.file).split('/').pop() : ''),
                    description: '',
                    size: file.file_size,
                    file_type: file.content_type,
                    created_at: file.uploaded_at,
                    type: 'file'
                }));
            setFiles(fileData);
        } catch (error) {
            console.error('Failed to load files:', error);
            if ((0, _uploadutils.isTestMode)() && (error?.code === 'ERR_NETWORK' || !error?.response)) {
                setFiles([]);
            } else {
                setFiles([]);
            }
        } finally{
            setIsLoadingFiles(false);
        }
    }, [
        projectId,
        supportedTypes,
        isLoadingFiles
    ]);
    const loadStudyMaterials = (0, _react.useCallback)(async ()=>{
        if (!supportedTypes.includes('studyMaterials')) return;
        if (isLoadingStudyMaterials) return;
        setIsLoadingStudyMaterials(true);
        try {
            // Study materials live under non-API prefix
            const pid = (0, _projectId.normalizeProjectId)(projectId);
            const res = await _axios.default.get(`/study_materials/study_materials/`, {
                params: {
                    project: pid
                }
            });
            const raw = res?.data ?? [];
            const list = Array.isArray(raw) ? raw : raw?.results || [];
            // Filter by project if backend ignores query param
            const filtered = list.filter((m)=>!m.project || String(m.project) === String(pid));
            const materialData = filtered.map((material)=>({
                    id: material.id,
                    title: material.title,
                    name: material.title,
                    description: material.description,
                    created_at: material.created_at,
                    updated_at: material.updated_at,
                    type: 'study_material'
                }));
            setStudyMaterials(materialData);
        } catch (error) {
            console.error('Failed to load study materials:', error);
            if ((0, _uploadutils.isTestMode)() && (error?.code === 'ERR_NETWORK' || !error?.response)) {
                setStudyMaterials([]);
            } else {
                setStudyMaterials([]);
            }
        } finally{
            setIsLoadingStudyMaterials(false);
        }
    }, [
        projectId,
        supportedTypes,
        isLoadingStudyMaterials
    ]);
    const handleFileUpload = (0, _react.useCallback)(async (files)=>{
        setUploadedFiles((prev)=>[
                ...prev,
                ...files
            ]);
        try {
            for (const file of files){
                const formData = new FormData();
                formData.append('file', file);
                const response = await _axios.axiosApi.post(`projects/${projectId}/upload_file/`, formData, {
                    headers: {
                        'Content-Type': 'multipart/form-data'
                    }
                });
                if (response.status === 200 || response.status === 201) {
                    console.log('✅ File uploaded successfully:', file.name);
                }
            }
            setTimeout(()=>{
                loadFiles();
            }, 1000);
        } catch (error) {
            console.error('❌ File upload failed:', error);
        }
    }, [
        projectId,
        loadFiles
    ]);
    const removeUploadedFile = (0, _react.useCallback)((index)=>{
        setUploadedFiles((prev)=>prev.filter((_, i)=>i !== index));
    }, []);
    const setSelectedSources = (0, _react.useCallback)((sources)=>{
        setSelectedSourcesState(sources);
        onSourcesChange?.(sources);
    }, [
        onSourcesChange
    ]);
    const clearSelection = (0, _react.useCallback)(()=>{
        setSelectedSources(DEFAULT_SELECTED_SOURCES);
        setUploadedFiles([]);
        setSearchTerm('');
    }, [
        setSelectedSources
    ]);
    const refreshSources = (0, _react.useCallback)(async ()=>{
        if (isRefreshing) return;
        setIsRefreshing(true);
        try {
            await Promise.all([
                loadFlashcards(),
                loadFiles(),
                loadStudyMaterials()
            ]);
        } finally{
            setIsRefreshing(false);
        }
    }, [
        isRefreshing,
        loadFlashcards,
        loadFiles,
        loadStudyMaterials
    ]);
    (0, _react.useEffect)(()=>{
        if (autoLoad && projectId) {
            refreshSources();
        }
    }, [
        autoLoad,
        projectId,
        refreshSources
    ]);
    const totalSelectedCount = selectedSources.flashcards.ids.length + selectedSources.files.ids.length + selectedSources.studyMaterials.ids.length + uploadedFiles.length;
    const hasMinimumSelection = totalSelectedCount >= 1;
    const isAnyLoading = isLoadingFlashcards || isLoadingFiles || isLoadingStudyMaterials;
    return {
        flashcards,
        files,
        studyMaterials,
        uploadedFiles,
        isLoadingFlashcards,
        isLoadingFiles,
        isLoadingStudyMaterials,
        selectedSources,
        searchTerm,
        setSelectedSources,
        setSearchTerm,
        handleFileUpload,
        removeUploadedFile,
        refreshSources,
        clearSelection,
        totalSelectedCount,
        hasMinimumSelection,
        isAnyLoading
    };
};
const _default = useMultiSourceManagement;

//# sourceMappingURL=data:application/json;base64,