{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/test-utils/e2e/quiz-center-e2e.test.ts"],"sourcesContent":["/**\n * E2E Tests for Quiz Center Error Handling\n * \n * These tests run against the real application and backend,\n * catching issues that unit tests with mocks miss.\n */\n\ndescribe('Quiz Center E2E Error Handling', () => {\n  const projectId = '203062be-58d0-4f98-bbd4-33b4ce081276';\n\n  beforeEach(() => {\n    // Clear any previous network logs\n    if (typeof window !== 'undefined') {\n      (window as any).networkErrors = [];\n    }\n  });\n\n  it('should show error states when backend is unreachable', () => {\n    // This test documents what SHOULD happen when backend fails\n    cy.visit(`/projects/${projectId}/tests`);\n    \n    // Mock network failure for diagnostic sessions\n    cy.intercept('GET', '**/generation/api/diagnostic-sessions/**', {\n      forceNetworkError: true\n    }).as('diagnosticSessionsError');\n    \n    // Force a refresh to trigger the errors\n    cy.reload();\n\n    // Should show error UI (not blank page)\n    cy.contains(/error.*loading.*quizzes|failed.*load|connection.*error/i, { timeout: 10000 })\n      .should('be.visible');\n    \n    // Should have retry functionality\n    cy.contains(/try again|retry/i)\n      .should('be.visible');\n\n    // Verify the actual network calls were attempted\n    cy.wait('@diagnosticSessionsError');\n  });\n\n  it('should recover when backend comes back online', () => {\n    cy.visit(`/projects/${projectId}/tests`);\n    \n    // First, simulate failure\n    cy.intercept('GET', '**/generation/api/diagnostic-sessions/**', {\n      forceNetworkError: true\n    }).as('initialError');\n    \n    cy.reload();\n    cy.wait('@initialError');\n    \n    // Should show error\n    cy.contains(/error.*loading.*quizzes|failed.*load/i, { timeout: 5000 });\n    \n    // Then simulate recovery\n    cy.intercept('GET', '**/generation/api/diagnostic-sessions/**', {\n      statusCode: 200,\n      body: []\n    }).as('recovery');\n    \n    // Click retry\n    cy.contains(/try again|retry/i).click();\n    cy.wait('@recovery');\n    \n    // Should show normal content (empty state for no quizzes)\n    cy.contains(/no quizzes.*yet|generate.*first.*quiz/i, { timeout: 5000 });\n  });\n\n  it('should handle quiz generation errors gracefully', () => {\n    cy.visit(`/projects/${projectId}/tests`);\n    \n    // Mock successful session list (empty)\n    cy.intercept('GET', '**/generation/api/diagnostic-sessions/**', {\n      statusCode: 200,\n      body: []\n    }).as('emptyList');\n    \n    // Mock failed quiz generation\n    cy.intercept('POST', '**/generation/api/diagnostics/generate/', {\n      statusCode: 500,\n      body: { detail: 'AI service temporarily unavailable' }\n    }).as('generateError');\n    \n    cy.wait('@emptyList');\n    \n    // Should show empty state\n    cy.contains(/no quizzes.*yet|generate.*first.*quiz/i, { timeout: 5000 });\n    \n    // Try to generate a quiz\n    cy.contains(/auto-generate.*quiz|generate/i).click();\n    \n    cy.wait('@generateError');\n    \n    // Should show generation error\n    cy.contains(/error.*generating|generation.*failed|ai.*service/i, { timeout: 5000 })\n      .should('be.visible');\n  });\n\n  it('should display loading states during quiz operations', () => {\n    cy.visit(`/projects/${projectId}/tests`);\n    \n    // Mock slow response\n    cy.intercept('GET', '**/generation/api/diagnostic-sessions/**', {\n      statusCode: 200,\n      body: [],\n      delay: 2000\n    }).as('slowResponse');\n    \n    cy.reload();\n    \n    // Should show loading state\n    cy.contains(/loading.*quizzes|please.*wait/i, { timeout: 1000 })\n      .should('be.visible');\n    \n    cy.wait('@slowResponse');\n    \n    // Loading should disappear\n    cy.contains(/loading.*quizzes|please.*wait/i, { timeout: 5000 })\n      .should('not.exist');\n  });\n\n  it('should handle empty quiz list gracefully', () => {\n    cy.visit(`/projects/${projectId}/tests`);\n    \n    // Mock empty quiz list\n    cy.intercept('GET', '**/generation/api/diagnostic-sessions/**', {\n      statusCode: 200,\n      body: []\n    }).as('emptyQuizzes');\n    \n    cy.wait('@emptyQuizzes');\n    \n    // Should show empty state with helpful messaging\n    cy.contains(/no quizzes.*yet/i).should('be.visible');\n    cy.contains(/generate.*first.*quiz/i).should('be.visible');\n    cy.contains(/auto-generate.*quiz/i).should('be.visible');\n  });\n\n  it('should display existing quizzes when available', () => {\n    cy.visit(`/projects/${projectId}/tests`);\n    \n    // Mock quiz list with data\n    const mockQuizzes = [\n      {\n        id: '1',\n        title: 'Sample Quiz 1',\n        created_at: '2025-09-19T07:00:00Z',\n        time_limit_sec: 600,\n        questions_count: 5\n      },\n      {\n        id: '2', \n        title: 'Sample Quiz 2',\n        created_at: '2025-09-19T06:00:00Z',\n        time_limit_sec: 900,\n        questions_count: 10\n      }\n    ];\n    \n    cy.intercept('GET', '**/generation/api/diagnostic-sessions/**', {\n      statusCode: 200,\n      body: mockQuizzes\n    }).as('quizzesWithData');\n    \n    cy.wait('@quizzesWithData');\n    \n    // Should show quiz cards\n    cy.contains('Sample Quiz 1').should('be.visible');\n    cy.contains('Sample Quiz 2').should('be.visible');\n    \n    // Should not show empty state\n    cy.contains(/no quizzes.*yet/i).should('not.exist');\n  });\n\n  it('should handle authentication errors properly', () => {\n    cy.visit(`/projects/${projectId}/tests`);\n    \n    // Mock 401 unauthorized\n    cy.intercept('GET', '**/generation/api/diagnostic-sessions/**', {\n      statusCode: 401,\n      body: { detail: 'Authentication credentials were not provided.' }\n    }).as('authError');\n    \n    cy.wait('@authError');\n    \n    // Should handle auth error gracefully\n    cy.contains(/authentication|login|unauthorized/i, { timeout: 5000 })\n      .should('be.visible');\n  });\n});\n"],"names":["describe","projectId","beforeEach","window","networkErrors","it","cy","visit","intercept","forceNetworkError","as","reload","contains","timeout","should","wait","statusCode","body","click","detail","delay","mockQuizzes","id","title","created_at","time_limit_sec","questions_count"],"mappings":"AAAA;;;;;CAKC;AAEDA,SAAS,kCAAkC;IACzC,MAAMC,YAAY;IAElBC,WAAW;QACT,kCAAkC;QAClC,IAAI,OAAOC,WAAW,aAAa;YAChCA,OAAeC,aAAa,GAAG,EAAE;QACpC;IACF;IAEAC,GAAG,wDAAwD;QACzD,4DAA4D;QAC5DC,GAAGC,KAAK,CAAC,CAAC,UAAU,EAAEN,UAAU,MAAM,CAAC;QAEvC,+CAA+C;QAC/CK,GAAGE,SAAS,CAAC,OAAO,4CAA4C;YAC9DC,mBAAmB;QACrB,GAAGC,EAAE,CAAC;QAEN,wCAAwC;QACxCJ,GAAGK,MAAM;QAET,wCAAwC;QACxCL,GAAGM,QAAQ,CAAC,2DAA2D;YAAEC,SAAS;QAAM,GACrFC,MAAM,CAAC;QAEV,kCAAkC;QAClCR,GAAGM,QAAQ,CAAC,oBACTE,MAAM,CAAC;QAEV,iDAAiD;QACjDR,GAAGS,IAAI,CAAC;IACV;IAEAV,GAAG,iDAAiD;QAClDC,GAAGC,KAAK,CAAC,CAAC,UAAU,EAAEN,UAAU,MAAM,CAAC;QAEvC,0BAA0B;QAC1BK,GAAGE,SAAS,CAAC,OAAO,4CAA4C;YAC9DC,mBAAmB;QACrB,GAAGC,EAAE,CAAC;QAENJ,GAAGK,MAAM;QACTL,GAAGS,IAAI,CAAC;QAER,oBAAoB;QACpBT,GAAGM,QAAQ,CAAC,yCAAyC;YAAEC,SAAS;QAAK;QAErE,yBAAyB;QACzBP,GAAGE,SAAS,CAAC,OAAO,4CAA4C;YAC9DQ,YAAY;YACZC,MAAM,EAAE;QACV,GAAGP,EAAE,CAAC;QAEN,cAAc;QACdJ,GAAGM,QAAQ,CAAC,oBAAoBM,KAAK;QACrCZ,GAAGS,IAAI,CAAC;QAER,0DAA0D;QAC1DT,GAAGM,QAAQ,CAAC,0CAA0C;YAAEC,SAAS;QAAK;IACxE;IAEAR,GAAG,mDAAmD;QACpDC,GAAGC,KAAK,CAAC,CAAC,UAAU,EAAEN,UAAU,MAAM,CAAC;QAEvC,uCAAuC;QACvCK,GAAGE,SAAS,CAAC,OAAO,4CAA4C;YAC9DQ,YAAY;YACZC,MAAM,EAAE;QACV,GAAGP,EAAE,CAAC;QAEN,8BAA8B;QAC9BJ,GAAGE,SAAS,CAAC,QAAQ,2CAA2C;YAC9DQ,YAAY;YACZC,MAAM;gBAAEE,QAAQ;YAAqC;QACvD,GAAGT,EAAE,CAAC;QAENJ,GAAGS,IAAI,CAAC;QAER,0BAA0B;QAC1BT,GAAGM,QAAQ,CAAC,0CAA0C;YAAEC,SAAS;QAAK;QAEtE,yBAAyB;QACzBP,GAAGM,QAAQ,CAAC,iCAAiCM,KAAK;QAElDZ,GAAGS,IAAI,CAAC;QAER,+BAA+B;QAC/BT,GAAGM,QAAQ,CAAC,qDAAqD;YAAEC,SAAS;QAAK,GAC9EC,MAAM,CAAC;IACZ;IAEAT,GAAG,wDAAwD;QACzDC,GAAGC,KAAK,CAAC,CAAC,UAAU,EAAEN,UAAU,MAAM,CAAC;QAEvC,qBAAqB;QACrBK,GAAGE,SAAS,CAAC,OAAO,4CAA4C;YAC9DQ,YAAY;YACZC,MAAM,EAAE;YACRG,OAAO;QACT,GAAGV,EAAE,CAAC;QAENJ,GAAGK,MAAM;QAET,4BAA4B;QAC5BL,GAAGM,QAAQ,CAAC,kCAAkC;YAAEC,SAAS;QAAK,GAC3DC,MAAM,CAAC;QAEVR,GAAGS,IAAI,CAAC;QAER,2BAA2B;QAC3BT,GAAGM,QAAQ,CAAC,kCAAkC;YAAEC,SAAS;QAAK,GAC3DC,MAAM,CAAC;IACZ;IAEAT,GAAG,4CAA4C;QAC7CC,GAAGC,KAAK,CAAC,CAAC,UAAU,EAAEN,UAAU,MAAM,CAAC;QAEvC,uBAAuB;QACvBK,GAAGE,SAAS,CAAC,OAAO,4CAA4C;YAC9DQ,YAAY;YACZC,MAAM,EAAE;QACV,GAAGP,EAAE,CAAC;QAENJ,GAAGS,IAAI,CAAC;QAER,iDAAiD;QACjDT,GAAGM,QAAQ,CAAC,oBAAoBE,MAAM,CAAC;QACvCR,GAAGM,QAAQ,CAAC,0BAA0BE,MAAM,CAAC;QAC7CR,GAAGM,QAAQ,CAAC,wBAAwBE,MAAM,CAAC;IAC7C;IAEAT,GAAG,kDAAkD;QACnDC,GAAGC,KAAK,CAAC,CAAC,UAAU,EAAEN,UAAU,MAAM,CAAC;QAEvC,2BAA2B;QAC3B,MAAMoB,cAAc;YAClB;gBACEC,IAAI;gBACJC,OAAO;gBACPC,YAAY;gBACZC,gBAAgB;gBAChBC,iBAAiB;YACnB;YACA;gBACEJ,IAAI;gBACJC,OAAO;gBACPC,YAAY;gBACZC,gBAAgB;gBAChBC,iBAAiB;YACnB;SACD;QAEDpB,GAAGE,SAAS,CAAC,OAAO,4CAA4C;YAC9DQ,YAAY;YACZC,MAAMI;QACR,GAAGX,EAAE,CAAC;QAENJ,GAAGS,IAAI,CAAC;QAER,yBAAyB;QACzBT,GAAGM,QAAQ,CAAC,iBAAiBE,MAAM,CAAC;QACpCR,GAAGM,QAAQ,CAAC,iBAAiBE,MAAM,CAAC;QAEpC,8BAA8B;QAC9BR,GAAGM,QAAQ,CAAC,oBAAoBE,MAAM,CAAC;IACzC;IAEAT,GAAG,gDAAgD;QACjDC,GAAGC,KAAK,CAAC,CAAC,UAAU,EAAEN,UAAU,MAAM,CAAC;QAEvC,wBAAwB;QACxBK,GAAGE,SAAS,CAAC,OAAO,4CAA4C;YAC9DQ,YAAY;YACZC,MAAM;gBAAEE,QAAQ;YAAgD;QAClE,GAAGT,EAAE,CAAC;QAENJ,GAAGS,IAAI,CAAC;QAER,sCAAsC;QACtCT,GAAGM,QAAQ,CAAC,sCAAsC;YAAEC,SAAS;QAAK,GAC/DC,MAAM,CAAC;IACZ;AACF"}