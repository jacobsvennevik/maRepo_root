975b6f871a54075c9ef9464dcd2aedbd
// Style Analytics Wrapper
// Lightweight analytics system for tracking style selection and customization
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    // Export the main instance for advanced usage
    default: function() {
        return _default;
    },
    styleAnalytics: function() {
        return styleAnalytics;
    },
    trackAutofixApplied: function() {
        return trackAutofixApplied;
    },
    trackDiagnosticCreatedWithStyle: function() {
        return trackDiagnosticCreatedWithStyle;
    },
    trackPreviewOpened: function() {
        return trackPreviewOpened;
    },
    trackPreviewRegenerated: function() {
        return trackPreviewRegenerated;
    },
    trackStyleCustomized: function() {
        return trackStyleCustomized;
    },
    trackStyleSelected: function() {
        return trackStyleSelected;
    },
    trackValidationTriggered: function() {
        return trackValidationTriggered;
    },
    trackWizardStepCompleted: function() {
        return trackWizardStepCompleted;
    }
});
/**
 * Lightweight analytics wrapper for style-related events
 */ class StyleAnalytics {
    constructor(){
        this.events = [];
        this.isEnabled = true;
        // Initialize with console logging by default
        this.isEnabled = true;
    }
    /**
   * Enable or disable analytics
   */ setEnabled(enabled) {
        this.isEnabled = enabled;
    }
    /**
   * Track a generic event
   */ track(eventName, payload = {}) {
        if (!this.isEnabled) return;
        const now = Date.now();
        const event = {
            eventName,
            payload,
            timestamp: now === 0 ? 1 : now
        };
        this.events.push(event);
        // Log to console (repo-native approach)
        console.log(`[StyleAnalytics] ${eventName}:`, payload);
    // Future: integrate with existing analytics system
    // this.sendToAnalytics(event);
    }
    /**
   * Track style selection
   */ styleSelected(styleId, presetName, source = 'preset') {
        const payload = {
            style_id: styleId,
            preset_name: presetName,
            source
        };
        this.track('style_selected', payload);
    }
    /**
   * Track style customization
   */ styleCustomized(styleId, path, from, to, fieldName) {
        const payload = {
            style_id: styleId,
            path,
            from,
            to,
            field_name: fieldName || path.split('.').pop() || 'unknown'
        };
        this.track('style_customized', payload);
    }
    /**
   * Track preview interactions
   */ previewOpened(styleId, itemCount = 3) {
        const payload = {
            style_id: styleId,
            preview_type: 'opened',
            item_count: itemCount
        };
        this.track('preview_opened', payload);
    }
    /**
   * Track preview regeneration
   */ previewRegenerated(styleId, itemCount = 3) {
        const payload = {
            style_id: styleId,
            preview_type: 'regenerated',
            item_count: itemCount
        };
        this.track('preview_regenerated', payload);
    }
    /**
   * Track validation events
   */ validationTriggered(styleId, issueCount, hasErrors, hasWarnings) {
        this.track('validation_triggered', {
            style_id: styleId,
            issue_count: issueCount,
            has_errors: hasErrors,
            has_warnings: hasWarnings
        });
    }
    /**
   * Track autofix application
   */ autofixApplied(styleId, fixCount, fixes) {
        this.track('autofix_applied', {
            style_id: styleId,
            fix_count: fixCount,
            fixes
        });
    }
    /**
   * Track wizard navigation
   */ wizardStepCompleted(stepName, styleId) {
        this.track('wizard_step_completed', {
            step_name: stepName,
            style_id: styleId
        });
    }
    /**
   * Track diagnostic creation with style
   */ diagnosticCreatedWithStyle(styleId, hasOverrides, overrideCount) {
        this.track('diagnostic_created_with_style', {
            style_id: styleId,
            has_overrides: hasOverrides,
            override_count: overrideCount
        });
    }
    /**
   * Get all tracked events (for debugging)
   */ getEvents() {
        return [
            ...this.events
        ];
    }
    /**
   * Get events by type
   */ getEventsByType(eventName) {
        return this.events.filter((event)=>event.eventName === eventName);
    }
    /**
   * Clear all events
   */ clearEvents() {
        this.events = [];
    }
    /**
   * Get analytics summary
   */ getSummary() {
        const eventTypes = {};
        this.events.forEach((event)=>{
            eventTypes[event.eventName] = (eventTypes[event.eventName] || 0) + 1;
        });
        const timestamps = this.events.map((e)=>e.timestamp);
        const timeRange = {
            start: timestamps.length > 0 ? Math.min(...timestamps) : 0,
            end: timestamps.length > 0 ? Math.max(...timestamps) : 0
        };
        return {
            totalEvents: this.events.length,
            eventTypes,
            timeRange
        };
    }
    /**
   * Future: Send events to external analytics service
   */ sendToAnalytics(event) {
    // This would integrate with existing analytics infrastructure
    // For now, we just log to console as specified in requirements
    // Example integration points:
    // - Google Analytics: gtag('event', event.eventName, event.payload)
    // - Mixpanel: mixpanel.track(event.eventName, event.payload)
    // - Custom analytics: analytics.track(event.eventName, event.payload)
    }
}
const styleAnalytics = new StyleAnalytics();
const trackStyleSelected = (styleId, presetName, source)=>{
    styleAnalytics.styleSelected(styleId, presetName, source);
};
const trackStyleCustomized = (styleId, path, from, to, fieldName)=>{
    styleAnalytics.styleCustomized(styleId, path, from, to, fieldName);
};
const trackPreviewOpened = (styleId, itemCount)=>{
    styleAnalytics.previewOpened(styleId, itemCount);
};
const trackPreviewRegenerated = (styleId, itemCount)=>{
    styleAnalytics.previewRegenerated(styleId, itemCount);
};
const trackValidationTriggered = (styleId, issueCount, hasErrors, hasWarnings)=>{
    styleAnalytics.validationTriggered(styleId, issueCount, hasErrors, hasWarnings);
};
const trackAutofixApplied = (styleId, fixCount, fixes)=>{
    styleAnalytics.autofixApplied(styleId, fixCount, fixes);
};
const trackWizardStepCompleted = (stepName, styleId)=>{
    styleAnalytics.wizardStepCompleted(stepName, styleId);
};
const trackDiagnosticCreatedWithStyle = (styleId, hasOverrides, overrideCount)=>{
    styleAnalytics.diagnosticCreatedWithStyle(styleId, hasOverrides, overrideCount);
};
const _default = styleAnalytics;

//# sourceMappingURL=data:application/json;base64,