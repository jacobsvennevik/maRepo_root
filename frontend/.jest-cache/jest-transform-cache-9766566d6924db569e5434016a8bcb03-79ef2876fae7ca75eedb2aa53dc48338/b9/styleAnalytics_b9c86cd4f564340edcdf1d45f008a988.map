{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/features/diagnostics/utils/styleAnalytics.ts"],"sourcesContent":["// Style Analytics Wrapper\n// Lightweight analytics system for tracking style selection and customization\n\nexport interface StyleAnalyticsEvent {\n  eventName: string;\n  payload: Record<string, any>;\n  timestamp: number;\n}\n\nexport interface StyleSelectionEvent {\n  style_id: string;\n  preset_name?: string;\n  source: 'preset' | 'custom';\n}\n\nexport interface StyleCustomizationEvent {\n  style_id: string;\n  path: string;\n  from: any;\n  to: any;\n  field_name: string;\n}\n\nexport interface PreviewEvent {\n  style_id: string;\n  preview_type: 'opened' | 'regenerated';\n  item_count: number;\n}\n\n/**\n * Lightweight analytics wrapper for style-related events\n */\nclass StyleAnalytics {\n  private events: StyleAnalyticsEvent[] = [];\n  private isEnabled: boolean = true;\n\n  constructor() {\n    // Initialize with console logging by default\n    this.isEnabled = true;\n  }\n\n  /**\n   * Enable or disable analytics\n   */\n  setEnabled(enabled: boolean): void {\n    this.isEnabled = enabled;\n  }\n\n  /**\n   * Track a generic event\n   */\n  track(eventName: string, payload: Record<string, any> = {}): void {\n    if (!this.isEnabled) return;\n\n    const now = Date.now();\n    const event: StyleAnalyticsEvent = {\n      eventName,\n      payload,\n      timestamp: now === 0 ? 1 : now\n    };\n\n    this.events.push(event);\n\n    // Log to console (repo-native approach)\n    console.log(`[StyleAnalytics] ${eventName}:`, payload);\n\n    // Future: integrate with existing analytics system\n    // this.sendToAnalytics(event);\n  }\n\n  /**\n   * Track style selection\n   */\n  styleSelected(styleId: string, presetName?: string, source: 'preset' | 'custom' = 'preset'): void {\n    const payload: StyleSelectionEvent = {\n      style_id: styleId,\n      preset_name: presetName,\n      source\n    };\n\n    this.track('style_selected', payload);\n  }\n\n  /**\n   * Track style customization\n   */\n  styleCustomized(\n    styleId: string, \n    path: string, \n    from: any, \n    to: any, \n    fieldName?: string\n  ): void {\n    const payload: StyleCustomizationEvent = {\n      style_id: styleId,\n      path,\n      from,\n      to,\n      field_name: fieldName || path.split('.').pop() || 'unknown'\n    };\n\n    this.track('style_customized', payload);\n  }\n\n  /**\n   * Track preview interactions\n   */\n  previewOpened(styleId: string, itemCount: number = 3): void {\n    const payload: PreviewEvent = {\n      style_id: styleId,\n      preview_type: 'opened',\n      item_count: itemCount\n    };\n\n    this.track('preview_opened', payload);\n  }\n\n  /**\n   * Track preview regeneration\n   */\n  previewRegenerated(styleId: string, itemCount: number = 3): void {\n    const payload: PreviewEvent = {\n      style_id: styleId,\n      preview_type: 'regenerated',\n      item_count: itemCount\n    };\n\n    this.track('preview_regenerated', payload);\n  }\n\n  /**\n   * Track validation events\n   */\n  validationTriggered(\n    styleId: string, \n    issueCount: number, \n    hasErrors: boolean, \n    hasWarnings: boolean\n  ): void {\n    this.track('validation_triggered', {\n      style_id: styleId,\n      issue_count: issueCount,\n      has_errors: hasErrors,\n      has_warnings: hasWarnings\n    });\n  }\n\n  /**\n   * Track autofix application\n   */\n  autofixApplied(styleId: string, fixCount: number, fixes: string[]): void {\n    this.track('autofix_applied', {\n      style_id: styleId,\n      fix_count: fixCount,\n      fixes\n    });\n  }\n\n  /**\n   * Track wizard navigation\n   */\n  wizardStepCompleted(stepName: string, styleId?: string): void {\n    this.track('wizard_step_completed', {\n      step_name: stepName,\n      style_id: styleId\n    });\n  }\n\n  /**\n   * Track diagnostic creation with style\n   */\n  diagnosticCreatedWithStyle(\n    styleId: string, \n    hasOverrides: boolean, \n    overrideCount: number\n  ): void {\n    this.track('diagnostic_created_with_style', {\n      style_id: styleId,\n      has_overrides: hasOverrides,\n      override_count: overrideCount\n    });\n  }\n\n  /**\n   * Get all tracked events (for debugging)\n   */\n  getEvents(): StyleAnalyticsEvent[] {\n    return [...this.events];\n  }\n\n  /**\n   * Get events by type\n   */\n  getEventsByType(eventName: string): StyleAnalyticsEvent[] {\n    return this.events.filter(event => event.eventName === eventName);\n  }\n\n  /**\n   * Clear all events\n   */\n  clearEvents(): void {\n    this.events = [];\n  }\n\n  /**\n   * Get analytics summary\n   */\n  getSummary(): {\n    totalEvents: number;\n    eventTypes: Record<string, number>;\n    timeRange: { start: number; end: number };\n  } {\n    const eventTypes: Record<string, number> = {};\n    \n    this.events.forEach(event => {\n      eventTypes[event.eventName] = (eventTypes[event.eventName] || 0) + 1;\n    });\n\n    const timestamps = this.events.map(e => e.timestamp);\n    const timeRange = {\n      start: timestamps.length > 0 ? Math.min(...timestamps) : 0,\n      end: timestamps.length > 0 ? Math.max(...timestamps) : 0\n    };\n\n    return {\n      totalEvents: this.events.length,\n      eventTypes,\n      timeRange\n    };\n  }\n\n  /**\n   * Future: Send events to external analytics service\n   */\n  private sendToAnalytics(event: StyleAnalyticsEvent): void {\n    // This would integrate with existing analytics infrastructure\n    // For now, we just log to console as specified in requirements\n    \n    // Example integration points:\n    // - Google Analytics: gtag('event', event.eventName, event.payload)\n    // - Mixpanel: mixpanel.track(event.eventName, event.payload)\n    // - Custom analytics: analytics.track(event.eventName, event.payload)\n  }\n}\n\n// Export singleton instance\nexport const styleAnalytics = new StyleAnalytics();\n\n// Export convenience functions\nexport const trackStyleSelected = (styleId: string, presetName?: string, source?: 'preset' | 'custom') => {\n  styleAnalytics.styleSelected(styleId, presetName, source);\n};\n\nexport const trackStyleCustomized = (styleId: string, path: string, from: any, to: any, fieldName?: string) => {\n  styleAnalytics.styleCustomized(styleId, path, from, to, fieldName);\n};\n\nexport const trackPreviewOpened = (styleId: string, itemCount?: number) => {\n  styleAnalytics.previewOpened(styleId, itemCount);\n};\n\nexport const trackPreviewRegenerated = (styleId: string, itemCount?: number) => {\n  styleAnalytics.previewRegenerated(styleId, itemCount);\n};\n\nexport const trackValidationTriggered = (styleId: string, issueCount: number, hasErrors: boolean, hasWarnings: boolean) => {\n  styleAnalytics.validationTriggered(styleId, issueCount, hasErrors, hasWarnings);\n};\n\nexport const trackAutofixApplied = (styleId: string, fixCount: number, fixes: string[]) => {\n  styleAnalytics.autofixApplied(styleId, fixCount, fixes);\n};\n\nexport const trackWizardStepCompleted = (stepName: string, styleId?: string) => {\n  styleAnalytics.wizardStepCompleted(stepName, styleId);\n};\n\nexport const trackDiagnosticCreatedWithStyle = (styleId: string, hasOverrides: boolean, overrideCount: number) => {\n  styleAnalytics.diagnosticCreatedWithStyle(styleId, hasOverrides, overrideCount);\n};\n\n// Export the main instance for advanced usage\nexport default styleAnalytics;\n"],"names":["styleAnalytics","trackAutofixApplied","trackDiagnosticCreatedWithStyle","trackPreviewOpened","trackPreviewRegenerated","trackStyleCustomized","trackStyleSelected","trackValidationTriggered","trackWizardStepCompleted","StyleAnalytics","constructor","events","isEnabled","setEnabled","enabled","track","eventName","payload","now","Date","event","timestamp","push","console","log","styleSelected","styleId","presetName","source","style_id","preset_name","styleCustomized","path","from","to","fieldName","field_name","split","pop","previewOpened","itemCount","preview_type","item_count","previewRegenerated","validationTriggered","issueCount","hasErrors","hasWarnings","issue_count","has_errors","has_warnings","autofixApplied","fixCount","fixes","fix_count","wizardStepCompleted","stepName","step_name","diagnosticCreatedWithStyle","hasOverrides","overrideCount","has_overrides","override_count","getEvents","getEventsByType","filter","clearEvents","getSummary","eventTypes","forEach","timestamps","map","e","timeRange","start","length","Math","min","end","max","totalEvents","sendToAnalytics"],"mappings":"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"}