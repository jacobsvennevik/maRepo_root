283d59a36d5d1703df8f3e91ddf148a3
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
require("@testing-library/jest-dom");
// Setup MSW server (optional)
let server = null;
try {
    const { setupServer } = require('msw/node');
    const { handlers } = require('../../tests/msw/handlers');
    server = setupServer(...handlers);
} catch (error) {
    console.warn('MSW not available, skipping server setup');
}
// Global test setup
beforeAll(()=>{
    // Start MSW server if available
    if (server) {
        server.listen({
            onUnhandledRequest: 'error'
        });
    }
    // Setup global mocks
    global.ResizeObserver = jest.fn().mockImplementation(()=>({
            observe: jest.fn(),
            unobserve: jest.fn(),
            disconnect: jest.fn()
        }));
    // Mock IntersectionObserver
    global.IntersectionObserver = jest.fn().mockImplementation(()=>({
            observe: jest.fn(),
            unobserve: jest.fn(),
            disconnect: jest.fn()
        }));
    // Mock matchMedia
    Object.defineProperty(window, 'matchMedia', {
        writable: true,
        value: jest.fn().mockImplementation((query)=>({
                matches: false,
                media: query,
                onchange: null,
                addListener: jest.fn(),
                removeListener: jest.fn(),
                addEventListener: jest.fn(),
                removeEventListener: jest.fn(),
                dispatchEvent: jest.fn()
            }))
    });
    // Mock scrollTo
    global.scrollTo = jest.fn();
    // Mock console methods to reduce noise in tests
    const originalError = console.error;
    const originalWarn = console.warn;
    console.error = (...args)=>{
        if (typeof args[0] === 'string' && args[0].includes('Warning: ReactDOM.render is no longer supported')) {
            return;
        }
        originalError.call(console, ...args);
    };
    console.warn = (...args)=>{
        if (typeof args[0] === 'string' && (args[0].includes('componentWillReceiveProps') || args[0].includes('componentWillMount'))) {
            return;
        }
        originalWarn.call(console, ...args);
    };
});
// Reset handlers between tests
afterEach(()=>{
    if (server) {
        server.resetHandlers();
    }
});
// Cleanup after all tests
afterAll(()=>{
    if (server) {
        server.close();
    }
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9qYWNvYmhvcm5zdmVubmV2aWsvRG9jdW1lbnRzL0dpdEh1Yi9tYVJlcG9fcm9vdC9mcm9udGVuZC9zcmMvdGVzdC11dGlscy9zZXR1cC9qZXN0LnNldHVwLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAnQHRlc3RpbmctbGlicmFyeS9qZXN0LWRvbSc7XG5cbi8vIFNldHVwIE1TVyBzZXJ2ZXIgKG9wdGlvbmFsKVxubGV0IHNlcnZlcjogYW55ID0gbnVsbDtcbnRyeSB7XG4gIGNvbnN0IHsgc2V0dXBTZXJ2ZXIgfSA9IHJlcXVpcmUoJ21zdy9ub2RlJyk7XG4gIGNvbnN0IHsgaGFuZGxlcnMgfSA9IHJlcXVpcmUoJy4uLy4uL3Rlc3RzL21zdy9oYW5kbGVycycpO1xuICBzZXJ2ZXIgPSBzZXR1cFNlcnZlciguLi5oYW5kbGVycyk7XG59IGNhdGNoIChlcnJvcikge1xuICBjb25zb2xlLndhcm4oJ01TVyBub3QgYXZhaWxhYmxlLCBza2lwcGluZyBzZXJ2ZXIgc2V0dXAnKTtcbn1cblxuLy8gR2xvYmFsIHRlc3Qgc2V0dXBcbmJlZm9yZUFsbCgoKSA9PiB7XG4gIC8vIFN0YXJ0IE1TVyBzZXJ2ZXIgaWYgYXZhaWxhYmxlXG4gIGlmIChzZXJ2ZXIpIHtcbiAgICBzZXJ2ZXIubGlzdGVuKHsgb25VbmhhbmRsZWRSZXF1ZXN0OiAnZXJyb3InIH0pO1xuICB9XG4gIFxuICAvLyBTZXR1cCBnbG9iYWwgbW9ja3NcbiAgZ2xvYmFsLlJlc2l6ZU9ic2VydmVyID0gamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiAoe1xuICAgIG9ic2VydmU6IGplc3QuZm4oKSxcbiAgICB1bm9ic2VydmU6IGplc3QuZm4oKSxcbiAgICBkaXNjb25uZWN0OiBqZXN0LmZuKCksXG4gIH0pKTtcblxuICAvLyBNb2NrIEludGVyc2VjdGlvbk9ic2VydmVyXG4gIGdsb2JhbC5JbnRlcnNlY3Rpb25PYnNlcnZlciA9IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4gKHtcbiAgICBvYnNlcnZlOiBqZXN0LmZuKCksXG4gICAgdW5vYnNlcnZlOiBqZXN0LmZuKCksXG4gICAgZGlzY29ubmVjdDogamVzdC5mbigpLFxuICB9KSk7XG5cbiAgLy8gTW9jayBtYXRjaE1lZGlhXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3csICdtYXRjaE1lZGlhJywge1xuICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgIHZhbHVlOiBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKHF1ZXJ5ID0+ICh7XG4gICAgICBtYXRjaGVzOiBmYWxzZSxcbiAgICAgIG1lZGlhOiBxdWVyeSxcbiAgICAgIG9uY2hhbmdlOiBudWxsLFxuICAgICAgYWRkTGlzdGVuZXI6IGplc3QuZm4oKSwgLy8gZGVwcmVjYXRlZFxuICAgICAgcmVtb3ZlTGlzdGVuZXI6IGplc3QuZm4oKSwgLy8gZGVwcmVjYXRlZFxuICAgICAgYWRkRXZlbnRMaXN0ZW5lcjogamVzdC5mbigpLFxuICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcjogamVzdC5mbigpLFxuICAgICAgZGlzcGF0Y2hFdmVudDogamVzdC5mbigpLFxuICAgIH0pKSxcbiAgfSk7XG5cbiAgLy8gTW9jayBzY3JvbGxUb1xuICBnbG9iYWwuc2Nyb2xsVG8gPSBqZXN0LmZuKCk7XG5cbiAgLy8gTW9jayBjb25zb2xlIG1ldGhvZHMgdG8gcmVkdWNlIG5vaXNlIGluIHRlc3RzXG4gIGNvbnN0IG9yaWdpbmFsRXJyb3IgPSBjb25zb2xlLmVycm9yO1xuICBjb25zdCBvcmlnaW5hbFdhcm4gPSBjb25zb2xlLndhcm47XG4gIFxuICBjb25zb2xlLmVycm9yID0gKC4uLmFyZ3MpID0+IHtcbiAgICBpZiAoXG4gICAgICB0eXBlb2YgYXJnc1swXSA9PT0gJ3N0cmluZycgJiZcbiAgICAgIGFyZ3NbMF0uaW5jbHVkZXMoJ1dhcm5pbmc6IFJlYWN0RE9NLnJlbmRlciBpcyBubyBsb25nZXIgc3VwcG9ydGVkJylcbiAgICApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgb3JpZ2luYWxFcnJvci5jYWxsKGNvbnNvbGUsIC4uLmFyZ3MpO1xuICB9O1xuXG4gIGNvbnNvbGUud2FybiA9ICguLi5hcmdzKSA9PiB7XG4gICAgaWYgKFxuICAgICAgdHlwZW9mIGFyZ3NbMF0gPT09ICdzdHJpbmcnICYmXG4gICAgICAoYXJnc1swXS5pbmNsdWRlcygnY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcycpIHx8XG4gICAgICAgYXJnc1swXS5pbmNsdWRlcygnY29tcG9uZW50V2lsbE1vdW50JykpXG4gICAgKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIG9yaWdpbmFsV2Fybi5jYWxsKGNvbnNvbGUsIC4uLmFyZ3MpO1xuICB9O1xufSk7XG5cbi8vIFJlc2V0IGhhbmRsZXJzIGJldHdlZW4gdGVzdHNcbmFmdGVyRWFjaCgoKSA9PiB7XG4gIGlmIChzZXJ2ZXIpIHtcbiAgICBzZXJ2ZXIucmVzZXRIYW5kbGVycygpO1xuICB9XG59KTtcblxuLy8gQ2xlYW51cCBhZnRlciBhbGwgdGVzdHNcbmFmdGVyQWxsKCgpID0+IHtcbiAgaWYgKHNlcnZlcikge1xuICAgIHNlcnZlci5jbG9zZSgpO1xuICB9XG59KTtcblxuLy8gR2xvYmFsIHRlc3QgdXRpbGl0aWVzXG5kZWNsYXJlIGdsb2JhbCB7XG4gIG5hbWVzcGFjZSBqZXN0IHtcbiAgICBpbnRlcmZhY2UgTWF0Y2hlcnM8Uj4ge1xuICAgICAgdG9CZUluVGhlRG9jdW1lbnQoKTogUjtcbiAgICAgIHRvSGF2ZUNsYXNzKGNsYXNzTmFtZTogc3RyaW5nKTogUjtcbiAgICAgIHRvSGF2ZVRleHRDb250ZW50KHRleHQ6IHN0cmluZyB8IFJlZ0V4cCk6IFI7XG4gICAgICB0b0JlVmlzaWJsZSgpOiBSO1xuICAgICAgdG9CZURpc2FibGVkKCk6IFI7XG4gICAgICB0b0JlRW5hYmxlZCgpOiBSO1xuICAgICAgdG9IYXZlVmFsdWUodmFsdWU6IHN0cmluZyB8IHN0cmluZ1tdIHwgbnVtYmVyKTogUjtcbiAgICAgIHRvSGF2ZUF0dHJpYnV0ZShhdHRyOiBzdHJpbmcsIHZhbHVlPzogc3RyaW5nKTogUjtcbiAgICAgIHRvSGF2ZVN0eWxlKGNzczogc3RyaW5nIHwgUmVjb3JkPHN0cmluZywgYW55Pik6IFI7XG4gICAgICB0b1N0YXJ0V2l0aEFwaSgpOiBSO1xuICAgICAgdG9IYXZlTm9Eb3VibGVTbGFzaCgpOiBSO1xuICAgICAgdG9CZVNhbWVCYXNlVVJMQXMob3RoZXI6IGFueSk6IFI7XG4gICAgfVxuICB9XG59XG4iXSwibmFtZXMiOlsic2VydmVyIiwic2V0dXBTZXJ2ZXIiLCJyZXF1aXJlIiwiaGFuZGxlcnMiLCJlcnJvciIsImNvbnNvbGUiLCJ3YXJuIiwiYmVmb3JlQWxsIiwibGlzdGVuIiwib25VbmhhbmRsZWRSZXF1ZXN0IiwiZ2xvYmFsIiwiUmVzaXplT2JzZXJ2ZXIiLCJqZXN0IiwiZm4iLCJtb2NrSW1wbGVtZW50YXRpb24iLCJvYnNlcnZlIiwidW5vYnNlcnZlIiwiZGlzY29ubmVjdCIsIkludGVyc2VjdGlvbk9ic2VydmVyIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJ3aW5kb3ciLCJ3cml0YWJsZSIsInZhbHVlIiwicXVlcnkiLCJtYXRjaGVzIiwibWVkaWEiLCJvbmNoYW5nZSIsImFkZExpc3RlbmVyIiwicmVtb3ZlTGlzdGVuZXIiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImRpc3BhdGNoRXZlbnQiLCJzY3JvbGxUbyIsIm9yaWdpbmFsRXJyb3IiLCJvcmlnaW5hbFdhcm4iLCJhcmdzIiwiaW5jbHVkZXMiLCJjYWxsIiwiYWZ0ZXJFYWNoIiwicmVzZXRIYW5kbGVycyIsImFmdGVyQWxsIiwiY2xvc2UiXSwibWFwcGluZ3MiOiI7Ozs7UUFBTztBQUVQLDhCQUE4QjtBQUM5QixJQUFJQSxTQUFjO0FBQ2xCLElBQUk7SUFDRixNQUFNLEVBQUVDLFdBQVcsRUFBRSxHQUFHQyxRQUFRO0lBQ2hDLE1BQU0sRUFBRUMsUUFBUSxFQUFFLEdBQUdELFFBQVE7SUFDN0JGLFNBQVNDLGVBQWVFO0FBQzFCLEVBQUUsT0FBT0MsT0FBTztJQUNkQyxRQUFRQyxJQUFJLENBQUM7QUFDZjtBQUVBLG9CQUFvQjtBQUNwQkMsVUFBVTtJQUNSLGdDQUFnQztJQUNoQyxJQUFJUCxRQUFRO1FBQ1ZBLE9BQU9RLE1BQU0sQ0FBQztZQUFFQyxvQkFBb0I7UUFBUTtJQUM5QztJQUVBLHFCQUFxQjtJQUNyQkMsT0FBT0MsY0FBYyxHQUFHQyxLQUFLQyxFQUFFLEdBQUdDLGtCQUFrQixDQUFDLElBQU8sQ0FBQTtZQUMxREMsU0FBU0gsS0FBS0MsRUFBRTtZQUNoQkcsV0FBV0osS0FBS0MsRUFBRTtZQUNsQkksWUFBWUwsS0FBS0MsRUFBRTtRQUNyQixDQUFBO0lBRUEsNEJBQTRCO0lBQzVCSCxPQUFPUSxvQkFBb0IsR0FBR04sS0FBS0MsRUFBRSxHQUFHQyxrQkFBa0IsQ0FBQyxJQUFPLENBQUE7WUFDaEVDLFNBQVNILEtBQUtDLEVBQUU7WUFDaEJHLFdBQVdKLEtBQUtDLEVBQUU7WUFDbEJJLFlBQVlMLEtBQUtDLEVBQUU7UUFDckIsQ0FBQTtJQUVBLGtCQUFrQjtJQUNsQk0sT0FBT0MsY0FBYyxDQUFDQyxRQUFRLGNBQWM7UUFDMUNDLFVBQVU7UUFDVkMsT0FBT1gsS0FBS0MsRUFBRSxHQUFHQyxrQkFBa0IsQ0FBQ1UsQ0FBQUEsUUFBVSxDQUFBO2dCQUM1Q0MsU0FBUztnQkFDVEMsT0FBT0Y7Z0JBQ1BHLFVBQVU7Z0JBQ1ZDLGFBQWFoQixLQUFLQyxFQUFFO2dCQUNwQmdCLGdCQUFnQmpCLEtBQUtDLEVBQUU7Z0JBQ3ZCaUIsa0JBQWtCbEIsS0FBS0MsRUFBRTtnQkFDekJrQixxQkFBcUJuQixLQUFLQyxFQUFFO2dCQUM1Qm1CLGVBQWVwQixLQUFLQyxFQUFFO1lBQ3hCLENBQUE7SUFDRjtJQUVBLGdCQUFnQjtJQUNoQkgsT0FBT3VCLFFBQVEsR0FBR3JCLEtBQUtDLEVBQUU7SUFFekIsZ0RBQWdEO0lBQ2hELE1BQU1xQixnQkFBZ0I3QixRQUFRRCxLQUFLO0lBQ25DLE1BQU0rQixlQUFlOUIsUUFBUUMsSUFBSTtJQUVqQ0QsUUFBUUQsS0FBSyxHQUFHLENBQUMsR0FBR2dDO1FBQ2xCLElBQ0UsT0FBT0EsSUFBSSxDQUFDLEVBQUUsS0FBSyxZQUNuQkEsSUFBSSxDQUFDLEVBQUUsQ0FBQ0MsUUFBUSxDQUFDLG9EQUNqQjtZQUNBO1FBQ0Y7UUFDQUgsY0FBY0ksSUFBSSxDQUFDakMsWUFBWStCO0lBQ2pDO0lBRUEvQixRQUFRQyxJQUFJLEdBQUcsQ0FBQyxHQUFHOEI7UUFDakIsSUFDRSxPQUFPQSxJQUFJLENBQUMsRUFBRSxLQUFLLFlBQ2xCQSxDQUFBQSxJQUFJLENBQUMsRUFBRSxDQUFDQyxRQUFRLENBQUMsZ0NBQ2pCRCxJQUFJLENBQUMsRUFBRSxDQUFDQyxRQUFRLENBQUMscUJBQW9CLEdBQ3RDO1lBQ0E7UUFDRjtRQUNBRixhQUFhRyxJQUFJLENBQUNqQyxZQUFZK0I7SUFDaEM7QUFDRjtBQUVBLCtCQUErQjtBQUMvQkcsVUFBVTtJQUNSLElBQUl2QyxRQUFRO1FBQ1ZBLE9BQU93QyxhQUFhO0lBQ3RCO0FBQ0Y7QUFFQSwwQkFBMEI7QUFDMUJDLFNBQVM7SUFDUCxJQUFJekMsUUFBUTtRQUNWQSxPQUFPMEMsS0FBSztJQUNkO0FBQ0YifQ==