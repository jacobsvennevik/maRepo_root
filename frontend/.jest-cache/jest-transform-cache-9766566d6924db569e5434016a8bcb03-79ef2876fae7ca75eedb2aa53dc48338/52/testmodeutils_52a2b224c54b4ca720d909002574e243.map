{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/features/projects/services/test-mode-utils.ts"],"sourcesContent":["// Test mode utilities for realistic backend processing\nimport { axiosApi } from '@/lib/axios-api';\n\nexport interface TestFile {\n  name: string;\n  content: string; // Base64 encoded PDF content\n  type: 'syllabus' | 'course_content' | 'test';\n}\n\n// Pre-defined test files with real PDF content\nexport const TEST_FILES: Record<string, TestFile> = {\n  'sample-syllabus.pdf': {\n    name: 'sample-syllabus.pdf',\n    content: 'JVBERi0xLjQKJcOkw7zDtsO...', // Base64 encoded PDF\n    type: 'syllabus'\n  },\n  'nlp-course-materials.pdf': {\n    name: 'nlp-course-materials.pdf', \n    content: 'JVBERi0xLjQKJcOkw7zDtsO...', // Base64 encoded PDF\n    type: 'course_content'\n  },\n  'sample-exam.pdf': {\n    name: 'sample-exam.pdf',\n    content: 'JVBERi0xLjQKJcOkw7zDtsO...', // Base64 encoded PDF\n    type: 'test'\n  }\n};\n\n/**\n * Convert base64 string to File object\n */\nexport function base64ToFile(base64: string, filename: string, mimeType: string = 'application/pdf'): File {\n  const byteCharacters = atob(base64);\n  const byteNumbers = new Array(byteCharacters.length);\n  \n  for (let i = 0; i < byteCharacters.length; i++) {\n    byteNumbers[i] = byteCharacters.charCodeAt(i);\n  }\n  \n  const byteArray = new Uint8Array(byteNumbers);\n  const blob = new Blob([byteArray], { type: mimeType });\n  \n  return new File([blob], filename, { type: mimeType });\n}\n\n/**\n * Get test file by name\n */\nexport function getTestFile(filename: string): File | null {\n  const testFile = TEST_FILES[filename];\n  if (!testFile) {\n    console.warn(`Test file ${filename} not found`);\n    return null;\n  }\n  \n  return base64ToFile(testFile.content, testFile.name);\n}\n\n/**\n * Upload test file to real backend\n */\nexport async function uploadTestFileToBackend(file: File, uploadType: string): Promise<any> {\n  console.log(`ðŸ§ª TEST MODE: Uploading test file ${file.name} to real backend`);\n  \n  const formData = new FormData();\n  formData.append('file', file);\n  formData.append('file_type', file.name.toLowerCase().endsWith('.pdf') ? 'pdf' : 'ppt');\n  formData.append('upload_type', uploadType);\n\n  try {\n    const response = await axiosApi.post('pdf_service/documents/', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      }\n    });\n    \n    console.log(`ðŸ§ª TEST MODE: Test file uploaded successfully:`, response.data);\n    return response.data;\n  } catch (error) {\n    console.error(`ðŸ§ª TEST MODE: Failed to upload test file:`, error);\n    throw error;\n  }\n}\n\n/**\n * Process test file through real backend\n */\nexport async function processTestFile(documentId: number): Promise<any> {\n  console.log(`ðŸ§ª TEST MODE: Processing test document ${documentId} through real backend`);\n  \n  try {\n    // Start processing\n    const processResponse = await axiosApi.post(`pdf_service/documents/${documentId}/process/`);\n    console.log(`ðŸ§ª TEST MODE: Processing started:`, processResponse.data);\n    \n    // Poll for completion\n    const maxAttempts = 30;\n    const pollInterval = 2000;\n    let attempts = 0;\n    \n    while (attempts < maxAttempts) {\n      await new Promise(resolve => setTimeout(resolve, pollInterval));\n      \n      const statusResponse = await axiosApi.get(`pdf_service/documents/${documentId}/`);\n      const statusData = statusResponse.data;\n      \n      console.log(`ðŸ§ª TEST MODE: Polling attempt ${attempts + 1}:`, statusData.status);\n      \n      if (statusData.status === 'completed') {\n        console.log(`ðŸ§ª TEST MODE: Processing completed successfully`);\n        return statusData;\n      } else if (statusData.status === 'error') {\n        throw new Error(`Processing failed: ${statusData.error_message || 'Unknown error'}`);\n      }\n      \n      attempts++;\n    }\n    \n    throw new Error('Processing timed out');\n  } catch (error) {\n    console.error(`ðŸ§ª TEST MODE: Processing failed:`, error);\n    throw error;\n  }\n}\n\n/**\n * Get available test files for selection\n */\nexport function getAvailableTestFiles(): Array<{ name: string; type: string; description: string }> {\n  return Object.entries(TEST_FILES).map(([filename, file]) => ({\n    name: filename,\n    type: file.type,\n    description: `Sample ${file.type.replace('_', ' ')} file for testing`\n  }));\n} "],"names":["TEST_FILES","base64ToFile","getAvailableTestFiles","getTestFile","processTestFile","uploadTestFileToBackend","name","content","type","base64","filename","mimeType","byteCharacters","atob","byteNumbers","Array","length","i","charCodeAt","byteArray","Uint8Array","blob","Blob","File","testFile","console","warn","file","uploadType","log","formData","FormData","append","toLowerCase","endsWith","response","axiosApi","post","headers","data","error","documentId","processResponse","maxAttempts","pollInterval","attempts","Promise","resolve","setTimeout","statusResponse","get","statusData","status","Error","error_message","Object","entries","map","description","replace"],"mappings":"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"}