3f46c2eaddf91b5b0c1d24e9c8e5f9a4
// Test mode utilities for realistic backend processing
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    TEST_FILES: function() {
        return TEST_FILES;
    },
    base64ToFile: function() {
        return base64ToFile;
    },
    getAvailableTestFiles: function() {
        return getAvailableTestFiles;
    },
    getTestFile: function() {
        return getTestFile;
    },
    processTestFile: function() {
        return processTestFile;
    },
    uploadTestFileToBackend: function() {
        return uploadTestFileToBackend;
    }
});
const _axiosapi = require("../../../lib/axios-api");
const TEST_FILES = {
    'sample-syllabus.pdf': {
        name: 'sample-syllabus.pdf',
        content: 'JVBERi0xLjQKJcOkw7zDtsO...',
        type: 'syllabus'
    },
    'nlp-course-materials.pdf': {
        name: 'nlp-course-materials.pdf',
        content: 'JVBERi0xLjQKJcOkw7zDtsO...',
        type: 'course_content'
    },
    'sample-exam.pdf': {
        name: 'sample-exam.pdf',
        content: 'JVBERi0xLjQKJcOkw7zDtsO...',
        type: 'test'
    }
};
function base64ToFile(base64, filename, mimeType = 'application/pdf') {
    const byteCharacters = atob(base64);
    const byteNumbers = new Array(byteCharacters.length);
    for(let i = 0; i < byteCharacters.length; i++){
        byteNumbers[i] = byteCharacters.charCodeAt(i);
    }
    const byteArray = new Uint8Array(byteNumbers);
    const blob = new Blob([
        byteArray
    ], {
        type: mimeType
    });
    return new File([
        blob
    ], filename, {
        type: mimeType
    });
}
function getTestFile(filename) {
    const testFile = TEST_FILES[filename];
    if (!testFile) {
        console.warn(`Test file ${filename} not found`);
        return null;
    }
    return base64ToFile(testFile.content, testFile.name);
}
async function uploadTestFileToBackend(file, uploadType) {
    console.log(`ðŸ§ª TEST MODE: Uploading test file ${file.name} to real backend`);
    const formData = new FormData();
    formData.append('file', file);
    formData.append('file_type', file.name.toLowerCase().endsWith('.pdf') ? 'pdf' : 'ppt');
    formData.append('upload_type', uploadType);
    try {
        const response = await _axiosapi.axiosApi.post('pdf_service/documents/', formData, {
            headers: {
                'Content-Type': 'multipart/form-data'
            }
        });
        console.log(`ðŸ§ª TEST MODE: Test file uploaded successfully:`, response.data);
        return response.data;
    } catch (error) {
        console.error(`ðŸ§ª TEST MODE: Failed to upload test file:`, error);
        throw error;
    }
}
async function processTestFile(documentId) {
    console.log(`ðŸ§ª TEST MODE: Processing test document ${documentId} through real backend`);
    try {
        // Start processing
        const processResponse = await _axiosapi.axiosApi.post(`pdf_service/documents/${documentId}/process/`);
        console.log(`ðŸ§ª TEST MODE: Processing started:`, processResponse.data);
        // Poll for completion
        const maxAttempts = 30;
        const pollInterval = 2000;
        let attempts = 0;
        while(attempts < maxAttempts){
            await new Promise((resolve)=>setTimeout(resolve, pollInterval));
            const statusResponse = await _axiosapi.axiosApi.get(`pdf_service/documents/${documentId}/`);
            const statusData = statusResponse.data;
            console.log(`ðŸ§ª TEST MODE: Polling attempt ${attempts + 1}:`, statusData.status);
            if (statusData.status === 'completed') {
                console.log(`ðŸ§ª TEST MODE: Processing completed successfully`);
                return statusData;
            } else if (statusData.status === 'error') {
                throw new Error(`Processing failed: ${statusData.error_message || 'Unknown error'}`);
            }
            attempts++;
        }
        throw new Error('Processing timed out');
    } catch (error) {
        console.error(`ðŸ§ª TEST MODE: Processing failed:`, error);
        throw error;
    }
}
function getAvailableTestFiles() {
    return Object.entries(TEST_FILES).map(([filename, file])=>({
            name: filename,
            type: file.type,
            description: `Sample ${file.type.replace('_', ' ')} file for testing`
        }));
}

//# sourceMappingURL=data:application/json;base64,