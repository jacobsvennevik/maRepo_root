{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/features/diagnostics/components/DiagnosticSession.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { axiosApi } from '@/lib/axios-api';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Slider } from '@/components/ui/slider';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { CheckCircle, XCircle, Clock, Target, Brain, AlertTriangle } from 'lucide-react';\n\ninterface DiagnosticQuestion {\n  id: string;\n  type: 'MCQ' | 'SHORT_ANSWER' | 'PRINCIPLE';\n  text: string;\n  choices?: string[];\n  correct_choice_index?: number;\n  acceptable_answers?: string[];\n  explanation: string;\n  concept_id: string;\n  bloom_level: string;\n}\n\ninterface DiagnosticSession {\n  id: string;\n  topic: string;\n  delivery_mode: 'IMMEDIATE_FEEDBACK' | 'DEFERRED_FEEDBACK';\n  max_questions: number;\n  time_limit_sec?: number;\n  questions: DiagnosticQuestion[];\n}\n\ninterface QuestionResponse {\n  questionId: string;\n  answer_text?: string;\n  selected_choice_index?: number;\n  confidence: number;\n  latency_ms: number;\n}\n\nexport default function DiagnosticSession({ sessionId }: { sessionId: string }) {\n  const [session, setSession] = useState<DiagnosticSession | null>(null);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [responses, setResponses] = useState<QuestionResponse[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [timeRemaining, setTimeRemaining] = useState<number | null>(null);\n  const [showResults, setShowResults] = useState(false);\n  const [results, setResults] = useState<any>(null);\n  const [questionStartTime, setQuestionStartTime] = useState<number>(Date.now());\n\n  useEffect(() => {\n    fetchSession();\n  }, [sessionId]);\n\n  useEffect(() => {\n    if (session?.time_limit_sec) {\n      setTimeRemaining(session.time_limit_sec);\n    }\n  }, [session]);\n\n  useEffect(() => {\n    if (timeRemaining !== null && timeRemaining > 0) {\n      const timer = setInterval(() => {\n        setTimeRemaining(prev => {\n          if (prev === null || prev <= 1) {\n            clearInterval(timer);\n            handleSubmit();\n            return 0;\n          }\n          return prev - 1;\n        });\n      }, 1000);\n\n      return () => clearInterval(timer);\n    }\n  }, [timeRemaining]);\n\n  useEffect(() => {\n    setQuestionStartTime(Date.now());\n  }, [currentQuestionIndex]);\n\n  const fetchSession = async () => {\n    try {\n      setIsLoading(true);\n      const response = await axiosApi.get(`diagnostic-sessions/${sessionId}/`);\n      setSession(response.data);\n    } catch (error) {\n      console.error('Failed to fetch session:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleAnswerChange = (questionId: string, value: any, type: 'choice' | 'text') => {\n    const existingResponseIndex = responses.findIndex(r => r.questionId === questionId);\n    const latency = Date.now() - questionStartTime;\n\n    if (existingResponseIndex >= 0) {\n      const updatedResponses = [...responses];\n      if (type === 'choice') {\n        updatedResponses[existingResponseIndex] = {\n          ...updatedResponses[existingResponseIndex],\n          selected_choice_index: value,\n          latency_ms: latency,\n        };\n      } else {\n        updatedResponses[existingResponseIndex] = {\n          ...updatedResponses[existingResponseIndex],\n          answer_text: value,\n          latency_ms: latency,\n        };\n      }\n      setResponses(updatedResponses);\n    } else {\n      const newResponse: QuestionResponse = {\n        questionId,\n        confidence: 50,\n        latency_ms: latency,\n        ...(type === 'choice' ? { selected_choice_index: value } : { answer_text: value }),\n      };\n      setResponses([...responses, newResponse]);\n    }\n  };\n\n  const handleConfidenceChange = (questionId: string, confidence: number[]) => {\n    const existingResponseIndex = responses.findIndex(r => r.questionId === questionId);\n    \n    if (existingResponseIndex >= 0) {\n      const updatedResponses = [...responses];\n      updatedResponses[existingResponseIndex].confidence = confidence[0];\n      setResponses(updatedResponses);\n    } else {\n      const newResponse: QuestionResponse = {\n        questionId,\n        confidence: confidence[0],\n        latency_ms: Date.now() - questionStartTime,\n      };\n      setResponses([...responses, newResponse]);\n    }\n  };\n\n  const handleNext = () => {\n    if (currentQuestionIndex < (session?.questions.length || 0) - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    }\n  };\n\n  const handlePrevious = () => {\n    if (currentQuestionIndex > 0) {\n      setCurrentQuestionIndex(currentQuestionIndex - 1);\n    }\n  };\n\n  const handleSubmit = async () => {\n    try {\n      setIsSubmitting(true);\n      \n      // Submit all responses\n      const payload = {\n        session_id: sessionId,\n        responses: responses.map(r => ({\n          question_id: r.questionId,\n          answer_text: r.answer_text,\n          selected_choice_index: r.selected_choice_index,\n          confidence: r.confidence,\n          latency_ms: r.latency_ms,\n        })),\n      };\n      const response = await axiosApi.post(`diagnostic-responses/`, payload);\n      setResults(response.data);\n      setShowResults(true);\n    } catch (error) {\n      console.error('Failed to submit responses:', error);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  const getCurrentResponse = (questionId: string) => {\n    return responses.find(r => r.questionId === questionId);\n  };\n\n  const getProgressPercentage = () => {\n    if (!session) return 0;\n    return ((currentQuestionIndex + 1) / session.questions.length) * 100;\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[400px]\">\n        <div className=\"text-center\">\n          <Target className=\"mx-auto h-12 w-12 text-muted-foreground animate-pulse\" />\n          <p className=\"mt-4 text-lg\">Loading diagnostic session...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!session) {\n    return (\n      <Alert>\n        <AlertTriangle className=\"h-4 w-4\" />\n        <AlertDescription>Failed to load diagnostic session</AlertDescription>\n      </Alert>\n    );\n  }\n\n  if (showResults && results) {\n    return (\n      <div className=\"max-w-4xl mx-auto space-y-6\">\n        <Card>\n          <CardHeader className=\"text-center\">\n            <CardTitle className=\"text-2xl\">Diagnostic Complete!</CardTitle>\n            <CardDescription>\n              You've completed the diagnostic for \"{session.topic}\"\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-center\">\n              <div className=\"p-4 bg-muted rounded-lg\">\n                <div className=\"text-2xl font-bold text-primary\">\n                  {Math.round(results.average_score * 100)}%\n                </div>\n                <div className=\"text-sm text-muted-foreground\">Average Score</div>\n              </div>\n              <div className=\"p-4 bg-muted rounded-lg\">\n                <div className=\"text-2xl font-bold text-primary\">\n                  {results.total_questions}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">Questions Answered</div>\n              </div>\n              <div className=\"p-4 bg-muted rounded-lg\">\n                <div className=\"text-2xl font-bold text-primary\">\n                  {Math.round(results.median_confidence)}%\n                </div>\n                <div className=\"text-sm text-muted-foreground\">Median Confidence</div>\n              </div>\n            </div>\n\n            {session.delivery_mode === 'IMMEDIATE_FEEDBACK' && (\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold\">Question Review</h3>\n                {session.questions.map((question, index) => {\n                  const response = getCurrentResponse(question.id);\n                  const isCorrect = response && (\n                    question.type === 'MCQ' \n                      ? response.selected_choice_index === question.correct_choice_index\n                      : response.answer_text && question.acceptable_answers?.some(\n                          pattern => new RegExp(pattern, 'i').test(response.answer_text || '')\n                        )\n                  );\n\n                  return (\n                    <Card key={question.id} className=\"border-l-4 border-l-primary\">\n                      <CardContent className=\"pt-6\">\n                        <div className=\"flex items-start space-x-3\">\n                          <div className=\"flex-shrink-0\">\n                            {isCorrect ? (\n                              <CheckCircle className=\"h-6 w-6 text-green-600\" />\n                            ) : (\n                              <XCircle className=\"h-6 w-6 text-red-600\" />\n                            )}\n                          </div>\n                          <div className=\"flex-1 space-y-3\">\n                            <div className=\"flex items-center space-x-2\">\n                              <Badge variant=\"outline\">{question.type}</Badge>\n                              <Badge variant=\"outline\">{question.bloom_level}</Badge>\n                              <span className=\"text-sm text-muted-foreground\">\n                                Question {index + 1}\n                              </span>\n                            </div>\n                            <p className=\"font-medium\">{question.text}</p>\n                            \n                            {question.type === 'MCQ' && question.choices && (\n                              <div className=\"space-y-2\">\n                                {question.choices.map((choice, choiceIndex) => (\n                                  <div\n                                    key={choiceIndex}\n                                    className={`p-2 rounded border ${\n                                      choiceIndex === question.correct_choice_index\n                                        ? 'border-green-500 bg-green-50'\n                                        : choiceIndex === response?.selected_choice_index\n                                        ? 'border-red-500 bg-red-50'\n                                        : 'border-gray-200'\n                                    }`}\n                                  >\n                                    <span className=\"font-medium\">\n                                      {String.fromCharCode(65 + choiceIndex)}.\n                                    </span>{' '}\n                                    {choice}\n                                    {choiceIndex === question.correct_choice_index && (\n                                      <CheckCircle className=\"inline h-4 w-4 text-green-600 ml-2\" />\n                                    )}\n                                    {choiceIndex === response?.selected_choice_index && \n                                     choiceIndex !== question.correct_choice_index && (\n                                      <XCircle className=\"inline h-4 w-4 text-red-600 ml-2\" />\n                                    )}\n                                  </div>\n                                ))}\n                              </div>\n                            )}\n\n                            {response?.answer_text && (\n                              <div className=\"p-3 bg-muted rounded\">\n                                <div className=\"text-sm font-medium text-muted-foreground\">\n                                  Your answer:\n                                </div>\n                                <div className=\"mt-1\">{response.answer_text}</div>\n                              </div>\n                            )}\n\n                            <div className=\"p-3 bg-blue-50 rounded border border-blue-200\">\n                              <div className=\"text-sm font-medium text-blue-800\">Explanation:</div>\n                              <div className=\"mt-1 text-blue-700\">{question.explanation}</div>\n                            </div>\n\n                            <div className=\"flex items-center justify-between text-sm text-muted-foreground\">\n                              <span>Your confidence: {response?.confidence}%</span>\n                              <span>Response time: {Math.round((response?.latency_ms || 0) / 1000)}s</span>\n                            </div>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  );\n                })}\n              </div>\n            )}\n\n            <div className=\"text-center\">\n              <Button onClick={() => window.location.href = '/dashboard'}>\n                Return to Dashboard\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const currentQuestion = session.questions[currentQuestionIndex];\n  const currentResponse = getCurrentResponse(currentQuestion.id);\n\n  return (\n    <div className=\"max-w-4xl mx-auto space-y-6\">\n      {/* Header */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle className=\"text-2xl\">{session.topic}</CardTitle>\n              <CardDescription>\n                Pre-lecture diagnostic • {session.max_questions} questions\n              </CardDescription>\n            </div>\n            {timeRemaining !== null && (\n              <div className=\"flex items-center space-x-2 text-lg font-mono\">\n                <Clock className=\"h-5 w-5 text-orange-500\" />\n                <span className={timeRemaining < 60 ? 'text-red-600' : ''}>\n                  {formatTime(timeRemaining)}\n                </span>\n              </div>\n            )}\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center justify-between text-sm\">\n              <span>Progress</span>\n              <span>{currentQuestionIndex + 1} of {session.questions.length}</span>\n            </div>\n            <Progress value={getProgressPercentage()} className=\"h-2\" />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Question */}\n      <Card>\n        <CardContent className=\"pt-6\">\n          <div className=\"space-y-6\">\n            {/* Question Header */}\n            <div className=\"flex items-center space-x-3\">\n              <Badge variant=\"outline\">{currentQuestion.type}</Badge>\n              <Badge variant=\"outline\">{currentQuestion.bloom_level}</Badge>\n              <span className=\"text-sm text-muted-foreground\">\n                Question {currentQuestionIndex + 1} of {session.questions.length}\n              </span>\n            </div>\n\n            {/* Question Text */}\n            <div className=\"text-lg font-medium leading-relaxed\">\n              {currentQuestion.text}\n            </div>\n\n            {/* Question Content */}\n            {currentQuestion.type === 'MCQ' && currentQuestion.choices && (\n              <RadioGroup\n                value={currentResponse?.selected_choice_index?.toString() || ''}\n                onValueChange={(value) => \n                  handleAnswerChange(currentQuestion.id, parseInt(value), 'choice')\n                }\n                className=\"space-y-3\"\n              >\n                {currentQuestion.choices.map((choice, index) => (\n                  <div key={index} className=\"flex items-center space-x-3\">\n                    <RadioGroupItem value={index.toString()} id={`choice-${index}`} />\n                    <Label\n                      htmlFor={`choice-${index}`}\n                      className=\"flex-1 p-3 border rounded-lg cursor-pointer hover:bg-muted/50 transition-colors\"\n                    >\n                      <span className=\"font-medium mr-2\">\n                        {String.fromCharCode(65 + index)}.\n                      </span>\n                      {choice}\n                    </Label>\n                  </div>\n                ))}\n              </RadioGroup>\n            )}\n\n            {(currentQuestion.type === 'SHORT_ANSWER' || currentQuestion.type === 'PRINCIPLE') && (\n              <div className=\"space-y-3\">\n                <Label htmlFor=\"answer\">Your Answer</Label>\n                <Textarea\n                  id=\"answer\"\n                  placeholder=\"Type your answer here...\"\n                  value={currentResponse?.answer_text || ''}\n                  onChange={(e) => handleAnswerChange(currentQuestion.id, e.target.value, 'text')}\n                  className=\"min-h-[120px] resize-none\"\n                />\n              </div>\n            )}\n\n            {/* Confidence Slider */}\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center justify-between\">\n                <Label>How confident are you in your answer?</Label>\n                <span className=\"text-sm font-medium\">\n                  {currentResponse?.confidence || 50}%\n                </span>\n              </div>\n              <Slider\n                value={[currentResponse?.confidence || 50]}\n                onValueChange={(value) => handleConfidenceChange(currentQuestion.id, value)}\n                max={100}\n                step={5}\n                className=\"w-full\"\n              />\n              <div className=\"flex justify-between text-xs text-muted-foreground\">\n                <span>Not confident</span>\n                <span>Very confident</span>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Navigation */}\n      <div className=\"flex items-center justify-between\">\n        <Button\n          variant=\"outline\"\n          onClick={handlePrevious}\n          disabled={currentQuestionIndex === 0}\n        >\n          Previous\n        </Button>\n\n        <div className=\"flex items-center space-x-2\">\n          {currentQuestionIndex === session.questions.length - 1 ? (\n            <Button\n              onClick={handleSubmit}\n              disabled={isSubmitting || responses.length < session.questions.length}\n              className=\"bg-green-600 hover:bg-green-700\"\n            >\n              {isSubmitting ? 'Submitting...' : 'Submit Diagnostic'}\n            </Button>\n          ) : (\n            <Button onClick={handleNext}>\n              Next Question\n            </Button>\n          )}\n        </div>\n      </div>\n\n      {/* Progress Indicator */}\n      <div className=\"text-center text-sm text-muted-foreground\">\n        {responses.length} of {session.questions.length} questions answered\n      </div>\n    </div>\n  );\n}\n"],"names":["DiagnosticSession","sessionId","session","setSession","useState","currentQuestionIndex","setCurrentQuestionIndex","responses","setResponses","isLoading","setIsLoading","isSubmitting","setIsSubmitting","timeRemaining","setTimeRemaining","showResults","setShowResults","results","setResults","questionStartTime","setQuestionStartTime","Date","now","useEffect","fetchSession","time_limit_sec","timer","setInterval","prev","clearInterval","handleSubmit","response","axiosApi","get","data","error","console","handleAnswerChange","questionId","value","type","existingResponseIndex","findIndex","r","latency","updatedResponses","selected_choice_index","latency_ms","answer_text","newResponse","confidence","handleConfidenceChange","handleNext","questions","length","handlePrevious","payload","session_id","map","question_id","post","formatTime","seconds","mins","Math","floor","secs","toString","padStart","getCurrentResponse","find","getProgressPercentage","div","className","Target","p","Alert","AlertTriangle","AlertDescription","Card","CardHeader","CardTitle","CardDescription","topic","CardContent","round","average_score","total_questions","median_confidence","delivery_mode","h3","question","index","id","isCorrect","correct_choice_index","acceptable_answers","some","pattern","RegExp","test","CheckCircle","XCircle","Badge","variant","bloom_level","span","text","choices","choice","choiceIndex","String","fromCharCode","explanation","Button","onClick","window","location","href","currentQuestion","currentResponse","max_questions","Clock","Progress","RadioGroup","onValueChange","parseInt","RadioGroupItem","Label","htmlFor","Textarea","placeholder","onChange","e","target","Slider","max","step","disabled"],"mappings":"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"}