{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/features/quiz/services/quizApi.ts"],"sourcesContent":["/**\n * Quiz API Service\n * \n * Centralized service for all quiz-related API operations,\n * following the established FlashcardApiService pattern.\n */\n\nimport { axiosGeneration } from '@/lib/axios';\nimport { normalizeProjectId } from '@/lib/projectId';\nimport type {\n  DiagnosticSession,\n  DiagnosticQuestion,\n  DiagnosticResponse,\n  DiagnosticAnalytics,\n  CreateQuizSessionRequest,\n  UpdateQuizSessionRequest,\n  StartQuizSessionResponse,\n  SubmitQuizAnswerRequest,\n  SubmitQuizAnswerResponse,\n  QuizSessionListResponse,\n  QuizError,\n  QuizErrorType\n} from '../types';\n\nexport class QuizApiService {\n  private baseUrl = 'diagnostic-sessions/';\n  private generationUrl = 'diagnostics/';\n\n  async getProjectSessions(projectId: string): Promise<DiagnosticSession[]> {\n    try {\n      const pid = normalizeProjectId(projectId);\n      const response = await axiosGeneration.get(`${this.baseUrl}`, {\n        params: { project: pid },\n      });\n      const sessions = response.data;\n      return Array.isArray(sessions) ? sessions : (sessions?.results || []);\n    } catch (error) {\n      if ((error as any)?.response?.status === 404 || \n          ((error as any)?.response?.data && Object.keys((error as any).response.data).length === 0)) {\n        return [];\n      }\n      throw this.handleApiError(error, 'Failed to load quiz sessions');\n    }\n  }\n\n  async getTodaySessions(projectId: string): Promise<DiagnosticSession[]> {\n    try {\n      const pid = normalizeProjectId(projectId);\n      const response = await axiosGeneration.get(`${this.baseUrl}today/`, {\n        params: { project: pid },\n      });\n      const sessions = response.data;\n      return Array.isArray(sessions) ? sessions : (sessions?.results || []);\n    } catch (error) {\n      if ((error as any)?.response?.status === 404 || \n          ((error as any)?.response?.data && Object.keys((error as any).response.data).length === 0)) {\n        return [];\n      }\n      throw this.handleApiError(error, 'Failed to load today\\'s quiz sessions');\n    }\n  }\n\n  async getSession(sessionId: string): Promise<DiagnosticSession> {\n    try {\n      const response = await axiosGeneration.get(`${this.baseUrl}${sessionId}/`);\n      return response.data;\n    } catch (error) {\n      throw this.handleApiError(error, 'Failed to load quiz session');\n    }\n  }\n\n  async createSession(request: CreateQuizSessionRequest): Promise<DiagnosticSession> {\n    try {\n      const headers = buildTestModeHeaders()\n      const difficultyMap: Record<string, number> = {\n        BEGINNER: 1,\n        INTERMEDIATE: 3,\n        ADVANCED: 4,\n        EXPERT: 5,\n      } as const\n      const deliveryMap: Record<string, string> = {\n        IMMEDIATE: 'IMMEDIATE',\n        DEFERRED: 'DEFERRED_FEEDBACK',\n      } as const\n      const pid = normalizeProjectId((request as any).project)\n\n      // Ensure question_mix sums to max_questions; if missing, create a balanced mix\n      let question_mix = request.question_mix\n      if (!question_mix) {\n        const max = Math.max(1, request.max_questions || 3)\n        const base = Math.floor(max / 3)\n        const remainder = max % 3\n        question_mix = { MCQ: base, SHORT_ANSWER: base, PRINCIPLE: base }\n        if (remainder >= 1) question_mix.MCQ += 1\n        if (remainder === 2) question_mix.SHORT_ANSWER += 1\n      }\n\n      const payload = {\n        project: pid,\n        topic: request.topic,\n        source_ids: request.source_ids,\n        question_mix,\n        difficulty: difficultyMap[request.difficulty] ?? 2,\n        delivery_mode: deliveryMap[request.delivery_mode] ?? 'DEFERRED_FEEDBACK',\n        max_questions: request.max_questions,\n      }\n\n      const response = await axiosGeneration.post('quizzes/generate/', payload, { headers });\n      return response.data;\n    } catch (error) {\n      throw this.handleApiError(error, 'Failed to create quiz session');\n    }\n  }\n\n  async updateSession(sessionId: string, request: UpdateQuizSessionRequest): Promise<DiagnosticSession> {\n    try {\n      const response = await axiosGeneration.patch(`${this.baseUrl}${sessionId}/`, request);\n      return response.data;\n    } catch (error) {\n      throw this.handleApiError(error, 'Failed to update quiz session');\n    }\n  }\n\n  async deleteSession(sessionId: string): Promise<void> {\n    try {\n      await axiosGeneration.delete(`${this.baseUrl}${sessionId}/`);\n    } catch (error) {\n      throw this.handleApiError(error, 'Failed to delete quiz session');\n    }\n  }\n\n  async startSession(sessionId: string): Promise<StartQuizSessionResponse> {\n    try {\n      const response = await axiosGeneration.post(`${this.baseUrl}${sessionId}/start/`);\n      return response.data;\n    } catch (error) {\n      throw this.handleApiError(error, 'Failed to start quiz session');\n    }\n  }\n\n  async submitAnswer(sessionId: string, request: SubmitQuizAnswerRequest): Promise<SubmitQuizAnswerResponse> {\n    try {\n      const response = await axiosGeneration.post(`${this.baseUrl}${sessionId}/responses/`, {\n        question: request.question_id,\n        user_answer: request.user_answer,\n        time_taken_sec: request.time_taken_sec\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleApiError(error, 'Failed to submit answer');\n    }\n  }\n\n  async getSessionQuestions(sessionId: string): Promise<DiagnosticQuestion[]> {\n    try {\n      const response = await axiosGeneration.get(`${this.baseUrl}${sessionId}/questions/`);\n      const questions = Array.isArray(response.data) \n        ? response.data \n        : response.data.results || [];\n      return questions;\n    } catch (error) {\n      throw this.handleApiError(error, 'Failed to load quiz questions');\n    }\n  }\n\n  async getSessionResponses(sessionId: string): Promise<DiagnosticResponse[]> {\n    try {\n      const response = await axiosGeneration.get(`${this.baseUrl}${sessionId}/responses/`);\n      const responses = Array.isArray(response.data) \n        ? response.data \n        : response.data.results || [];\n      return responses;\n    } catch (error) {\n      throw this.handleApiError(error, 'Failed to load quiz responses');\n    }\n  }\n\n  async getSessionAnalytics(sessionId: string): Promise<DiagnosticAnalytics> {\n    try {\n      const response = await axiosGeneration.get(`${this.baseUrl}${sessionId}/analytics/`);\n      return response.data;\n    } catch (error) {\n      throw this.handleApiError(error, 'Failed to load quiz analytics');\n    }\n  }\n\n  async getProjectStats(projectId: string): Promise<any> {\n    try {\n      const pid = normalizeProjectId(projectId)\n      // Some environments may not expose a stats endpoint; return an empty object on 404\n      const response = await axiosGeneration.get(`${this.baseUrl}stats/`, {\n        params: { project: pid },\n        validateStatus: (status) => (status >= 200 && status < 300) || status === 404,\n      });\n      return response.status === 404 ? {} : response.data;\n    } catch (error) {\n      throw this.handleApiError(error, 'Failed to load project statistics');\n    }\n  }\n\n  private handleApiError(error: any, defaultMessage: string): QuizError {\n    console.error('API Error Details:', {\n      message: error.message,\n      response: error.response?.data,\n      status: error.response?.status,\n      code: error.code\n    });\n\n    let errorType: QuizErrorType = 'UNKNOWN_ERROR';\n    let message = defaultMessage;\n\n    if (error.code === 'ECONNREFUSED' || error.message?.includes('Network Error')) {\n      errorType = 'NETWORK_ERROR';\n      message = 'Cannot connect to server. Please check your connection.';\n    }\n    else if (error.code === 'ECONNABORTED' || error.message?.includes('timeout')) {\n      errorType = 'TIMEOUT_ERROR';\n      message = 'Request timed out. Please try again.';\n    }\n    else if (error.response) {\n      const status = error.response.status;\n      const responseData = error.response.data;\n      switch (status) {\n        case 400:\n          errorType = 'VALIDATION_ERROR';\n          message = responseData?.error || responseData?.message || 'Invalid request data';\n          break;\n        case 401:\n          errorType = 'AUTHENTICATION_ERROR';\n          message = 'Please log in to continue';\n          break;\n        case 403:\n          errorType = 'PERMISSION_ERROR';\n          message = 'You don\\'t have permission to perform this action';\n          break;\n        case 404:\n          errorType = 'NOT_FOUND_ERROR';\n          message = 'Quiz session not found';\n          break;\n        case 500:\n          errorType = 'SERVER_ERROR';\n          message = 'Server error. Please try again later';\n          break;\n        default:\n          errorType = 'SERVER_ERROR';\n          message = responseData?.error || responseData?.message || defaultMessage;\n      }\n    }\n    else if (error.message) {\n      message = error.message;\n    }\n\n    return {\n      code: errorType,\n      message,\n      details: error.response?.data || error,\n      timestamp: new Date()\n    };\n  }\n}\n\nexport const quizApi = new QuizApiService();\n"],"names":["QuizApiService","quizApi","getProjectSessions","projectId","pid","normalizeProjectId","response","axiosGeneration","get","baseUrl","params","project","sessions","data","Array","isArray","results","error","status","Object","keys","length","handleApiError","getTodaySessions","getSession","sessionId","createSession","request","headers","buildTestModeHeaders","difficultyMap","BEGINNER","INTERMEDIATE","ADVANCED","EXPERT","deliveryMap","IMMEDIATE","DEFERRED","question_mix","max","Math","max_questions","base","floor","remainder","MCQ","SHORT_ANSWER","PRINCIPLE","payload","topic","source_ids","difficulty","delivery_mode","post","updateSession","patch","deleteSession","delete","startSession","submitAnswer","question","question_id","user_answer","time_taken_sec","getSessionQuestions","questions","getSessionResponses","responses","getSessionAnalytics","getProjectStats","validateStatus","defaultMessage","console","message","code","errorType","includes","responseData","details","timestamp","Date","generationUrl"],"mappings":"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"}