df8a4c0fb3d6ce2c75daf2caa4c3f2a8
/**
 * API Contract Tests - Verify the real endpoints exist and return expected shapes
 * These catch when backend routes change or are missing
 */ "use strict";
describe('API Contract Tests', ()=>{
    const projectId = '203062be-58d0-4f98-bbd4-33b4ce081276';
    it('flashcard sets endpoint should exist and return expected format', async ()=>{
        // This would have caught if the endpoint didn't exist
        const response = await fetch(`http://localhost:8000/generation/api/projects/${projectId}/flashcard-sets/`);
        // Should get 401 (auth required) not 404 (endpoint missing)  
        expect([
            200,
            401
        ]).toContain(response.status);
        if (response.status === 200) {
            const data = await response.json();
            expect(Array.isArray(data) || data && Array.isArray(data.results)).toBeTruthy();
        } else if (response.status === 401) {
            // 401 means endpoint exists but requires auth - this is good!
            const data = await response.json();
            expect(data.detail).toMatch(/authentication|credentials/i);
        }
    });
    it('project details endpoint should exist', async ()=>{
        const response = await fetch(`http://localhost:8000/api/projects/${projectId}/`);
        expect([
            200,
            401,
            403
        ]).toContain(response.status);
    });
    it('diagnostic sessions endpoint should exist', async ()=>{
        const response = await fetch(`http://localhost:8000/generation/api/diagnostic-sessions/?project=${projectId}`);
        expect([
            200,
            401
        ]).toContain(response.status);
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9qYWNvYmhvcm5zdmVubmV2aWsvRG9jdW1lbnRzL0dpdEh1Yi9tYVJlcG9fcm9vdC9mcm9udGVuZC9zcmMvdGVzdC11dGlscy9jb250cmFjdC9hcGktY29udHJhY3QudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEFQSSBDb250cmFjdCBUZXN0cyAtIFZlcmlmeSB0aGUgcmVhbCBlbmRwb2ludHMgZXhpc3QgYW5kIHJldHVybiBleHBlY3RlZCBzaGFwZXNcbiAqIFRoZXNlIGNhdGNoIHdoZW4gYmFja2VuZCByb3V0ZXMgY2hhbmdlIG9yIGFyZSBtaXNzaW5nXG4gKi9cblxuZGVzY3JpYmUoJ0FQSSBDb250cmFjdCBUZXN0cycsICgpID0+IHtcbiAgY29uc3QgcHJvamVjdElkID0gJzIwMzA2MmJlLTU4ZDAtNGY5OC1iYmQ0LTMzYjRjZTA4MTI3Nic7XG5cbiAgaXQoJ2ZsYXNoY2FyZCBzZXRzIGVuZHBvaW50IHNob3VsZCBleGlzdCBhbmQgcmV0dXJuIGV4cGVjdGVkIGZvcm1hdCcsIGFzeW5jICgpID0+IHtcbiAgICAvLyBUaGlzIHdvdWxkIGhhdmUgY2F1Z2h0IGlmIHRoZSBlbmRwb2ludCBkaWRuJ3QgZXhpc3RcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGBodHRwOi8vbG9jYWxob3N0OjgwMDAvZ2VuZXJhdGlvbi9hcGkvcHJvamVjdHMvJHtwcm9qZWN0SWR9L2ZsYXNoY2FyZC1zZXRzL2ApO1xuICAgIFxuICAgIC8vIFNob3VsZCBnZXQgNDAxIChhdXRoIHJlcXVpcmVkKSBub3QgNDA0IChlbmRwb2ludCBtaXNzaW5nKSAgXG4gICAgZXhwZWN0KFsyMDAsIDQwMV0pLnRvQ29udGFpbihyZXNwb25zZS5zdGF0dXMpO1xuICAgIFxuICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgIGV4cGVjdChBcnJheS5pc0FycmF5KGRhdGEpIHx8IChkYXRhICYmIEFycmF5LmlzQXJyYXkoZGF0YS5yZXN1bHRzKSkpLnRvQmVUcnV0aHkoKTtcbiAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gNDAxKSB7XG4gICAgICAvLyA0MDEgbWVhbnMgZW5kcG9pbnQgZXhpc3RzIGJ1dCByZXF1aXJlcyBhdXRoIC0gdGhpcyBpcyBnb29kIVxuICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgIGV4cGVjdChkYXRhLmRldGFpbCkudG9NYXRjaCgvYXV0aGVudGljYXRpb258Y3JlZGVudGlhbHMvaSk7XG4gICAgfVxuICB9KTtcblxuICBpdCgncHJvamVjdCBkZXRhaWxzIGVuZHBvaW50IHNob3VsZCBleGlzdCcsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGBodHRwOi8vbG9jYWxob3N0OjgwMDAvYXBpL3Byb2plY3RzLyR7cHJvamVjdElkfS9gKTtcbiAgICBleHBlY3QoWzIwMCwgNDAxLCA0MDNdKS50b0NvbnRhaW4ocmVzcG9uc2Uuc3RhdHVzKTtcbiAgfSk7XG5cbiAgaXQoJ2RpYWdub3N0aWMgc2Vzc2lvbnMgZW5kcG9pbnQgc2hvdWxkIGV4aXN0JywgYXN5bmMgKCkgPT4geyAgXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgaHR0cDovL2xvY2FsaG9zdDo4MDAwL2dlbmVyYXRpb24vYXBpL2RpYWdub3N0aWMtc2Vzc2lvbnMvP3Byb2plY3Q9JHtwcm9qZWN0SWR9YCk7XG4gICAgZXhwZWN0KFsyMDAsIDQwMV0pLnRvQ29udGFpbihyZXNwb25zZS5zdGF0dXMpO1xuICB9KTtcbn0pO1xuIl0sIm5hbWVzIjpbImRlc2NyaWJlIiwicHJvamVjdElkIiwiaXQiLCJyZXNwb25zZSIsImZldGNoIiwiZXhwZWN0IiwidG9Db250YWluIiwic3RhdHVzIiwiZGF0YSIsImpzb24iLCJBcnJheSIsImlzQXJyYXkiLCJyZXN1bHRzIiwidG9CZVRydXRoeSIsImRldGFpbCIsInRvTWF0Y2giXSwibWFwcGluZ3MiOiJBQUFBOzs7Q0FHQztBQUVEQSxTQUFTLHNCQUFzQjtJQUM3QixNQUFNQyxZQUFZO0lBRWxCQyxHQUFHLG1FQUFtRTtRQUNwRSxzREFBc0Q7UUFDdEQsTUFBTUMsV0FBVyxNQUFNQyxNQUFNLENBQUMsOENBQThDLEVBQUVILFVBQVUsZ0JBQWdCLENBQUM7UUFFekcsOERBQThEO1FBQzlESSxPQUFPO1lBQUM7WUFBSztTQUFJLEVBQUVDLFNBQVMsQ0FBQ0gsU0FBU0ksTUFBTTtRQUU1QyxJQUFJSixTQUFTSSxNQUFNLEtBQUssS0FBSztZQUMzQixNQUFNQyxPQUFPLE1BQU1MLFNBQVNNLElBQUk7WUFDaENKLE9BQU9LLE1BQU1DLE9BQU8sQ0FBQ0gsU0FBVUEsUUFBUUUsTUFBTUMsT0FBTyxDQUFDSCxLQUFLSSxPQUFPLEdBQUlDLFVBQVU7UUFDakYsT0FBTyxJQUFJVixTQUFTSSxNQUFNLEtBQUssS0FBSztZQUNsQyw4REFBOEQ7WUFDOUQsTUFBTUMsT0FBTyxNQUFNTCxTQUFTTSxJQUFJO1lBQ2hDSixPQUFPRyxLQUFLTSxNQUFNLEVBQUVDLE9BQU8sQ0FBQztRQUM5QjtJQUNGO0lBRUFiLEdBQUcseUNBQXlDO1FBQzFDLE1BQU1DLFdBQVcsTUFBTUMsTUFBTSxDQUFDLG1DQUFtQyxFQUFFSCxVQUFVLENBQUMsQ0FBQztRQUMvRUksT0FBTztZQUFDO1lBQUs7WUFBSztTQUFJLEVBQUVDLFNBQVMsQ0FBQ0gsU0FBU0ksTUFBTTtJQUNuRDtJQUVBTCxHQUFHLDZDQUE2QztRQUM5QyxNQUFNQyxXQUFXLE1BQU1DLE1BQU0sQ0FBQyxrRUFBa0UsRUFBRUgsV0FBVztRQUM3R0ksT0FBTztZQUFDO1lBQUs7U0FBSSxFQUFFQyxTQUFTLENBQUNILFNBQVNJLE1BQU07SUFDOUM7QUFDRiJ9