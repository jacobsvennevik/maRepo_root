{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/lib/websocket-connection.ts"],"sourcesContent":["/**\n * Shared WebSocket connection utilities.\n * Eliminates duplication across multiple hooks.\n */\nimport { webSocketService } from '@/lib/websocket';\n\nexport interface ConnectionStatus {\n  isConnected: boolean;\n  lastChecked: Date;\n}\n\nexport class WebSocketConnectionManager {\n  private static instance: WebSocketConnectionManager;\n  private connectionStatus: ConnectionStatus = {\n    isConnected: false,\n    lastChecked: new Date()\n  };\n  private listeners: Set<(status: ConnectionStatus) => void> = new Set();\n  private checkInterval: NodeJS.Timeout | null = null;\n\n  static getInstance(): WebSocketConnectionManager {\n    if (!WebSocketConnectionManager.instance) {\n      WebSocketConnectionManager.instance = new WebSocketConnectionManager();\n    }\n    return WebSocketConnectionManager.instance;\n  }\n\n  private constructor() {\n    this.startConnectionMonitoring();\n  }\n\n  private startConnectionMonitoring(): void {\n    this.checkInterval = setInterval(() => {\n      this.updateConnectionStatus();\n    }, 1000);\n  }\n\n  private updateConnectionStatus(): void {\n    const isConnected = webSocketService.isConnected();\n    const lastChecked = new Date();\n    \n    if (this.connectionStatus.isConnected !== isConnected) {\n      this.connectionStatus = { isConnected, lastChecked };\n      this.notifyListeners();\n    } else {\n      this.connectionStatus.lastChecked = lastChecked;\n    }\n  }\n\n  private notifyListeners(): void {\n    this.listeners.forEach(listener => {\n      listener(this.connectionStatus);\n    });\n  }\n\n  public subscribe(listener: (status: ConnectionStatus) => void): () => void {\n    this.listeners.add(listener);\n    \n    // Immediately call with current status\n    listener(this.connectionStatus);\n    \n    // Return unsubscribe function\n    return () => {\n      this.listeners.delete(listener);\n    };\n  }\n\n  public getConnectionStatus(): ConnectionStatus {\n    return { ...this.connectionStatus };\n  }\n\n  public destroy(): void {\n    if (this.checkInterval) {\n      clearInterval(this.checkInterval);\n      this.checkInterval = null;\n    }\n    this.listeners.clear();\n  }\n}\n\n// Singleton instance\nexport const connectionManager = WebSocketConnectionManager.getInstance();\n"],"names":["WebSocketConnectionManager","connectionManager","getInstance","instance","connectionStatus","isConnected","lastChecked","Date","listeners","Set","checkInterval","startConnectionMonitoring","setInterval","updateConnectionStatus","webSocketService","notifyListeners","forEach","listener","subscribe","add","delete","getConnectionStatus","destroy","clearInterval","clear"],"mappings":"AAAA;;;CAGC;;;;;;;;;;;IAQYA,0BAA0B;eAA1BA;;IAsEAC,iBAAiB;eAAjBA;;;2BA7EoB;AAO1B,MAAMD;IASX,OAAOE,cAA0C;QAC/C,IAAI,CAACF,2BAA2BG,QAAQ,EAAE;YACxCH,2BAA2BG,QAAQ,GAAG,IAAIH;QAC5C;QACA,OAAOA,2BAA2BG,QAAQ;IAC5C;IAEA,aAAsB;aAddC,mBAAqC;YAC3CC,aAAa;YACbC,aAAa,IAAIC;QACnB;aACQC,YAAqD,IAAIC;aACzDC,gBAAuC;QAU7C,IAAI,CAACC,yBAAyB;IAChC;IAEQA,4BAAkC;QACxC,IAAI,CAACD,aAAa,GAAGE,YAAY;YAC/B,IAAI,CAACC,sBAAsB;QAC7B,GAAG;IACL;IAEQA,yBAA+B;QACrC,MAAMR,cAAcS,2BAAgB,CAACT,WAAW;QAChD,MAAMC,cAAc,IAAIC;QAExB,IAAI,IAAI,CAACH,gBAAgB,CAACC,WAAW,KAAKA,aAAa;YACrD,IAAI,CAACD,gBAAgB,GAAG;gBAAEC;gBAAaC;YAAY;YACnD,IAAI,CAACS,eAAe;QACtB,OAAO;YACL,IAAI,CAACX,gBAAgB,CAACE,WAAW,GAAGA;QACtC;IACF;IAEQS,kBAAwB;QAC9B,IAAI,CAACP,SAAS,CAACQ,OAAO,CAACC,CAAAA;YACrBA,SAAS,IAAI,CAACb,gBAAgB;QAChC;IACF;IAEOc,UAAUD,QAA4C,EAAc;QACzE,IAAI,CAACT,SAAS,CAACW,GAAG,CAACF;QAEnB,uCAAuC;QACvCA,SAAS,IAAI,CAACb,gBAAgB;QAE9B,8BAA8B;QAC9B,OAAO;YACL,IAAI,CAACI,SAAS,CAACY,MAAM,CAACH;QACxB;IACF;IAEOI,sBAAwC;QAC7C,OAAO;YAAE,GAAG,IAAI,CAACjB,gBAAgB;QAAC;IACpC;IAEOkB,UAAgB;QACrB,IAAI,IAAI,CAACZ,aAAa,EAAE;YACtBa,cAAc,IAAI,CAACb,aAAa;YAChC,IAAI,CAACA,aAAa,GAAG;QACvB;QACA,IAAI,CAACF,SAAS,CAACgB,KAAK;IACtB;AACF;AAGO,MAAMvB,oBAAoBD,2BAA2BE,WAAW"}