{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/test-utils/mocks/index.ts"],"sourcesContent":["import { jest } from '@jest/globals';\n\n/**\n * Standardized mock patterns for consistent testing across the application\n */\n\n/**\n * API Mock Factory\n */\nexport const createAPIMocks = () => {\n  const mockFetch = jest.fn();\n  \n  // Default successful responses\n  const defaultResponses = {\n    upload: {\n      ok: true,\n      status: 200,\n      json: async () => ({ id: 123, status: 'pending' })\n    },\n    analysis: {\n      ok: true,\n      status: 200,\n      json: async () => ({\n        id: 123,\n        status: 'completed',\n        original_text: 'Mock analysis result',\n        metadata: { course_title: 'Test Course' }\n      })\n    },\n    error: {\n      ok: false,\n      status: 400,\n      statusText: 'Bad Request',\n      text: async () => 'Error message'\n    }\n  };\n\n  const setupMockResponses = (responses: Record<string, any> = {}) => {\n    const responseMap: Record<string, any> = { ...defaultResponses, ...responses };\n    \n    mockFetch.mockImplementation((url: string, options?: any) => {\n      const method = options?.method || 'GET';\n      const key = `${method}:${url}`;\n      \n      // Find matching response\n      const response = responseMap[key] || responseMap.upload;\n      \n      return Promise.resolve({\n        ...response,\n        json: response.json || (async () => ({})),\n        text: response.text || (async () => ''),\n      });\n    });\n  };\n\n  const mockNetworkError = () => {\n    mockFetch.mockRejectedValue(new Error('Network error') as never);\n  };\n\n  const mockTimeout = (delay: number = 5000) => {\n    mockFetch.mockImplementation(() => \n      new Promise((_, reject) => \n        setTimeout(() => reject(new Error('Request timeout')), delay)\n      )\n    );\n  };\n\n  return {\n    mockFetch,\n    setupMockResponses,\n    mockNetworkError,\n    mockTimeout,\n    reset: () => mockFetch.mockReset()\n  };\n};\n\n/**\n * Component Mock Factory\n */\nexport const createComponentMocks = () => {\n  const React = require('react');\n\n  const createMockComponent = (displayName: string, testId?: string) => {\n    const MockComponent = (props: any) => \n      React.createElement('div', { \n        'data-testid': testId || displayName.toLowerCase(),\n        ...props \n      }, props.children);\n    \n    MockComponent.displayName = displayName;\n    return MockComponent;\n  };\n\n  const fileUploadMock = createMockComponent('FileUpload', 'file-upload');\n  const buttonMock = createMockComponent('Button', 'button');\n  const cardMock = createMockComponent('Card', 'card');\n  const dialogMock = createMockComponent('Dialog', 'dialog');\n\n  return {\n    FileUpload: fileUploadMock,\n    Button: buttonMock,\n    Card: cardMock,\n    Dialog: dialogMock,\n    createMockComponent\n  };\n};\n\n/**\n * Navigation Mock Factory\n */\nexport const createNavigationMocks = () => {\n  const mockRouter = {\n    push: jest.fn(),\n    back: jest.fn(),\n    forward: jest.fn(),\n    refresh: jest.fn(),\n    replace: jest.fn(),\n    prefetch: jest.fn()\n  };\n\n  const mockUseRouter = () => mockRouter;\n\n  const mockUsePathname = () => '/test-path';\n\n  const mockUseSearchParams = () => new URLSearchParams();\n\n  return {\n    mockRouter,\n    mockUseRouter,\n    mockUsePathname,\n    mockUseSearchParams,\n    reset: () => {\n      Object.values(mockRouter).forEach(mock => {\n        if (typeof mock === 'function' && mock.mockReset) {\n          mock.mockReset();\n        }\n      });\n    }\n  };\n};\n\n/**\n * File System Mock Factory\n */\nexport const createFileSystemMocks = () => {\n  const mockLocalStorage = {\n    getItem: jest.fn(),\n    setItem: jest.fn(),\n    removeItem: jest.fn(),\n    clear: jest.fn(),\n    length: 0,\n    key: jest.fn()\n  };\n\n  const mockSessionStorage = {\n    getItem: jest.fn(),\n    setItem: jest.fn(),\n    removeItem: jest.fn(),\n    clear: jest.fn(),\n    length: 0,\n    key: jest.fn()\n  };\n\n  const setupStorageMocks = () => {\n    Object.defineProperty(window, 'localStorage', {\n      value: mockLocalStorage,\n      writable: true\n    });\n\n    Object.defineProperty(window, 'sessionStorage', {\n      value: mockSessionStorage,\n      writable: true\n    });\n  };\n\n  const mockFileReader = {\n    readAsText: jest.fn(),\n    readAsDataURL: jest.fn(),\n    readAsArrayBuffer: jest.fn(),\n    result: null,\n    error: null,\n    readyState: 0,\n    onload: null,\n    onerror: null,\n    onloadend: null\n  };\n\n  return {\n    mockLocalStorage,\n    mockSessionStorage,\n    mockFileReader,\n    setupStorageMocks,\n    reset: () => {\n      Object.values(mockLocalStorage).forEach(mock => {\n        if (typeof mock === 'function' && mock.mockReset) {\n          mock.mockReset();\n        }\n      });\n      Object.values(mockSessionStorage).forEach(mock => {\n        if (typeof mock === 'function' && mock.mockReset) {\n          mock.mockReset();\n        }\n      });\n    }\n  };\n};\n\n/**\n * MSW Handler Factory\n */\nexport const createMSWHandlers = () => {\n  const handlers = [];\n\n  const addHandler = (method: string, url: string, response: any, status = 200) => {\n    handlers.push({\n      method: method.toUpperCase(),\n      url,\n      response,\n      status\n    });\n  };\n\n  const createUploadHandler = (response: any = { id: 123, status: 'completed' }) => {\n    addHandler('POST', '/backend/api/upload/', response);\n  };\n\n  const createAnalysisHandler = (response: any = { \n    id: 123, \n    status: 'completed', \n    original_text: 'Mock analysis' \n  }) => {\n    addHandler('GET', '/backend/api/analysis/:id/', response);\n  };\n\n  const createErrorHandler = (status = 400, message = 'Error') => {\n    addHandler('POST', '/backend/api/upload/', { error: message }, status);\n  };\n\n  return {\n    handlers,\n    addHandler,\n    createUploadHandler,\n    createAnalysisHandler,\n    createErrorHandler,\n    clear: () => handlers.length = 0\n  };\n};\n\n/**\n * Environment Mock Factory\n */\nexport const createEnvironmentMocks = () => {\n  const originalEnv = process.env;\n  const originalWindow = window;\n\n  const mockEnvironment = (env: Record<string, string>) => {\n    process.env = { ...originalEnv, ...env };\n  };\n\n  const mockWindow = (props: Record<string, any>) => {\n    Object.defineProperty(window, 'location', {\n      value: { ...window.location, ...props },\n      writable: true\n    });\n  };\n\n  const resetEnvironment = () => {\n    process.env = originalEnv;\n    Object.defineProperty(window, 'location', {\n      value: originalWindow.location,\n      writable: true\n    });\n  };\n\n  return {\n    mockEnvironment,\n    mockWindow,\n    resetEnvironment\n  };\n};\n\n/**\n * Main factory function that creates all standardized mocks\n */\nexport const createStandardMocks = () => {\n  const apiMocks = createAPIMocks();\n  const componentMocks = createComponentMocks();\n  const navigationMocks = createNavigationMocks();\n  const fileSystemMocks = createFileSystemMocks();\n  const mswHandlers = createMSWHandlers();\n  const environmentMocks = createEnvironmentMocks();\n\n  const resetAll = () => {\n    apiMocks.reset();\n    navigationMocks.reset();\n    fileSystemMocks.reset();\n    mswHandlers.clear();\n    environmentMocks.resetEnvironment();\n  };\n\n  const setupAll = () => {\n    fileSystemMocks.setupStorageMocks();\n    global.fetch = apiMocks.mockFetch as jest.MockedFunction<typeof fetch>;\n  };\n\n  return {\n    apiMocks,\n    componentMocks,\n    navigationMocks,\n    fileSystemMocks,\n    mswHandlers,\n    environmentMocks,\n    resetAll,\n    setupAll\n  };\n};\n\n// Export main factory\nexport const standardMocks = createStandardMocks();\n"],"names":["createAPIMocks","createComponentMocks","createEnvironmentMocks","createFileSystemMocks","createMSWHandlers","createNavigationMocks","createStandardMocks","standardMocks","mockFetch","jest","fn","defaultResponses","upload","ok","status","json","id","analysis","original_text","metadata","course_title","error","statusText","text","setupMockResponses","responses","responseMap","mockImplementation","url","options","method","key","response","Promise","resolve","mockNetworkError","mockRejectedValue","Error","mockTimeout","delay","_","reject","setTimeout","reset","mockReset","React","require","createMockComponent","displayName","testId","MockComponent","props","createElement","toLowerCase","children","fileUploadMock","buttonMock","cardMock","dialogMock","FileUpload","Button","Card","Dialog","mockRouter","push","back","forward","refresh","replace","prefetch","mockUseRouter","mockUsePathname","mockUseSearchParams","URLSearchParams","Object","values","forEach","mock","mockLocalStorage","getItem","setItem","removeItem","clear","length","mockSessionStorage","setupStorageMocks","defineProperty","window","value","writable","mockFileReader","readAsText","readAsDataURL","readAsArrayBuffer","result","readyState","onload","onerror","onloadend","handlers","addHandler","toUpperCase","createUploadHandler","createAnalysisHandler","createErrorHandler","message","originalEnv","process","env","originalWindow","mockEnvironment","mockWindow","location","resetEnvironment","apiMocks","componentMocks","navigationMocks","fileSystemMocks","mswHandlers","environmentMocks","resetAll","setupAll","global","fetch"],"mappings":"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"}