6629c8b3dc9b0074cc000f328560b577
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    createAPIMocks: function() {
        return createAPIMocks;
    },
    createComponentMocks: function() {
        return createComponentMocks;
    },
    createEnvironmentMocks: function() {
        return createEnvironmentMocks;
    },
    createFileSystemMocks: function() {
        return createFileSystemMocks;
    },
    createMSWHandlers: function() {
        return createMSWHandlers;
    },
    createNavigationMocks: function() {
        return createNavigationMocks;
    },
    createStandardMocks: function() {
        return createStandardMocks;
    },
    standardMocks: function() {
        return standardMocks;
    }
});
const _globals = require("@jest/globals");
const createAPIMocks = ()=>{
    const mockFetch = _globals.jest.fn();
    // Default successful responses
    const defaultResponses = {
        upload: {
            ok: true,
            status: 200,
            json: async ()=>({
                    id: 123,
                    status: 'pending'
                })
        },
        analysis: {
            ok: true,
            status: 200,
            json: async ()=>({
                    id: 123,
                    status: 'completed',
                    original_text: 'Mock analysis result',
                    metadata: {
                        course_title: 'Test Course'
                    }
                })
        },
        error: {
            ok: false,
            status: 400,
            statusText: 'Bad Request',
            text: async ()=>'Error message'
        }
    };
    const setupMockResponses = (responses = {})=>{
        const responseMap = {
            ...defaultResponses,
            ...responses
        };
        mockFetch.mockImplementation((url, options)=>{
            const method = options?.method || 'GET';
            const key = `${method}:${url}`;
            // Find matching response
            const response = responseMap[key] || responseMap.upload;
            return Promise.resolve({
                ...response,
                json: response.json || (async ()=>({})),
                text: response.text || (async ()=>'')
            });
        });
    };
    const mockNetworkError = ()=>{
        mockFetch.mockRejectedValue(new Error('Network error'));
    };
    const mockTimeout = (delay = 5000)=>{
        mockFetch.mockImplementation(()=>new Promise((_, reject)=>setTimeout(()=>reject(new Error('Request timeout')), delay)));
    };
    return {
        mockFetch,
        setupMockResponses,
        mockNetworkError,
        mockTimeout,
        reset: ()=>mockFetch.mockReset()
    };
};
const createComponentMocks = ()=>{
    const React = require('react');
    const createMockComponent = (displayName, testId)=>{
        const MockComponent = (props)=>React.createElement('div', {
                'data-testid': testId || displayName.toLowerCase(),
                ...props
            }, props.children);
        MockComponent.displayName = displayName;
        return MockComponent;
    };
    const fileUploadMock = createMockComponent('FileUpload', 'file-upload');
    const buttonMock = createMockComponent('Button', 'button');
    const cardMock = createMockComponent('Card', 'card');
    const dialogMock = createMockComponent('Dialog', 'dialog');
    return {
        FileUpload: fileUploadMock,
        Button: buttonMock,
        Card: cardMock,
        Dialog: dialogMock,
        createMockComponent
    };
};
const createNavigationMocks = ()=>{
    const mockRouter = {
        push: _globals.jest.fn(),
        back: _globals.jest.fn(),
        forward: _globals.jest.fn(),
        refresh: _globals.jest.fn(),
        replace: _globals.jest.fn(),
        prefetch: _globals.jest.fn()
    };
    const mockUseRouter = ()=>mockRouter;
    const mockUsePathname = ()=>'/test-path';
    const mockUseSearchParams = ()=>new URLSearchParams();
    return {
        mockRouter,
        mockUseRouter,
        mockUsePathname,
        mockUseSearchParams,
        reset: ()=>{
            Object.values(mockRouter).forEach((mock)=>{
                if (typeof mock === 'function' && mock.mockReset) {
                    mock.mockReset();
                }
            });
        }
    };
};
const createFileSystemMocks = ()=>{
    const mockLocalStorage = {
        getItem: _globals.jest.fn(),
        setItem: _globals.jest.fn(),
        removeItem: _globals.jest.fn(),
        clear: _globals.jest.fn(),
        length: 0,
        key: _globals.jest.fn()
    };
    const mockSessionStorage = {
        getItem: _globals.jest.fn(),
        setItem: _globals.jest.fn(),
        removeItem: _globals.jest.fn(),
        clear: _globals.jest.fn(),
        length: 0,
        key: _globals.jest.fn()
    };
    const setupStorageMocks = ()=>{
        Object.defineProperty(window, 'localStorage', {
            value: mockLocalStorage,
            writable: true
        });
        Object.defineProperty(window, 'sessionStorage', {
            value: mockSessionStorage,
            writable: true
        });
    };
    const mockFileReader = {
        readAsText: _globals.jest.fn(),
        readAsDataURL: _globals.jest.fn(),
        readAsArrayBuffer: _globals.jest.fn(),
        result: null,
        error: null,
        readyState: 0,
        onload: null,
        onerror: null,
        onloadend: null
    };
    return {
        mockLocalStorage,
        mockSessionStorage,
        mockFileReader,
        setupStorageMocks,
        reset: ()=>{
            Object.values(mockLocalStorage).forEach((mock)=>{
                if (typeof mock === 'function' && mock.mockReset) {
                    mock.mockReset();
                }
            });
            Object.values(mockSessionStorage).forEach((mock)=>{
                if (typeof mock === 'function' && mock.mockReset) {
                    mock.mockReset();
                }
            });
        }
    };
};
const createMSWHandlers = ()=>{
    const handlers = [];
    const addHandler = (method, url, response, status = 200)=>{
        handlers.push({
            method: method.toUpperCase(),
            url,
            response,
            status
        });
    };
    const createUploadHandler = (response = {
        id: 123,
        status: 'completed'
    })=>{
        addHandler('POST', '/backend/api/upload/', response);
    };
    const createAnalysisHandler = (response = {
        id: 123,
        status: 'completed',
        original_text: 'Mock analysis'
    })=>{
        addHandler('GET', '/backend/api/analysis/:id/', response);
    };
    const createErrorHandler = (status = 400, message = 'Error')=>{
        addHandler('POST', '/backend/api/upload/', {
            error: message
        }, status);
    };
    return {
        handlers,
        addHandler,
        createUploadHandler,
        createAnalysisHandler,
        createErrorHandler,
        clear: ()=>handlers.length = 0
    };
};
const createEnvironmentMocks = ()=>{
    const originalEnv = process.env;
    const originalWindow = window;
    const mockEnvironment = (env)=>{
        process.env = {
            ...originalEnv,
            ...env
        };
    };
    const mockWindow = (props)=>{
        Object.defineProperty(window, 'location', {
            value: {
                ...window.location,
                ...props
            },
            writable: true
        });
    };
    const resetEnvironment = ()=>{
        process.env = originalEnv;
        Object.defineProperty(window, 'location', {
            value: originalWindow.location,
            writable: true
        });
    };
    return {
        mockEnvironment,
        mockWindow,
        resetEnvironment
    };
};
const createStandardMocks = ()=>{
    const apiMocks = createAPIMocks();
    const componentMocks = createComponentMocks();
    const navigationMocks = createNavigationMocks();
    const fileSystemMocks = createFileSystemMocks();
    const mswHandlers = createMSWHandlers();
    const environmentMocks = createEnvironmentMocks();
    const resetAll = ()=>{
        apiMocks.reset();
        navigationMocks.reset();
        fileSystemMocks.reset();
        mswHandlers.clear();
        environmentMocks.resetEnvironment();
    };
    const setupAll = ()=>{
        fileSystemMocks.setupStorageMocks();
        global.fetch = apiMocks.mockFetch;
    };
    return {
        apiMocks,
        componentMocks,
        navigationMocks,
        fileSystemMocks,
        mswHandlers,
        environmentMocks,
        resetAll,
        setupAll
    };
};
const standardMocks = createStandardMocks();

//# sourceMappingURL=data:application/json;base64,