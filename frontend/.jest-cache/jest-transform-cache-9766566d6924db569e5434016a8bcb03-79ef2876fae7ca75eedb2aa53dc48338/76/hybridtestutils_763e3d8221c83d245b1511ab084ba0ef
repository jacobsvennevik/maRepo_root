fcf909dd2b05165f746fc82be5fc8a4e
// Hybrid test utilities - Use mock data but process through real backend
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    enhancedMockUpload: function() {
        return enhancedMockUpload;
    },
    getMockDataForType: function() {
        return getMockDataForType;
    },
    hybridUploadAndProcess: function() {
        return hybridUploadAndProcess;
    },
    processMockDataThroughBackend: function() {
        return processMockDataThroughBackend;
    },
    uploadMockDataToBackend: function() {
        return uploadMockDataToBackend;
    }
});
const _axiosapi = require("../../../lib/axios-api");
const _mockdata = require("./mock-data");
/**
 * Set test mode environment variable for backend
 */ function setTestModeEnvironment() {
    // Set a custom header to indicate test mode
    if (_axiosapi.axiosApi.defaults && _axiosapi.axiosApi.defaults.headers) {
        if (!_axiosapi.axiosApi.defaults.headers.common) {
            _axiosapi.axiosApi.defaults.headers.common = {};
        }
        _axiosapi.axiosApi.defaults.headers.common['X-Test-Mode'] = 'true';
    }
    // Also try to set environment variable (may not work in browser)
    if (typeof window !== 'undefined') {
        window.TEST_MODE = 'true';
    }
}
/**
 * Create mock File objects for testing
 */ function createMockFiles(fileNames, uploadType) {
    return fileNames.map((fileName, index)=>{
        const content = `Mock ${uploadType} content for ${fileName}`;
        const blob = new Blob([
            content
        ], {
            type: 'application/pdf'
        });
        return new File([
            blob
        ], fileName, {
            type: 'application/pdf'
        });
    });
}
async function uploadMockDataToBackend(mockData, uploadType, fileName) {
    console.log(`ðŸ§ª HYBRID MODE: Uploading mock data for ${fileName} to real backend`);
    // Set test mode environment
    setTestModeEnvironment();
    try {
        // Create a mock file from the mock data
        const mockFile = createMockFileFromData(mockData, fileName);
        // Upload to real backend
        const formData = new FormData();
        formData.append('file', mockFile);
        formData.append('file_type', 'pdf');
        formData.append('upload_type', uploadType);
        const uploadResponse = await _axiosapi.axiosApi.post('pdf_service/documents/', formData, {
            headers: {
                'Content-Type': 'multipart/form-data',
                'X-Test-Mode': 'true'
            }
        });
        console.log(`ðŸ§ª HYBRID MODE: Mock data uploaded successfully:`, uploadResponse.data);
        // Return the real backend response with mock data
        return {
            ...uploadResponse.data,
            original_text: mockData.original_text || "Mock document content",
            metadata: mockData.metadata || mockData,
            processed_data: mockData.metadata || mockData
        };
    } catch (error) {
        console.error(`ðŸ§ª HYBRID MODE: Failed to upload mock data:`, error);
        // Fallback to pure mock data if backend fails
        return {
            id: Math.floor(Math.random() * 1000),
            original_text: mockData.original_text || "Mock document content",
            metadata: mockData.metadata || mockData,
            status: 'completed',
            processed_data: mockData.metadata || mockData
        };
    }
}
async function processMockDataThroughBackend(documentId, mockData) {
    console.log(`ðŸ§ª HYBRID MODE: Processing mock data through real backend pipeline`);
    // Set test mode environment
    setTestModeEnvironment();
    try {
        // Start real backend processing
        const processResponse = await _axiosapi.axiosApi.post(`pdf_service/documents/${documentId}/process/`, {}, {
            headers: {
                'X-Test-Mode': 'true'
            }
        });
        console.log(`ðŸ§ª HYBRID MODE: Real processing started:`, processResponse.data);
        // Simulate processing time (realistic delay)
        await (0, _mockdata.simulateProcessingDelay)(2000, 4000);
        // Poll for completion
        const maxAttempts = 15;
        const pollInterval = 2000;
        let attempts = 0;
        while(attempts < maxAttempts){
            await new Promise((resolve)=>setTimeout(resolve, pollInterval));
            try {
                const statusResponse = await _axiosapi.axiosApi.get(`pdf_service/documents/${documentId}/`, {
                    headers: {
                        'X-Test-Mode': 'true'
                    }
                });
                const statusData = statusResponse.data;
                console.log(`ðŸ§ª HYBRID MODE: Polling attempt ${attempts + 1}:`, statusData.status);
                if (statusData.status === 'completed') {
                    console.log(`ðŸ§ª HYBRID MODE: Real processing completed, using mock data as fallback`);
                    // Get the processed data from backend
                    const processedDataResponse = await _axiosapi.axiosApi.get(`pdf_service/documents/${documentId}/processed_data/`, {
                        headers: {
                            'X-Test-Mode': 'true'
                        }
                    });
                    return {
                        id: documentId,
                        original_text: mockData.original_text || "Mock document content",
                        metadata: processedDataResponse.data?.data || mockData.metadata || mockData,
                        status: 'completed',
                        processed_data: processedDataResponse.data?.data || mockData.metadata || mockData
                    };
                }
                attempts += 1;
            } catch (pollError) {
                console.error(`ðŸ§ª HYBRID MODE: Polling error:`, pollError);
                attempts += 1;
            }
        }
        console.log(`ðŸ§ª HYBRID MODE: Processing timeout, using mock data as fallback`);
        // Return mock data as fallback
        return {
            id: documentId,
            original_text: mockData.original_text || "Mock document content",
            metadata: mockData.metadata || mockData,
            status: 'completed',
            processed_data: mockData.metadata || mockData
        };
    } catch (error) {
        console.error(`ðŸ§ª HYBRID MODE: Processing failed, using mock data:`, error);
        // Return mock data as fallback
        return {
            id: documentId,
            original_text: mockData.original_text || "Mock document content",
            metadata: mockData.metadata || mockData,
            status: 'completed',
            processed_data: mockData.metadata || mockData
        };
    }
}
/**
 * Create a mock file from mock data
 */ function createMockFileFromData(mockData, fileName) {
    // Create a simple text representation of the mock data
    const content = JSON.stringify(mockData, null, 2);
    const blob = new Blob([
        content
    ], {
        type: 'application/pdf'
    });
    return new File([
        blob
    ], fileName, {
        type: 'application/pdf'
    });
}
function getMockDataForType(uploadType, fileName) {
    switch(uploadType){
        case 'syllabus':
            return _mockdata.MOCK_SYLLABUS_PROCESSED_DOCUMENT;
        case 'learning_materials':
        case 'course_content':
            return _mockdata.MOCK_COURSE_CONTENT_PROCESSED_DOCUMENT;
        case 'test_files':
            return _mockdata.MOCK_PROCESSED_TESTS[0];
        default:
            return _mockdata.MOCK_SYLLABUS_PROCESSED_DOCUMENT;
    }
}
async function hybridUploadAndProcess(files, uploadType, onProgress, onStateUpdate) {
    console.log(`ðŸ§ª HYBRID MODE: Processing ${files.length} files through real backend with mock data`);
    // Set test mode environment
    setTestModeEnvironment();
    const results = [];
    for(let i = 0; i < files.length; i++){
        const file = files[i];
        // Update progress
        if (onProgress) {
            onProgress(i / files.length * 50); // First 50% for upload
        }
        // Get appropriate mock data
        const mockData = getMockDataForType(uploadType, file.name);
        try {
            // Upload mock data to real backend
            const uploadResult = await uploadMockDataToBackend(mockData, uploadType, file.name);
            // Update progress
            if (onProgress) {
                onProgress(50 + i / files.length * 25); // 50-75% for processing
            }
            // Process through real backend
            const processResult = await processMockDataThroughBackend(uploadResult.id, mockData);
            // Update progress
            if (onProgress) {
                onProgress(75 + i / files.length * 25); // 75-100% for completion
            }
            results.push(processResult);
        } catch (error) {
            console.error(`ðŸ§ª HYBRID MODE: Failed to process ${file.name}:`, error);
            // Fallback to pure mock data
            results.push({
                id: Math.floor(Math.random() * 1000),
                original_text: mockData.original_text || "Mock document content",
                metadata: mockData.metadata || mockData,
                status: 'completed',
                processed_data: mockData.metadata || mockData
            });
        }
    }
    // ðŸ”§ CRITICAL FIX: Update parent state with files and data
    // This ensures the Next button gets activated
    if (onStateUpdate) {
        console.log(`ðŸ§ª HYBRID MODE: Updating parent state with ${files.length} files and ${results.length} results`);
        onStateUpdate(files, results);
    }
    return results;
}
async function enhancedMockUpload(files, uploadType, onProgress, onStateUpdate) {
    console.log(`ðŸ§ª ENHANCED MOCK: Processing ${files.length} files with proper state updates`);
    // Simulate realistic processing time
    const totalTime = 2000 + Math.random() * 2000;
    const stepTime = totalTime / files.length;
    const results = [];
    for(let i = 0; i < files.length; i++){
        const file = files[i];
        // Update progress
        if (onProgress) {
            onProgress(i / files.length * 100);
        }
        // Get appropriate mock data
        const mockData = getMockDataForType(uploadType, file.name);
        // Simulate processing delay
        await new Promise((resolve)=>setTimeout(resolve, stepTime));
        // Create mock result
        const mockResult = {
            id: Math.floor(Math.random() * 1000) + i,
            original_text: mockData.original_text || `Mock content for ${file.name}`,
            metadata: mockData.metadata || mockData,
            status: 'completed',
            processed_data: mockData.metadata || mockData
        };
        results.push(mockResult);
    }
    // ðŸ”§ CRITICAL FIX: Update parent state with files and data
    // This ensures the Next button gets activated
    if (onStateUpdate) {
        console.log(`ðŸ§ª ENHANCED MOCK: Updating parent state with ${files.length} files and ${results.length} results`);
        onStateUpdate(files, results);
    }
    return results;
}

//# sourceMappingURL=data:application/json;base64,