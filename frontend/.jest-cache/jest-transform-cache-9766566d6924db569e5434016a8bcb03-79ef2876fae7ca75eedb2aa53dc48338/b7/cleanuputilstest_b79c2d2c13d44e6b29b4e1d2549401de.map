{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/features/projects/services/__tests__/cleanup-utils.test.ts"],"sourcesContent":["import {\n  cleanupLocalStorage,\n  cleanupBackendDrafts,\n  performComprehensiveCleanup,\n  cleanupOnAbandon,\n  registerUpload,\n  isCleanupInProgress,\n  getCleanupQueueLength,\n} from \"../cleanup-utils\";\nimport { cleanupAbandonedDrafts } from \"../../services/api\";\nimport { createLocalStorageMock } from \"../../../../../test-utils/test-helpers\";\n\n// Mock the API service\njest.mock(\"../../services/api\", () => ({\n  cleanupAbandonedDrafts: jest.fn(),\n}));\n\n// Mock window.showToast\nconst mockShowToast = jest.fn();\nObject.defineProperty(window, \"showToast\", {\n  value: mockShowToast,\n  writable: true,\n});\n\ndescribe(\"cleanup-utils\", () => {\n  let localStorageMock: any;\n\n  beforeEach(() => {\n    localStorageMock = createLocalStorageMock();\n    Object.defineProperty(window, \"localStorage\", {\n      value: localStorageMock,\n      writable: true,\n    });\n\n    // Clear all mocks\n    jest.clearAllMocks();\n    mockShowToast.mockClear();\n\n    // Reset global upload tracking\n    (window as any).__activeUploads = [];\n\n    // Use fake timers for consistent async behavior\n    jest.useFakeTimers();\n  });\n\n  afterEach(() => {\n    // Clean up global state\n    (window as any).__activeUploads = [];\n\n    // Restore real timers\n    jest.useRealTimers();\n  });\n\n  describe(\"registerUpload\", () => {\n    it(\"should register AbortController for cleanup\", () => {\n      const controller = new AbortController();\n\n      registerUpload(controller);\n\n      expect((window as any).__activeUploads).toContain(controller);\n    });\n\n    it(\"should initialize uploads array if not exists\", () => {\n      delete (window as any).__activeUploads;\n\n      const controller = new AbortController();\n      registerUpload(controller);\n\n      expect((window as any).__activeUploads).toEqual([controller]);\n    });\n  });\n\n  describe(\"cleanupLocalStorage\", () => {\n    it(\"should remove project creation localStorage keys\", async () => {\n      // Setup localStorage with some data\n      localStorageMock.setItem(\n        \"project-setup-guided-setup\",\n        '{\"data\": \"test\"}',\n      );\n      localStorageMock.setItem(\"self-study-guided-setup\", '{\"data\": \"test\"}');\n      localStorageMock.setItem(\"other-data\", '{\"data\": \"test\"}');\n\n      const cleanupPromise = cleanupLocalStorage();\n\n      // Advance timers to resolve async operations\n      jest.runAllTimers();\n      await cleanupPromise;\n\n      // Check that project keys were removed\n      expect(localStorageMock.removeItem).toHaveBeenCalledWith(\"project-setup-guided-setup\");\n      expect(localStorageMock.removeItem).toHaveBeenCalledWith(\"self-study-guided-setup\");\n\n      // Check that other data remains\n      expect(localStorageMock.getItem(\"other-data\")).toBe('{\"data\": \"test\"}');\n    });\n\n    it(\"should handle localStorage errors gracefully\", async () => {\n      // Mock localStorage to throw error\n      localStorageMock.removeItem = jest.fn().mockImplementation(() => {\n        throw new Error(\"localStorage error\");\n      });\n\n      const cleanupPromise = cleanupLocalStorage();\n      jest.runAllTimers();\n\n      // Should not throw error\n      await expect(cleanupPromise).resolves.not.toThrow();\n    });\n\n    it(\"should handle storage quota exceeded\", async () => {\n      // Mock localStorage to simulate quota exceeded by making removeItem throw\n      localStorageMock.removeItem = jest.fn().mockImplementation(() => {\n        throw new Error(\"QuotaExceededError\");\n      });\n\n      const cleanupPromise = cleanupLocalStorage();\n      jest.runAllTimers();\n      await cleanupPromise;\n\n      // Should show error toast\n      expect(mockShowToast).toHaveBeenCalledWith(\n        \"Storage limit reached. Please clear some data and try again.\",\n        \"error\",\n      );\n    });\n  });\n\n  describe(\"cleanupBackendDrafts\", () => {\n    it(\"should call backend cleanup API\", async () => {\n      const mockResponse = { deleted_count: 5, message: \"Success\" };\n      (cleanupAbandonedDrafts as jest.Mock).mockResolvedValue(mockResponse);\n\n      const result = await cleanupBackendDrafts(24);\n\n      expect(cleanupAbandonedDrafts).toHaveBeenCalledWith(24);\n      expect(result).toEqual(mockResponse);\n    });\n\n    it(\"should handle API errors gracefully\", async () => {\n      (cleanupAbandonedDrafts as jest.Mock).mockRejectedValue(\n        new Error(\"API Error\"),\n      );\n\n      const result = await cleanupBackendDrafts(24);\n\n      expect(result).toBeNull();\n    });\n  });\n\n  describe(\"cleanupOnAbandon\", () => {\n    it(\"should abort uploads and cleanup immediately\", async () => {\n      const mockAbortController = {\n        abort: jest.fn(),\n      };\n\n      // Register an upload\n      registerUpload(mockAbortController as any);\n\n      // Setup localStorage\n      localStorageMock.setItem(\n        \"project-setup-guided-setup\",\n        '{\"data\": \"test\"}',\n      );\n\n      const cleanupPromise = cleanupOnAbandon();\n\n      // Check that upload was aborted immediately\n      expect(mockAbortController.abort).toHaveBeenCalled();\n\n      // Advance timers to trigger setTimeout cleanup\n      jest.runAllTimers();\n      await cleanupPromise;\n\n      // Check that localStorage was cleaned\n      expect(localStorageMock.removeItem).toHaveBeenCalledWith(\"project-setup-guided-setup\");\n    });\n\n    it(\"should handle localStorage errors in cleanupOnAbandon\", () => {\n      localStorageMock.removeItem = jest.fn().mockImplementation(() => {\n        throw new Error(\"localStorage error\");\n      });\n\n      // Should not throw error\n      expect(() => cleanupOnAbandon()).not.toThrow();\n    });\n  });\n\n  describe(\"performComprehensiveCleanup\", () => {\n    it(\"should perform all cleanup operations\", async () => {\n      const mockResponse = { deleted_count: 3, message: \"Success\" };\n      (cleanupAbandonedDrafts as jest.Mock).mockResolvedValue(mockResponse);\n\n      // Setup localStorage\n      localStorageMock.setItem(\n        \"project-setup-guided-setup\",\n        '{\"data\": \"test\"}',\n      );\n\n      // Call the cleanup function\n      await performComprehensiveCleanup();\n\n      // Advance timers to trigger setTimeout calls\n      jest.runAllTimers();\n      \n      // Wait for async operations to complete\n      await new Promise(resolve => setTimeout(resolve, 100));\n\n      // Check that localStorage was cleaned\n      expect(localStorageMock.removeItem).toHaveBeenCalledWith(\"project-setup-guided-setup\");\n\n      // Check that backend cleanup was called\n      expect(cleanupAbandonedDrafts).toHaveBeenCalledWith(24);\n    }, 5000); // Reduce timeout since we're handling it properly\n\n    it(\"should abort in-flight uploads\", async () => {\n      const mockAbortController = {\n        abort: jest.fn(),\n      };\n\n      // Register an upload\n      registerUpload(mockAbortController as any);\n\n      const cleanupPromise = performComprehensiveCleanup();\n      jest.runAllTimers();\n      await cleanupPromise;\n\n      // Check that upload was aborted\n      expect(mockAbortController.abort).toHaveBeenCalled();\n    }, 15000); // Increase timeout\n\n    it(\"should handle backend cleanup errors gracefully\", async () => {\n      (cleanupAbandonedDrafts as jest.Mock).mockRejectedValue(\n        new Error(\"Backend Error\"),\n      );\n\n      const cleanupPromise = performComprehensiveCleanup();\n      jest.runAllTimers();\n\n      // Should not throw error\n      await expect(cleanupPromise).resolves.not.toThrow();\n    }, 15000); // Increase timeout\n  });\n\n  describe(\"state tracking\", () => {\n    it(\"should track cleanup progress state\", async () => {\n      expect(isCleanupInProgress()).toBe(false);\n\n      // Start cleanup\n      const cleanupPromise = performComprehensiveCleanup();\n\n      // Should be in progress\n      expect(isCleanupInProgress()).toBe(true);\n\n      // Complete cleanup\n      jest.runAllTimers();\n      await cleanupPromise;\n\n      // Should be completed\n      expect(isCleanupInProgress()).toBe(false);\n    }, 15000); // Increase timeout\n\n    it(\"should track cleanup queue length\", async () => {\n      expect(getCleanupQueueLength()).toBe(0);\n\n      // Start multiple cleanups\n      const cleanup1 = performComprehensiveCleanup();\n      const cleanup2 = performComprehensiveCleanup();\n      const cleanup3 = performComprehensiveCleanup();\n\n      // Should have queued operations\n      expect(getCleanupQueueLength()).toBeGreaterThan(0);\n\n      // Complete all cleanups\n      jest.runAllTimers();\n      await Promise.all([cleanup1, cleanup2, cleanup3]);\n      \n      // Wait a bit more for background operations\n      await new Promise(resolve => setTimeout(resolve, 0));\n\n      // Should be empty\n      expect(getCleanupQueueLength()).toBe(0);\n    }, 5000); // Reduce timeout since we're handling async properly\n  });\n\n  describe(\"multi-tab stress test\", () => {\n    it(\"should handle storage events from other tabs\", () => {\n      // Simulate storage event from another tab\n      const storageEvent = new StorageEvent(\"storage\", {\n        key: \"project-setup-guided-setup\",\n        newValue: null,\n        oldValue: '{\"data\": \"test\"}',\n        url: window.location.href,\n        storageArea: null,\n      });\n\n      // This should not break the cleanup logic\n      expect(() => {\n        window.dispatchEvent(storageEvent);\n      }).not.toThrow();\n    });\n  });\n\n  describe(\"localStorage quota checking\", () => {\n    it(\"should handle localStorage access errors\", async () => {\n      // Mock localStorage to throw error during quota check\n      const originalKey = localStorageMock.key;\n      localStorageMock.key = jest.fn().mockImplementation(() => {\n        throw new Error(\"localStorage access error\");\n      });\n\n      const cleanupPromise = cleanupLocalStorage();\n      jest.runAllTimers();\n      await cleanupPromise;\n\n      // Should continue without error\n      expect(mockShowToast).not.toHaveBeenCalled();\n\n      // Restore original function\n      localStorageMock.key = originalKey;\n    }, 15000); // Increase timeout\n  });\n});\n"],"names":["jest","mock","cleanupAbandonedDrafts","fn","mockShowToast","Object","defineProperty","window","value","writable","describe","localStorageMock","beforeEach","createLocalStorageMock","clearAllMocks","mockClear","__activeUploads","useFakeTimers","afterEach","useRealTimers","it","controller","AbortController","registerUpload","expect","toContain","toEqual","setItem","cleanupPromise","cleanupLocalStorage","runAllTimers","removeItem","toHaveBeenCalledWith","getItem","toBe","mockImplementation","Error","resolves","not","toThrow","mockResponse","deleted_count","message","mockResolvedValue","result","cleanupBackendDrafts","mockRejectedValue","toBeNull","mockAbortController","abort","cleanupOnAbandon","toHaveBeenCalled","performComprehensiveCleanup","Promise","resolve","setTimeout","isCleanupInProgress","getCleanupQueueLength","cleanup1","cleanup2","cleanup3","toBeGreaterThan","all","storageEvent","StorageEvent","key","newValue","oldValue","url","location","href","storageArea","dispatchEvent","originalKey"],"mappings":"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"}