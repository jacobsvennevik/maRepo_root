ef08fde792edbd44aec742ccc8a48483
/**
 * Quiz Feature Shared Hooks
 * 
 * Reusable hooks for common quiz functionality to improve code reuse
 * and maintainability.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    useAutoSave: function() {
        return useAutoSave;
    },
    useFileManagement: function() {
        return useFileManagement;
    },
    useFormValidation: function() {
        return useFormValidation;
    },
    useQuizGeneration: function() {
        return useQuizGeneration;
    },
    useWizardNavigation: function() {
        return useWizardNavigation;
    }
});
const _react = require("react");
const _reacthookform = require("react-hook-form");
const _zod = require("@hookform/resolvers/zod");
const useFileManagement = ({ projectId, onFilesChange, onSelectedFilesChange })=>{
    const [uploadedFiles, setUploadedFiles] = (0, _react.useState)([]);
    const [selectedExistingFileIds, setSelectedExistingFileIds] = (0, _react.useState)([]);
    const [existingSearch, setExistingSearch] = (0, _react.useState)('');
    const [isLoadingFiles, setIsLoadingFiles] = (0, _react.useState)(false);
    const [projectFiles, setProjectFiles] = (0, _react.useState)([]);
    const handleFileUpload = (0, _react.useCallback)((files)=>{
        setUploadedFiles((prev)=>[
                ...prev,
                ...files
            ]);
        onFilesChange?.([
            ...uploadedFiles,
            ...files
        ]);
    }, [
        onFilesChange,
        uploadedFiles
    ]);
    const removeUploadedFile = (0, _react.useCallback)((index)=>{
        setUploadedFiles((prev)=>{
            const newFiles = prev.filter((_, i)=>i !== index);
            onFilesChange?.(newFiles);
            return newFiles;
        });
    }, [
        onFilesChange
    ]);
    const toggleExistingFile = (0, _react.useCallback)((fileId)=>{
        setSelectedExistingFileIds((prev)=>{
            const newSelection = prev.includes(fileId) ? prev.filter((id)=>id !== fileId) : [
                ...prev,
                fileId
            ];
            onSelectedFilesChange?.(newSelection);
            return newSelection;
        });
    }, [
        onSelectedFilesChange
    ]);
    const loadProjectFiles = (0, _react.useCallback)(async ()=>{
        setIsLoadingFiles(true);
        try {
            // TODO: Replace with actual API call
            const mockFiles = [
                {
                    id: 1,
                    name: 'lecture-notes.pdf',
                    file_type: 'pdf',
                    uploaded_at: '2024-01-15',
                    file_size: 1024000
                },
                {
                    id: 2,
                    name: 'textbook-chapter.docx',
                    file_type: 'docx',
                    uploaded_at: '2024-01-14',
                    file_size: 2048000
                },
                {
                    id: 3,
                    name: 'practice-problems.pdf',
                    file_type: 'pdf',
                    uploaded_at: '2024-01-13',
                    file_size: 512000
                }
            ];
            setProjectFiles(mockFiles);
        } catch (error) {
            console.error('Failed to load project files:', error);
        } finally{
            setIsLoadingFiles(false);
        }
    }, []);
    const clearFiles = (0, _react.useCallback)(()=>{
        setUploadedFiles([]);
        setSelectedExistingFileIds([]);
        setExistingSearch('');
        onFilesChange?.([]);
        onSelectedFilesChange?.([]);
    }, [
        onFilesChange,
        onSelectedFilesChange
    ]);
    return {
        uploadedFiles,
        selectedExistingFileIds,
        existingSearch,
        isLoadingFiles,
        projectFiles,
        handleFileUpload,
        removeUploadedFile,
        toggleExistingFile,
        setExistingSearch,
        loadProjectFiles,
        clearFiles
    };
};
const useQuizGeneration = ({ projectId, onSuccess, onError })=>{
    const [isGenerating, setIsGenerating] = (0, _react.useState)(false);
    const [generatedQuiz, setGeneratedQuiz] = (0, _react.useState)(null);
    const [error, setError] = (0, _react.useState)(null);
    const generateQuiz = (0, _react.useCallback)(async (config)=>{
        setIsGenerating(true);
        setError(null);
        try {
            // TODO: Replace with actual API call
            const mockQuiz = {
                id: `quiz_${Date.now()}`,
                title: config.title || 'Generated Quiz',
                questions: Array.from({
                    length: config.max_questions || 10
                }, (_, i)=>({
                        id: `q_${i + 1}`,
                        text: `Question ${i + 1}`,
                        type: 'multiple_choice',
                        choices: [
                            'Option A',
                            'Option B',
                            'Option C',
                            'Option D'
                        ],
                        correct_choice_index: 0
                    }))
            };
            setGeneratedQuiz(mockQuiz);
            onSuccess?.(mockQuiz);
        } catch (error) {
            const errorMessage = error instanceof Error ? error.message : 'Failed to generate quiz';
            setError(errorMessage);
            onError?.(errorMessage);
        } finally{
            setIsGenerating(false);
        }
    }, [
        onSuccess,
        onError
    ]);
    const clearError = (0, _react.useCallback)(()=>{
        setError(null);
    }, []);
    const reset = (0, _react.useCallback)(()=>{
        setGeneratedQuiz(null);
        setError(null);
        setIsGenerating(false);
    }, []);
    return {
        isGenerating,
        generatedQuiz,
        error,
        generateQuiz,
        clearError,
        reset
    };
};
const useFormValidation = ({ schema, defaultValues, onValidationChange })=>{
    const form = (0, _reacthookform.useForm)({
        resolver: (0, _zod.zodResolver)(schema),
        defaultValues: defaultValues
    });
    const { handleSubmit, trigger, watch, setValue, getValues, formState } = form;
    const isValid = formState.isValid;
    const errors = formState.errors;
    (0, _react.useEffect)(()=>{
        onValidationChange?.(isValid);
    }, [
        isValid,
        onValidationChange
    ]);
    const validateField = (0, _react.useCallback)(async (fieldName)=>{
        const result = await trigger(fieldName);
        return result;
    }, [
        trigger
    ]);
    const validateForm = (0, _react.useCallback)(async ()=>{
        const result = await trigger();
        return result;
    }, [
        trigger
    ]);
    const resetForm = (0, _react.useCallback)(()=>{
        form.reset();
    }, [
        form
    ]);
    const setFormValue = (0, _react.useCallback)((fieldName, value)=>{
        setValue(fieldName, value);
    }, [
        setValue
    ]);
    const getFormValue = (0, _react.useCallback)((fieldName)=>{
        return getValues(fieldName);
    }, [
        getValues
    ]);
    return {
        form,
        isValid,
        errors,
        validateField,
        validateForm,
        resetForm,
        setFormValue,
        getFormValue
    };
};
const useWizardNavigation = ({ totalSteps, onStepChange, validateStep })=>{
    const [currentStep, setCurrentStep] = (0, _react.useState)(1);
    const canGoNext = currentStep < totalSteps;
    const canGoPrevious = currentStep > 1;
    const goNext = (0, _react.useCallback)(async ()=>{
        if (!canGoNext) return;
        // Skip validation on step 1 (method selection)
        if (currentStep === 1) {
            const nextStep = currentStep + 1;
            setCurrentStep(nextStep);
            onStepChange?.(nextStep);
            return;
        }
        // Validate current step if validator provided
        if (validateStep) {
            const isValid = await validateStep(currentStep);
            if (!isValid) return;
        }
        const nextStep = currentStep + 1;
        setCurrentStep(nextStep);
        onStepChange?.(nextStep);
    }, [
        currentStep,
        canGoNext,
        validateStep,
        onStepChange
    ]);
    const goPrevious = (0, _react.useCallback)(()=>{
        if (!canGoPrevious) return;
        const prevStep = currentStep - 1;
        setCurrentStep(prevStep);
        onStepChange?.(prevStep);
    }, [
        currentStep,
        canGoPrevious,
        onStepChange
    ]);
    const goToStep = (0, _react.useCallback)(async (step)=>{
        if (step < 1 || step > totalSteps) return;
        // Validate current step if validator provided
        if (validateStep && step > currentStep) {
            const isValid = await validateStep(currentStep);
            if (!isValid) return;
        }
        setCurrentStep(step);
        onStepChange?.(step);
    }, [
        currentStep,
        totalSteps,
        validateStep,
        onStepChange
    ]);
    const reset = (0, _react.useCallback)(()=>{
        setCurrentStep(1);
        onStepChange?.(1);
    }, [
        onStepChange
    ]);
    return {
        currentStep,
        canGoNext,
        canGoPrevious,
        goNext,
        goPrevious,
        goToStep,
        reset
    };
};
const useAutoSave = ({ data, key, interval = 30000, onSave })=>{
    const [isSaving, setIsSaving] = (0, _react.useState)(false);
    const [lastSaved, setLastSaved] = (0, _react.useState)(null);
    const intervalRef = (0, _react.useRef)(null);
    const save = (0, _react.useCallback)(()=>{
        setIsSaving(true);
        try {
            localStorage.setItem(key, JSON.stringify(data));
            setLastSaved(new Date());
            onSave?.(data);
        } catch (error) {
            console.warn('Failed to save data:', error);
        } finally{
            setIsSaving(false);
        }
    }, [
        data,
        key,
        onSave
    ]);
    const clear = (0, _react.useCallback)(()=>{
        try {
            localStorage.removeItem(key);
            setLastSaved(null);
        } catch (error) {
            console.warn('Failed to clear data:', error);
        }
    }, [
        key
    ]);
    (0, _react.useEffect)(()=>{
        if (interval > 0) {
            intervalRef.current = setInterval(save, interval);
        }
        return ()=>{
            if (intervalRef.current) {
                clearInterval(intervalRef.current);
            }
        };
    }, [
        save,
        interval
    ]);
    return {
        isSaving,
        lastSaved,
        save,
        clear
    };
};

//# sourceMappingURL=data:application/json;base64,