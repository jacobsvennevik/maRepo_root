{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/features/projects/components/guided-setup/hooks/useGuidedSetupState.ts"],"sourcesContent":["'use client';\n\nimport { useState, useCallback } from 'react';\nimport { DEFAULTS } from '../constants';\nimport { transformBackendData, ExtractedData } from '../utils/transformBackendData';\n\nexport interface GuidedProjectSetup {\n  projectName: string;\n  testLevel: string;\n  timeframe: string;\n  studyFrequency: string;\n  uploadedFiles: File[];\n  importantDates: Array<{\n    id: string;\n    date: string;\n    description: string;\n    type: string;\n  }>;\n  courseFiles: File[];\n  testFiles: File[];\n  is_draft: boolean;\n  __version?: number; // Add version for migration\n}\n\n// Migration function to handle v1 → v2 upgrades\nfunction migrateSetup(input: any): GuidedProjectSetup {\n  const version = input?.__version ?? 1;\n  \n  if (version === 2) {\n    return input as GuidedProjectSetup;\n  }\n  \n  // v1 → v2 migration: drop deprecated fields, map what we can, set defaults\n  const { \n    purpose, \n    goal, \n    collaboration, \n    learningStyle, \n    studyPreference, \n    learningDifficulties,\n    evaluationTypes,\n    courseType,\n    assessmentType,\n    ...rest \n  } = input || {};\n  \n  return {\n    ...rest,\n    __version: 2,\n    // Ensure all required fields have defaults\n    projectName: rest.projectName || '',\n    testLevel: rest.testLevel || '',\n    timeframe: rest.timeframe || '',\n    studyFrequency: rest.studyFrequency || '',\n    uploadedFiles: rest.uploadedFiles || [],\n    importantDates: rest.importantDates || [],\n    courseFiles: rest.courseFiles || [],\n    testFiles: rest.testFiles || [],\n    is_draft: rest.is_draft ?? true,\n  };\n}\n\nexport const useGuidedSetupState = (initialSetup: Partial<GuidedProjectSetup> = {}) => {\n  // Migrate any existing setup data\n  const migratedSetup = migrateSetup(initialSetup);\n  \n  const [setup, setSetup] = useState<GuidedProjectSetup>({ ...DEFAULTS, ...migratedSetup });\n  const [extractedData, setExtractedData] = useState<ExtractedData | null>(null);\n  const [syllabusFileName, setSyllabusFileName] = useState<string>('');\n  const [contentData, setContentData] = useState<any>(null);\n  const [contentFileNames, setContentFileNames] = useState<string[]>([]);\n  const [isSyllabusAnalysisComplete, setIsSyllabusAnalysisComplete] = useState(false);\n  const [isCourseContentAnalysisComplete, setIsCourseContentAnalysisComplete] = useState(false);\n  const [isTestAnalysisComplete, setIsTestAnalysisComplete] = useState(false);\n  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);\n  const [projectId, setProjectId] = useState<string | null>(null);\n  const [hasSyllabusUploadCompleted, setHasSyllabusUploadCompleted] = useState(false);\n\n  const handleOptionSelect = useCallback((field: keyof GuidedProjectSetup, value: any) => {\n    setSetup(prev => ({ ...prev, [field]: value }));\n    setHasUnsavedChanges(true);\n  }, []);\n\n  const addDateToSetup = useCallback((newDate: { date: string; description: string; type: string }) => {\n    if (!newDate.date || !newDate.description) return false;\n    \n    setSetup(prev => ({\n      ...prev,\n      importantDates: [...prev.importantDates, { ...newDate, id: `date-${Date.now()}` }]\n    }));\n    setHasUnsavedChanges(true);\n    return true;\n  }, []);\n\n  const removeDateFromSetup = useCallback((index: number) => {\n    setSetup(prev => ({\n      ...prev,\n      importantDates: prev.importantDates.filter((_, i) => i !== index)\n    }));\n    setHasUnsavedChanges(true);\n  }, []);\n\n  const handleSyllabusUploadComplete = useCallback((newProjectId: string, backendData: any, fileName?: string) => {\n    // Prevent multiple calls\n    if (hasSyllabusUploadCompleted) {\n      console.log('Syllabus upload already completed, skipping duplicate call');\n      return;\n    }\n    \n    setProjectId(newProjectId);\n    const transformedData = transformBackendData(backendData);\n    setExtractedData(transformedData);\n    setSyllabusFileName(fileName || 'Syllabus');\n    setIsSyllabusAnalysisComplete(true);\n    setHasUnsavedChanges(true);\n    setHasSyllabusUploadCompleted(true);\n  }, [hasSyllabusUploadCompleted]);\n\n  const handleCourseContentUploadComplete = useCallback((backendData: any, fileNames: string[], files?: File[]) => {\n    setContentData(backendData);\n    setContentFileNames(fileNames);\n    setIsCourseContentAnalysisComplete(true);\n    setHasUnsavedChanges(true);\n    \n    // Update the setup state with the uploaded files\n    setSetup(prev => ({\n      ...prev,\n      courseFiles: files || fileNames.map((fileName, index) => {\n        // Create a File object for each processed file\n        const file = new File([''], fileName, { type: 'application/pdf' });\n        return file;\n      })\n    }));\n  }, []);\n\n  const handleTestUploadComplete = useCallback((extractedTests: any[], fileNames: string[], files?: File[]) => {\n    setIsTestAnalysisComplete(true);\n    setHasUnsavedChanges(true);\n    \n    // Update the setup state with the uploaded files\n    setSetup(prev => ({\n      ...prev,\n      testFiles: files || fileNames.map((fileName, index) => {\n        // Create a File object for each processed file\n        const file = new File([''], fileName, { type: 'application/pdf' });\n        return file;\n      })\n    }));\n  }, []);\n\n  const resetSyllabusUploadState = useCallback(() => {\n    setIsSyllabusAnalysisComplete(false);\n    setHasSyllabusUploadCompleted(false);\n  }, []);\n\n  const cleanupState = useCallback(() => {\n    setSetup(DEFAULTS);\n    setProjectId(null);\n    setExtractedData(null);\n    setSyllabusFileName('');\n    setContentData(null);\n    setContentFileNames([]);\n    setIsCourseContentAnalysisComplete(false);\n    setIsTestAnalysisComplete(false);\n    setIsSyllabusAnalysisComplete(false);\n    setHasUnsavedChanges(false);\n    setHasSyllabusUploadCompleted(false);\n  }, []);\n\n  return {\n    setup,\n    setSetup,\n    extractedData,\n    setExtractedData,\n    syllabusFileName,\n    setSyllabusFileName,\n    contentData,\n    setContentData,\n    contentFileNames,\n    setContentFileNames,\n    isSyllabusAnalysisComplete,\n    setIsSyllabusAnalysisComplete,\n    isCourseContentAnalysisComplete,\n    setIsCourseContentAnalysisComplete,\n    isTestAnalysisComplete,\n    setIsTestAnalysisComplete,\n    hasUnsavedChanges,\n    setHasUnsavedChanges,\n    projectId,\n    setProjectId,\n    hasSyllabusUploadCompleted,\n    setHasSyllabusUploadCompleted,\n    handleOptionSelect,\n    addDateToSetup,\n    removeDateFromSetup,\n    handleSyllabusUploadComplete,\n    handleCourseContentUploadComplete,\n    handleTestUploadComplete,\n    resetSyllabusUploadState,\n    cleanupState,\n  };\n}; "],"names":["useGuidedSetupState","migrateSetup","input","version","__version","purpose","goal","collaboration","learningStyle","studyPreference","learningDifficulties","evaluationTypes","courseType","assessmentType","rest","projectName","testLevel","timeframe","studyFrequency","uploadedFiles","importantDates","courseFiles","testFiles","is_draft","initialSetup","migratedSetup","setup","setSetup","useState","DEFAULTS","extractedData","setExtractedData","syllabusFileName","setSyllabusFileName","contentData","setContentData","contentFileNames","setContentFileNames","isSyllabusAnalysisComplete","setIsSyllabusAnalysisComplete","isCourseContentAnalysisComplete","setIsCourseContentAnalysisComplete","isTestAnalysisComplete","setIsTestAnalysisComplete","hasUnsavedChanges","setHasUnsavedChanges","projectId","setProjectId","hasSyllabusUploadCompleted","setHasSyllabusUploadCompleted","handleOptionSelect","useCallback","field","value","prev","addDateToSetup","newDate","date","description","id","Date","now","removeDateFromSetup","index","filter","_","i","handleSyllabusUploadComplete","newProjectId","backendData","fileName","console","log","transformedData","transformBackendData","handleCourseContentUploadComplete","fileNames","files","map","file","File","type","handleTestUploadComplete","extractedTests","resetSyllabusUploadState","cleanupState"],"mappings":"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"}