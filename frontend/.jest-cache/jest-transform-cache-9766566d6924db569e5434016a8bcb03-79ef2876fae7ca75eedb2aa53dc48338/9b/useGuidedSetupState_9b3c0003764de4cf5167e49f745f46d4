ae9992e9e24f6c0bd91735e354c7db2b
'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useGuidedSetupState", {
    enumerable: true,
    get: function() {
        return useGuidedSetupState;
    }
});
const _react = require("react");
const _constants = require("../constants");
const _transformBackendData = require("../utils/transformBackendData");
// Migration function to handle v1 → v2 upgrades
function migrateSetup(input) {
    const version = input?.__version ?? 1;
    if (version === 2) {
        return input;
    }
    // v1 → v2 migration: drop deprecated fields, map what we can, set defaults
    const { purpose, goal, collaboration, learningStyle, studyPreference, learningDifficulties, evaluationTypes, courseType, assessmentType, ...rest } = input || {};
    return {
        ...rest,
        __version: 2,
        // Ensure all required fields have defaults
        projectName: rest.projectName || '',
        testLevel: rest.testLevel || '',
        timeframe: rest.timeframe || '',
        studyFrequency: rest.studyFrequency || '',
        uploadedFiles: rest.uploadedFiles || [],
        importantDates: rest.importantDates || [],
        courseFiles: rest.courseFiles || [],
        testFiles: rest.testFiles || [],
        is_draft: rest.is_draft ?? true
    };
}
const useGuidedSetupState = (initialSetup = {})=>{
    // Migrate any existing setup data
    const migratedSetup = migrateSetup(initialSetup);
    const [setup, setSetup] = (0, _react.useState)({
        ..._constants.DEFAULTS,
        ...migratedSetup
    });
    const [extractedData, setExtractedData] = (0, _react.useState)(null);
    const [syllabusFileName, setSyllabusFileName] = (0, _react.useState)('');
    const [contentData, setContentData] = (0, _react.useState)(null);
    const [contentFileNames, setContentFileNames] = (0, _react.useState)([]);
    const [isSyllabusAnalysisComplete, setIsSyllabusAnalysisComplete] = (0, _react.useState)(false);
    const [isCourseContentAnalysisComplete, setIsCourseContentAnalysisComplete] = (0, _react.useState)(false);
    const [isTestAnalysisComplete, setIsTestAnalysisComplete] = (0, _react.useState)(false);
    const [hasUnsavedChanges, setHasUnsavedChanges] = (0, _react.useState)(false);
    const [projectId, setProjectId] = (0, _react.useState)(null);
    const [hasSyllabusUploadCompleted, setHasSyllabusUploadCompleted] = (0, _react.useState)(false);
    const handleOptionSelect = (0, _react.useCallback)((field, value)=>{
        setSetup((prev)=>({
                ...prev,
                [field]: value
            }));
        setHasUnsavedChanges(true);
    }, []);
    const addDateToSetup = (0, _react.useCallback)((newDate)=>{
        if (!newDate.date || !newDate.description) return false;
        setSetup((prev)=>({
                ...prev,
                importantDates: [
                    ...prev.importantDates,
                    {
                        ...newDate,
                        id: `date-${Date.now()}`
                    }
                ]
            }));
        setHasUnsavedChanges(true);
        return true;
    }, []);
    const removeDateFromSetup = (0, _react.useCallback)((index)=>{
        setSetup((prev)=>({
                ...prev,
                importantDates: prev.importantDates.filter((_, i)=>i !== index)
            }));
        setHasUnsavedChanges(true);
    }, []);
    const handleSyllabusUploadComplete = (0, _react.useCallback)((newProjectId, backendData, fileName)=>{
        // Prevent multiple calls
        if (hasSyllabusUploadCompleted) {
            console.log('Syllabus upload already completed, skipping duplicate call');
            return;
        }
        setProjectId(newProjectId);
        const transformedData = (0, _transformBackendData.transformBackendData)(backendData);
        setExtractedData(transformedData);
        setSyllabusFileName(fileName || 'Syllabus');
        setIsSyllabusAnalysisComplete(true);
        setHasUnsavedChanges(true);
        setHasSyllabusUploadCompleted(true);
    }, [
        hasSyllabusUploadCompleted
    ]);
    const handleCourseContentUploadComplete = (0, _react.useCallback)((backendData, fileNames, files)=>{
        setContentData(backendData);
        setContentFileNames(fileNames);
        setIsCourseContentAnalysisComplete(true);
        setHasUnsavedChanges(true);
        // Update the setup state with the uploaded files
        setSetup((prev)=>({
                ...prev,
                courseFiles: files || fileNames.map((fileName, index)=>{
                    // Create a File object for each processed file
                    const file = new File([
                        ''
                    ], fileName, {
                        type: 'application/pdf'
                    });
                    return file;
                })
            }));
    }, []);
    const handleTestUploadComplete = (0, _react.useCallback)((extractedTests, fileNames, files)=>{
        setIsTestAnalysisComplete(true);
        setHasUnsavedChanges(true);
        // Update the setup state with the uploaded files
        setSetup((prev)=>({
                ...prev,
                testFiles: files || fileNames.map((fileName, index)=>{
                    // Create a File object for each processed file
                    const file = new File([
                        ''
                    ], fileName, {
                        type: 'application/pdf'
                    });
                    return file;
                })
            }));
    }, []);
    const resetSyllabusUploadState = (0, _react.useCallback)(()=>{
        setIsSyllabusAnalysisComplete(false);
        setHasSyllabusUploadCompleted(false);
    }, []);
    const cleanupState = (0, _react.useCallback)(()=>{
        setSetup(_constants.DEFAULTS);
        setProjectId(null);
        setExtractedData(null);
        setSyllabusFileName('');
        setContentData(null);
        setContentFileNames([]);
        setIsCourseContentAnalysisComplete(false);
        setIsTestAnalysisComplete(false);
        setIsSyllabusAnalysisComplete(false);
        setHasUnsavedChanges(false);
        setHasSyllabusUploadCompleted(false);
    }, []);
    return {
        setup,
        setSetup,
        extractedData,
        setExtractedData,
        syllabusFileName,
        setSyllabusFileName,
        contentData,
        setContentData,
        contentFileNames,
        setContentFileNames,
        isSyllabusAnalysisComplete,
        setIsSyllabusAnalysisComplete,
        isCourseContentAnalysisComplete,
        setIsCourseContentAnalysisComplete,
        isTestAnalysisComplete,
        setIsTestAnalysisComplete,
        hasUnsavedChanges,
        setHasUnsavedChanges,
        projectId,
        setProjectId,
        hasSyllabusUploadCompleted,
        setHasSyllabusUploadCompleted,
        handleOptionSelect,
        addDateToSetup,
        removeDateFromSetup,
        handleSyllabusUploadComplete,
        handleCourseContentUploadComplete,
        handleTestUploadComplete,
        resetSyllabusUploadState,
        cleanupState
    };
};

//# sourceMappingURL=data:application/json;base64,