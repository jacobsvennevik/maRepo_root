{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/features/quiz/hooks/index.ts"],"sourcesContent":["/**\n * Quiz Feature Shared Hooks\n * \n * Reusable hooks for common quiz functionality to improve code reuse\n * and maintainability.\n */\n\nimport { useState, useEffect, useCallback, useRef } from 'react';\nimport { useForm, FieldValues } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\n\n// ============================================================================\n// File Management Hook\n// ============================================================================\n\ninterface UseFileManagementOptions {\n  projectId: string;\n  onFilesChange?: (files: File[]) => void;\n  onSelectedFilesChange?: (fileIds: (string | number)[]) => void;\n}\n\ninterface UseFileManagementReturn {\n  uploadedFiles: File[];\n  selectedExistingFileIds: (string | number)[];\n  existingSearch: string;\n  isLoadingFiles: boolean;\n  projectFiles: any[];\n  handleFileUpload: (files: File[]) => void;\n  removeUploadedFile: (index: number) => void;\n  toggleExistingFile: (fileId: string | number) => void;\n  setExistingSearch: (search: string) => void;\n  loadProjectFiles: () => Promise<void>;\n  clearFiles: () => void;\n}\n\nexport const useFileManagement = ({\n  projectId,\n  onFilesChange,\n  onSelectedFilesChange,\n}: UseFileManagementOptions): UseFileManagementReturn => {\n  const [uploadedFiles, setUploadedFiles] = useState<File[]>([]);\n  const [selectedExistingFileIds, setSelectedExistingFileIds] = useState<(string | number)[]>([]);\n  const [existingSearch, setExistingSearch] = useState<string>('');\n  const [isLoadingFiles, setIsLoadingFiles] = useState<boolean>(false);\n  const [projectFiles, setProjectFiles] = useState<any[]>([]);\n\n  const handleFileUpload = useCallback((files: File[]) => {\n    setUploadedFiles(prev => [...prev, ...files]);\n    onFilesChange?.([...uploadedFiles, ...files]);\n  }, [onFilesChange, uploadedFiles]);\n\n  const removeUploadedFile = useCallback((index: number) => {\n    setUploadedFiles(prev => {\n      const newFiles = prev.filter((_, i) => i !== index);\n      onFilesChange?.(newFiles);\n      return newFiles;\n    });\n  }, [onFilesChange]);\n\n  const toggleExistingFile = useCallback((fileId: string | number) => {\n    setSelectedExistingFileIds(prev => {\n      const newSelection = prev.includes(fileId) \n        ? prev.filter(id => id !== fileId)\n        : [...prev, fileId];\n      onSelectedFilesChange?.(newSelection);\n      return newSelection;\n    });\n  }, [onSelectedFilesChange]);\n\n  const loadProjectFiles = useCallback(async () => {\n    setIsLoadingFiles(true);\n    try {\n      // TODO: Replace with actual API call\n      const mockFiles = [\n        { id: 1, name: 'lecture-notes.pdf', file_type: 'pdf', uploaded_at: '2024-01-15', file_size: 1024000 },\n        { id: 2, name: 'textbook-chapter.docx', file_type: 'docx', uploaded_at: '2024-01-14', file_size: 2048000 },\n        { id: 3, name: 'practice-problems.pdf', file_type: 'pdf', uploaded_at: '2024-01-13', file_size: 512000 },\n      ];\n      setProjectFiles(mockFiles);\n    } catch (error) {\n      console.error('Failed to load project files:', error);\n    } finally {\n      setIsLoadingFiles(false);\n    }\n  }, []);\n\n  const clearFiles = useCallback(() => {\n    setUploadedFiles([]);\n    setSelectedExistingFileIds([]);\n    setExistingSearch('');\n    onFilesChange?.([]);\n    onSelectedFilesChange?.([]);\n  }, [onFilesChange, onSelectedFilesChange]);\n\n  return {\n    uploadedFiles,\n    selectedExistingFileIds,\n    existingSearch,\n    isLoadingFiles,\n    projectFiles,\n    handleFileUpload,\n    removeUploadedFile,\n    toggleExistingFile,\n    setExistingSearch,\n    loadProjectFiles,\n    clearFiles,\n  };\n};\n\n// ============================================================================\n// Quiz Generation Hook\n// ============================================================================\n\ninterface UseQuizGenerationOptions {\n  projectId: string;\n  onSuccess?: (quiz: any) => void;\n  onError?: (error: string) => void;\n}\n\ninterface UseQuizGenerationReturn {\n  isGenerating: boolean;\n  generatedQuiz: any;\n  error: string | null;\n  generateQuiz: (config: any) => Promise<void>;\n  clearError: () => void;\n  reset: () => void;\n}\n\nexport const useQuizGeneration = ({\n  projectId,\n  onSuccess,\n  onError,\n}: UseQuizGenerationOptions): UseQuizGenerationReturn => {\n  const [isGenerating, setIsGenerating] = useState<boolean>(false);\n  const [generatedQuiz, setGeneratedQuiz] = useState<any>(null);\n  const [error, setError] = useState<string | null>(null);\n\n  const generateQuiz = useCallback(async (config: any) => {\n    setIsGenerating(true);\n    setError(null);\n\n    try {\n      // TODO: Replace with actual API call\n      const mockQuiz = {\n        id: `quiz_${Date.now()}`,\n        title: config.title || 'Generated Quiz',\n        questions: Array.from({ length: config.max_questions || 10 }, (_, i) => ({\n          id: `q_${i + 1}`,\n          text: `Question ${i + 1}`,\n          type: 'multiple_choice',\n          choices: ['Option A', 'Option B', 'Option C', 'Option D'],\n          correct_choice_index: 0,\n        })),\n      };\n\n      setGeneratedQuiz(mockQuiz);\n      onSuccess?.(mockQuiz);\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to generate quiz';\n      setError(errorMessage);\n      onError?.(errorMessage);\n    } finally {\n      setIsGenerating(false);\n    }\n  }, [onSuccess, onError]);\n\n  const clearError = useCallback(() => {\n    setError(null);\n  }, []);\n\n  const reset = useCallback(() => {\n    setGeneratedQuiz(null);\n    setError(null);\n    setIsGenerating(false);\n  }, []);\n\n  return {\n    isGenerating,\n    generatedQuiz,\n    error,\n    generateQuiz,\n    clearError,\n    reset,\n  };\n};\n\n// ============================================================================\n// Form Validation Hook\n// ============================================================================\n\ninterface UseFormValidationOptions<T> {\n  schema: any;\n  defaultValues?: Partial<T>;\n  onValidationChange?: (isValid: boolean) => void;\n}\n\ninterface UseFormValidationReturn<T> {\n  form: any;\n  isValid: boolean;\n  errors: any;\n  validateField: (fieldName: keyof T) => Promise<boolean>;\n  validateForm: () => Promise<boolean>;\n  resetForm: () => void;\n  setFormValue: (fieldName: keyof T, value: any) => void;\n  getFormValue: (fieldName: keyof T) => any;\n}\n\nexport const useFormValidation = <T extends FieldValues>({\n  schema,\n  defaultValues,\n  onValidationChange,\n}: UseFormValidationOptions<T>): UseFormValidationReturn<T> => {\n  const form = useForm<T>({\n    resolver: zodResolver(schema),\n    defaultValues: defaultValues as any,\n  });\n\n  const { handleSubmit, trigger, watch, setValue, getValues, formState } = form;\n\n  const isValid = formState.isValid;\n  const errors = formState.errors as any;\n\n  useEffect(() => {\n    onValidationChange?.(isValid);\n  }, [isValid, onValidationChange]);\n\n  const validateField = useCallback(async (fieldName: keyof T): Promise<boolean> => {\n    const result = await trigger(fieldName as any);\n    return result;\n  }, [trigger]);\n\n  const validateForm = useCallback(async (): Promise<boolean> => {\n    const result = await trigger();\n    return result;\n  }, [trigger]);\n\n  const resetForm = useCallback(() => {\n    form.reset();\n  }, [form]);\n\n  const setFormValue = useCallback((fieldName: keyof T, value: any) => {\n    setValue(fieldName as any, value);\n  }, [setValue]);\n\n  const getFormValue = useCallback((fieldName: keyof T) => {\n    return getValues(fieldName as any);\n  }, [getValues]);\n\n  return {\n    form,\n    isValid,\n    errors,\n    validateField,\n    validateForm,\n    resetForm,\n    setFormValue,\n    getFormValue,\n  };\n};\n\n// ============================================================================\n// Wizard Navigation Hook\n// ============================================================================\n\ninterface UseWizardNavigationOptions {\n  totalSteps: number;\n  onStepChange?: (step: number) => void;\n  validateStep?: (step: number) => Promise<boolean>;\n}\n\ninterface UseWizardNavigationReturn {\n  currentStep: number;\n  canGoNext: boolean;\n  canGoPrevious: boolean;\n  goNext: () => Promise<void>;\n  goPrevious: () => void;\n  goToStep: (step: number) => Promise<void>;\n  reset: () => void;\n}\n\nexport const useWizardNavigation = ({\n  totalSteps,\n  onStepChange,\n  validateStep,\n}: UseWizardNavigationOptions): UseWizardNavigationReturn => {\n  const [currentStep, setCurrentStep] = useState<number>(1);\n\n  const canGoNext = currentStep < totalSteps;\n  const canGoPrevious = currentStep > 1;\n\n  const goNext = useCallback(async () => {\n    if (!canGoNext) return;\n\n    // Skip validation on step 1 (method selection)\n    if (currentStep === 1) {\n      const nextStep = currentStep + 1;\n      setCurrentStep(nextStep);\n      onStepChange?.(nextStep);\n      return;\n    }\n\n    // Validate current step if validator provided\n    if (validateStep) {\n      const isValid = await validateStep(currentStep);\n      if (!isValid) return;\n    }\n\n    const nextStep = currentStep + 1;\n    setCurrentStep(nextStep);\n    onStepChange?.(nextStep);\n  }, [currentStep, canGoNext, validateStep, onStepChange]);\n\n  const goPrevious = useCallback(() => {\n    if (!canGoPrevious) return;\n    const prevStep = currentStep - 1;\n    setCurrentStep(prevStep);\n    onStepChange?.(prevStep);\n  }, [currentStep, canGoPrevious, onStepChange]);\n\n  const goToStep = useCallback(async (step: number) => {\n    if (step < 1 || step > totalSteps) return;\n    \n    // Validate current step if validator provided\n    if (validateStep && step > currentStep) {\n      const isValid = await validateStep(currentStep);\n      if (!isValid) return;\n    }\n\n    setCurrentStep(step);\n    onStepChange?.(step);\n  }, [currentStep, totalSteps, validateStep, onStepChange]);\n\n  const reset = useCallback(() => {\n    setCurrentStep(1);\n    onStepChange?.(1);\n  }, [onStepChange]);\n\n  return {\n    currentStep,\n    canGoNext,\n    canGoPrevious,\n    goNext,\n    goPrevious,\n    goToStep,\n    reset,\n  };\n};\n\n// ============================================================================\n// Auto-save Hook\n// ============================================================================\n\ninterface UseAutoSaveOptions<T> {\n  data: T;\n  key: string;\n  interval?: number;\n  onSave?: (data: T) => void;\n}\n\ninterface UseAutoSaveReturn {\n  isSaving: boolean;\n  lastSaved: Date | null;\n  save: () => void;\n  clear: () => void;\n}\n\nexport const useAutoSave = <T>({\n  data,\n  key,\n  interval = 30000, // 30 seconds\n  onSave,\n}: UseAutoSaveOptions<T>): UseAutoSaveReturn => {\n  const [isSaving, setIsSaving] = useState<boolean>(false);\n  const [lastSaved, setLastSaved] = useState<Date | null>(null);\n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n\n  const save = useCallback(() => {\n    setIsSaving(true);\n    try {\n      localStorage.setItem(key, JSON.stringify(data));\n      setLastSaved(new Date());\n      onSave?.(data);\n    } catch (error) {\n      console.warn('Failed to save data:', error);\n    } finally {\n      setIsSaving(false);\n    }\n  }, [data, key, onSave]);\n\n  const clear = useCallback(() => {\n    try {\n      localStorage.removeItem(key);\n      setLastSaved(null);\n    } catch (error) {\n      console.warn('Failed to clear data:', error);\n    }\n  }, [key]);\n\n  useEffect(() => {\n    if (interval > 0) {\n      intervalRef.current = setInterval(save, interval);\n    }\n\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, [save, interval]);\n\n  return {\n    isSaving,\n    lastSaved,\n    save,\n    clear,\n  };\n};\n"],"names":["useAutoSave","useFileManagement","useFormValidation","useQuizGeneration","useWizardNavigation","projectId","onFilesChange","onSelectedFilesChange","uploadedFiles","setUploadedFiles","useState","selectedExistingFileIds","setSelectedExistingFileIds","existingSearch","setExistingSearch","isLoadingFiles","setIsLoadingFiles","projectFiles","setProjectFiles","handleFileUpload","useCallback","files","prev","removeUploadedFile","index","newFiles","filter","_","i","toggleExistingFile","fileId","newSelection","includes","id","loadProjectFiles","mockFiles","name","file_type","uploaded_at","file_size","error","console","clearFiles","onSuccess","onError","isGenerating","setIsGenerating","generatedQuiz","setGeneratedQuiz","setError","generateQuiz","config","mockQuiz","Date","now","title","questions","Array","from","length","max_questions","text","type","choices","correct_choice_index","errorMessage","Error","message","clearError","reset","schema","defaultValues","onValidationChange","form","useForm","resolver","zodResolver","handleSubmit","trigger","watch","setValue","getValues","formState","isValid","errors","useEffect","validateField","fieldName","result","validateForm","resetForm","setFormValue","value","getFormValue","totalSteps","onStepChange","validateStep","currentStep","setCurrentStep","canGoNext","canGoPrevious","goNext","nextStep","goPrevious","prevStep","goToStep","step","data","key","interval","onSave","isSaving","setIsSaving","lastSaved","setLastSaved","intervalRef","useRef","save","localStorage","setItem","JSON","stringify","warn","clear","removeItem","current","setInterval","clearInterval"],"mappings":"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"}