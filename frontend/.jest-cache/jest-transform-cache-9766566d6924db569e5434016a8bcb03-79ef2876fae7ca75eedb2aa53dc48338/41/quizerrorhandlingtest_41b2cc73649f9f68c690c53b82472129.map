{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/features/quiz/tests/quiz-error-handling.test.tsx"],"sourcesContent":["import React from 'react';\nimport { render, screen, waitFor, act } from '@testing-library/react';\nimport { vi, describe, it, expect, beforeEach, afterEach } from 'vitest';\nimport axios from 'axios';\nimport { axiosGeneration } from '@/lib/axios';\nimport ProjectTests from '@/app/projects/[projectId]/tests/page';\n\n// Mock the axios instances\nvi.mock('@/lib/axios', () => ({\n  axiosGeneration: {\n    get: vi.fn(),\n    post: vi.fn(),\n  },\n  axiosApi: {\n    get: vi.fn(),\n  }\n}));\n\n// Mock the project context/provider\nvi.mock('@/contexts/AuthContext', () => ({\n  useAuth: () => ({\n    user: { id: '1', email: 'test@example.com' },\n    isAuthenticated: true,\n  }),\n}));\n\n// Mock router\nvi.mock('next/navigation', () => ({\n  useParams: () => ({ projectId: '203062be-58d0-4f98-bbd4-33b4ce081276' }),\n  useRouter: () => ({\n    push: vi.fn(),\n    back: vi.fn(),\n  }),\n}));\n\nconst mockAxiosGeneration = axiosGeneration as any;\n\ndescribe('Quiz Center Error Handling', () => {\n  beforeEach(() => {\n    vi.clearAllMocks();\n  });\n\n  afterEach(() => {\n    vi.restoreAllMocks();\n  });\n\n  it('should handle network timeout errors gracefully', async () => {\n    // Mock timeout error for diagnostic sessions\n    const timeoutError = new Error('Network Error');\n    timeoutError.name = 'AxiosError';\n    (timeoutError as any).code = 'ECONNABORTED';\n    (timeoutError as any).message = 'timeout of 30000ms exceeded';\n\n    mockAxiosGeneration.get.mockRejectedValueOnce(timeoutError);\n\n    render(<ProjectTests />);\n\n    // Should show loading state initially\n    expect(screen.getByText(/loading/i) || screen.getByRole('progressbar')).toBeInTheDocument();\n\n    // Should show error message after timeout\n    await waitFor(() => {\n      expect(screen.getByText(/error/i) || screen.getByText(/failed/i) || screen.getByText(/try again/i)).toBeInTheDocument();\n    }, { timeout: 5000 });\n\n    // Verify the correct API call was attempted\n    expect(mockAxiosGeneration.get).toHaveBeenCalledWith(\n      'diagnostic-sessions/',\n      expect.objectContaining({\n        params: { project: '203062be-58d0-4f98-bbd4-33b4ce081276' }\n      })\n    );\n  });\n\n  it('should handle database connection errors (too many clients)', async () => {\n    // Mock PostgreSQL connection error\n    const dbError = new Error('Database connection failed');\n    (dbError as any).response = {\n      status: 500,\n      data: { \n        detail: 'connection to server failed: FATAL: sorry, too many clients already'\n      }\n    };\n\n    mockAxiosGeneration.get.mockRejectedValueOnce(dbError);\n\n    render(<ProjectTests />);\n\n    // Should show appropriate error message\n    await waitFor(() => {\n      expect(screen.getByText(/error/i) || screen.getByText(/connection/i) || screen.getByText(/server/i)).toBeInTheDocument();\n    });\n  });\n\n  it('should recover when API calls succeed after initial failure', async () => {\n    const mockSessions = [\n      {\n        id: '1',\n        title: 'Test Quiz 1',\n        created_at: '2025-09-19T07:00:00Z',\n        status: 'completed',\n      }\n    ];\n\n    // First call fails, second succeeds\n    mockAxiosGeneration.get\n      .mockRejectedValueOnce(new Error('Network timeout'))\n      .mockResolvedValueOnce({ data: mockSessions });\n\n    render(<ProjectTests />);\n\n    // Should show error initially\n    await waitFor(() => {\n      expect(screen.getByText(/error/i) || screen.getByText(/failed/i)).toBeInTheDocument();\n    });\n\n    // Simulate retry (component should have retry mechanism)\n    // This could be triggered by a retry button or automatic retry\n    await act(async () => {\n      // If there's a retry button, click it\n      const retryButton = screen.queryByText(/retry/i) || screen.queryByText(/try again/i);\n      if (retryButton) {\n        retryButton.click();\n      }\n    });\n\n    // Should show sessions after successful retry\n    await waitFor(() => {\n      expect(screen.getByText('Test Quiz 1') || screen.getByText(/quiz/i)).toBeInTheDocument();\n    });\n  });\n\n  it('should handle empty quiz sessions gracefully', async () => {\n    // Mock empty response\n    mockAxiosGeneration.get.mockResolvedValueOnce({ data: [] });\n\n    render(<ProjectTests />);\n\n    // Should show empty state message\n    await waitFor(() => {\n      expect(screen.getByText(/no quizzes/i) || screen.getByText(/generate your first quiz/i)).toBeInTheDocument();\n    });\n  });\n\n  it('should handle quiz generation errors', async () => {\n    // Mock successful sessions fetch but failed generation\n    mockAxiosGeneration.get.mockResolvedValueOnce({ data: [] });\n    \n    const generationError = new Error('Generation failed');\n    (generationError as any).response = {\n      status: 400,\n      data: { detail: 'Insufficient project materials for quiz generation' }\n    };\n    \n    mockAxiosGeneration.post.mockRejectedValueOnce(generationError);\n\n    render(<ProjectTests />);\n\n    // Wait for component to load\n    await waitFor(() => {\n      expect(screen.getByText(/generate/i) || screen.getByText(/create/i)).toBeInTheDocument();\n    });\n\n    // Simulate clicking generate quiz button\n    const generateButton = screen.getByText(/auto-generate/i) || screen.getByText(/generate/i);\n    if (generateButton) {\n      await act(async () => {\n        generateButton.click();\n      });\n\n      // Should show generation error\n      await waitFor(() => {\n        expect(screen.getByText(/error/i) || screen.getByText(/failed/i) || screen.getByText(/insufficient/i)).toBeInTheDocument();\n      });\n    }\n  });\n\n  it('should handle concurrent API calls without duplicate requests', async () => {\n    // Mock delay to simulate slow response\n    const delayedPromise = new Promise(resolve => \n      setTimeout(() => resolve({ data: [] }), 1000)\n    );\n    \n    mockAxiosGeneration.get.mockReturnValueOnce(delayedPromise);\n\n    render(<ProjectTests />);\n\n    // Verify only one API call is made despite potential re-renders\n    await waitFor(() => {\n      expect(mockAxiosGeneration.get).toHaveBeenCalledTimes(1);\n    });\n  });\n});\n"],"names":["vi","mock","axiosGeneration","get","fn","post","axiosApi","useAuth","user","id","email","isAuthenticated","useParams","projectId","useRouter","push","back","mockAxiosGeneration","describe","beforeEach","clearAllMocks","afterEach","restoreAllMocks","it","timeoutError","Error","name","code","message","mockRejectedValueOnce","render","ProjectTests","expect","screen","getByText","getByRole","toBeInTheDocument","waitFor","timeout","toHaveBeenCalledWith","objectContaining","params","project","dbError","response","status","data","detail","mockSessions","title","created_at","mockResolvedValueOnce","act","retryButton","queryByText","click","generationError","generateButton","delayedPromise","Promise","resolve","setTimeout","mockReturnValueOnce","toHaveBeenCalledTimes"],"mappings":"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"}