44debb3bbc93175c0ae0927b0c2c5c4a
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    createComponentTest: function() {
        return createComponentTest;
    },
    createFileUploadTest: function() {
        return createFileUploadTest;
    },
    createFileValidationTestCases: function() {
        return createFileValidationTestCases;
    },
    createMockAPIResponses: function() {
        return createMockAPIResponses;
    },
    createMockDataFactory: function() {
        return createMockDataFactory;
    },
    createProjectSetupTest: function() {
        return createProjectSetupTest;
    },
    createTestEnvironment: function() {
        return createTestEnvironment;
    },
    createTestFactories: function() {
        return createTestFactories;
    },
    createWizardTest: function() {
        return createWizardTest;
    },
    testFactories: function() {
        return testFactories;
    }
});
const createTestFactories = ()=>{
    /**
   * File upload test factory
   */ const createFileUploadTest = (options = {})=>{
        const { fileName = 'test.pdf', fileType = 'application/pdf', fileSize = 1024 * 1024, content = 'test content', multiple = false } = options;
        const file = new File([
            content
        ], fileName, {
            type: fileType
        });
        // Override size if specified
        if (fileSize !== 1024 * 1024) {
            Object.defineProperty(file, 'size', {
                value: fileSize
            });
        }
        return {
            file,
            files: multiple ? [
                file
            ] : file,
            fileName,
            fileType,
            fileSize,
            content
        };
    };
    /**
   * Project setup test factory
   */ const createProjectSetupTest = (overrides = {})=>({
            projectName: 'Test Project',
            purpose: 'school',
            testLevel: 'midterm',
            courseFiles: [],
            testFiles: [],
            importantDates: [],
            uploadedFiles: [],
            timeframe: 'semester',
            goal: 'pass',
            studyFrequency: 'weekly',
            collaboration: 'solo',
            ...overrides
        });
    /**
   * Mock API responses factory
   */ const createMockAPIResponses = (scenarios)=>{
        const mockResponses = new Map();
        scenarios.forEach((scenario)=>{
            const key = `${scenario.method}:${scenario.endpoint}`;
            mockResponses.set(key, {
                status: scenario.status || 200,
                response: scenario.response,
                delay: scenario.delay || 0
            });
        });
        return {
            getResponse: (method, endpoint)=>{
                const key = `${method}:${endpoint}`;
                return mockResponses.get(key);
            },
            getAllResponses: ()=>Array.from(mockResponses.entries()),
            clear: ()=>mockResponses.clear()
        };
    };
    /**
   * Component test factory
   */ const createComponentTest = (Component, options = {})=>{
        const { props = {}, withProviders = true, mockRouter = true, mockAPI = true } = options;
        return {
            Component,
            props,
            withProviders,
            mockRouter,
            mockAPI,
            render: ()=>{
                // This will be implemented with the render utilities
                return {
                    Component,
                    props
                };
            }
        };
    };
    /**
   * Wizard test factory
   */ const createWizardTest = (steps)=>{
        return {
            steps,
            currentStep: 0,
            totalSteps: steps.length,
            getCurrentStep: ()=>steps[0],
            getStepById: (id)=>steps.find((step)=>step.id === id),
            getAllSteps: ()=>steps
        };
    };
    /**
   * File validation test cases factory
   */ const createFileValidationTestCases = ()=>{
        return [
            // Valid files
            {
                name: 'valid.pdf',
                type: 'application/pdf',
                size: 1024 * 1024,
                valid: true,
                description: 'Valid PDF file'
            },
            {
                name: 'valid.jpg',
                type: 'image/jpeg',
                size: 512 * 1024,
                valid: true,
                description: 'Valid JPEG image'
            },
            {
                name: 'valid.png',
                type: 'image/png',
                size: 256 * 1024,
                valid: true,
                description: 'Valid PNG image'
            },
            // Invalid files
            {
                name: 'invalid.txt',
                type: 'text/plain',
                size: 1024,
                valid: false,
                description: 'Invalid file type'
            },
            {
                name: 'oversized.pdf',
                type: 'application/pdf',
                size: 16 * 1024 * 1024,
                valid: false,
                description: 'File too large (>15MB)'
            },
            {
                name: 'empty.pdf',
                type: 'application/pdf',
                size: 0,
                valid: false,
                description: 'Empty file'
            }
        ];
    };
    /**
   * Test environment factory
   */ const createTestEnvironment = (env = {})=>{
        const defaultEnv = {
            NODE_ENV: 'test',
            NEXT_PUBLIC_TEST_MODE: 'true',
            NEXT_PUBLIC_API_URL: 'http://localhost:3000/backend/api',
            ...env
        };
        return {
            env: defaultEnv,
            setEnv: (key, value)=>{
                defaultEnv[key] = value;
            },
            resetEnv: ()=>{
                Object.keys(defaultEnv).forEach((key)=>{
                    if (![
                        'NODE_ENV'
                    ].includes(key)) {
                        delete defaultEnv[key];
                    }
                });
            }
        };
    };
    /**
   * Mock data factory for different test scenarios
   */ const createMockDataFactory = ()=>{
        const mockData = {
            // Upload responses
            uploadSuccess: {
                id: 123,
                status: 'completed',
                original_text: 'Mock test content',
                metadata: {
                    course_title: 'Natural Language Interaction',
                    test_title: 'Mock Test',
                    source_file: 'test.pdf'
                }
            },
            uploadError: {
                error: 'Upload failed',
                status: 400,
                message: 'Invalid file format'
            },
            // Project data
            project: {
                id: 'project-123',
                name: 'Test Project',
                project_type: 'school',
                created_at: '2024-01-01T00:00:00Z',
                updated_at: '2024-01-01T00:00:00Z'
            },
            // Analysis results
            analysisResult: {
                id: 123,
                status: 'completed',
                original_text: 'Language Technology Quiz',
                processed_data: {
                    test_type: 'Quiz',
                    topics_covered: [
                        'Natural Language Processing',
                        'Machine Learning'
                    ],
                    difficulty_level: 'Intermediate',
                    estimated_duration: '30 minutes'
                }
            }
        };
        return {
            get: (key)=>mockData[key],
            getAll: ()=>mockData,
            create: (key, data)=>{
                mockData[key] = data;
            }
        };
    };
    return {
        createFileUploadTest,
        createProjectSetupTest,
        createMockAPIResponses,
        createComponentTest,
        createWizardTest,
        createFileValidationTestCases,
        createTestEnvironment,
        createMockDataFactory
    };
};
const { createFileUploadTest, createProjectSetupTest, createMockAPIResponses, createComponentTest, createWizardTest, createFileValidationTestCases, createTestEnvironment, createMockDataFactory } = createTestFactories();
const testFactories = createTestFactories();

//# sourceMappingURL=data:application/json;base64,