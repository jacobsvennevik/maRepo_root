{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/test-utils/factories/index.ts"],"sourcesContent":["import { ProjectSetup } from '../../features/projects/types/index';\n\n// Types for test factories\nexport interface FileUploadTestOptions {\n  fileName?: string;\n  fileType?: string;\n  fileSize?: number;\n  content?: string;\n  multiple?: boolean;\n}\n\nexport interface APIScenario {\n  endpoint: string;\n  method: 'GET' | 'POST' | 'PUT' | 'DELETE';\n  response: any;\n  status?: number;\n  delay?: number;\n}\n\nexport interface ComponentTestOptions {\n  props?: Record<string, any>;\n  withProviders?: boolean;\n  mockRouter?: boolean;\n  mockAPI?: boolean;\n}\n\nexport interface WizardStep {\n  id: string;\n  title: string;\n  component: React.ComponentType<any>;\n  props?: Record<string, any>;\n}\n\n/**\n * Centralized test factories for creating consistent test data\n */\nexport const createTestFactories = () => {\n  /**\n   * File upload test factory\n   */\n  const createFileUploadTest = (options: FileUploadTestOptions = {}) => {\n    const {\n      fileName = 'test.pdf',\n      fileType = 'application/pdf',\n      fileSize = 1024 * 1024, // 1MB default\n      content = 'test content',\n      multiple = false\n    } = options;\n\n    const file = new File([content], fileName, { type: fileType }) as File;\n    \n    // Override size if specified\n    if (fileSize !== 1024 * 1024) {\n      Object.defineProperty(file, 'size', { value: fileSize });\n    }\n\n    return {\n      file,\n      files: multiple ? [file] : file,\n      fileName,\n      fileType,\n      fileSize,\n      content\n    };\n  };\n\n  /**\n   * Project setup test factory\n   */\n  const createProjectSetupTest = (overrides: Partial<ProjectSetup> = {}): ProjectSetup => ({\n    projectName: 'Test Project',\n    purpose: 'school' as const,\n    testLevel: 'midterm' as const,\n    courseFiles: [],\n    testFiles: [],\n    importantDates: [],\n    uploadedFiles: [],\n    timeframe: 'semester' as const,\n    goal: 'pass' as const,\n    studyFrequency: 'weekly' as const,\n    collaboration: 'solo' as const,\n    ...overrides,\n  });\n\n  /**\n   * Mock API responses factory\n   */\n  const createMockAPIResponses = (scenarios: APIScenario[]) => {\n    const mockResponses = new Map();\n    \n    scenarios.forEach(scenario => {\n      const key = `${scenario.method}:${scenario.endpoint}`;\n      mockResponses.set(key, {\n        status: scenario.status || 200,\n        response: scenario.response,\n        delay: scenario.delay || 0\n      });\n    });\n\n    return {\n      getResponse: (method: string, endpoint: string) => {\n        const key = `${method}:${endpoint}`;\n        return mockResponses.get(key);\n      },\n      getAllResponses: () => Array.from(mockResponses.entries()),\n      clear: () => mockResponses.clear()\n    };\n  };\n\n  /**\n   * Component test factory\n   */\n  const createComponentTest = (Component: React.ComponentType<any>, options: ComponentTestOptions = {}) => {\n    const {\n      props = {},\n      withProviders = true,\n      mockRouter = true,\n      mockAPI = true\n    } = options;\n\n    return {\n      Component,\n      props,\n      withProviders,\n      mockRouter,\n      mockAPI,\n      render: () => {\n        // This will be implemented with the render utilities\n        return { Component, props };\n      }\n    };\n  };\n\n  /**\n   * Wizard test factory\n   */\n  const createWizardTest = (steps: WizardStep[]) => {\n    return {\n      steps,\n      currentStep: 0,\n      totalSteps: steps.length,\n      getCurrentStep: () => steps[0],\n      getStepById: (id: string) => steps.find(step => step.id === id),\n      getAllSteps: () => steps\n    };\n  };\n\n  /**\n   * File validation test cases factory\n   */\n  const createFileValidationTestCases = () => {\n    return [\n      // Valid files\n      { \n        name: 'valid.pdf', \n        type: 'application/pdf', \n        size: 1024 * 1024, \n        valid: true, \n        description: 'Valid PDF file' \n      },\n      { \n        name: 'valid.jpg', \n        type: 'image/jpeg', \n        size: 512 * 1024, \n        valid: true, \n        description: 'Valid JPEG image' \n      },\n      { \n        name: 'valid.png', \n        type: 'image/png', \n        size: 256 * 1024, \n        valid: true, \n        description: 'Valid PNG image' \n      },\n      // Invalid files\n      { \n        name: 'invalid.txt', \n        type: 'text/plain', \n        size: 1024, \n        valid: false, \n        description: 'Invalid file type' \n      },\n      { \n        name: 'oversized.pdf', \n        type: 'application/pdf', \n        size: 16 * 1024 * 1024, \n        valid: false, \n        description: 'File too large (>15MB)' \n      },\n      { \n        name: 'empty.pdf', \n        type: 'application/pdf', \n        size: 0, \n        valid: false, \n        description: 'Empty file' \n      }\n    ];\n  };\n\n  /**\n   * Test environment factory\n   */\n  const createTestEnvironment = (env: Record<string, string> = {}) => {\n    const defaultEnv: Record<string, string> = {\n      NODE_ENV: 'test',\n      NEXT_PUBLIC_TEST_MODE: 'true',\n      NEXT_PUBLIC_API_URL: 'http://localhost:3000/backend/api',\n      ...env\n    };\n\n    return {\n      env: defaultEnv,\n      setEnv: (key: string, value: string) => {\n        defaultEnv[key] = value;\n      },\n      resetEnv: () => {\n        Object.keys(defaultEnv).forEach(key => {\n          if (!['NODE_ENV'].includes(key)) {\n            delete defaultEnv[key];\n          }\n        });\n      }\n    };\n  };\n\n  /**\n   * Mock data factory for different test scenarios\n   */\n  const createMockDataFactory = () => {\n    const mockData = {\n      // Upload responses\n      uploadSuccess: {\n        id: 123,\n        status: 'completed',\n        original_text: 'Mock test content',\n        metadata: {\n          course_title: 'Natural Language Interaction',\n          test_title: 'Mock Test',\n          source_file: 'test.pdf'\n        }\n      },\n      \n      uploadError: {\n        error: 'Upload failed',\n        status: 400,\n        message: 'Invalid file format'\n      },\n\n      // Project data\n      project: {\n        id: 'project-123',\n        name: 'Test Project',\n        project_type: 'school',\n        created_at: '2024-01-01T00:00:00Z',\n        updated_at: '2024-01-01T00:00:00Z'\n      },\n\n      // Analysis results\n      analysisResult: {\n        id: 123,\n        status: 'completed',\n        original_text: 'Language Technology Quiz',\n        processed_data: {\n          test_type: 'Quiz',\n          topics_covered: ['Natural Language Processing', 'Machine Learning'],\n          difficulty_level: 'Intermediate',\n          estimated_duration: '30 minutes'\n        }\n      }\n    };\n\n    return {\n      get: (key: keyof typeof mockData) => mockData[key],\n      getAll: () => mockData,\n      create: (key: string, data: any) => {\n        (mockData as any)[key] = data;\n      }\n    };\n  };\n\n  return {\n    createFileUploadTest,\n    createProjectSetupTest,\n    createMockAPIResponses,\n    createComponentTest,\n    createWizardTest,\n    createFileValidationTestCases,\n    createTestEnvironment,\n    createMockDataFactory\n  };\n};\n\n// Export individual factories for convenience\nexport const {\n  createFileUploadTest,\n  createProjectSetupTest,\n  createMockAPIResponses,\n  createComponentTest,\n  createWizardTest,\n  createFileValidationTestCases,\n  createTestEnvironment,\n  createMockDataFactory\n} = createTestFactories();\n\n// Export factory instance\nexport const testFactories = createTestFactories();"],"names":["createComponentTest","createFileUploadTest","createFileValidationTestCases","createMockAPIResponses","createMockDataFactory","createProjectSetupTest","createTestEnvironment","createTestFactories","createWizardTest","testFactories","options","fileName","fileType","fileSize","content","multiple","file","File","type","Object","defineProperty","value","files","overrides","projectName","purpose","testLevel","courseFiles","testFiles","importantDates","uploadedFiles","timeframe","goal","studyFrequency","collaboration","scenarios","mockResponses","Map","forEach","scenario","key","method","endpoint","set","status","response","delay","getResponse","get","getAllResponses","Array","from","entries","clear","Component","props","withProviders","mockRouter","mockAPI","render","steps","currentStep","totalSteps","length","getCurrentStep","getStepById","id","find","step","getAllSteps","name","size","valid","description","env","defaultEnv","NODE_ENV","NEXT_PUBLIC_TEST_MODE","NEXT_PUBLIC_API_URL","setEnv","resetEnv","keys","includes","mockData","uploadSuccess","original_text","metadata","course_title","test_title","source_file","uploadError","error","message","project","project_type","created_at","updated_at","analysisResult","processed_data","test_type","topics_covered","difficulty_level","estimated_duration","getAll","create","data"],"mappings":"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"}