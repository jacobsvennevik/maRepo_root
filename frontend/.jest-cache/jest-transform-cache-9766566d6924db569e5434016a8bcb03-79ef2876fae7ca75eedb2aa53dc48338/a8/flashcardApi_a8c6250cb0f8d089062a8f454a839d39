7b9d342a22fe7c3a53585ea0d00d39e2
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "flashcardApi", {
    enumerable: true,
    get: function() {
        return flashcardApi;
    }
});
const _axios = require("../../../lib/axios");
const _projectApi = require("../../../lib/projectApi");
class FlashcardApiService {
    async getProjectFlashcardSets(projectId) {
        const data = await (0, _projectApi.getProjectScoped)(`flashcard-sets/`, projectId);
        const sets = data.results || data || [];
        return sets;
    }
    async createProjectFlashcardSet(projectId, form) {
        const data = await (0, _projectApi.postProjectScoped)(`flashcard-sets/`, projectId, {
            title: form.title
        });
        return data;
    }
    async deleteFlashcardSet(setId) {
        console.group('üîç Delete Flashcard Set API');
        console.log('‚Üí DELETE /flashcard-sets/${setId}/');
        try {
            await _axios.axiosGeneration.delete(`flashcard-sets/${setId}/`);
            console.log('‚úÖ Set deleted successfully');
        } catch (err) {
            console.error('‚ùå Delete failure:', err);
            throw err;
        } finally{
            console.groupEnd();
        }
    }
    async getFlashcards(setId, projectId) {
        const endpoint = projectId ? `projects/${projectId}/flashcard-sets/${setId}/flashcards/` : `flashcards/?flashcard_set=${setId}`;
        const res = await _axios.axiosGeneration.get(endpoint);
        const responseData = res.data;
        const cards = responseData?.results || responseData || [];
        return Array.isArray(cards) ? cards : [];
    }
    async createFlashcard(setId, form) {
        console.group('üîç Create Flashcard API');
        console.log('‚Üí POST /flashcards/');
        console.log('‚Üí Payload:', form);
        try {
            const payload = {
                ...form,
                flashcard_set: setId
            };
            const response = await _axios.axiosGeneration.post(`/flashcards/`, payload);
            console.log('‚úÖ Created flashcard:', response.data);
            return response.data;
        } catch (err) {
            console.error('‚ùå Create failure:', err);
            throw err;
        } finally{
            console.groupEnd();
        }
    }
    async updateFlashcard(cardId, form) {
        console.group('üîç Update Flashcard API');
        console.log('‚Üí PUT /api/flashcards/${cardId}/');
        console.log('‚Üí Payload:', form);
        try {
            const response = await _axios.axiosGeneration.put(`/flashcards/${cardId}/`, form);
            console.log('‚úÖ Updated flashcard:', response.data);
            return response.data;
        } catch (err) {
            console.error('‚ùå Update failure:', err);
            throw err;
        } finally{
            console.groupEnd();
        }
    }
    async deleteFlashcard(cardId) {
        console.group('üîç Delete Flashcard API');
        console.log('‚Üí DELETE /api/flashcards/${cardId}/');
        try {
            await _axios.axiosGeneration.delete(`flashcards/${cardId}/`);
            console.log('‚úÖ Flashcard deleted successfully');
        } catch (err) {
            console.error('‚ùå Delete failure:', err);
            throw err;
        } finally{
            console.groupEnd();
        }
    }
    // Study Operations
    async markCardReviewed(cardId, wasCorrect) {
        console.group('üîç Mark Card Reviewed API');
        console.log('‚Üí POST /api/flashcards/${cardId}/review/');
        console.log('‚Üí Was correct:', wasCorrect);
        try {
            await _axios.axiosGeneration.post(`flashcards/${cardId}/review/`, {
                was_correct: wasCorrect
            });
            console.log('‚úÖ Card review recorded');
        } catch (err) {
            console.error('‚ùå Review failure:', err);
            throw err;
        } finally{
            console.groupEnd();
        }
    }
    // Stats Operations
    async calculateProjectStats(projectId, sets) {
        console.group('üìä Calculate Project Stats');
        console.log('‚Üí Calculating stats from', sets.length, 'sets');
        try {
            let totalCards = 0;
            let totalDueCards = 0;
            let totalLearningCards = 0;
            let totalReviewCards = 0;
            let totalMasteredCards = 0;
            for (const set of sets){
                if (set.flashcards) {
                    totalCards += set.flashcards.length;
                    for (const card of set.flashcards){
                        if (card.learning_state === 'learning') totalLearningCards++;
                        else if (card.learning_state === 'review') totalReviewCards++;
                        else if (card.learning_state === 'mastered') totalMasteredCards++;
                        if (card.next_review && new Date(card.next_review) <= new Date()) {
                            totalDueCards++;
                        }
                    }
                }
            }
            const retentionRate = totalCards > 0 ? Math.round(totalMasteredCards / totalCards * 100) : 0;
            const stats = {
                total_cards: totalCards,
                due_cards: totalDueCards,
                mastered_cards: totalMasteredCards,
                learning_cards: totalLearningCards,
                review_cards: totalReviewCards,
                retention_rate: retentionRate,
                streak_days: 0,
                next_review: new Date().toISOString()
            };
            console.log('‚úÖ Calculated stats:', stats);
            return stats;
        } catch (err) {
            console.error('‚ùå Stats calculation failure:', err);
            throw err;
        } finally{
            console.groupEnd();
        }
    }
}
const flashcardApi = new FlashcardApiService();

//# sourceMappingURL=data:application/json;base64,