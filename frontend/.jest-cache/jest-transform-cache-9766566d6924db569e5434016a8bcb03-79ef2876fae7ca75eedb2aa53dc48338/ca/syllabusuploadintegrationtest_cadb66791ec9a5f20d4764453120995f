7d4601c39fa3921a400570403bc98895
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _syllabusuploadstep = require("../syllabus-upload-step");
const _globals = require("@jest/globals");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock the dependencies
_globals.jest.mock('next/navigation', ()=>({
        useRouter: ()=>({
                push: _globals.jest.fn()
            })
    }));
// Mock fetch API
const mockFetch = _globals.jest.fn();
global.fetch = mockFetch;
_globals.jest.mock('../../../services/mock-data', ()=>({
        isTestMode: _globals.jest.fn(()=>true),
        MOCK_SYLLABUS_EXTRACTION: {
            course_title: 'Test Course',
            instructor: 'Test Instructor',
            topics: [
                'Topic 1',
                'Topic 2'
            ],
            exam_dates: [
                {
                    date: '2025-01-01',
                    description: 'Test Exam'
                }
            ]
        },
        createMockProcessedDocument: _globals.jest.fn(()=>({
                id: 123,
                original_text: 'Test text',
                metadata: {
                    course_title: 'Test Course'
                },
                status: 'completed'
            })),
        simulateProcessingDelay: _globals.jest.fn(()=>Promise.resolve())
    }));
// Mock the API service
_globals.jest.mock('../../../services/api', ()=>({
        createProject: _globals.jest.fn(()=>Promise.resolve({
                id: 'project-123',
                name: 'Test Project',
                project_type: 'school'
            }))
    }));
describe('SyllabusUploadStep Integration', ()=>{
    const mockOnUploadComplete = _globals.jest.fn();
    const mockOnNext = _globals.jest.fn();
    const mockOnBack = _globals.jest.fn();
    const mockOnSkip = _globals.jest.fn();
    const mockOnResetUploadState = _globals.jest.fn();
    beforeEach(()=>{
        _globals.jest.clearAllMocks();
        // Setup mock fetch responses
        mockFetch.mockImplementationOnce(()=>Promise.resolve({
                ok: true,
                json: ()=>Promise.resolve({
                        id: 123,
                        filename: 'test-syllabus.pdf',
                        status: 'pending'
                    })
            })).mockImplementationOnce(()=>Promise.resolve({
                ok: true,
                json: ()=>Promise.resolve({
                        message: 'Processing started',
                        document_id: 123,
                        task_id: 'task-123'
                    })
            })).mockImplementation(()=>Promise.resolve({
                ok: true,
                json: ()=>Promise.resolve({
                        id: 123,
                        status: 'completed',
                        metadata: {
                            course_name: 'Test Course',
                            instructor: 'Test Instructor',
                            topics: [
                                'Topic 1',
                                'Topic 2'
                            ],
                            exam_dates: [
                                {
                                    date: '2025-01-01',
                                    description: 'Test Exam'
                                }
                            ]
                        }
                    })
            }));
    });
    it('should show analyze button after file upload', async ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_syllabusuploadstep.SyllabusUploadStep, {
            onUploadComplete: mockOnUploadComplete,
            onNext: mockOnNext,
            onBack: mockOnBack,
            onSkip: mockOnSkip,
            onResetUploadState: mockOnResetUploadState,
            hasUploadCompleted: false
        }));
        // Initially, no analyze button should be visible
        expect(_react1.screen.queryByTestId('analyze-button')).not.toBeInTheDocument();
        // Simulate file upload by directly calling handleUpload
        const file = new File([
            'test content'
        ], 'test-syllabus.pdf', {
            type: 'application/pdf'
        });
        // Find the FileUpload component and simulate file upload
        const fileInput = _react1.screen.getByTestId('file-input') || _react1.screen.getByRole('button', {
            name: /browse/i
        });
        if (fileInput) {
            _react1.fireEvent.change(fileInput, {
                target: {
                    files: [
                        file
                    ]
                }
            });
        }
        // Wait for the analyze button to appear
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByTestId('analyze-button')).toBeInTheDocument();
        });
    });
    it('should trigger analysis when analyze button is clicked', async ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_syllabusuploadstep.SyllabusUploadStep, {
            onUploadComplete: mockOnUploadComplete,
            onNext: mockOnNext,
            onBack: mockOnBack,
            onSkip: mockOnSkip,
            onResetUploadState: mockOnResetUploadState,
            hasUploadCompleted: false
        }));
        // Simulate file upload
        const file = new File([
            'test content'
        ], 'test-syllabus.pdf', {
            type: 'application/pdf'
        });
        const fileInput = _react1.screen.getByTestId('file-input') || _react1.screen.getByRole('button', {
            name: /browse/i
        });
        if (fileInput) {
            _react1.fireEvent.change(fileInput, {
                target: {
                    files: [
                        file
                    ]
                }
            });
        }
        // Wait for analyze button to appear and click it
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByTestId('analyze-button')).toBeInTheDocument();
        });
        const analyzeButton = _react1.screen.getByTestId('analyze-button');
        _react1.fireEvent.click(analyzeButton);
        // Should show loading state or error message
        await (0, _react1.waitFor)(()=>{
            // The component shows error message when createProject fails
            expect(_react1.screen.getByText(/analysis failed/i)).toBeInTheDocument();
        });
        // Wait for analysis to complete or show error
        await (0, _react1.waitFor)(()=>{
            // Since createProject is failing, we expect an error message
            expect(_react1.screen.getByText(/analysis failed/i)).toBeInTheDocument();
        }, {
            timeout: 5000
        });
        // Should NOT call onUploadComplete when there's an error
        expect(mockOnUploadComplete).not.toHaveBeenCalled();
    });
    it('should reset state when new files are uploaded', async ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_syllabusuploadstep.SyllabusUploadStep, {
            onUploadComplete: mockOnUploadComplete,
            onNext: mockOnNext,
            onBack: mockOnBack,
            onSkip: mockOnSkip,
            onResetUploadState: mockOnResetUploadState,
            hasUploadCompleted: false
        }));
        // Upload first file
        const file1 = new File([
            'test content'
        ], 'test1.pdf', {
            type: 'application/pdf'
        });
        const fileInput = _react1.screen.getByTestId('file-input') || _react1.screen.getByRole('button', {
            name: /browse/i
        });
        if (fileInput) {
            _react1.fireEvent.change(fileInput, {
                target: {
                    files: [
                        file1
                    ]
                }
            });
        }
        // Wait for analyze button and click it
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByTestId('analyze-button')).toBeInTheDocument();
        });
        const analyzeButton = _react1.screen.getByTestId('analyze-button');
        _react1.fireEvent.click(analyzeButton);
        // Wait for analysis to complete
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText(/syllabus analyzed successfully/i)).toBeInTheDocument();
        }, {
            timeout: 5000
        });
        // Upload a different file
        const file2 = new File([
            'different content'
        ], 'test2.pdf', {
            type: 'application/pdf'
        });
        if (fileInput) {
            _react1.fireEvent.change(fileInput, {
                target: {
                    files: [
                        file2
                    ]
                }
            });
        }
        // Should show analyze button again (success state should be reset)
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByTestId('analyze-button')).toBeInTheDocument();
        });
    });
    it('should handle upload completion state correctly', async ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_syllabusuploadstep.SyllabusUploadStep, {
            onUploadComplete: mockOnUploadComplete,
            onNext: mockOnNext,
            onBack: mockOnBack,
            onSkip: mockOnSkip,
            onResetUploadState: mockOnResetUploadState,
            hasUploadCompleted: true
        }));
        // Should still allow new uploads even if previous upload was completed
        expect(_react1.screen.getByText(/upload your course materials/i)).toBeInTheDocument();
        expect(_react1.screen.getByText(/browse for course materials/i)).toBeInTheDocument();
    });
});

//# sourceMappingURL=data:application/json;base64,