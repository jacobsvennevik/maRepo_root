b01a8f9c19f423aee81850ab17181dce
"use strict";
// Mock the isTestMode function
jest.mock('../../../services/mock-data', ()=>({
        isTestMode: ()=>false,
        MOCK_SYLLABUS_EXTRACTION: {
            course_title: 'Test Course',
            instructor: 'Test Instructor',
            topics: [
                'Topic 1',
                'Topic 2'
            ],
            exam_dates: [
                {
                    date: '2025-01-01',
                    description: 'Test 1'
                },
                {
                    date: '2025-02-01',
                    description: 'Test 2'
                }
            ]
        },
        convertCourseContentToExtractedData: jest.fn()
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
require("@testing-library/jest-dom");
const _extractionresultsstep = require("../extraction-results-step");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
describe('ExtractionResultsStep', ()=>{
    const mockExtractedData = {
        courseName: 'Test Course',
        instructor: 'Test Instructor',
        semester: 'Spring 2025',
        topics: [
            {
                id: 'topic-1',
                label: 'Topic 1',
                confidence: 90
            },
            {
                id: 'topic-2',
                label: 'Topic 2',
                confidence: 85
            }
        ],
        dates: [
            {
                id: 'date-1',
                date: '2025-01-01',
                description: 'Test 1',
                type: 'exam'
            },
            {
                id: 'date-2',
                date: '2025-02-01',
                description: 'Test 2',
                type: 'exam'
            }
        ],
        testTypes: [
            {
                id: 'test-1',
                type: 'Written Test',
                confidence: 95
            }
        ],
        grading: [
            {
                category: 'Tests',
                weight: 100
            }
        ]
    };
    const defaultProps = {
        extractedData: mockExtractedData,
        fileName: 'test.pdf',
        onConfirm: jest.fn(),
        onEdit: jest.fn()
    };
    it('renders extracted data correctly', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_extractionresultsstep.ExtractionResultsStep, {
            ...defaultProps
        }));
        // Check course information
        expect(_react1.screen.getByText('Test Course')).toBeInTheDocument();
        expect(_react1.screen.getByText('Test Instructor')).toBeInTheDocument();
        expect(_react1.screen.getByText('Spring 2025')).toBeInTheDocument();
        // Check topics
        expect(_react1.screen.getByText('Topic 1')).toBeInTheDocument();
        expect(_react1.screen.getByText('Topic 2')).toBeInTheDocument();
        // Check dates
        expect(_react1.screen.getByText('Test 1')).toBeInTheDocument();
        expect(_react1.screen.getByText('Test 2')).toBeInTheDocument();
        // Check test types
        expect(_react1.screen.getByText('Written Test')).toBeInTheDocument();
        // Check grading
        expect(_react1.screen.getByText('Tests')).toBeInTheDocument();
        expect(_react1.screen.getByText('100%')).toBeInTheDocument();
    });
    it('allows editing of extracted data', async ()=>{
        const onConfirm = jest.fn();
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_extractionresultsstep.ExtractionResultsStep, {
            ...defaultProps,
            onConfirm: onConfirm
        }));
        // Click edit button
        _react1.fireEvent.click(_react1.screen.getByText('Edit Extracted Text'));
        // Edit course name
        const courseNameInput = _react1.screen.getByDisplayValue('Test Course');
        _react1.fireEvent.change(courseNameInput, {
            target: {
                value: 'Updated Course'
            }
        });
        // Edit instructor
        const instructorInput = _react1.screen.getByDisplayValue('Test Instructor');
        _react1.fireEvent.change(instructorInput, {
            target: {
                value: 'Updated Instructor'
            }
        });
        // Edit topic
        const topicInput = _react1.screen.getByDisplayValue('Topic 1');
        _react1.fireEvent.change(topicInput, {
            target: {
                value: 'Updated Topic'
            }
        });
        // Save changes
        _react1.fireEvent.click(_react1.screen.getByText('Save Changes'));
        // Verify onConfirm was called with updated data
        expect(onConfirm).toHaveBeenCalledWith(expect.objectContaining({
            courseName: 'Updated Course',
            instructor: 'Updated Instructor',
            topics: expect.arrayContaining([
                expect.objectContaining({
                    label: 'Updated Topic'
                })
            ])
        }));
    });
    it('allows canceling edits', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_extractionresultsstep.ExtractionResultsStep, {
            ...defaultProps
        }));
        // Click edit button
        _react1.fireEvent.click(_react1.screen.getByText('Edit Extracted Text'));
        // Edit course name
        const courseNameInput = _react1.screen.getByDisplayValue('Test Course');
        _react1.fireEvent.change(courseNameInput, {
            target: {
                value: 'Updated Course'
            }
        });
        // Cancel edits
        _react1.fireEvent.click(_react1.screen.getByText('Cancel'));
        // Verify original data is shown
        expect(_react1.screen.getByText('Test Course')).toBeInTheDocument();
        expect(_react1.screen.queryByDisplayValue('Updated Course')).not.toBeInTheDocument();
    });
    it('saves changes without navigating', ()=>{
        const onConfirm = jest.fn();
        const onSave = jest.fn();
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_extractionresultsstep.ExtractionResultsStep, {
            ...defaultProps,
            onConfirm: onConfirm,
            onSave: onSave
        }));
        // Click edit button
        _react1.fireEvent.click(_react1.screen.getByText('Edit Extracted Text'));
        // Edit course name
        const courseNameInput = _react1.screen.getByDisplayValue('Test Course');
        _react1.fireEvent.change(courseNameInput, {
            target: {
                value: 'Updated Course'
            }
        });
        // Save changes
        _react1.fireEvent.click(_react1.screen.getByText('Save Changes'));
        // Verify onSave was called with updated data
        expect(onSave).toHaveBeenCalledWith(expect.objectContaining({
            courseName: 'Updated Course'
        }));
        // Verify onConfirm was not called
        expect(onConfirm).not.toHaveBeenCalled();
        // Verify edit mode is exited
        expect(_react1.screen.queryByDisplayValue('Updated Course')).not.toBeInTheDocument();
        expect(_react1.screen.getByText('Updated Course')).toBeInTheDocument();
    });
    it('only navigates when clicking continue button', ()=>{
        const onConfirm = jest.fn();
        const onSave = jest.fn();
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_extractionresultsstep.ExtractionResultsStep, {
            ...defaultProps,
            onConfirm: onConfirm,
            onSave: onSave
        }));
        // Click continue button
        _react1.fireEvent.click(_react1.screen.getByText(/Looks Good - Continue/));
        // Verify onConfirm was called
        expect(onConfirm).toHaveBeenCalledWith(mockExtractedData);
        // Verify onSave was not called
        expect(onSave).not.toHaveBeenCalled();
    });
    it('shows test mode banner when in test mode', ()=>{
        // Mock isTestMode to return true
        jest.spyOn(require('../../../services/mock-data'), 'isTestMode').mockReturnValue(true);
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_extractionresultsstep.ExtractionResultsStep, {
            ...defaultProps,
            mockDataType: "syllabus"
        }));
        expect(_react1.screen.getByText(/Test Mode - Syllabus Extraction Results/)).toBeInTheDocument();
    });
    it('shows correct number of items in summary stats', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_extractionresultsstep.ExtractionResultsStep, {
            ...defaultProps
        }));
        // Find elements by their parent text
        const topicsSection = _react1.screen.getByText('Topics Found').parentElement;
        const datesSection = _react1.screen.getByText('Important Dates').parentElement;
        const testTypesSection = _react1.screen.getByText('Test Types').parentElement;
        const gradeSection = _react1.screen.getByText('Grade Categories').parentElement;
        // Check the numbers in each section
        expect(topicsSection?.querySelector('.text-2xl')?.textContent).toBe('2'); // Topics
        expect(datesSection?.querySelector('.text-2xl')?.textContent).toBe('2'); // Dates
        expect(testTypesSection?.querySelector('.text-2xl')?.textContent).toBe('1'); // Test Types
        expect(gradeSection?.querySelector('.text-2xl')?.textContent).toBe('1'); // Grade Categories
    });
    it('handles "Show more" functionality for topics', ()=>{
        const manyTopics = {
            ...mockExtractedData,
            topics: Array.from({
                length: 10
            }, (_, i)=>({
                    id: `topic-${i}`,
                    label: `Topic ${i}`,
                    confidence: 90
                }))
        };
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_extractionresultsstep.ExtractionResultsStep, {
            ...defaultProps,
            extractedData: manyTopics
        }));
        // Initially shows 5 topics
        expect(_react1.screen.getAllByText(/Topic \d/).length).toBe(5);
        // Click show more
        _react1.fireEvent.click(_react1.screen.getByText('Show 5 more topics'));
        // Shows all topics
        expect(_react1.screen.getAllByText(/Topic \d/).length).toBe(10);
    });
    it('validates dates when editing', ()=>{
        const onSave = jest.fn();
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_extractionresultsstep.ExtractionResultsStep, {
            ...defaultProps,
            onSave: onSave
        }));
        // Click edit button
        _react1.fireEvent.click(_react1.screen.getByText('Edit Extracted Text'));
        // Get date input
        let dateInput = _react1.screen.getByDisplayValue('2025-01-01');
        // Test valid date
        _react1.fireEvent.change(dateInput, {
            target: {
                value: '2025-03-15'
            }
        });
        _react1.fireEvent.click(_react1.screen.getByText('Save Changes'));
        expect(onSave).toHaveBeenCalledWith(expect.objectContaining({
            dates: expect.arrayContaining([
                expect.objectContaining({
                    date: '2025-03-15'
                })
            ])
        }));
        // Reset mock and start fresh editing session
        onSave.mockReset();
        _react1.fireEvent.click(_react1.screen.getByText('Edit Extracted Text'));
        // Get the updated date input (it should now show 2025-03-15)
        dateInput = _react1.screen.getByDisplayValue('2025-03-15');
        // Test invalid date (February 31st doesn't exist)
        _react1.fireEvent.change(dateInput, {
            target: {
                value: '2025-02-31'
            }
        });
        _react1.fireEvent.click(_react1.screen.getByText('Save Changes'));
        expect(onSave).not.toHaveBeenCalled();
        // Test invalid date format
        _react1.fireEvent.change(dateInput, {
            target: {
                value: 'invalid-date'
            }
        });
        _react1.fireEvent.click(_react1.screen.getByText('Save Changes'));
        expect(onSave).not.toHaveBeenCalled();
    });
    it('enforces date range constraints', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_extractionresultsstep.ExtractionResultsStep, {
            ...defaultProps
        }));
        // Click edit button
        _react1.fireEvent.click(_react1.screen.getByText('Edit Extracted Text'));
        // Get date input
        const dateInput = _react1.screen.getByDisplayValue('2025-01-01');
        // Verify min and max attributes
        expect(dateInput).toHaveAttribute('min', '2024-01-01');
        expect(dateInput).toHaveAttribute('max', '2030-12-31');
        expect(dateInput).toHaveAttribute('type', 'date');
    });
});

//# sourceMappingURL=data:application/json;base64,