{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/features/projects/components/steps/__tests__/extraction-results-step.test.tsx"],"sourcesContent":["import React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport '@testing-library/jest-dom';\nimport { ExtractionResultsStep } from '../extraction-results-step';\n\n// Mock the isTestMode function\njest.mock('../../../services/mock-data', () => ({\n  isTestMode: () => false,\n  MOCK_SYLLABUS_EXTRACTION: {\n    course_title: 'Test Course',\n    instructor: 'Test Instructor',\n    topics: ['Topic 1', 'Topic 2'],\n    exam_dates: [\n      { date: '2025-01-01', description: 'Test 1' },\n      { date: '2025-02-01', description: 'Test 2' }\n    ]\n  },\n  convertCourseContentToExtractedData: jest.fn()\n}));\n\ndescribe('ExtractionResultsStep', () => {\n  const mockExtractedData = {\n    courseName: 'Test Course',\n    instructor: 'Test Instructor',\n    semester: 'Spring 2025',\n    topics: [\n      { id: 'topic-1', label: 'Topic 1', confidence: 90 },\n      { id: 'topic-2', label: 'Topic 2', confidence: 85 }\n    ],\n    dates: [\n      { id: 'date-1', date: '2025-01-01', description: 'Test 1', type: 'exam' },\n      { id: 'date-2', date: '2025-02-01', description: 'Test 2', type: 'exam' }\n    ],\n    testTypes: [\n      { id: 'test-1', type: 'Written Test', confidence: 95 }\n    ],\n    grading: [\n      { category: 'Tests', weight: 100 }\n    ]\n  };\n\n  const defaultProps = {\n    extractedData: mockExtractedData,\n    fileName: 'test.pdf',\n    onConfirm: jest.fn(),\n    onEdit: jest.fn()\n  } as any;\n\n  it('renders extracted data correctly', () => {\n    render(<ExtractionResultsStep {...defaultProps} />);\n\n    // Check course information\n    expect(screen.getByText('Test Course')).toBeInTheDocument();\n    expect(screen.getByText('Test Instructor')).toBeInTheDocument();\n    expect(screen.getByText('Spring 2025')).toBeInTheDocument();\n\n    // Check topics\n    expect(screen.getByText('Topic 1')).toBeInTheDocument();\n    expect(screen.getByText('Topic 2')).toBeInTheDocument();\n\n    // Check dates\n    expect(screen.getByText('Test 1')).toBeInTheDocument();\n    expect(screen.getByText('Test 2')).toBeInTheDocument();\n\n    // Check test types\n    expect(screen.getByText('Written Test')).toBeInTheDocument();\n\n    // Check grading\n    expect(screen.getByText('Tests')).toBeInTheDocument();\n    expect(screen.getByText('100%')).toBeInTheDocument();\n  });\n\n  it('allows editing of extracted data', async () => {\n    const onConfirm = jest.fn();\n    render(<ExtractionResultsStep {...defaultProps} onConfirm={onConfirm} />);\n\n    // Click edit button\n    fireEvent.click(screen.getByText('Edit Extracted Text'));\n\n    // Edit course name\n    const courseNameInput = screen.getByDisplayValue('Test Course');\n    fireEvent.change(courseNameInput, { target: { value: 'Updated Course' } });\n\n    // Edit instructor\n    const instructorInput = screen.getByDisplayValue('Test Instructor');\n    fireEvent.change(instructorInput, { target: { value: 'Updated Instructor' } });\n\n    // Edit topic\n    const topicInput = screen.getByDisplayValue('Topic 1');\n    fireEvent.change(topicInput, { target: { value: 'Updated Topic' } });\n\n    // Save changes\n    fireEvent.click(screen.getByText('Save Changes'));\n\n    // Verify onConfirm was called with updated data\n    expect(onConfirm).toHaveBeenCalledWith(expect.objectContaining({\n      courseName: 'Updated Course',\n      instructor: 'Updated Instructor',\n      topics: expect.arrayContaining([\n        expect.objectContaining({\n          label: 'Updated Topic'\n        })\n      ])\n    }));\n  });\n\n  it('allows canceling edits', () => {\n    render(<ExtractionResultsStep {...defaultProps} />);\n\n    // Click edit button\n    fireEvent.click(screen.getByText('Edit Extracted Text'));\n\n    // Edit course name\n    const courseNameInput = screen.getByDisplayValue('Test Course');\n    fireEvent.change(courseNameInput, { target: { value: 'Updated Course' } });\n\n    // Cancel edits\n    fireEvent.click(screen.getByText('Cancel'));\n\n    // Verify original data is shown\n    expect(screen.getByText('Test Course')).toBeInTheDocument();\n    expect(screen.queryByDisplayValue('Updated Course')).not.toBeInTheDocument();\n  });\n\n  it('saves changes without navigating', () => {\n    const onConfirm = jest.fn();\n    const onSave = jest.fn();\n    render(<ExtractionResultsStep {...defaultProps} onConfirm={onConfirm} onSave={onSave} />);\n\n    // Click edit button\n    fireEvent.click(screen.getByText('Edit Extracted Text'));\n\n    // Edit course name\n    const courseNameInput = screen.getByDisplayValue('Test Course');\n    fireEvent.change(courseNameInput, { target: { value: 'Updated Course' } });\n\n    // Save changes\n    fireEvent.click(screen.getByText('Save Changes'));\n\n    // Verify onSave was called with updated data\n    expect(onSave).toHaveBeenCalledWith(expect.objectContaining({\n      courseName: 'Updated Course'\n    }));\n\n    // Verify onConfirm was not called\n    expect(onConfirm).not.toHaveBeenCalled();\n\n    // Verify edit mode is exited\n    expect(screen.queryByDisplayValue('Updated Course')).not.toBeInTheDocument();\n    expect(screen.getByText('Updated Course')).toBeInTheDocument();\n  });\n\n  it('only navigates when clicking continue button', () => {\n    const onConfirm = jest.fn();\n    const onSave = jest.fn();\n    render(<ExtractionResultsStep {...defaultProps} onConfirm={onConfirm} onSave={onSave} />);\n\n    // Click continue button\n    fireEvent.click(screen.getByText(/Looks Good - Continue/));\n\n    // Verify onConfirm was called\n    expect(onConfirm).toHaveBeenCalledWith(mockExtractedData);\n\n    // Verify onSave was not called\n    expect(onSave).not.toHaveBeenCalled();\n  });\n\n  it('shows test mode banner when in test mode', () => {\n    // Mock isTestMode to return true\n    jest.spyOn(require('../../../services/mock-data'), 'isTestMode').mockReturnValue(true);\n\n    render(<ExtractionResultsStep {...defaultProps} mockDataType=\"syllabus\" />);\n\n    expect(screen.getByText(/Test Mode - Syllabus Extraction Results/)).toBeInTheDocument();\n  });\n\n  it('shows correct number of items in summary stats', () => {\n    render(<ExtractionResultsStep {...defaultProps} />);\n\n    // Find elements by their parent text\n    const topicsSection = screen.getByText('Topics Found').parentElement;\n    const datesSection = screen.getByText('Important Dates').parentElement;\n    const testTypesSection = screen.getByText('Test Types').parentElement;\n    const gradeSection = screen.getByText('Grade Categories').parentElement;\n\n    // Check the numbers in each section\n    expect(topicsSection?.querySelector('.text-2xl')?.textContent).toBe('2'); // Topics\n    expect(datesSection?.querySelector('.text-2xl')?.textContent).toBe('2'); // Dates\n    expect(testTypesSection?.querySelector('.text-2xl')?.textContent).toBe('1'); // Test Types\n    expect(gradeSection?.querySelector('.text-2xl')?.textContent).toBe('1'); // Grade Categories\n  });\n\n  it('handles \"Show more\" functionality for topics', () => {\n    const manyTopics = {\n      ...mockExtractedData,\n      topics: Array.from({ length: 10 }, (_, i) => ({\n        id: `topic-${i}`,\n        label: `Topic ${i}`,\n        confidence: 90\n      }))\n    } as any;\n\n    render(<ExtractionResultsStep {...defaultProps} extractedData={manyTopics} />);\n\n    // Initially shows 5 topics\n    expect(screen.getAllByText(/Topic \\d/).length).toBe(5);\n\n    // Click show more\n    fireEvent.click(screen.getByText('Show 5 more topics'));\n\n    // Shows all topics\n    expect(screen.getAllByText(/Topic \\d/).length).toBe(10);\n  });\n\n  it('validates dates when editing', () => {\n    const onSave = jest.fn();\n    render(<ExtractionResultsStep {...defaultProps} onSave={onSave} />);\n\n    // Click edit button\n    fireEvent.click(screen.getByText('Edit Extracted Text'));\n\n    // Get date input\n    let dateInput = screen.getByDisplayValue('2025-01-01');\n    \n    // Test valid date\n    fireEvent.change(dateInput, { target: { value: '2025-03-15' } });\n    fireEvent.click(screen.getByText('Save Changes'));\n    expect(onSave).toHaveBeenCalledWith(expect.objectContaining({\n      dates: expect.arrayContaining([\n        expect.objectContaining({\n          date: '2025-03-15'\n        })\n      ])\n    }));\n\n    // Reset mock and start fresh editing session\n    onSave.mockReset();\n    fireEvent.click(screen.getByText('Edit Extracted Text'));\n\n    // Get the updated date input (it should now show 2025-03-15)\n    dateInput = screen.getByDisplayValue('2025-03-15');\n\n    // Test invalid date (February 31st doesn't exist)\n    fireEvent.change(dateInput, { target: { value: '2025-02-31' } });\n    fireEvent.click(screen.getByText('Save Changes'));\n    expect(onSave).not.toHaveBeenCalled();\n\n    // Test invalid date format\n    fireEvent.change(dateInput, { target: { value: 'invalid-date' } });\n    fireEvent.click(screen.getByText('Save Changes'));\n    expect(onSave).not.toHaveBeenCalled();\n  });\n\n  it('enforces date range constraints', () => {\n    render(<ExtractionResultsStep {...defaultProps} />);\n\n    // Click edit button\n    fireEvent.click(screen.getByText('Edit Extracted Text'));\n\n    // Get date input\n    const dateInput = screen.getByDisplayValue('2025-01-01');\n    \n    // Verify min and max attributes\n    expect(dateInput).toHaveAttribute('min', '2024-01-01');\n    expect(dateInput).toHaveAttribute('max', '2030-12-31');\n    expect(dateInput).toHaveAttribute('type', 'date');\n  });\n}); "],"names":["jest","mock","isTestMode","MOCK_SYLLABUS_EXTRACTION","course_title","instructor","topics","exam_dates","date","description","convertCourseContentToExtractedData","fn","describe","mockExtractedData","courseName","semester","id","label","confidence","dates","type","testTypes","grading","category","weight","defaultProps","extractedData","fileName","onConfirm","onEdit","it","render","ExtractionResultsStep","expect","screen","getByText","toBeInTheDocument","fireEvent","click","courseNameInput","getByDisplayValue","change","target","value","instructorInput","topicInput","toHaveBeenCalledWith","objectContaining","arrayContaining","queryByDisplayValue","not","onSave","toHaveBeenCalled","spyOn","require","mockReturnValue","mockDataType","topicsSection","parentElement","datesSection","testTypesSection","gradeSection","querySelector","textContent","toBe","manyTopics","Array","from","length","_","i","getAllByText","dateInput","mockReset","toHaveAttribute"],"mappings":"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"}