{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/features/projects/components/steps/__tests__/syllabus-upload-integration.test.tsx"],"sourcesContent":["import React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport { SyllabusUploadStep } from '../syllabus-upload-step';\nimport { jest } from '@jest/globals';\n\n// Mock the dependencies\njest.mock('next/navigation', () => ({\n  useRouter: () => ({\n    push: jest.fn(),\n  }),\n}));\n\n// Mock fetch API\nconst mockFetch = jest.fn();\nglobal.fetch = mockFetch as jest.MockedFunction<typeof fetch>;\n\njest.mock('../../../services/mock-data', () => ({\n  isTestMode: jest.fn(() => true),\n  MOCK_SYLLABUS_EXTRACTION: {\n    course_title: 'Test Course',\n    instructor: 'Test Instructor',\n    topics: ['Topic 1', 'Topic 2'],\n    exam_dates: [\n      { date: '2025-01-01', description: 'Test Exam' }\n    ],\n  },\n  createMockProcessedDocument: jest.fn(() => ({\n    id: 123,\n    original_text: 'Test text',\n    metadata: { course_title: 'Test Course' },\n    status: 'completed',\n  })),\n  simulateProcessingDelay: jest.fn(() => Promise.resolve()),\n}));\n\n// Mock the API service\njest.mock('../../../services/api', () => ({\n  createProject: jest.fn(() => Promise.resolve({\n    id: 'project-123',\n    name: 'Test Project',\n    project_type: 'school'\n  }))\n}));\n\ndescribe('SyllabusUploadStep Integration', () => {\n  const mockOnUploadComplete = jest.fn();\n  const mockOnNext = jest.fn();\n  const mockOnBack = jest.fn();\n  const mockOnSkip = jest.fn();\n  const mockOnResetUploadState = jest.fn();\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    // Setup mock fetch responses\n    mockFetch\n      .mockImplementationOnce(() => \n        Promise.resolve({\n          ok: true,\n          json: () => Promise.resolve({\n            id: 123,\n            filename: 'test-syllabus.pdf',\n            status: 'pending',\n          }),\n        })\n      )\n      .mockImplementationOnce(() => \n        Promise.resolve({\n          ok: true,\n          json: () => Promise.resolve({\n            message: 'Processing started',\n            document_id: 123,\n            task_id: 'task-123', // This is the key field that was missing\n          }),\n        })\n      )\n      .mockImplementation(() => \n        Promise.resolve({\n          ok: true,\n          json: () => Promise.resolve({\n            id: 123,\n            status: 'completed',\n            metadata: {\n              course_name: 'Test Course',\n              instructor: 'Test Instructor',\n              topics: ['Topic 1', 'Topic 2'],\n              exam_dates: [\n                { date: '2025-01-01', description: 'Test Exam' }\n              ],\n            },\n          }),\n        })\n      );\n  });\n\n  it('should show analyze button after file upload', async () => {\n    render(\n      <SyllabusUploadStep\n        onUploadComplete={mockOnUploadComplete}\n        onNext={mockOnNext}\n        onBack={mockOnBack}\n        onSkip={mockOnSkip}\n        onResetUploadState={mockOnResetUploadState}\n        hasUploadCompleted={false}\n      />\n    );\n\n    // Initially, no analyze button should be visible\n    expect(screen.queryByTestId('analyze-button')).not.toBeInTheDocument();\n\n    // Simulate file upload by directly calling handleUpload\n    const file = new File(['test content'], 'test-syllabus.pdf', { type: 'application/pdf' });\n    \n    // Find the FileUpload component and simulate file upload\n    const fileInput = screen.getByTestId('file-input') || screen.getByRole('button', { name: /browse/i });\n    \n    if (fileInput) {\n      fireEvent.change(fileInput, { target: { files: [file] } });\n    }\n\n    // Wait for the analyze button to appear\n    await waitFor(() => {\n      expect(screen.getByTestId('analyze-button')).toBeInTheDocument();\n    });\n  });\n\n  it('should trigger analysis when analyze button is clicked', async () => {\n    render(\n      <SyllabusUploadStep\n        onUploadComplete={mockOnUploadComplete}\n        onNext={mockOnNext}\n        onBack={mockOnBack}\n        onSkip={mockOnSkip}\n        onResetUploadState={mockOnResetUploadState}\n        hasUploadCompleted={false}\n      />\n    );\n\n    // Simulate file upload\n    const file = new File(['test content'], 'test-syllabus.pdf', { type: 'application/pdf' });\n    const fileInput = screen.getByTestId('file-input') || screen.getByRole('button', { name: /browse/i });\n    \n    if (fileInput) {\n      fireEvent.change(fileInput, { target: { files: [file] } });\n    }\n\n    // Wait for analyze button to appear and click it\n    await waitFor(() => {\n      expect(screen.getByTestId('analyze-button')).toBeInTheDocument();\n    });\n\n    const analyzeButton = screen.getByTestId('analyze-button');\n    fireEvent.click(analyzeButton);\n\n    // Should show loading state or error message\n    await waitFor(() => {\n      // The component shows error message when createProject fails\n      expect(screen.getByText(/analysis failed/i)).toBeInTheDocument();\n    });\n\n    // Wait for analysis to complete or show error\n    await waitFor(() => {\n      // Since createProject is failing, we expect an error message\n      expect(screen.getByText(/analysis failed/i)).toBeInTheDocument();\n    }, { timeout: 5000 });\n\n    // Should NOT call onUploadComplete when there's an error\n    expect(mockOnUploadComplete).not.toHaveBeenCalled();\n  });\n\n  it('should reset state when new files are uploaded', async () => {\n    render(\n      <SyllabusUploadStep\n        onUploadComplete={mockOnUploadComplete}\n        onNext={mockOnNext}\n        onBack={mockOnBack}\n        onSkip={mockOnSkip}\n        onResetUploadState={mockOnResetUploadState}\n        hasUploadCompleted={false}\n      />\n    );\n\n    // Upload first file\n    const file1 = new File(['test content'], 'test1.pdf', { type: 'application/pdf' });\n    const fileInput = screen.getByTestId('file-input') || screen.getByRole('button', { name: /browse/i });\n    \n    if (fileInput) {\n      fireEvent.change(fileInput, { target: { files: [file1] } });\n    }\n\n    // Wait for analyze button and click it\n    await waitFor(() => {\n      expect(screen.getByTestId('analyze-button')).toBeInTheDocument();\n    });\n\n    const analyzeButton = screen.getByTestId('analyze-button');\n    fireEvent.click(analyzeButton);\n\n    // Wait for analysis to complete\n    await waitFor(() => {\n      expect(screen.getByText(/syllabus analyzed successfully/i)).toBeInTheDocument();\n    }, { timeout: 5000 });\n\n    // Upload a different file\n    const file2 = new File(['different content'], 'test2.pdf', { type: 'application/pdf' });\n    \n    if (fileInput) {\n      fireEvent.change(fileInput, { target: { files: [file2] } });\n    }\n\n    // Should show analyze button again (success state should be reset)\n    await waitFor(() => {\n      expect(screen.getByTestId('analyze-button')).toBeInTheDocument();\n    });\n  });\n\n  it('should handle upload completion state correctly', async () => {\n    render(\n      <SyllabusUploadStep\n        onUploadComplete={mockOnUploadComplete}\n        onNext={mockOnNext}\n        onBack={mockOnBack}\n        onSkip={mockOnSkip}\n        onResetUploadState={mockOnResetUploadState}\n        hasUploadCompleted={true} // Simulate previous upload completed\n      />\n    );\n\n    // Should still allow new uploads even if previous upload was completed\n    expect(screen.getByText(/upload your course materials/i)).toBeInTheDocument();\n    expect(screen.getByText(/browse for course materials/i)).toBeInTheDocument();\n  });\n}); "],"names":["jest","mock","useRouter","push","fn","mockFetch","global","fetch","isTestMode","MOCK_SYLLABUS_EXTRACTION","course_title","instructor","topics","exam_dates","date","description","createMockProcessedDocument","id","original_text","metadata","status","simulateProcessingDelay","Promise","resolve","createProject","name","project_type","describe","mockOnUploadComplete","mockOnNext","mockOnBack","mockOnSkip","mockOnResetUploadState","beforeEach","clearAllMocks","mockImplementationOnce","ok","json","filename","message","document_id","task_id","mockImplementation","course_name","it","render","SyllabusUploadStep","onUploadComplete","onNext","onBack","onSkip","onResetUploadState","hasUploadCompleted","expect","screen","queryByTestId","not","toBeInTheDocument","file","File","type","fileInput","getByTestId","getByRole","fireEvent","change","target","files","waitFor","analyzeButton","click","getByText","timeout","toHaveBeenCalled","file1","file2"],"mappings":"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"}