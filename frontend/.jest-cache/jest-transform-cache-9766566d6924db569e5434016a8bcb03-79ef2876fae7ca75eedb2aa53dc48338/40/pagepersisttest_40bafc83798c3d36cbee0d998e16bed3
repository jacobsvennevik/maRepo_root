67209362580961cbc38dbe7d1a0a8a09
"use strict";
jest.mock('next/navigation', ()=>({
        useParams: ()=>({
                projectId: '203062be-58d0-4f98-bbd4-33b4ce081276'
            }),
        useRouter: ()=>({
                push: jest.fn(),
                replace: jest.fn(),
                back: jest.fn()
            })
    }));
jest.mock('../hooks/use-project-flashcards', ()=>({
        useProjectFlashcards: ()=>({
                flashcardSets: [],
                stats: {
                    total_sets: 0,
                    total_cards: 0,
                    due_today: 0,
                    learning_cards: 0,
                    mastered_cards: 0,
                    average_accuracy: 0
                },
                isLoading: false,
                error: null
            })
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("@testing-library/react");
const _react1 = /*#__PURE__*/ _interop_require_default(require("react"));
const _page = /*#__PURE__*/ _interop_require_default(require("../page"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
describe('ProjectFlashcards - persistence', ()=>{
    it('stores activeProjectId on load', ()=>{
        const setItem = jest.fn();
        // @ts-ignore
        global.localStorage = {
            getItem: jest.fn(),
            setItem,
            removeItem: jest.fn(),
            clear: jest.fn(),
            key: jest.fn(),
            length: 0
        };
        (0, _react.act)(()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
        });
        expect(setItem).toHaveBeenCalledWith('activeProjectId', '203062be-58d0-4f98-bbd4-33b4ce081276');
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9qYWNvYmhvcm5zdmVubmV2aWsvRG9jdW1lbnRzL0dpdEh1Yi9tYVJlcG9fcm9vdC9mcm9udGVuZC9zcmMvYXBwL3Byb2plY3RzL1twcm9qZWN0SWRdL2ZsYXNoY2FyZHMvX190ZXN0c19fL3BhZ2UtcGVyc2lzdC50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZW5kZXIsIGFjdCB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QnXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgUHJvamVjdEZsYXNoY2FyZHMgZnJvbSAnLi4vcGFnZSdcblxuamVzdC5tb2NrKCduZXh0L25hdmlnYXRpb24nLCAoKSA9PiAoe1xuICB1c2VQYXJhbXM6ICgpID0+ICh7IHByb2plY3RJZDogJzIwMzA2MmJlLTU4ZDAtNGY5OC1iYmQ0LTMzYjRjZTA4MTI3NicgfSksXG4gIHVzZVJvdXRlcjogKCkgPT4gKHsgcHVzaDogamVzdC5mbigpLCByZXBsYWNlOiBqZXN0LmZuKCksIGJhY2s6IGplc3QuZm4oKSB9KSxcbn0pKVxuXG5qZXN0Lm1vY2soJy4uL2hvb2tzL3VzZS1wcm9qZWN0LWZsYXNoY2FyZHMnLCAoKSA9PiAoe1xuICB1c2VQcm9qZWN0Rmxhc2hjYXJkczogKCkgPT4gKHsgZmxhc2hjYXJkU2V0czogW10sIHN0YXRzOiB7IHRvdGFsX3NldHM6MCwgdG90YWxfY2FyZHM6MCwgZHVlX3RvZGF5OjAsIGxlYXJuaW5nX2NhcmRzOjAsIG1hc3RlcmVkX2NhcmRzOjAsIGF2ZXJhZ2VfYWNjdXJhY3k6MCB9LCBpc0xvYWRpbmc6IGZhbHNlLCBlcnJvcjogbnVsbCB9KVxufSkpXG5cbmRlc2NyaWJlKCdQcm9qZWN0Rmxhc2hjYXJkcyAtIHBlcnNpc3RlbmNlJywgKCkgPT4ge1xuICBpdCgnc3RvcmVzIGFjdGl2ZVByb2plY3RJZCBvbiBsb2FkJywgKCkgPT4ge1xuICAgIGNvbnN0IHNldEl0ZW0gPSBqZXN0LmZuKClcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgZ2xvYmFsLmxvY2FsU3RvcmFnZSA9IHtcbiAgICAgIGdldEl0ZW06IGplc3QuZm4oKSxcbiAgICAgIHNldEl0ZW0sXG4gICAgICByZW1vdmVJdGVtOiBqZXN0LmZuKCksXG4gICAgICBjbGVhcjogamVzdC5mbigpLFxuICAgICAga2V5OiBqZXN0LmZuKCksXG4gICAgICBsZW5ndGg6IDAsXG4gICAgfVxuXG4gICAgYWN0KCgpID0+IHtcbiAgICAgIHJlbmRlcig8UHJvamVjdEZsYXNoY2FyZHMgLz4pXG4gICAgfSlcblxuICAgIGV4cGVjdChzZXRJdGVtKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnYWN0aXZlUHJvamVjdElkJywgJzIwMzA2MmJlLTU4ZDAtNGY5OC1iYmQ0LTMzYjRjZTA4MTI3NicpXG4gIH0pXG59KVxuIl0sIm5hbWVzIjpbImplc3QiLCJtb2NrIiwidXNlUGFyYW1zIiwicHJvamVjdElkIiwidXNlUm91dGVyIiwicHVzaCIsImZuIiwicmVwbGFjZSIsImJhY2siLCJ1c2VQcm9qZWN0Rmxhc2hjYXJkcyIsImZsYXNoY2FyZFNldHMiLCJzdGF0cyIsInRvdGFsX3NldHMiLCJ0b3RhbF9jYXJkcyIsImR1ZV90b2RheSIsImxlYXJuaW5nX2NhcmRzIiwibWFzdGVyZWRfY2FyZHMiLCJhdmVyYWdlX2FjY3VyYWN5IiwiaXNMb2FkaW5nIiwiZXJyb3IiLCJkZXNjcmliZSIsIml0Iiwic2V0SXRlbSIsImdsb2JhbCIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJyZW1vdmVJdGVtIiwiY2xlYXIiLCJrZXkiLCJsZW5ndGgiLCJhY3QiLCJyZW5kZXIiLCJQcm9qZWN0Rmxhc2hjYXJkcyIsImV4cGVjdCIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIl0sIm1hcHBpbmdzIjoiO0FBSUFBLEtBQUtDLElBQUksQ0FBQyxtQkFBbUIsSUFBTyxDQUFBO1FBQ2xDQyxXQUFXLElBQU8sQ0FBQTtnQkFBRUMsV0FBVztZQUF1QyxDQUFBO1FBQ3RFQyxXQUFXLElBQU8sQ0FBQTtnQkFBRUMsTUFBTUwsS0FBS00sRUFBRTtnQkFBSUMsU0FBU1AsS0FBS00sRUFBRTtnQkFBSUUsTUFBTVIsS0FBS00sRUFBRTtZQUFHLENBQUE7SUFDM0UsQ0FBQTtBQUVBTixLQUFLQyxJQUFJLENBQUMsbUNBQW1DLElBQU8sQ0FBQTtRQUNsRFEsc0JBQXNCLElBQU8sQ0FBQTtnQkFBRUMsZUFBZSxFQUFFO2dCQUFFQyxPQUFPO29CQUFFQyxZQUFXO29CQUFHQyxhQUFZO29CQUFHQyxXQUFVO29CQUFHQyxnQkFBZTtvQkFBR0MsZ0JBQWU7b0JBQUdDLGtCQUFpQjtnQkFBRTtnQkFBR0MsV0FBVztnQkFBT0MsT0FBTztZQUFLLENBQUE7SUFDL0wsQ0FBQTs7Ozs7dUJBWDRCOytEQUNWOzZEQUNZOzs7Ozs7QUFXOUJDLFNBQVMsbUNBQW1DO0lBQzFDQyxHQUFHLGtDQUFrQztRQUNuQyxNQUFNQyxVQUFVdEIsS0FBS00sRUFBRTtRQUN2QixhQUFhO1FBQ2JpQixPQUFPQyxZQUFZLEdBQUc7WUFDcEJDLFNBQVN6QixLQUFLTSxFQUFFO1lBQ2hCZ0I7WUFDQUksWUFBWTFCLEtBQUtNLEVBQUU7WUFDbkJxQixPQUFPM0IsS0FBS00sRUFBRTtZQUNkc0IsS0FBSzVCLEtBQUtNLEVBQUU7WUFDWnVCLFFBQVE7UUFDVjtRQUVBQyxJQUFBQSxVQUFHLEVBQUM7WUFDRkMsSUFBQUEsYUFBTSxnQkFBQyxxQkFBQ0MsYUFBaUI7UUFDM0I7UUFFQUMsT0FBT1gsU0FBU1ksb0JBQW9CLENBQUMsbUJBQW1CO0lBQzFEO0FBQ0YifQ==