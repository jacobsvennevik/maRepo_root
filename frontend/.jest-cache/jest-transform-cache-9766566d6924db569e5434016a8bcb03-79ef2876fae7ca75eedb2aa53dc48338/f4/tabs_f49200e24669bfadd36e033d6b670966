3e8dd1238a770148b59e2d9ac0d4de5f
"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    Tabs: function() {
        return Tabs;
    },
    TabsContent: function() {
        return TabsContent;
    },
    TabsList: function() {
        return TabsList;
    },
    TabsTrigger: function() {
        return TabsTrigger;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _utils = require("../../lib/utils");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const TabsContext = /*#__PURE__*/ _react.createContext(null);
const Tabs = /*#__PURE__*/ _react.forwardRef(({ className, defaultValue, value, onValueChange, children, ...props }, ref)=>{
    const [selectedTab, setSelectedTab] = _react.useState(value || defaultValue || "");
    _react.useEffect(()=>{
        if (value !== undefined) {
            setSelectedTab(value);
        }
    }, [
        value
    ]);
    const handleTabChange = _react.useCallback((newValue)=>{
        setSelectedTab(newValue);
        onValueChange?.(newValue);
    }, [
        onValueChange
    ]);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(TabsContext.Provider, {
        value: {
            selectedTab,
            setSelectedTab: handleTabChange
        },
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
            ref: ref,
            className: (0, _utils.cn)("w-full", className),
            ...props,
            children: children
        })
    });
});
Tabs.displayName = "Tabs";
const TabsList = /*#__PURE__*/ _react.forwardRef(({ className, ...props }, ref)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
        ref: ref,
        className: (0, _utils.cn)("inline-flex h-10 items-center justify-center rounded-md bg-gray-100 p-1 text-gray-500", className),
        ...props
    }));
TabsList.displayName = "TabsList";
const TabsTrigger = /*#__PURE__*/ _react.forwardRef(({ className, value, children, ...props }, ref)=>{
    const context = _react.useContext(TabsContext);
    if (!context) {
        throw new Error("TabsTrigger must be used within a Tabs component");
    }
    const isSelected = context.selectedTab === value;
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
        ref: ref,
        className: (0, _utils.cn)("inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-white transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-400 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50", isSelected ? "bg-white text-gray-900 shadow-sm" : "text-gray-600 hover:text-gray-900 hover:bg-gray-50", className),
        onClick: ()=>context.setSelectedTab(value),
        role: "tab",
        "aria-selected": isSelected,
        ...props,
        children: children
    });
});
TabsTrigger.displayName = "TabsTrigger";
const TabsContent = /*#__PURE__*/ _react.forwardRef(({ className, value, children, ...props }, ref)=>{
    const context = _react.useContext(TabsContext);
    if (!context) {
        throw new Error("TabsContent must be used within a Tabs component");
    }
    const isSelected = context.selectedTab === value;
    if (!isSelected) {
        return null;
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
        ref: ref,
        className: (0, _utils.cn)("mt-2 ring-offset-white focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-400 focus-visible:ring-offset-2", className),
        role: "tabpanel",
        "aria-labelledby": `tab-${value}`,
        ...props,
        children: children
    });
});
TabsContent.displayName = "TabsContent";

//# sourceMappingURL=data:application/json;base64,