1843b200f53029b1a2f103633d2245b5
// Style Configuration Validator with Autofixes
// Implements the 3 core validation rules with automatic fixes
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    applyFixes: function() {
        return applyFixes;
    },
    getNestedValue: function() {
        return getNestedValue;
    },
    getValidationSummary: function() {
        return getValidationSummary;
    },
    hasCriticalErrors: function() {
        return hasCriticalErrors;
    },
    validateConfig: function() {
        return validateConfig;
    },
    validateField: function() {
        return validateField;
    }
});
function validateConfig(effectiveConfig) {
    const issues = [];
    const fixes = [];
    // Rule 1: Mix normalization - item_mix numbers should sum to 1.0
    if (effectiveConfig.item_mix) {
        const sum = Object.values(effectiveConfig.item_mix).reduce((a, b)=>a + b, 0);
        if (Math.abs(sum - 1.0) > 0.01) {
            const normalizedMix = normalizeItemMix(effectiveConfig.item_mix);
            issues.push({
                path: 'item_mix',
                code: 'NORMALIZE_MIX',
                level: 'warning',
                message: `Item mix sums to ${sum.toFixed(2)}, should be 1.0`,
                fix: {
                    path: 'item_mix',
                    value: normalizedMix
                }
            });
            fixes.push({
                path: 'item_mix',
                value: normalizedMix
            });
        }
    }
    // Rule 2: Hard timing requires per-item seconds ≥ 5
    if (effectiveConfig.timing?.mode === 'hard' && effectiveConfig.timing?.per_item_seconds !== undefined) {
        if (effectiveConfig.timing.per_item_seconds < 5) {
            issues.push({
                path: 'timing.per_item_seconds',
                code: 'HARD_TIMING_MIN',
                level: 'error',
                message: 'Hard timing requires ≥5 seconds per item',
                fix: {
                    path: 'timing.per_item_seconds',
                    value: 60
                }
            });
            fixes.push({
                path: 'timing.per_item_seconds',
                value: 60
            });
        }
    }
    // Rule 3: End-only feedback disables hints
    if (effectiveConfig.feedback === 'end_only' && effectiveConfig.hints === true) {
        issues.push({
            path: 'hints',
            code: 'END_ONLY_NO_HINTS',
            level: 'warning',
            message: 'End-only feedback disables hints',
            fix: {
                path: 'hints',
                value: false
            }
        });
        fixes.push({
            path: 'hints',
            value: false
        });
    }
    // Additional validation rules for completeness
    validateTimingConsistency(effectiveConfig, issues, fixes);
    validateItemMixProportions(effectiveConfig, issues, fixes);
    return {
        issues,
        fixes
    };
}
function applyFixes(config, fixes) {
    const result = {
        ...config
    };
    fixes.forEach((fix)=>{
        setNestedValue(result, fix.path, fix.value);
    });
    return result;
}
/**
 * Normalizes item mix to sum to 1.0
 */ function normalizeItemMix(itemMix) {
    const sum = Object.values(itemMix).reduce((a, b)=>a + b, 0);
    if (sum === 0) {
        // If all values are 0, distribute evenly
        const keys = Object.keys(itemMix);
        const normalized = {};
        keys.forEach((key)=>{
            normalized[key] = 1 / keys.length;
        });
        return normalized;
    }
    // Normalize by dividing by sum
    const normalized = {};
    Object.keys(itemMix).forEach((key)=>{
        normalized[key] = itemMix[key] / sum;
    });
    return normalized;
}
/**
 * Validates timing consistency
 */ function validateTimingConsistency(config, issues, fixes) {
    if (config.timing?.total_minutes && config.timing?.per_item_seconds) {
        const totalSeconds = config.timing.total_minutes * 60;
        const estimatedItems = Math.floor(totalSeconds / config.timing.per_item_seconds);
        if (estimatedItems < 1) {
            issues.push({
                path: 'timing',
                code: 'TIMING_INCONSISTENT',
                level: 'warning',
                message: `Timing allows for ${estimatedItems} items, consider adjusting`,
                fix: {
                    path: 'timing.per_item_seconds',
                    value: Math.max(30, totalSeconds / 3) // Suggest 3 items minimum
                }
            });
        }
    }
}
/**
 * Validates item mix proportions are reasonable
 */ function validateItemMixProportions(config, issues, fixes) {
    if (config.item_mix) {
        const proportions = Object.values(config.item_mix);
        const maxProportion = Math.max(...proportions);
        if (maxProportion > 0.95) {
            issues.push({
                path: 'item_mix',
                code: 'MIX_TOO_CONCENTRATED',
                level: 'info',
                message: 'Item mix is very concentrated on one type',
                fix: undefined // No automatic fix for this
            });
        }
    }
}
/**
 * Sets a nested value in an object using dot notation
 */ function setNestedValue(obj, path, value) {
    const keys = path.split('.');
    let current = obj;
    for(let i = 0; i < keys.length - 1; i++){
        const key = keys[i];
        if (!(key in current)) {
            current[key] = {};
        }
        current = current[key];
    }
    current[keys[keys.length - 1]] = value;
}
function getNestedValue(obj, path) {
    return path.split('.').reduce((current, key)=>current?.[key], obj);
}
function validateField(config, fieldPath, value) {
    const tempConfig = {
        ...config
    };
    setNestedValue(tempConfig, fieldPath, value);
    const result = validateConfig(tempConfig);
    return result.issues.filter((issue)=>issue.path === fieldPath);
}
function hasCriticalErrors(config) {
    const result = validateConfig(config);
    return result.issues.some((issue)=>issue.level === 'error');
}
function getValidationSummary(config) {
    const result = validateConfig(config);
    return {
        errors: result.issues.filter((i)=>i.level === 'error').length,
        warnings: result.issues.filter((i)=>i.level === 'warning').length,
        info: result.issues.filter((i)=>i.level === 'info').length,
        total: result.issues.length
    };
}

//# sourceMappingURL=data:application/json;base64,