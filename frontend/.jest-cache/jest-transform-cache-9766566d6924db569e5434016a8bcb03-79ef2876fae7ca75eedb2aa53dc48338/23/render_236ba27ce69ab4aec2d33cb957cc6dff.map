{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/test-utils/render.tsx"],"sourcesContent":["import React from 'react';\nimport { render, RenderOptions } from '@testing-library/react';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { standardMocks } from '../mocks';\n\n/**\n * Custom render function with providers for consistent testing\n */\n\n// Create a test query client\nconst createTestQueryClient = () => new QueryClient({\n  defaultOptions: {\n    queries: {\n      retry: false,\n      cacheTime: 0,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n\n// Test providers wrapper\ninterface TestProvidersProps {\n  children: React.ReactNode;\n  queryClient?: QueryClient;\n}\n\nconst TestProviders: React.FC<TestProvidersProps> = ({ \n  children, \n  queryClient = createTestQueryClient() \n}) => {\n  return (\n    <QueryClientProvider client={queryClient}>\n      {children}\n    </QueryClientProvider>\n  );\n};\n\n// Custom render options\ninterface CustomRenderOptions extends Omit<RenderOptions, 'wrapper'> {\n  queryClient?: QueryClient;\n  withProviders?: boolean;\n  mockRouter?: boolean;\n  mockAPI?: boolean;\n}\n\n/**\n * Custom render function with providers\n */\nexport const renderWithProviders = (\n  ui: React.ReactElement,\n  options: CustomRenderOptions = {}\n) => {\n  const {\n    queryClient,\n    withProviders = true,\n    mockRouter = true,\n    mockAPI = true,\n    ...renderOptions\n  } = options;\n\n  // Setup mocks if requested\n  if (mockRouter) {\n    // Router mocks are handled by Jest mocks\n  }\n\n  if (mockAPI) {\n    // API mocks are handled by Jest mocks\n  }\n\n  const Wrapper = withProviders \n    ? ({ children }: { children: React.ReactNode }) => (\n        <TestProviders queryClient={queryClient}>\n          {children}\n        </TestProviders>\n      )\n    : undefined;\n\n  return render(ui, { wrapper: Wrapper, ...renderOptions });\n};\n\n/**\n * Render function specifically for file upload components\n */\nexport const renderFileUploadComponent = (\n  ui: React.ReactElement,\n  options: CustomRenderOptions = {}\n) => {\n  const { fileSystemMocks } = standardMocks;\n  \n  // Setup file system mocks\n  fileSystemMocks.setupStorageMocks();\n\n  return renderWithProviders(ui, {\n    withProviders: true,\n    mockRouter: true,\n    mockAPI: true,\n    ...options\n  });\n};\n\n/**\n * Render function for wizard components\n */\nexport const renderWizardComponent = (\n  ui: React.ReactElement,\n  options: CustomRenderOptions = {}\n) => {\n  const { navigationMocks } = standardMocks;\n  \n  // Setup navigation mocks\n  navigationMocks.reset();\n\n  return renderWithProviders(ui, {\n    withProviders: true,\n    mockRouter: true,\n    mockAPI: true,\n    ...options\n  });\n};\n\n/**\n * Render function for API-dependent components\n */\nexport const renderAPIComponent = (\n  ui: React.ReactElement,\n  options: CustomRenderOptions = {}\n) => {\n  const { apiMocks } = standardMocks;\n  \n  // Setup API mocks\n  apiMocks.setupMockResponses();\n\n  return renderWithProviders(ui, {\n    withProviders: true,\n    mockRouter: true,\n    mockAPI: true,\n    ...options\n  });\n};\n\n/**\n * Render function for isolated unit tests\n */\nexport const renderIsolatedComponent = (\n  ui: React.ReactElement,\n  options: CustomRenderOptions = {}\n) => {\n  return renderWithProviders(ui, {\n    withProviders: false,\n    mockRouter: false,\n    mockAPI: false,\n    ...options\n  });\n};\n\n/**\n * Helper to create a test wrapper with custom providers\n */\nexport const createTestWrapper = (\n  additionalProviders?: React.ComponentType<{ children: React.ReactNode }>\n) => {\n  return ({ children }: { children: React.ReactNode }) => {\n    const content = additionalProviders \n      ? React.createElement(additionalProviders, { children })\n      : children;\n\n    return (\n      <TestProviders>\n        {content}\n      </TestProviders>\n    );\n  };\n};\n\n/**\n * Helper to render with specific context providers\n */\nexport const renderWithContext = (\n  ui: React.ReactElement,\n  contextProviders: React.ComponentType<{ children: React.ReactNode }>[],\n  options: CustomRenderOptions = {}\n) => {\n  const Wrapper = ({ children }: { children: React.ReactNode }) => {\n    return contextProviders.reduceRight(\n      (acc, Provider) => React.createElement(Provider, { children: acc }),\n      children\n    );\n  };\n\n  return renderWithProviders(ui, {\n    ...options,\n    wrapper: ({ children }) => (\n      <TestProviders>\n        <Wrapper>{children}</Wrapper>\n      </TestProviders>\n    )\n  });\n};\n\n// Re-export everything from React Testing Library\nexport * from '@testing-library/react';\n\n// Export custom render functions\nexport {\n  renderWithProviders,\n  renderFileUploadComponent,\n  renderWizardComponent,\n  renderAPIComponent,\n  renderIsolatedComponent,\n  createTestWrapper,\n  renderWithContext,\n  TestProviders,\n  createTestQueryClient\n};\n"],"names":["TestProviders","createTestQueryClient","createTestWrapper","renderAPIComponent","renderFileUploadComponent","renderIsolatedComponent","renderWithContext","renderWithProviders","renderWizardComponent","QueryClient","defaultOptions","queries","retry","cacheTime","mutations","children","queryClient","QueryClientProvider","client","ui","options","withProviders","mockRouter","mockAPI","renderOptions","Wrapper","undefined","render","wrapper","fileSystemMocks","standardMocks","setupStorageMocks","navigationMocks","reset","apiMocks","setupMockResponses","additionalProviders","content","React","createElement","contextProviders","reduceRight","acc","Provider"],"mappings":"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"}