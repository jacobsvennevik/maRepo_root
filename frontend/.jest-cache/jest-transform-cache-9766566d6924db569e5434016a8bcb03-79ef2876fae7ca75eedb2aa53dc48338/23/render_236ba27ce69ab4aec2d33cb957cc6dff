389c8201a670d6c47d401a76759e0af7
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    TestProviders: function() {
        return TestProviders;
    },
    createTestQueryClient: function() {
        return createTestQueryClient;
    },
    createTestWrapper: function() {
        return createTestWrapper;
    },
    renderAPIComponent: function() {
        return renderAPIComponent;
    },
    renderFileUploadComponent: function() {
        return renderFileUploadComponent;
    },
    renderIsolatedComponent: function() {
        return renderIsolatedComponent;
    },
    renderWithContext: function() {
        return renderWithContext;
    },
    renderWithProviders: function() {
        return renderWithProviders;
    },
    renderWizardComponent: function() {
        return renderWizardComponent;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = _export_star(require("@testing-library/react"), exports);
const _reactquery = require("@tanstack/react-query");
const _mocks = require("../mocks");
function _export_star(from, to) {
    Object.keys(from).forEach(function(k) {
        if (k !== "default" && !Object.prototype.hasOwnProperty.call(to, k)) {
            Object.defineProperty(to, k, {
                enumerable: true,
                get: function() {
                    return from[k];
                }
            });
        }
    });
    return from;
}
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
/**
 * Custom render function with providers for consistent testing
 */ // Create a test query client
const createTestQueryClient = ()=>new _reactquery.QueryClient({
        defaultOptions: {
            queries: {
                retry: false,
                cacheTime: 0
            },
            mutations: {
                retry: false
            }
        }
    });
const TestProviders = ({ children, queryClient = createTestQueryClient() })=>{
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactquery.QueryClientProvider, {
        client: queryClient,
        children: children
    });
};
const renderWithProviders = (ui, options = {})=>{
    const { queryClient, withProviders = true, mockRouter = true, mockAPI = true, ...renderOptions } = options;
    // Setup mocks if requested
    if (mockRouter) {
    // Router mocks are handled by Jest mocks
    }
    if (mockAPI) {
    // API mocks are handled by Jest mocks
    }
    const Wrapper = withProviders ? ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)(TestProviders, {
            queryClient: queryClient,
            children: children
        }) : undefined;
    return (0, _react1.render)(ui, {
        wrapper: Wrapper,
        ...renderOptions
    });
};
const renderFileUploadComponent = (ui, options = {})=>{
    const { fileSystemMocks } = _mocks.standardMocks;
    // Setup file system mocks
    fileSystemMocks.setupStorageMocks();
    return renderWithProviders(ui, {
        withProviders: true,
        mockRouter: true,
        mockAPI: true,
        ...options
    });
};
const renderWizardComponent = (ui, options = {})=>{
    const { navigationMocks } = _mocks.standardMocks;
    // Setup navigation mocks
    navigationMocks.reset();
    return renderWithProviders(ui, {
        withProviders: true,
        mockRouter: true,
        mockAPI: true,
        ...options
    });
};
const renderAPIComponent = (ui, options = {})=>{
    const { apiMocks } = _mocks.standardMocks;
    // Setup API mocks
    apiMocks.setupMockResponses();
    return renderWithProviders(ui, {
        withProviders: true,
        mockRouter: true,
        mockAPI: true,
        ...options
    });
};
const renderIsolatedComponent = (ui, options = {})=>{
    return renderWithProviders(ui, {
        withProviders: false,
        mockRouter: false,
        mockAPI: false,
        ...options
    });
};
const createTestWrapper = (additionalProviders)=>{
    return ({ children })=>{
        const content = additionalProviders ? /*#__PURE__*/ _react.default.createElement(additionalProviders, {
            children
        }) : children;
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(TestProviders, {
            children: content
        });
    };
};
const renderWithContext = (ui, contextProviders, options = {})=>{
    const Wrapper = ({ children })=>{
        return contextProviders.reduceRight((acc, Provider)=>/*#__PURE__*/ _react.default.createElement(Provider, {
                children: acc
            }), children);
    };
    return renderWithProviders(ui, {
        ...options,
        wrapper: ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)(TestProviders, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(Wrapper, {
                    children: children
                })
            })
    });
};

//# sourceMappingURL=data:application/json;base64,