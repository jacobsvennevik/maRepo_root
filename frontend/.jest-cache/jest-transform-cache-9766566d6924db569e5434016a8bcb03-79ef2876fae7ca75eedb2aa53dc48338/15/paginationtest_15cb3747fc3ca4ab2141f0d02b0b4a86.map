{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/lib/api/pagination.test.ts"],"sourcesContent":["import { unwrapResults, isPaginated, getCount, type Paginated } from '@/lib/api/pagination';\n\ndescribe('Pagination Helpers', () => {\n  describe('unwrapResults', () => {\n    it('should handle paginated responses', () => {\n      const paginatedData: Paginated<string> = {\n        results: ['a', 'b', 'c'],\n        count: 3,\n        next: null,\n        previous: null\n      };\n      \n      const result = unwrapResults<string>(paginatedData);\n      expect(result).toEqual(['a', 'b', 'c']);\n    });\n\n    it('should handle direct arrays', () => {\n      const arrayData = ['x', 'y', 'z'];\n      \n      const result = unwrapResults<string>(arrayData);\n      expect(result).toEqual(['x', 'y', 'z']);\n    });\n\n    it('should handle malformed data', () => {\n      const malformedData = { results: 'not an array' };\n      \n      const result = unwrapResults<string>(malformedData);\n      expect(result).toEqual([]);\n    });\n\n    it('should handle null/undefined', () => {\n      expect(unwrapResults<string>(null)).toEqual([]);\n      expect(unwrapResults<string>(undefined)).toEqual([]);\n    });\n\n    it('should handle empty objects', () => {\n      expect(unwrapResults<string>({})).toEqual([]);\n    });\n  });\n\n  describe('isPaginated', () => {\n    it('should identify paginated responses', () => {\n      const paginatedData: Paginated<string> = {\n        results: ['a', 'b'],\n        count: 2,\n        next: null,\n        previous: null\n      };\n      \n      expect(isPaginated<string>(paginatedData)).toBe(true);\n    });\n\n    it('should reject non-paginated data', () => {\n      expect(isPaginated<string>(['a', 'b'])).toBe(false);\n      expect(isPaginated<string>({})).toBe(false);\n      expect(isPaginated<string>(null)).toBe(false);\n    });\n  });\n\n  describe('getCount', () => {\n    it('should get count from paginated data', () => {\n      const paginatedData: Paginated<string> = {\n        results: ['a', 'b', 'c'],\n        count: 3,\n        next: null,\n        previous: null\n      };\n      \n      expect(getCount(paginatedData)).toBe(3);\n    });\n\n    it('should get length from arrays', () => {\n      expect(getCount(['a', 'b'])).toBe(2);\n      expect(getCount([])).toBe(0);\n    });\n\n    it('should return 0 for other data', () => {\n      expect(getCount({})).toBe(0);\n      expect(getCount(null)).toBe(0);\n    });\n  });\n});\n"],"names":["describe","it","paginatedData","results","count","next","previous","result","unwrapResults","expect","toEqual","arrayData","malformedData","undefined","isPaginated","toBe","getCount"],"mappings":";;;;4BAAqE;AAErEA,SAAS,sBAAsB;IAC7BA,SAAS,iBAAiB;QACxBC,GAAG,qCAAqC;YACtC,MAAMC,gBAAmC;gBACvCC,SAAS;oBAAC;oBAAK;oBAAK;iBAAI;gBACxBC,OAAO;gBACPC,MAAM;gBACNC,UAAU;YACZ;YAEA,MAAMC,SAASC,IAAAA,yBAAa,EAASN;YACrCO,OAAOF,QAAQG,OAAO,CAAC;gBAAC;gBAAK;gBAAK;aAAI;QACxC;QAEAT,GAAG,+BAA+B;YAChC,MAAMU,YAAY;gBAAC;gBAAK;gBAAK;aAAI;YAEjC,MAAMJ,SAASC,IAAAA,yBAAa,EAASG;YACrCF,OAAOF,QAAQG,OAAO,CAAC;gBAAC;gBAAK;gBAAK;aAAI;QACxC;QAEAT,GAAG,gCAAgC;YACjC,MAAMW,gBAAgB;gBAAET,SAAS;YAAe;YAEhD,MAAMI,SAASC,IAAAA,yBAAa,EAASI;YACrCH,OAAOF,QAAQG,OAAO,CAAC,EAAE;QAC3B;QAEAT,GAAG,gCAAgC;YACjCQ,OAAOD,IAAAA,yBAAa,EAAS,OAAOE,OAAO,CAAC,EAAE;YAC9CD,OAAOD,IAAAA,yBAAa,EAASK,YAAYH,OAAO,CAAC,EAAE;QACrD;QAEAT,GAAG,+BAA+B;YAChCQ,OAAOD,IAAAA,yBAAa,EAAS,CAAC,IAAIE,OAAO,CAAC,EAAE;QAC9C;IACF;IAEAV,SAAS,eAAe;QACtBC,GAAG,uCAAuC;YACxC,MAAMC,gBAAmC;gBACvCC,SAAS;oBAAC;oBAAK;iBAAI;gBACnBC,OAAO;gBACPC,MAAM;gBACNC,UAAU;YACZ;YAEAG,OAAOK,IAAAA,uBAAW,EAASZ,gBAAgBa,IAAI,CAAC;QAClD;QAEAd,GAAG,oCAAoC;YACrCQ,OAAOK,IAAAA,uBAAW,EAAS;gBAAC;gBAAK;aAAI,GAAGC,IAAI,CAAC;YAC7CN,OAAOK,IAAAA,uBAAW,EAAS,CAAC,IAAIC,IAAI,CAAC;YACrCN,OAAOK,IAAAA,uBAAW,EAAS,OAAOC,IAAI,CAAC;QACzC;IACF;IAEAf,SAAS,YAAY;QACnBC,GAAG,wCAAwC;YACzC,MAAMC,gBAAmC;gBACvCC,SAAS;oBAAC;oBAAK;oBAAK;iBAAI;gBACxBC,OAAO;gBACPC,MAAM;gBACNC,UAAU;YACZ;YAEAG,OAAOO,IAAAA,oBAAQ,EAACd,gBAAgBa,IAAI,CAAC;QACvC;QAEAd,GAAG,iCAAiC;YAClCQ,OAAOO,IAAAA,oBAAQ,EAAC;gBAAC;gBAAK;aAAI,GAAGD,IAAI,CAAC;YAClCN,OAAOO,IAAAA,oBAAQ,EAAC,EAAE,GAAGD,IAAI,CAAC;QAC5B;QAEAd,GAAG,kCAAkC;YACnCQ,OAAOO,IAAAA,oBAAQ,EAAC,CAAC,IAAID,IAAI,CAAC;YAC1BN,OAAOO,IAAAA,oBAAQ,EAAC,OAAOD,IAAI,CAAC;QAC9B;IACF;AACF"}