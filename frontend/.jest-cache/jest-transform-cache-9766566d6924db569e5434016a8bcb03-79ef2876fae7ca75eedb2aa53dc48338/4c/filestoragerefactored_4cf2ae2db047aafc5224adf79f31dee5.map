{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/features/projects/components/files/file-storage-refactored.tsx"],"sourcesContent":["\"use client\";\n\nimport React from 'react';\nimport { Upload } from 'lucide-react';\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useFileStorage } from '../../hooks/useFileStorage';\nimport { FileStorageHeader } from './file-storage-header';\nimport { FileStorageLoading } from './file-storage-loading';\nimport { FileStorageError } from './file-storage-error';\nimport { FileStorageEmpty } from './file-storage-empty';\nimport { RecentFileCard } from './recent-file-card';\nimport { FileTypeBreakdown } from './file-type-breakdown';\nimport { FileListView } from './file-list-view';\nimport { FileGridView } from './file-grid-view';\nimport { StorageUsageSidebar } from './storage-usage-sidebar';\nimport { FileDetailsPanel } from './file-details-panel';\n\nexport default function FileStorage() {\n  const {\n    // State\n    files,\n    filteredFiles,\n    loading,\n    uploading,\n    uploadProgress,\n    error,\n    uploadError,\n    viewMode,\n    sortBy,\n    filterBy,\n    searchQuery,\n    selectedFiles,\n    showDetails,\n    selectedFile,\n    storageStats,\n    \n    // Actions\n    setViewMode,\n    setSortBy,\n    setFilterBy,\n    setSearchQuery,\n    setShowDetails,\n    setSelectedFile,\n    \n    // File operations\n    fetchFiles,\n    handleFileSelect,\n    handleToggleFavorite,\n    handleSelectFile,\n    handleSelectAll,\n    handleFileAction,\n    handleBulkAction,\n    \n    // Refs\n    fileInputRef,\n  } = useFileStorage();\n\n  // Render loading state\n  if (loading) {\n    return <FileStorageLoading />;\n  }\n\n  // Render error state\n  if (error) {\n    return <FileStorageError error={error} onRetry={fetchFiles} />;\n  }\n\n  // Render empty state\n  if (files.length === 0) {\n    return <FileStorageEmpty onUpload={() => fileInputRef.current?.click()} />;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-white\">\n      {/* Header */}\n      <FileStorageHeader\n        viewMode={viewMode}\n        sortBy={sortBy}\n        filterBy={filterBy}\n        searchQuery={searchQuery}\n        uploading={uploading}\n        onUploadClick={() => fileInputRef.current?.click()}\n        onViewModeChange={setViewMode}\n        onSortChange={setSortBy}\n        onFilterChange={setFilterBy}\n        onSearchChange={setSearchQuery}\n      />\n\n      <div className=\"flex\">\n        {/* Main Content */}\n        <div className=\"flex-1 p-6\">\n          {/* Recently Modified Section */}\n          <div className=\"mb-8\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h2 className=\"text-lg font-semibold text-gray-900\">Recently modified</h2>\n              <Button variant=\"ghost\" size=\"sm\" className=\"text-ocean-600 hover:text-ocean-700\">\n                View all\n                <span className=\"ml-1\">‚Üí</span>\n              </Button>\n            </div>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {filteredFiles.slice(0, 3).map((file) => (\n                <RecentFileCard key={file.id} file={file} />\n              ))}\n            </div>\n          </div>\n\n          {/* All Files Section */}\n          <div>\n            {/* File Type Breakdown */}\n            <div className=\"mb-6\">\n              <FileTypeBreakdown files={filteredFiles} />\n            </div>\n\n            {/* Bulk Actions */}\n            {selectedFiles.size > 0 && (\n              <div className=\"mb-4 p-3 bg-ocean-50 border border-ocean-200 rounded-lg\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm text-ocean-700\">\n                    {selectedFiles.size} file{selectedFiles.size !== 1 ? 's' : ''} selected\n                  </span>\n                  <div className=\"flex items-center gap-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => handleBulkAction('favorite')}\n                    >\n                      <span className=\"mr-1\">‚≠ê</span>\n                      Favorite\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => handleBulkAction('download')}\n                    >\n                      <span className=\"mr-1\">‚¨áÔ∏è</span>\n                      Download\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => handleBulkAction('delete')}\n                      className=\"text-red-600 hover:text-red-700\"\n                    >\n                      <span className=\"mr-1\">üóëÔ∏è</span>\n                      Delete\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Files Display */}\n            {viewMode === 'list' ? (\n              <FileListView \n                files={filteredFiles}\n                selectedFiles={selectedFiles}\n                onSelectFile={handleSelectFile}\n                onSelectAll={handleSelectAll}\n                onToggleFavorite={handleToggleFavorite}\n                onFileAction={handleFileAction}\n              />\n            ) : (\n              <FileGridView \n                files={filteredFiles}\n                selectedFiles={selectedFiles}\n                onSelectFile={handleSelectFile}\n                onToggleFavorite={handleToggleFavorite}\n                onFileAction={handleFileAction}\n              />\n            )}\n          </div>\n        </div>\n\n        {/* Sidebar */}\n        <div className=\"w-80 border-l border-gray-200 bg-gray-50 p-6\">\n          <StorageUsageSidebar stats={storageStats} />\n        </div>\n      </div>\n\n      {/* Hidden file input */}\n      <input\n        ref={fileInputRef}\n        type=\"file\"\n        className=\"hidden\"\n        onChange={handleFileSelect}\n        accept=\".pdf,.docx,.pptx,.txt,.png,.jpg,.jpeg,.csv,.md,.zip,.mp4,.mp3,.wav\"\n      />\n\n      {/* Floating Upload Button (Mobile) */}\n      <div className=\"fixed bottom-6 right-6 z-50 md:hidden\">\n        <Button\n          variant=\"ocean\"\n          size=\"lg\"\n          onClick={() => fileInputRef.current?.click()}\n          disabled={uploading}\n          className=\"rounded-full shadow-lg h-14 w-14 p-0\"\n        >\n          <Upload className=\"h-6 w-6\" />\n        </Button>\n      </div>\n\n      {/* Upload Progress */}\n      {uploading && (\n        <div className=\"fixed bottom-4 right-4 bg-white border border-gray-200 rounded-lg shadow-lg p-4 w-80 z-50\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <span className=\"text-sm font-medium\">Uploading...</span>\n            <span className=\"text-sm text-gray-500\">{uploadProgress}%</span>\n          </div>\n          <Progress value={uploadProgress} className=\"h-2\" />\n        </div>\n      )}\n\n      {/* File Details Side Panel */}\n      {showDetails && selectedFile && (\n        <FileDetailsPanel \n          file={selectedFile}\n          onClose={() => setShowDetails(false)}\n        />\n      )}\n    </div>\n  );\n}\n\n"],"names":["FileStorage","files","filteredFiles","loading","uploading","uploadProgress","error","uploadError","viewMode","sortBy","filterBy","searchQuery","selectedFiles","showDetails","selectedFile","storageStats","setViewMode","setSortBy","setFilterBy","setSearchQuery","setShowDetails","setSelectedFile","fetchFiles","handleFileSelect","handleToggleFavorite","handleSelectFile","handleSelectAll","handleFileAction","handleBulkAction","fileInputRef","useFileStorage","FileStorageLoading","FileStorageError","onRetry","length","FileStorageEmpty","onUpload","current","click","div","className","FileStorageHeader","onUploadClick","onViewModeChange","onSortChange","onFilterChange","onSearchChange","h2","Button","variant","size","span","slice","map","file","RecentFileCard","id","FileTypeBreakdown","onClick","FileListView","onSelectFile","onSelectAll","onToggleFavorite","onFileAction","FileGridView","StorageUsageSidebar","stats","input","ref","type","onChange","accept","disabled","Upload","Progress","value","FileDetailsPanel","onClose"],"mappings":"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"}