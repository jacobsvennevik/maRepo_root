{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/features/projects/components/__tests__/file-upload-integration.test.tsx"],"sourcesContent":["/**\n * Test-Driven Development: Frontend File Upload Integration Tests\n * \n * These tests will initially FAIL (RED phase) and guide the implementation\n * of proper file upload and project creation functionality in the frontend.\n * \n * Test Mode Considerations:\n * - Tests work with both real and mock data\n * - AI calls are mocked via MOCK_REGISTRY\n * - File operations and database operations are REAL\n * - Only AI/LLM calls are mocked as per TEST_MODE_EXPLANATION.md\n */\n\nimport React from 'react';\nimport { screen, fireEvent, waitFor } from '@testing-library/react';\nimport '@testing-library/jest-dom';\n\n// Import centralized test utilities\nimport {\n  testFactories,\n  standardMocks\n} from '../../../../test-utils';\nimport { renderWithProviders } from '../../../../test-utils/setup/shared-setup';\nimport { setupFullTestEnvironment } from '../../../../test-utils/setup/shared-setup';\n\n// Setup test environment\nconst testEnv = setupFullTestEnvironment({\n  timeout: 10000,\n  includeAPI: true,\n  includeStorage: true,\n  includeNavigation: true\n});\n\nconst { apiMocks } = standardMocks;\n\n// Create project-specific mocks\nconst mockProjects = {\n  create: jest.fn(),\n  getDetail: jest.fn(),\n  uploadFile: jest.fn(),\n};\n\n// Mock the API service\njest.mock('../../../../services/api', () => ({\n  createProject: mockProjects.create,\n  uploadFileWithProgress: mockProjects.uploadFile,\n  getProjectDetail: mockProjects.getDetail,\n}));\n\n// Mock dependencies\njest.mock('next/navigation', () => ({\n  useRouter: () => ({\n    push: jest.fn(),\n    back: jest.fn(),\n    forward: jest.fn(),\n    refresh: jest.fn(),\n    replace: jest.fn()\n  }),\n  useParams: () => ({ projectId: 'test-project-123' })\n}));\n\njest.mock('next/dynamic', () => () => {\n  const DynamicComponent = () => <div>Dynamic Component</div>;\n  return DynamicComponent;\n});\n\n// Mock API services\njest.mock('../../services/api', () => ({\n  createProject: jest.fn(),\n  uploadFileWithProgress: jest.fn(),\n  APIError: jest.fn().mockImplementation((message: string, status: number) => {\n    const error = new Error(message) as Error & { status: number };\n    error.status = status;\n    return error;\n  })\n}));\n\n// Mock file upload component\njest.mock('@/components/ui/file-upload', () => ({\n  FileUpload: ({ onFileSelect, onError, ...props }: any) => (\n    <div data-testid=\"file-upload\">\n      <input\n        type=\"file\"\n        data-testid=\"file-input\"\n        onChange={(e) => {\n          if (e.target.files && e.target.files.length > 0) {\n            onFileSelect(Array.from(e.target.files));\n          }\n        }}\n        {...props}\n      />\n    </div>\n  )\n}));\n\n// Import components to test\nimport { FileUploadStep } from '../steps/file-upload-step';\nimport { FileStorage } from '../files/file-storage';\nimport { createProject, uploadFileWithProgress } from '../../services/api';\n\ndescribe('File Upload Integration Tests', () => {\n  const mockOnUploadComplete = jest.fn();\n  \n  beforeEach(() => {\n    jest.clearAllMocks();\n    mockOnUploadComplete.mockClear();\n  });\n\n  describe('File Upload Step - Project Creation', () => {\n    it('should create project and link files in test mode', async () => {\n      // Mock API responses\n      const mockProject = { \n        id: 'test-project-123', \n        name: 'Test Project',\n        project_type: 'school',\n        course_name: 'Test Course'\n      };\n      \n      const mockUploadResponse = { \n        success: true, \n        file_id: 'file-123',\n        filename: 'test.pdf'\n      };\n      \n      // Setup mocks\n      mockProjects.create.mockResolvedValue(mockProject);\n      mockProjects.uploadFile.mockResolvedValue(mockUploadResponse);\n      \n      // Render component\n      renderWithProviders(\n        <FileUploadStep onUploadComplete={mockOnUploadComplete} />\n      );\n      \n      // Simulate file upload\n      const file = new File(['test content'], 'test.pdf', { type: 'application/pdf' });\n      const fileInput = screen.getByTestId('file-input');\n      fireEvent.change(fileInput, { target: { files: [file] } });\n      \n      // Wait for upload to complete\n      await waitFor(() => {\n        expect(createProject).toHaveBeenCalledWith(\n          expect.objectContaining({\n            name: 'test',\n            project_type: 'school',\n            course_name: 'test',\n            is_draft: true\n          })\n        );\n        expect(uploadFileWithProgress).toHaveBeenCalledWith(\n          'test-project-123',\n          file,\n          expect.any(Function)\n        );\n        expect(mockOnUploadComplete).toHaveBeenCalledWith('test-project-123');\n      });\n    });\n\n    it('should handle file upload errors gracefully', async () => {\n      // Mock API error\n      mockProjects.create.mockRejectedValue(new Error('API Error'));\n      \n      // Render component\n      renderWithProviders(\n        <FileUploadStep onUploadComplete={mockOnUploadComplete} />\n      );\n      \n      // Simulate file upload\n      const file = new File(['test content'], 'test.pdf', { type: 'application/pdf' });\n      const fileInput = screen.getByTestId('file-input');\n      fireEvent.change(fileInput, { target: { files: [file] } });\n      \n      // Wait for error handling\n      await waitFor(() => {\n        expect(createProject).toHaveBeenCalled();\n        expect(mockOnUploadComplete).not.toHaveBeenCalled();\n      });\n      \n      // Should show error message\n      expect(screen.getByText(/error/i)).toBeInTheDocument();\n    });\n\n    it('should work with test mode enabled', async () => {\n      // Mock test mode environment\n      const originalEnv = process.env.NEXT_PUBLIC_TEST_MODE;\n      process.env.NEXT_PUBLIC_TEST_MODE = 'true';\n      \n      const mockProject = { \n        id: 'test-project-123', \n        name: 'Test Project' \n      };\n      \n      mockProjects.create.mockResolvedValue(mockProject);\n      \n      // Render component\n      renderWithProviders(\n        <FileUploadStep onUploadComplete={mockOnUploadComplete} />\n      );\n      \n      // In test mode, should automatically create project\n      await waitFor(() => {\n        expect(createProject).toHaveBeenCalledWith(\n          expect.objectContaining({\n            name: 'Test Project',\n            project_type: 'school',\n            course_name: 'Test Course',\n            is_draft: true\n          })\n        );\n        expect(mockOnUploadComplete).toHaveBeenCalledWith('test-project-123');\n      });\n      \n      // Restore environment\n      process.env.NEXT_PUBLIC_TEST_MODE = originalEnv;\n    });\n  });\n\n  describe('File Storage Component - File Display', () => {\n    it('should display uploaded files in Files section', async () => {\n      // Mock API responses\n      const mockProject = {\n        id: 'test-project-123',\n        name: 'Test Project',\n        uploaded_files: [\n          {\n            id: 'file-1',\n            original_name: 'test.pdf',\n            file_size: 1024,\n            uploaded_at: '2024-01-01T00:00:00Z',\n            processing_status: 'completed'\n          },\n          {\n            id: 'file-2',\n            original_name: 'document.docx',\n            file_size: 2048,\n            uploaded_at: '2024-01-02T00:00:00Z',\n            processing_status: 'pending'\n          }\n        ]\n      };\n      \n      // Mock API calls\n      mockProjects.getDetail.mockResolvedValue(mockProject);\n      \n      // Render component\n      renderWithProviders(<FileStorage />);\n      \n      // Wait for files to load\n      await waitFor(() => {\n        expect(screen.getByText('test.pdf')).toBeInTheDocument();\n        expect(screen.getByText('document.docx')).toBeInTheDocument();\n      });\n      \n      // Verify file details\n      expect(screen.getByText('1.0 KB')).toBeInTheDocument(); // File size\n      expect(screen.getByText('2.0 KB')).toBeInTheDocument(); // File size\n    });\n\n    it('should handle empty file list', async () => {\n      // Mock empty project\n      const mockProject = {\n        id: 'test-project-123',\n        name: 'Test Project',\n        uploaded_files: []\n      };\n      \n      mockProjects.getDetail.mockResolvedValue(mockProject);\n      \n      // Render component\n      renderWithProviders(<FileStorage />);\n      \n      // Wait for component to load\n      await waitFor(() => {\n        expect(screen.getByText(/no files/i)).toBeInTheDocument();\n      });\n    });\n\n    it('should handle file upload errors', async () => {\n      // Mock API error\n      mockProjects.getDetail.mockRejectedValue(new Error('API Error'));\n      \n      // Render component\n      renderWithProviders(<FileStorage />);\n      \n      // Wait for error handling\n      await waitFor(() => {\n        expect(screen.getByText(/failed to load files/i)).toBeInTheDocument();\n      });\n    });\n\n    it('should allow file upload to existing project', async () => {\n      // Mock project with existing files\n      const mockProject = {\n        id: 'test-project-123',\n        name: 'Test Project',\n        uploaded_files: [\n          {\n            id: 'file-1',\n            original_name: 'existing.pdf',\n            file_size: 1024,\n            uploaded_at: '2024-01-01T00:00:00Z',\n            processing_status: 'completed'\n          }\n        ]\n      };\n      \n      const mockUploadResponse = { \n        success: true, \n        file_id: 'file-2',\n        filename: 'new.pdf'\n      };\n      \n      // Setup mocks\n      mockProjects.getDetail.mockResolvedValue(mockProject);\n      mockProjects.uploadFile.mockResolvedValue(mockUploadResponse);\n      \n      // Render component\n      renderWithProviders(<FileStorage />);\n      \n      // Wait for existing files to load\n      await waitFor(() => {\n        expect(screen.getByText('existing.pdf')).toBeInTheDocument();\n      });\n      \n      // Simulate new file upload\n      const file = new File(['new content'], 'new.pdf', { type: 'application/pdf' });\n      const fileInput = screen.getByTestId('file-input');\n      fireEvent.change(fileInput, { target: { files: [file] } });\n      \n      // Wait for upload to complete\n      await waitFor(() => {\n        expect(mockProjects.uploadFile).toHaveBeenCalledWith(\n          'test-project-123',\n          file\n        );\n      });\n    });\n  });\n\n  describe('Complete Upload to Display Flow', () => {\n    it('should complete full flow from upload to display', async () => {\n      // Mock complete flow\n      const mockProject = { \n        id: 'test-project-123', \n        name: 'Test Project',\n        project_type: 'school',\n        course_name: 'Test Course'\n      };\n      \n      const mockUploadResponse = { \n        success: true, \n        file_id: 'file-123',\n        filename: 'test.pdf'\n      };\n      \n      const mockProjectWithFiles = {\n        ...mockProject,\n        uploaded_files: [\n          {\n            id: 'file-123',\n            original_name: 'test.pdf',\n            file_size: 1024,\n            uploaded_at: '2024-01-01T00:00:00Z',\n            processing_status: 'completed'\n          }\n        ]\n      };\n      \n      // Setup mocks\n      mockProjects.create.mockResolvedValue(mockProject);\n      mockProjects.uploadFile.mockResolvedValue(mockUploadResponse);\n      mockProjects.getDetail.mockResolvedValue(mockProjectWithFiles);\n      \n      // Step 1: Upload file and create project\n      renderWithProviders(\n        <FileUploadStep onUploadComplete={mockOnUploadComplete} />\n      );\n      \n      const file = new File(['test content'], 'test.pdf', { type: 'application/pdf' });\n      const fileInput = screen.getByTestId('file-input');\n      fireEvent.change(fileInput, { target: { files: [file] } });\n      \n      await waitFor(() => {\n        expect(mockOnUploadComplete).toHaveBeenCalledWith('test-project-123');\n      });\n      \n      // Step 2: Navigate to Files section and verify display\n      renderWithProviders(<FileStorage />);\n      \n      await waitFor(() => {\n        expect(screen.getByText('test.pdf')).toBeInTheDocument();\n        expect(screen.getByText('1.0 KB')).toBeInTheDocument();\n      });\n    });\n\n    it('should handle test mode with mock data', async () => {\n      // Mock test mode environment\n      const originalEnv = process.env.NEXT_PUBLIC_TEST_MODE;\n      process.env.NEXT_PUBLIC_TEST_MODE = 'true';\n      \n      const mockProject = { \n        id: 'test-project-123', \n        name: 'Test Project' \n      };\n      \n      const mockProjectWithFiles = {\n        ...mockProject,\n        uploaded_files: [\n          {\n            id: 'file-123',\n            original_name: 'mock.pdf',\n            file_size: 1024,\n            uploaded_at: '2024-01-01T00:00:00Z',\n            processing_status: 'completed'\n          }\n        ]\n      };\n      \n      // Setup mocks\n      mockProjects.create.mockResolvedValue(mockProject);\n      mockProjects.getDetail.mockResolvedValue(mockProjectWithFiles);\n      \n      // Test upload step in test mode\n      renderWithProviders(\n        <FileUploadStep onUploadComplete={mockOnUploadComplete} />\n      );\n      \n      await waitFor(() => {\n        expect(mockOnUploadComplete).toHaveBeenCalledWith('test-project-123');\n      });\n      \n      // Test file display\n      renderWithProviders(<FileStorage />);\n      \n      await waitFor(() => {\n        expect(screen.getByText('mock.pdf')).toBeInTheDocument();\n      });\n      \n      // Restore environment\n      process.env.NEXT_PUBLIC_TEST_MODE = originalEnv;\n    });\n  });\n\n  describe('Error Handling and Edge Cases', () => {\n    it('should handle network errors gracefully', async () => {\n      // Mock network error\n      mockProjects.create.mockRejectedValue(new Error('Network Error'));\n      \n      renderWithProviders(\n        <FileUploadStep onUploadComplete={mockOnUploadComplete} />\n      );\n      \n      const file = new File(['test content'], 'test.pdf', { type: 'application/pdf' });\n      const fileInput = screen.getByTestId('file-input');\n      fireEvent.change(fileInput, { target: { files: [file] } });\n      \n      await waitFor(() => {\n        expect(screen.getByText(/network error/i)).toBeInTheDocument();\n      });\n    });\n\n    it('should handle invalid file types', async () => {\n      renderWithProviders(\n        <FileUploadStep onUploadComplete={mockOnUploadComplete} />\n      );\n      \n      // Try to upload invalid file type\n      const file = new File(['test content'], 'test.exe', { type: 'application/exe' });\n      const fileInput = screen.getByTestId('file-input');\n      fireEvent.change(fileInput, { target: { files: [file] } });\n      \n      // Should show validation error\n      await waitFor(() => {\n        expect(screen.getByText(/invalid file type/i)).toBeInTheDocument();\n      });\n    });\n\n    it('should handle large file uploads', async () => {\n      const mockProject = { \n        id: 'test-project-123', \n        name: 'Test Project' \n      };\n      \n      mockProjects.create.mockResolvedValue(mockProject);\n      \n      renderWithProviders(\n        <FileUploadStep onUploadComplete={mockOnUploadComplete} />\n      );\n      \n      // Create large file (simulate)\n      const largeFile = new File(['x'.repeat(10 * 1024 * 1024)], 'large.pdf', { \n        type: 'application/pdf' \n      });\n      \n      const fileInput = screen.getByTestId('file-input');\n      fireEvent.change(fileInput, { target: { files: [largeFile] } });\n      \n      // Should handle large file upload\n      await waitFor(() => {\n        expect(createProject).toHaveBeenCalled();\n        expect(uploadFileWithProgress).toHaveBeenCalledWith(\n          'test-project-123',\n          largeFile,\n          expect.any(Function)\n        );\n      });\n    });\n  });\n});\n"],"names":["jest","mock","createProject","mockProjects","create","uploadFileWithProgress","uploadFile","getProjectDetail","getDetail","useRouter","push","fn","back","forward","refresh","replace","useParams","projectId","DynamicComponent","div","APIError","mockImplementation","message","status","error","Error","FileUpload","onFileSelect","onError","props","data-testid","input","type","onChange","e","target","files","length","Array","from","testEnv","setupFullTestEnvironment","timeout","includeAPI","includeStorage","includeNavigation","apiMocks","standardMocks","describe","mockOnUploadComplete","beforeEach","clearAllMocks","mockClear","it","mockProject","id","name","project_type","course_name","mockUploadResponse","success","file_id","filename","mockResolvedValue","renderWithProviders","FileUploadStep","onUploadComplete","file","File","fileInput","screen","getByTestId","fireEvent","change","waitFor","expect","toHaveBeenCalledWith","objectContaining","is_draft","any","Function","mockRejectedValue","toHaveBeenCalled","not","getByText","toBeInTheDocument","originalEnv","process","env","NEXT_PUBLIC_TEST_MODE","uploaded_files","original_name","file_size","uploaded_at","processing_status","FileStorage","mockProjectWithFiles","largeFile","repeat"],"mappings":"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"}