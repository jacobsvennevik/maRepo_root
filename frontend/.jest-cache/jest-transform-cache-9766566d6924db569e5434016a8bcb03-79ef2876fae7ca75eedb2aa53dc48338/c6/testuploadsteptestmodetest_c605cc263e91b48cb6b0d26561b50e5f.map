{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/features/projects/components/__tests__/test-upload-step.test-mode.test.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { screen, waitFor } from \"@testing-library/react\";\nimport \"@testing-library/jest-dom\";\nimport { TestUploadStep } from \"../steps/test-upload-step\";\n\n// Import new centralized utilities\nimport {\n  renderWithProviders,\n  setupFullTestEnvironment,\n  testFactories,\n  standardMocks\n} from \"../../../../../src/test-utils\";\n\n// Setup test environment\nconst testEnv = setupFullTestEnvironment();\nconst { createTestFile } = testFactories;\nconst { apiMocks } = standardMocks;\n\ndescribe(\"TestUploadStep - Test Mode\", () => {\n  beforeEach(() => {\n    testEnv.mocks.resetAll();\n  });\n\n  it(\"should render test mode banner and handle mock analysis\", async () => {\n    renderWithProviders(\n      <TestUploadStep\n        onUploadComplete={jest.fn()}\n        onAnalysisComplete={jest.fn()}\n        onNext={jest.fn()}\n        onBack={jest.fn()}\n      />\n    );\n\n    // Verify test mode banner is shown\n    expect(screen.getByText(/Test Mode/)).toBeInTheDocument();\n    expect(screen.getByText(/Mock data provides reliable test content/)).toBeInTheDocument();\n\n    // Verify component renders correctly\n    expect(screen.getByText(/Upload past tests and exams/)).toBeInTheDocument();\n    expect(screen.getByTestId(\"accepted-types\")).toHaveTextContent(\".pdf,.doc,.docx\");\n  });\n\n  it(\"should handle single test file upload and analysis\", async () => {\n    const mockCallbacks = {\n      onUploadComplete: jest.fn(),\n      onAnalysisComplete: jest.fn(),\n      onNext: jest.fn(),\n      onBack: jest.fn()\n    };\n\n    renderWithProviders(<TestUploadStep {...mockCallbacks} />);\n\n    // Create and upload test file\n    const { file } = createTestFile({\n      fileName: 'midterm_exam.pdf',\n      fileType: 'application/pdf',\n      content: 'test content'\n    });\n\n    const fileInput = screen.getByTestId(\"file-input\");\n    await testEnv.files.createTestFile().simulateFileUpload(fileInput, [file]);\n\n    // Verify file is listed and analysis starts\n    expect(screen.getByText(\"midterm_exam.pdf\")).toBeInTheDocument();\n    expect(screen.getByText(\"ðŸ§ª Simulating AI analysis...\")).toBeInTheDocument();\n\n    // Wait for completion\n    await waitFor(\n      () => {\n        expect(mockCallbacks.onUploadComplete).toHaveBeenCalledWith(\n          expect.arrayContaining([\n            expect.objectContaining({\n              id: expect.any(Number),\n              original_text: expect.stringContaining(\"Language Technology Quiz\"),\n              metadata: expect.objectContaining({\n                course_title: \"Natural Language Interaction\",\n                test_title: \"Quizes Lang Tech\",\n              }),\n              status: \"completed\",\n            })\n          ]),\n          expect.any(Array),\n          expect.any(Array)\n        );\n      },\n      { timeout: 5000 }\n    );\n  });\n\n  it(\"should handle multiple test files with different types\", async () => {\n    const mockCallbacks = {\n      onUploadComplete: jest.fn(),\n      onAnalysisComplete: jest.fn(),\n      onNext: jest.fn(),\n      onBack: jest.fn()\n    };\n\n    renderWithProviders(<TestUploadStep {...mockCallbacks} />);\n\n    // Create multiple test files\n    const testFiles = [\n      createTestFile({ fileName: 'midterm_exam.pdf', content: 'midterm content' }),\n      createTestFile({ fileName: 'final_exam.pdf', content: 'final content' }),\n      createTestFile({ fileName: 'quiz1.jpg', fileType: 'image/jpeg', content: 'quiz content' }),\n      createTestFile({ fileName: 'practice_test.png', fileType: 'image/png', content: 'practice content' })\n    ].map(({ file }) => file);\n\n    const fileInput = screen.getByTestId(\"file-input\");\n    await testEnv.files.createTestFile().simulateFileUpload(fileInput, testFiles);\n\n    // Verify all files are listed\n    testFiles.forEach((file) => {\n      expect(screen.getByText(file.name)).toBeInTheDocument();\n    });\n\n    // Verify analysis is starting\n    expect(screen.getByText(\"ðŸ§ª Simulating AI analysis...\")).toBeInTheDocument();\n\n    // Wait for completion\n    await waitFor(\n      () => {\n        expect(mockCallbacks.onUploadComplete).toHaveBeenCalledWith(\n          expect.arrayContaining([\n            expect.objectContaining({\n              id: expect.any(Number),\n              metadata: expect.objectContaining({\n                course_title: \"Natural Language Interaction\",\n                test_title: expect.any(String),\n              }),\n              status: \"completed\",\n            })\n          ]),\n          expect.any(Array),\n          expect.any(Array)\n        );\n      },\n      { timeout: 5000 }\n    );\n  });\n\n  it(\"should handle file removal\", async () => {\n    const mockCallbacks = {\n      onUploadComplete: jest.fn(),\n      onAnalysisComplete: jest.fn(),\n      onNext: jest.fn(),\n      onBack: jest.fn()\n    };\n\n    renderWithProviders(<TestUploadStep {...mockCallbacks} />);\n\n    // Upload test files\n    const testFiles = [\n      createTestFile({ fileName: 'test1.pdf', content: 'content1' }),\n      createTestFile({ fileName: 'test2.pdf', content: 'content2' })\n    ].map(({ file }) => file);\n\n    const fileInput = screen.getByTestId(\"file-input\");\n    await testEnv.files.createTestFile().simulateFileUpload(fileInput, testFiles);\n\n    // Verify both files are listed\n    expect(screen.getByText(\"test1.pdf\")).toBeInTheDocument();\n    expect(screen.getByText(\"test2.pdf\")).toBeInTheDocument();\n\n    // Note: Remove buttons are disabled during analysis in test mode\n    // This test verifies that files are displayed correctly\n    expect(screen.getByText(\"ðŸ§ª Simulating AI analysis...\")).toBeInTheDocument();\n  });\n});\n"],"names":["testEnv","setupFullTestEnvironment","createTestFile","testFactories","apiMocks","standardMocks","describe","beforeEach","mocks","resetAll","it","renderWithProviders","TestUploadStep","onUploadComplete","jest","fn","onAnalysisComplete","onNext","onBack","expect","screen","getByText","toBeInTheDocument","getByTestId","toHaveTextContent","mockCallbacks","file","fileName","fileType","content","fileInput","files","simulateFileUpload","waitFor","toHaveBeenCalledWith","arrayContaining","objectContaining","id","any","Number","original_text","stringContaining","metadata","course_title","test_title","status","Array","timeout","testFiles","map","forEach","name","String"],"mappings":"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"}