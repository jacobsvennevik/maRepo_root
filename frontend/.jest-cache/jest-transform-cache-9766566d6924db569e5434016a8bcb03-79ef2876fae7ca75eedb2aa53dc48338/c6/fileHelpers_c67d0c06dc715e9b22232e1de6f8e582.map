{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/utils/fileHelpers.ts"],"sourcesContent":["/**\n * File utility functions for handling file operations, size formatting, and validation\n */\n\n/**\n * Formats file size in bytes to human-readable format\n */\nexport function formatFileSize(bytes: number): string {\n  if (bytes === 0) return \"0 Bytes\";\n  const k = 1024;\n  const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\", \"TB\"];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  return `${parseFloat((bytes / Math.pow(k, i)).toFixed(2))} ${sizes[i]}`;\n}\n\n/**\n * Validates if a file type is accepted based on accept string\n */\nexport function validateFileType(file: File, acceptedTypes: string[]): boolean {\n  const fileType = file.type;\n  const fileName = file.name.toLowerCase();\n\n  return acceptedTypes.some((type) => {\n    const trimmedType = type.trim();\n    if (trimmedType.startsWith(\".\")) {\n      // Extension-based validation\n      return fileName.endsWith(trimmedType.toLowerCase());\n    } else {\n      // MIME type validation\n      return fileType === trimmedType;\n    }\n  });\n}\n\n/**\n * Converts file extensions to MIME types\n */\nexport function extensionToMimeType(extension: string): string {\n  const mimeTypeMap: Record<string, string> = {\n    \".pdf\": \"application/pdf\",\n    \".docx\":\n      \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n    \".txt\": \"text/plain\",\n    \".doc\": \"application/msword\",\n    \".xlsx\":\n      \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n    \".pptx\":\n      \"application/vnd.openxmlformats-officedocument.presentationml.presentation\",\n  };\n  return mimeTypeMap[extension.toLowerCase()] || extension;\n}\n\n/**\n * Formats accepted file types for display\n */\nexport function formatAcceptedTypes(accept: string): string {\n  return accept\n    .split(\",\")\n    .map((type) => {\n      const format = type.trim();\n      if (format === \"application/pdf\") return \"PDF\";\n      if (\n        format ===\n        \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"\n      )\n        return \"DOCX\";\n      if (format === \"text/plain\") return \"TXT\";\n      if (format.startsWith(\".\")) return format.slice(1).toUpperCase();\n      return format.toUpperCase();\n    })\n    .join(\", \");\n}\n\n/**\n * Validates file size against maximum allowed size\n */\nexport function validateFileSize(file: File, maxSize: number): boolean {\n  return file.size <= maxSize;\n}\n\n/**\n * Gets upload status based on progress value\n */\nexport function getUploadStatus(\n  fileName: string,\n  uploadProgress: Record<string, number>,\n): \"uploading\" | \"error\" | \"success\" | \"idle\" {\n  const progress = uploadProgress[fileName];\n  if (progress === undefined) return \"idle\";\n  if (progress === -1) return \"error\";\n  if (progress === 100) return \"success\";\n  return \"uploading\";\n}\n"],"names":["extensionToMimeType","formatAcceptedTypes","formatFileSize","getUploadStatus","validateFileSize","validateFileType","bytes","k","sizes","i","Math","floor","log","parseFloat","pow","toFixed","file","acceptedTypes","fileType","type","fileName","name","toLowerCase","some","trimmedType","trim","startsWith","endsWith","extension","mimeTypeMap","accept","split","map","format","slice","toUpperCase","join","maxSize","size","uploadProgress","progress","undefined"],"mappings":"AAAA;;CAEC,GAED;;CAEC;;;;;;;;;;;IA+BeA,mBAAmB;eAAnBA;;IAkBAC,mBAAmB;eAAnBA;;IAhDAC,cAAc;eAAdA;;IA4EAC,eAAe;eAAfA;;IAPAC,gBAAgB;eAAhBA;;IA1DAC,gBAAgB;eAAhBA;;;AAXT,SAASH,eAAeI,KAAa;IAC1C,IAAIA,UAAU,GAAG,OAAO;IACxB,MAAMC,IAAI;IACV,MAAMC,QAAQ;QAAC;QAAS;QAAM;QAAM;QAAM;KAAK;IAC/C,MAAMC,IAAIC,KAAKC,KAAK,CAACD,KAAKE,GAAG,CAACN,SAASI,KAAKE,GAAG,CAACL;IAChD,OAAO,GAAGM,WAAW,AAACP,CAAAA,QAAQI,KAAKI,GAAG,CAACP,GAAGE,EAAC,EAAGM,OAAO,CAAC,IAAI,CAAC,EAAEP,KAAK,CAACC,EAAE,EAAE;AACzE;AAKO,SAASJ,iBAAiBW,IAAU,EAAEC,aAAuB;IAClE,MAAMC,WAAWF,KAAKG,IAAI;IAC1B,MAAMC,WAAWJ,KAAKK,IAAI,CAACC,WAAW;IAEtC,OAAOL,cAAcM,IAAI,CAAC,CAACJ;QACzB,MAAMK,cAAcL,KAAKM,IAAI;QAC7B,IAAID,YAAYE,UAAU,CAAC,MAAM;YAC/B,6BAA6B;YAC7B,OAAON,SAASO,QAAQ,CAACH,YAAYF,WAAW;QAClD,OAAO;YACL,uBAAuB;YACvB,OAAOJ,aAAaM;QACtB;IACF;AACF;AAKO,SAASxB,oBAAoB4B,SAAiB;IACnD,MAAMC,cAAsC;QAC1C,QAAQ;QACR,SACE;QACF,QAAQ;QACR,QAAQ;QACR,SACE;QACF,SACE;IACJ;IACA,OAAOA,WAAW,CAACD,UAAUN,WAAW,GAAG,IAAIM;AACjD;AAKO,SAAS3B,oBAAoB6B,MAAc;IAChD,OAAOA,OACJC,KAAK,CAAC,KACNC,GAAG,CAAC,CAACb;QACJ,MAAMc,SAASd,KAAKM,IAAI;QACxB,IAAIQ,WAAW,mBAAmB,OAAO;QACzC,IACEA,WACA,2EAEA,OAAO;QACT,IAAIA,WAAW,cAAc,OAAO;QACpC,IAAIA,OAAOP,UAAU,CAAC,MAAM,OAAOO,OAAOC,KAAK,CAAC,GAAGC,WAAW;QAC9D,OAAOF,OAAOE,WAAW;IAC3B,GACCC,IAAI,CAAC;AACV;AAKO,SAAShC,iBAAiBY,IAAU,EAAEqB,OAAe;IAC1D,OAAOrB,KAAKsB,IAAI,IAAID;AACtB;AAKO,SAASlC,gBACdiB,QAAgB,EAChBmB,cAAsC;IAEtC,MAAMC,WAAWD,cAAc,CAACnB,SAAS;IACzC,IAAIoB,aAAaC,WAAW,OAAO;IACnC,IAAID,aAAa,CAAC,GAAG,OAAO;IAC5B,IAAIA,aAAa,KAAK,OAAO;IAC7B,OAAO;AACT"}