{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/components/ui/file-upload-modular.test.tsx"],"sourcesContent":["/**\n * FileUpload Modular Tests\n * \n * Modular test suite using reusable patterns and helpers for\n * file upload functionality testing.\n */\n\nimport * as React from \"react\";\nimport { screen, fireEvent } from \"@testing-library/react\";\nimport \"@testing-library/jest-dom\";\n\nimport { FileUpload } from \"./file-upload\";\nimport { \n  renderWithProviders,\n  fileUploadHelpers,\n  fileValidationHelpers,\n  fileUploadScenarios,\n  fileUploadTestUtils\n} from \"../../test-utils\";\n\ndescribe(\"FileUpload\", () => {\n  const mockOnUpload = jest.fn();\n  const mockOnRemove = jest.fn();\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  // ============================================================================\n  // Rendering Tests\n  // ============================================================================\n\n  describe('Rendering', () => {\n    it(\"renders with default props\", () => {\n      renderWithProviders(<FileUpload onUpload={mockOnUpload} />);\n\n      expect(screen.getByText(\"Drag & drop files here\")).toBeInTheDocument();\n      expect(screen.getByText(\"or click to browse\")).toBeInTheDocument();\n      expect(screen.getByText(\"Browse files\")).toBeInTheDocument();\n      expect(screen.getByText(/Max size:/)).toBeInTheDocument();\n      expect(screen.getByText(/Supported formats:/)).toBeInTheDocument();\n    });\n\n    it(\"renders with custom props\", () => {\n      const customProps = {\n        onUpload: mockOnUpload,\n        title: \"Custom Title\",\n        description: \"Custom Description\",\n        buttonText: \"Custom Button\",\n      };\n\n      renderWithProviders(<FileUpload {...customProps} />);\n\n      expect(screen.getByText(\"Custom Title\")).toBeInTheDocument();\n      expect(screen.getByText(\"Custom Description\")).toBeInTheDocument();\n      expect(screen.getByText(\"Custom Button\")).toBeInTheDocument();\n    });\n\n    it(\"renders with proper accessibility attributes\", () => {\n      renderWithProviders(<FileUpload onUpload={mockOnUpload} />);\n\n      const fileInput = screen.getByTestId(\"file-input\");\n      expect(fileInput).toHaveAttribute(\"type\", \"file\");\n      expect(fileInput).toBeInTheDocument();\n    });\n  });\n\n  // ============================================================================\n  // File Upload Tests (Using Patterns)\n  // ============================================================================\n\n  describe('File Upload', () => {\n    it('handles single file upload', async () => {\n      const files = fileUploadHelpers.createTestFiles([fileUploadScenarios.validFiles[0]]);\n      await fileUploadHelpers.uploadFiles(files);\n      \n      fileUploadHelpers.verifyFileInList(files[0].name);\n    });\n\n    it('handles multiple file uploads', async () => {\n      const files = fileUploadHelpers.createTestFiles(fileUploadScenarios.validFiles);\n      await fileUploadHelpers.uploadFiles(files);\n      \n      files.forEach(file => {\n        fileUploadHelpers.verifyFileInList(file.name);\n      });\n    });\n\n    it('handles empty file selection', async () => {\n      await fileUploadHelpers.uploadFiles([]);\n      fileUploadHelpers.verifyFileCount(0);\n    });\n  });\n\n  // ============================================================================\n  // File Validation Tests (Using Patterns)\n  // ============================================================================\n\n  describe('File Validation', () => {\n    it('validates file types and sizes', async () => {\n      await fileValidationHelpers.testValidationScenarios(fileUploadScenarios.validationScenarios);\n    });\n\n    it('handles mixed valid and invalid files', async () => {\n      await fileValidationHelpers.testMixedFileValidation();\n    });\n  });\n\n  // ============================================================================\n  // Drag & Drop Tests (Using Patterns)\n  // ============================================================================\n\n  describe('Drag & Drop', () => {\n    it('handles drag and drop', async () => {\n      const files = fileUploadHelpers.createTestFiles([fileUploadScenarios.validFiles[0]]);\n      await fileUploadHelpers.uploadFilesViaDragDrop(files);\n      \n      fileUploadHelpers.verifyFileInList(files[0].name);\n    });\n\n    it('handles drag over state', async () => {\n      renderWithProviders(<FileUpload onUpload={mockOnUpload} />);\n\n      const dropzone = screen.getByText(\"Drag & drop files here\").closest(\"div\");\n      \n      if (dropzone) {\n        fireEvent.dragOver(dropzone);\n        expect(dropzone).toHaveClass('drag-over');\n      }\n    });\n\n    it('handles multiple file drag and drop', async () => {\n      const files = fileUploadHelpers.createTestFiles(fileUploadScenarios.validFiles);\n      await fileUploadHelpers.uploadFilesViaDragDrop(files);\n      \n      files.forEach(file => {\n        fileUploadHelpers.verifyFileInList(file.name);\n      });\n    });\n  });\n\n  // ============================================================================\n  // File Management Tests (Using Patterns)\n  // ============================================================================\n\n  describe('File Management', () => {\n    it('shows file list', () => {\n      const files = fileUploadHelpers.createTestFiles(fileUploadScenarios.validFiles);\n\n      renderWithProviders(\n        <FileUpload\n          onUpload={mockOnUpload}\n          files={files}\n        />\n      );\n\n      files.forEach(file => {\n        expect(screen.getByText(file.name)).toBeInTheDocument();\n      });\n    });\n\n    it('handles file removal', async () => {\n      const files = fileUploadHelpers.createTestFiles([fileUploadScenarios.validFiles[0]]);\n\n      renderWithProviders(\n        <FileUpload\n          onUpload={mockOnUpload}\n          onRemove={mockOnRemove}\n          files={files}\n        />\n      );\n\n      fileUploadHelpers.verifyFileInList(files[0].name);\n      await fileUploadHelpers.removeFile(files[0].name);\n      fileUploadHelpers.verifyFileNotInList(files[0].name);\n    });\n\n    it('shows file count', () => {\n      const files = fileUploadHelpers.createTestFiles(fileUploadScenarios.validFiles);\n\n      renderWithProviders(\n        <FileUpload\n          onUpload={mockOnUpload}\n          files={files}\n        />\n      );\n\n      fileUploadHelpers.verifyFileCount(files.length);\n    });\n  });\n\n  // ============================================================================\n  // Upload Progress Tests (Using Patterns)\n  // ============================================================================\n\n  describe('Upload Progress', () => {\n    it('shows upload progress', () => {\n      const files = fileUploadHelpers.createTestFiles([fileUploadScenarios.validFiles[0]]);\n\n      renderWithProviders(\n        <FileUpload\n          onUpload={mockOnUpload}\n          files={files}\n          uploadProgress={{ [files[0].name]: 50 }}\n        />\n      );\n\n      fileUploadHelpers.verifyUploadProgress(files[0].name, 50);\n    });\n\n    it('shows multiple file progress', () => {\n      const files = fileUploadHelpers.createTestFiles(fileUploadScenarios.validFiles);\n\n      renderWithProviders(\n        <FileUpload\n          onUpload={mockOnUpload}\n          files={files}\n          uploadProgress={{ \n            [files[0].name]: 25, \n            [files[1].name]: 75 \n          }}\n        />\n      );\n\n      fileUploadHelpers.verifyUploadProgress(files[0].name, 25);\n      fileUploadHelpers.verifyUploadProgress(files[1].name, 75);\n    });\n\n    it('shows completion state', () => {\n      const files = fileUploadHelpers.createTestFiles([fileUploadScenarios.validFiles[0]]);\n\n      renderWithProviders(\n        <FileUpload\n          onUpload={mockOnUpload}\n          files={files}\n          uploadProgress={{ [files[0].name]: 100 }}\n        />\n      );\n\n      expect(screen.getByText(/upload complete/i)).toBeInTheDocument();\n    });\n  });\n\n  // ============================================================================\n  // Complete Test Suite (Using Test Utils)\n  // ============================================================================\n\n  describe('Complete File Upload Suite', () => {\n    const fileUploadSuite = fileUploadTestUtils.createFileUploadTestSuite(FileUpload, { onUpload: mockOnUpload });\n\n    it('file upload flow', async () => {\n      await fileUploadSuite.testFileUpload();\n    });\n\n    it('file validation', async () => {\n      await fileUploadSuite.testFileValidation();\n    });\n\n    it('drag and drop', async () => {\n      await fileUploadSuite.testDragAndDrop();\n    });\n\n    it('file removal', async () => {\n      await fileUploadSuite.testFileRemoval();\n    });\n\n    it('upload progress', async () => {\n      await fileUploadSuite.testUploadProgress();\n    });\n\n    it('error handling', async () => {\n      await fileUploadSuite.testErrorHandling();\n    });\n\n    it('accessibility', async () => {\n      await fileUploadSuite.testAccessibility();\n    });\n\n    it('performance', async () => {\n      await fileUploadSuite.testPerformance();\n    });\n  });\n});\n"],"names":["describe","mockOnUpload","jest","fn","mockOnRemove","beforeEach","clearAllMocks","it","renderWithProviders","FileUpload","onUpload","expect","screen","getByText","toBeInTheDocument","customProps","title","description","buttonText","fileInput","getByTestId","toHaveAttribute","files","fileUploadHelpers","createTestFiles","fileUploadScenarios","validFiles","uploadFiles","verifyFileInList","name","forEach","file","verifyFileCount","fileValidationHelpers","testValidationScenarios","validationScenarios","testMixedFileValidation","uploadFilesViaDragDrop","dropzone","closest","fireEvent","dragOver","toHaveClass","onRemove","removeFile","verifyFileNotInList","length","uploadProgress","verifyUploadProgress","fileUploadSuite","fileUploadTestUtils","createFileUploadTestSuite","testFileUpload","testFileValidation","testDragAndDrop","testFileRemoval","testUploadProgress","testErrorHandling","testAccessibility","testPerformance"],"mappings":"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"}