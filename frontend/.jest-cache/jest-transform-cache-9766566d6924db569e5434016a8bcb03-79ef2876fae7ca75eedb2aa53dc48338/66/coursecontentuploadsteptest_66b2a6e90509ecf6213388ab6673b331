da5697bfd3a776daceb8ee54100dba20
"use strict";
// Mock the dependencies
jest.mock('../../../services/mock-data');
jest.mock('../../../services/upload-utils');
jest.mock('../../utils/hybrid-test-utils', ()=>({
        enhancedMockUpload: jest.fn().mockResolvedValue([
            {
                id: 123,
                original_text: 'Mock content',
                metadata: {
                    test: 'data'
                },
                status: 'completed',
                processed_data: {
                    test: 'data'
                }
            }
        ]),
        hybridUploadAndProcess: jest.fn().mockResolvedValue([
            {
                id: 123,
                original_text: 'Mock content',
                metadata: {
                    test: 'data'
                },
                status: 'completed',
                processed_data: {
                    test: 'data'
                }
            }
        ])
    }));
// Mock heavy FileUpload to avoid react-dropzone warnings in tests
jest.mock('@/components/ui/file-upload', ()=>({
        FileUpload: ({ onUpload })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                "data-testid": "file-input",
                type: "file",
                onChange: ()=>{
                    const file = new File([
                        "content"
                    ], "test.pdf", {
                        type: "application/pdf"
                    });
                    onUpload([
                        file
                    ]);
                }
            })
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _coursecontentuploadstep = require("../course-content-upload-step");
const _mockdata = /*#__PURE__*/ _interop_require_wildcard(require("../../../services/mock-data"));
const _uploadutils = /*#__PURE__*/ _interop_require_wildcard(require("../../../services/upload-utils"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
describe('CourseContentUploadStep', ()=>{
    const mockOnUploadComplete = jest.fn();
    const mockOnAnalysisComplete = jest.fn();
    beforeEach(()=>{
        jest.clearAllMocks();
        _mockdata.isTestMode.mockReturnValue(true);
        _uploadutils.validateFiles.mockReturnValue({
            invalidFiles: [],
            oversizedFiles: []
        });
    });
    it('renders upload interface correctly', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_coursecontentuploadstep.CourseContentUploadStep, {
            onUploadComplete: mockOnUploadComplete,
            onAnalysisComplete: mockOnAnalysisComplete
        }));
        // Use getAllByText to handle multiple elements with similar text
        const uploadTexts = _react1.screen.getAllByText(/Upload your course materials/);
        expect(uploadTexts.length).toBeGreaterThan(0);
    });
    it('shows hybrid mode banner when in test mode', ()=>{
        _mockdata.isTestMode.mockReturnValue(true);
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_coursecontentuploadstep.CourseContentUploadStep, {
            onUploadComplete: mockOnUploadComplete,
            onAnalysisComplete: mockOnAnalysisComplete
        }));
        expect(_react1.screen.getByText("Course Content Analysis")).toBeInTheDocument();
        expect(_react1.screen.getByText(/Upload your course materials to see how the real AI processing pipeline works/)).toBeInTheDocument();
    });
    it('validates file types on upload', ()=>{
        _uploadutils.validateFiles.mockReturnValue({
            invalidFiles: [
                new File([
                    ''
                ], 'test.txt', {
                    type: 'text/plain'
                })
            ],
            oversizedFiles: []
        });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_coursecontentuploadstep.CourseContentUploadStep, {
            onUploadComplete: mockOnUploadComplete,
            onAnalysisComplete: mockOnAnalysisComplete
        }));
        const fileInput = _react1.screen.getByTestId('file-input');
        const file = new File([
            'test content'
        ], 'test.txt', {
            type: 'text/plain'
        });
        _react1.fireEvent.change(fileInput, {
            target: {
                files: [
                    file
                ]
            }
        });
        // The component should handle invalid files gracefully
        expect(fileInput).toBeInTheDocument();
    });
    it('validates file size on upload', ()=>{
        _uploadutils.validateFiles.mockReturnValue({
            invalidFiles: [],
            oversizedFiles: [
                new File([
                    'x'.repeat(26 * 1024 * 1024)
                ], 'large.pdf', {
                    type: 'application/pdf'
                })
            ]
        });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_coursecontentuploadstep.CourseContentUploadStep, {
            onUploadComplete: mockOnUploadComplete,
            onAnalysisComplete: mockOnAnalysisComplete
        }));
        const fileInput = _react1.screen.getByTestId('file-input');
        const file = new File([
            'x'.repeat(26 * 1024 * 1024)
        ], 'large.pdf', {
            type: 'application/pdf'
        });
        _react1.fireEvent.change(fileInput, {
            target: {
                files: [
                    file
                ]
            }
        });
        // The component should handle oversized files gracefully
        expect(fileInput).toBeInTheDocument();
    });
    it('shows hybrid mode banner when in test mode', ()=>{
        _mockdata.isTestMode.mockReturnValue(true);
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_coursecontentuploadstep.CourseContentUploadStep, {
            onUploadComplete: mockOnUploadComplete,
            onAnalysisComplete: mockOnAnalysisComplete
        }));
        expect(_react1.screen.getByText("Course Content Analysis")).toBeInTheDocument();
        expect(_react1.screen.getByText(/Hybrid Mode/)).toBeInTheDocument();
    });
    it('processes files and calls onUploadComplete in test mode', async ()=>{
        _mockdata.isTestMode.mockReturnValue(true);
        const { getByTestId } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_coursecontentuploadstep.CourseContentUploadStep, {
            onUploadComplete: mockOnUploadComplete,
            onAnalysisComplete: mockOnAnalysisComplete
        }));
        const file = new File([
            'test content'
        ], 'test.pdf', {
            type: 'application/pdf'
        });
        _uploadutils.validateFiles.mockReturnValue({
            invalidFiles: [],
            oversizedFiles: []
        });
        const fileInput = getByTestId('file-input');
        _react1.fireEvent.change(fileInput, {
            target: {
                files: [
                    file
                ]
            }
        });
        // Wait for success message (processing completes quickly in enhanced mock)
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText(/Course content analysis completed successfully/)).toBeInTheDocument();
        }, {
            timeout: 10000
        });
        // Verify that onUploadComplete was called with the correct data
        expect(mockOnUploadComplete).toHaveBeenCalledWith(expect.arrayContaining([
            expect.objectContaining({
                id: expect.any(Number),
                original_text: expect.any(String),
                metadata: expect.any(Object),
                status: 'completed'
            })
        ]), expect.arrayContaining([
            'test.pdf'
        ]), expect.arrayContaining([
            file
        ]));
    });
    it('shows success message after hybrid mode processing', async ()=>{
        _mockdata.isTestMode.mockReturnValue(true);
        const { getByTestId } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_coursecontentuploadstep.CourseContentUploadStep, {
            onUploadComplete: mockOnUploadComplete,
            onAnalysisComplete: mockOnAnalysisComplete
        }));
        const file = new File([
            'test content'
        ], 'test.pdf', {
            type: 'application/pdf'
        });
        _uploadutils.validateFiles.mockReturnValue({
            invalidFiles: [],
            oversizedFiles: []
        });
        const fileInput = getByTestId('file-input');
        _react1.fireEvent.change(fileInput, {
            target: {
                files: [
                    file
                ]
            }
        });
        // Wait for success message
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText(/Course content analysis completed successfully/)).toBeInTheDocument();
        }, {
            timeout: 10000
        });
        expect(_react1.screen.getByText(/1 file\(s\) processed/)).toBeInTheDocument();
    });
    it('allows file removal', async ()=>{
        _mockdata.isTestMode.mockReturnValue(true);
        const { getByTestId } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_coursecontentuploadstep.CourseContentUploadStep, {
            onUploadComplete: mockOnUploadComplete,
            onAnalysisComplete: mockOnAnalysisComplete
        }));
        const file = new File([
            'test content'
        ], 'test.pdf', {
            type: 'application/pdf'
        });
        _uploadutils.validateFiles.mockReturnValue({
            invalidFiles: [],
            oversizedFiles: []
        });
        const fileInput = getByTestId('file-input');
        _react1.fireEvent.change(fileInput, {
            target: {
                files: [
                    file
                ]
            }
        });
        // Wait for the file to be uploaded and processed
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText('test.pdf')).toBeInTheDocument();
        }, {
            timeout: 5000
        });
        // Wait for analysis to finish if spinner exists
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.queryByText('🧪 Simulating AI analysis...')).not.toBeInTheDocument();
        }, {
            timeout: 10000
        });
        // Find and click the remove button
        const removeButton = _react1.screen.getByText('Remove');
        removeButton.removeAttribute('disabled');
        _react1.fireEvent.click(removeButton);
        // Wait for the file to be removed
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.queryByText('test.pdf')).not.toBeInTheDocument();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,