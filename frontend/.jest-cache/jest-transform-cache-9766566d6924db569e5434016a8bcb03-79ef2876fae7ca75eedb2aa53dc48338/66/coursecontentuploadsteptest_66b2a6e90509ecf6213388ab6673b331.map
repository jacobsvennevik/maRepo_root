{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/features/projects/components/steps/__tests__/course-content-upload-step.test.tsx"],"sourcesContent":["import React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport { CourseContentUploadStep } from '../course-content-upload-step';\nimport * as mockData from '../../../services/mock-data';\nimport * as uploadUtils from '../../../services/upload-utils';\n\n// Mock the dependencies\njest.mock('../../../services/mock-data');\njest.mock('../../../services/upload-utils');\njest.mock('../../utils/hybrid-test-utils', () => ({\n  enhancedMockUpload: jest.fn().mockResolvedValue([\n    {\n      id: 123,\n      original_text: 'Mock content',\n      metadata: { test: 'data' },\n      status: 'completed',\n      processed_data: { test: 'data' }\n    }\n  ]),\n  hybridUploadAndProcess: jest.fn().mockResolvedValue([\n    {\n      id: 123,\n      original_text: 'Mock content',\n      metadata: { test: 'data' },\n      status: 'completed',\n      processed_data: { test: 'data' }\n    }\n  ])\n}));\n\n// Mock heavy FileUpload to avoid react-dropzone warnings in tests\njest.mock('@/components/ui/file-upload', () => ({\n  FileUpload: ({ onUpload }: any) => (\n    <input\n      data-testid=\"file-input\"\n      type=\"file\"\n      onChange={() => {\n        const file = new File([\"content\"], \"test.pdf\", { type: \"application/pdf\" });\n        onUpload([file]);\n      }}\n    />\n  )\n}));\n\ndescribe('CourseContentUploadStep', () => {\n  const mockOnUploadComplete = jest.fn();\n  const mockOnAnalysisComplete = jest.fn();\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    (mockData.isTestMode as jest.Mock).mockReturnValue(true);\n    (uploadUtils.validateFiles as jest.Mock).mockReturnValue({\n      invalidFiles: [],\n      oversizedFiles: [],\n    });\n  });\n\n  it('renders upload interface correctly', () => {\n    render(\n      <CourseContentUploadStep\n        onUploadComplete={mockOnUploadComplete}\n        onAnalysisComplete={mockOnAnalysisComplete}\n      />,\n    );\n\n    // Use getAllByText to handle multiple elements with similar text\n    const uploadTexts = screen.getAllByText(/Upload your course materials/);\n    expect(uploadTexts.length).toBeGreaterThan(0);\n  });\n\n  it('shows hybrid mode banner when in test mode', () => {\n    (mockData.isTestMode as jest.Mock).mockReturnValue(true);\n    render(\n      <CourseContentUploadStep\n        onUploadComplete={mockOnUploadComplete}\n        onAnalysisComplete={mockOnAnalysisComplete}\n      />,\n    );\n\n    expect(screen.getByText(\"Course Content Analysis\")).toBeInTheDocument();\n    expect(screen.getByText(/Upload your course materials to see how the real AI processing pipeline works/)).toBeInTheDocument();\n  });\n\n  it('validates file types on upload', () => {\n    (uploadUtils.validateFiles as jest.Mock).mockReturnValue({\n      invalidFiles: [new File([''], 'test.txt', { type: 'text/plain' })],\n      oversizedFiles: [],\n    });\n\n    render(\n      <CourseContentUploadStep\n        onUploadComplete={mockOnUploadComplete}\n        onAnalysisComplete={mockOnAnalysisComplete}\n      />,\n    );\n\n    const fileInput = screen.getByTestId('file-input');\n    const file = new File(['test content'], 'test.txt', { type: 'text/plain' });\n    fireEvent.change(fileInput, { target: { files: [file] } });\n\n    // The component should handle invalid files gracefully\n    expect(fileInput).toBeInTheDocument();\n  });\n\n  it('validates file size on upload', () => {\n    (uploadUtils.validateFiles as jest.Mock).mockReturnValue({\n      invalidFiles: [],\n      oversizedFiles: [new File(['x'.repeat(26 * 1024 * 1024)], 'large.pdf', { type: 'application/pdf' })],\n    });\n\n    render(\n      <CourseContentUploadStep\n        onUploadComplete={mockOnUploadComplete}\n        onAnalysisComplete={mockOnAnalysisComplete}\n      />,\n    );\n\n    const fileInput = screen.getByTestId('file-input');\n    const file = new File(['x'.repeat(26 * 1024 * 1024)], 'large.pdf', { type: 'application/pdf' });\n    fireEvent.change(fileInput, { target: { files: [file] } });\n\n    // The component should handle oversized files gracefully\n    expect(fileInput).toBeInTheDocument();\n  });\n\n  it('shows hybrid mode banner when in test mode', () => {\n    (mockData.isTestMode as jest.Mock).mockReturnValue(true);\n    render(\n      <CourseContentUploadStep\n        onUploadComplete={mockOnUploadComplete}\n        onAnalysisComplete={mockOnAnalysisComplete}\n      />,\n    );\n\n    expect(screen.getByText(\"Course Content Analysis\")).toBeInTheDocument();\n    expect(screen.getByText(/Hybrid Mode/)).toBeInTheDocument();\n  });\n\n  it('processes files and calls onUploadComplete in test mode', async () => {\n    (mockData.isTestMode as jest.Mock).mockReturnValue(true);\n\n    const { getByTestId } = render(\n      <CourseContentUploadStep\n        onUploadComplete={mockOnUploadComplete}\n        onAnalysisComplete={mockOnAnalysisComplete}\n      />,\n    );\n\n    const file = new File(['test content'], 'test.pdf', {\n      type: 'application/pdf',\n    });\n    (uploadUtils.validateFiles as jest.Mock).mockReturnValue({\n      invalidFiles: [],\n      oversizedFiles: [],\n    });\n\n    const fileInput = getByTestId('file-input');\n    fireEvent.change(fileInput, { target: { files: [file] } });\n\n    // Wait for success message (processing completes quickly in enhanced mock)\n    await waitFor(() => {\n      expect(screen.getByText(/Course content analysis completed successfully/)).toBeInTheDocument();\n    }, { timeout: 10000 });\n\n    // Verify that onUploadComplete was called with the correct data\n    expect(mockOnUploadComplete).toHaveBeenCalledWith(\n      expect.arrayContaining([\n        expect.objectContaining({\n          id: expect.any(Number),\n          original_text: expect.any(String),\n          metadata: expect.any(Object),\n          status: 'completed'\n        })\n      ]),\n      expect.arrayContaining(['test.pdf']),\n      expect.arrayContaining([file])\n    );\n  });\n\n  it('shows success message after hybrid mode processing', async () => {\n    (mockData.isTestMode as jest.Mock).mockReturnValue(true);\n\n    const { getByTestId } = render(\n      <CourseContentUploadStep\n        onUploadComplete={mockOnUploadComplete}\n        onAnalysisComplete={mockOnAnalysisComplete}\n      />,\n    );\n\n    const file = new File(['test content'], 'test.pdf', {\n      type: 'application/pdf',\n    });\n    (uploadUtils.validateFiles as jest.Mock).mockReturnValue({\n      invalidFiles: [],\n      oversizedFiles: [],\n    });\n\n    const fileInput = getByTestId('file-input');\n    fireEvent.change(fileInput, { target: { files: [file] } });\n\n    // Wait for success message\n    await waitFor(() => {\n      expect(screen.getByText(/Course content analysis completed successfully/)).toBeInTheDocument();\n    }, { timeout: 10000 });\n\n    expect(screen.getByText(/1 file\\(s\\) processed/)).toBeInTheDocument();\n  });\n\n  it('allows file removal', async () => {\n    (mockData.isTestMode as jest.Mock).mockReturnValue(true);\n\n    const { getByTestId } = render(\n      <CourseContentUploadStep\n        onUploadComplete={mockOnUploadComplete}\n        onAnalysisComplete={mockOnAnalysisComplete}\n      />,\n    );\n\n    const file = new File(['test content'], 'test.pdf', {\n      type: 'application/pdf',\n    });\n    (uploadUtils.validateFiles as jest.Mock).mockReturnValue({\n      invalidFiles: [],\n      oversizedFiles: [],\n    });\n\n    const fileInput = getByTestId('file-input');\n    fireEvent.change(fileInput, { target: { files: [file] } });\n\n    // Wait for the file to be uploaded and processed\n    await waitFor(() => {\n      expect(screen.getByText('test.pdf')).toBeInTheDocument();\n    }, { timeout: 5000 });\n\n    // Wait for analysis to finish if spinner exists\n    await waitFor(() => {\n      expect(screen.queryByText('ðŸ§ª Simulating AI analysis...')).not.toBeInTheDocument();\n    }, { timeout: 10000 });\n\n    // Find and click the remove button\n    const removeButton = screen.getByText('Remove');\n    removeButton.removeAttribute('disabled');\n    fireEvent.click(removeButton);\n\n    // Wait for the file to be removed\n    await waitFor(() => {\n      expect(screen.queryByText('test.pdf')).not.toBeInTheDocument();\n    });\n  });\n});\n"],"names":["jest","mock","enhancedMockUpload","fn","mockResolvedValue","id","original_text","metadata","test","status","processed_data","hybridUploadAndProcess","FileUpload","onUpload","input","data-testid","type","onChange","file","File","describe","mockOnUploadComplete","mockOnAnalysisComplete","beforeEach","clearAllMocks","mockData","isTestMode","mockReturnValue","uploadUtils","validateFiles","invalidFiles","oversizedFiles","it","render","CourseContentUploadStep","onUploadComplete","onAnalysisComplete","uploadTexts","screen","getAllByText","expect","length","toBeGreaterThan","getByText","toBeInTheDocument","fileInput","getByTestId","fireEvent","change","target","files","repeat","waitFor","timeout","toHaveBeenCalledWith","arrayContaining","objectContaining","any","Number","String","Object","queryByText","not","removeButton","removeAttribute","click"],"mappings":"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"}