304532ff9272625f19694f305c4e76cc
/**
 * FileUpload Modular Tests
 * 
 * Modular test suite using reusable patterns and helpers for
 * file upload functionality testing.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _react1 = require("@testing-library/react");
require("@testing-library/jest-dom");
const _fileupload = require("./file-upload");
const _testutils = require("../../test-utils");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
describe("FileUpload", ()=>{
    const mockOnUpload = jest.fn();
    const mockOnRemove = jest.fn();
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    // ============================================================================
    // Rendering Tests
    // ============================================================================
    describe('Rendering', ()=>{
        it("renders with default props", ()=>{
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_fileupload.FileUpload, {
                onUpload: mockOnUpload
            }));
            expect(_react1.screen.getByText("Drag & drop files here")).toBeInTheDocument();
            expect(_react1.screen.getByText("or click to browse")).toBeInTheDocument();
            expect(_react1.screen.getByText("Browse files")).toBeInTheDocument();
            expect(_react1.screen.getByText(/Max size:/)).toBeInTheDocument();
            expect(_react1.screen.getByText(/Supported formats:/)).toBeInTheDocument();
        });
        it("renders with custom props", ()=>{
            const customProps = {
                onUpload: mockOnUpload,
                title: "Custom Title",
                description: "Custom Description",
                buttonText: "Custom Button"
            };
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_fileupload.FileUpload, {
                ...customProps
            }));
            expect(_react1.screen.getByText("Custom Title")).toBeInTheDocument();
            expect(_react1.screen.getByText("Custom Description")).toBeInTheDocument();
            expect(_react1.screen.getByText("Custom Button")).toBeInTheDocument();
        });
        it("renders with proper accessibility attributes", ()=>{
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_fileupload.FileUpload, {
                onUpload: mockOnUpload
            }));
            const fileInput = _react1.screen.getByTestId("file-input");
            expect(fileInput).toHaveAttribute("type", "file");
            expect(fileInput).toBeInTheDocument();
        });
    });
    // ============================================================================
    // File Upload Tests (Using Patterns)
    // ============================================================================
    describe('File Upload', ()=>{
        it('handles single file upload', async ()=>{
            const files = _testutils.fileUploadHelpers.createTestFiles([
                _testutils.fileUploadScenarios.validFiles[0]
            ]);
            await _testutils.fileUploadHelpers.uploadFiles(files);
            _testutils.fileUploadHelpers.verifyFileInList(files[0].name);
        });
        it('handles multiple file uploads', async ()=>{
            const files = _testutils.fileUploadHelpers.createTestFiles(_testutils.fileUploadScenarios.validFiles);
            await _testutils.fileUploadHelpers.uploadFiles(files);
            files.forEach((file)=>{
                _testutils.fileUploadHelpers.verifyFileInList(file.name);
            });
        });
        it('handles empty file selection', async ()=>{
            await _testutils.fileUploadHelpers.uploadFiles([]);
            _testutils.fileUploadHelpers.verifyFileCount(0);
        });
    });
    // ============================================================================
    // File Validation Tests (Using Patterns)
    // ============================================================================
    describe('File Validation', ()=>{
        it('validates file types and sizes', async ()=>{
            await _testutils.fileValidationHelpers.testValidationScenarios(_testutils.fileUploadScenarios.validationScenarios);
        });
        it('handles mixed valid and invalid files', async ()=>{
            await _testutils.fileValidationHelpers.testMixedFileValidation();
        });
    });
    // ============================================================================
    // Drag & Drop Tests (Using Patterns)
    // ============================================================================
    describe('Drag & Drop', ()=>{
        it('handles drag and drop', async ()=>{
            const files = _testutils.fileUploadHelpers.createTestFiles([
                _testutils.fileUploadScenarios.validFiles[0]
            ]);
            await _testutils.fileUploadHelpers.uploadFilesViaDragDrop(files);
            _testutils.fileUploadHelpers.verifyFileInList(files[0].name);
        });
        it('handles drag over state', async ()=>{
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_fileupload.FileUpload, {
                onUpload: mockOnUpload
            }));
            const dropzone = _react1.screen.getByText("Drag & drop files here").closest("div");
            if (dropzone) {
                _react1.fireEvent.dragOver(dropzone);
                expect(dropzone).toHaveClass('drag-over');
            }
        });
        it('handles multiple file drag and drop', async ()=>{
            const files = _testutils.fileUploadHelpers.createTestFiles(_testutils.fileUploadScenarios.validFiles);
            await _testutils.fileUploadHelpers.uploadFilesViaDragDrop(files);
            files.forEach((file)=>{
                _testutils.fileUploadHelpers.verifyFileInList(file.name);
            });
        });
    });
    // ============================================================================
    // File Management Tests (Using Patterns)
    // ============================================================================
    describe('File Management', ()=>{
        it('shows file list', ()=>{
            const files = _testutils.fileUploadHelpers.createTestFiles(_testutils.fileUploadScenarios.validFiles);
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_fileupload.FileUpload, {
                onUpload: mockOnUpload,
                files: files
            }));
            files.forEach((file)=>{
                expect(_react1.screen.getByText(file.name)).toBeInTheDocument();
            });
        });
        it('handles file removal', async ()=>{
            const files = _testutils.fileUploadHelpers.createTestFiles([
                _testutils.fileUploadScenarios.validFiles[0]
            ]);
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_fileupload.FileUpload, {
                onUpload: mockOnUpload,
                onRemove: mockOnRemove,
                files: files
            }));
            _testutils.fileUploadHelpers.verifyFileInList(files[0].name);
            await _testutils.fileUploadHelpers.removeFile(files[0].name);
            _testutils.fileUploadHelpers.verifyFileNotInList(files[0].name);
        });
        it('shows file count', ()=>{
            const files = _testutils.fileUploadHelpers.createTestFiles(_testutils.fileUploadScenarios.validFiles);
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_fileupload.FileUpload, {
                onUpload: mockOnUpload,
                files: files
            }));
            _testutils.fileUploadHelpers.verifyFileCount(files.length);
        });
    });
    // ============================================================================
    // Upload Progress Tests (Using Patterns)
    // ============================================================================
    describe('Upload Progress', ()=>{
        it('shows upload progress', ()=>{
            const files = _testutils.fileUploadHelpers.createTestFiles([
                _testutils.fileUploadScenarios.validFiles[0]
            ]);
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_fileupload.FileUpload, {
                onUpload: mockOnUpload,
                files: files,
                uploadProgress: {
                    [files[0].name]: 50
                }
            }));
            _testutils.fileUploadHelpers.verifyUploadProgress(files[0].name, 50);
        });
        it('shows multiple file progress', ()=>{
            const files = _testutils.fileUploadHelpers.createTestFiles(_testutils.fileUploadScenarios.validFiles);
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_fileupload.FileUpload, {
                onUpload: mockOnUpload,
                files: files,
                uploadProgress: {
                    [files[0].name]: 25,
                    [files[1].name]: 75
                }
            }));
            _testutils.fileUploadHelpers.verifyUploadProgress(files[0].name, 25);
            _testutils.fileUploadHelpers.verifyUploadProgress(files[1].name, 75);
        });
        it('shows completion state', ()=>{
            const files = _testutils.fileUploadHelpers.createTestFiles([
                _testutils.fileUploadScenarios.validFiles[0]
            ]);
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_fileupload.FileUpload, {
                onUpload: mockOnUpload,
                files: files,
                uploadProgress: {
                    [files[0].name]: 100
                }
            }));
            expect(_react1.screen.getByText(/upload complete/i)).toBeInTheDocument();
        });
    });
    // ============================================================================
    // Complete Test Suite (Using Test Utils)
    // ============================================================================
    describe('Complete File Upload Suite', ()=>{
        const fileUploadSuite = _testutils.fileUploadTestUtils.createFileUploadTestSuite(_fileupload.FileUpload, {
            onUpload: mockOnUpload
        });
        it('file upload flow', async ()=>{
            await fileUploadSuite.testFileUpload();
        });
        it('file validation', async ()=>{
            await fileUploadSuite.testFileValidation();
        });
        it('drag and drop', async ()=>{
            await fileUploadSuite.testDragAndDrop();
        });
        it('file removal', async ()=>{
            await fileUploadSuite.testFileRemoval();
        });
        it('upload progress', async ()=>{
            await fileUploadSuite.testUploadProgress();
        });
        it('error handling', async ()=>{
            await fileUploadSuite.testErrorHandling();
        });
        it('accessibility', async ()=>{
            await fileUploadSuite.testAccessibility();
        });
        it('performance', async ()=>{
            await fileUploadSuite.testPerformance();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,