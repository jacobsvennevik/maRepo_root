{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/features/projects/components/__tests__/syllabus-upload-real-flow.test.tsx"],"sourcesContent":["// Set environment variables before any imports to ensure they're available when the component is loaded\nprocess.env.NODE_ENV = \"development\";\nprocess.env.NEXT_PUBLIC_TEST_MODE = \"true\";\n\nimport * as React from \"react\";\nimport {\n  render,\n  screen,\n  fireEvent,\n  waitFor,\n  act,\n} from \"@testing-library/react\";\nimport \"@testing-library/jest-dom\";\nimport { SyllabusUploadStep } from \"../steps/syllabus-upload-step\";\nimport {\n  createLocalStorageMock,\n  createMockProjectSetup,\n  createTestFile,\n  createMockFetch,\n  simulateFileUpload,\n} from \"../../../../../test-utils/test-helpers\";\nimport {\n  setupTestCleanup,\n  createAPIServiceMock,\n  createUploadTestSetup,\n} from \"../../../../../test-utils/upload-test-helpers\";\n\n// Setup test environment using shared utilities\nconst { mocks, createBeforeEach, createAfterEach } = createUploadTestSetup();\nconst localStorageMock = createLocalStorageMock();\nconst mockFetch = (global as any).fetch || jest.fn();\n\n// Helper function to create test files\nconst createTestFile = (name: string = \"test.pdf\", content: string = \"test content\", type: string = \"application/pdf\"): File => {\n  return new File([content], name, { type });\n};\n\n// Helper function to simulate file upload\nconst simulateFileUpload = async (fileInput: HTMLElement, files: File | File[]) => {\n  const fileList = Array.isArray(files) ? files : [files];\n  await act(async () => {\n    fireEvent.change(fileInput, {\n      target: {\n        files: fileList,\n      },\n    });\n  });\n};\n\n// Mock the mock-data module to ensure isTestMode works correctly\njest.mock(\"../../services/mock-data\", () => ({\n  ...jest.requireActual(\"../../services/mock-data\"),\n  isTestMode: () => process.env.NODE_ENV === \"development\" && process.env.NEXT_PUBLIC_TEST_MODE === \"true\"\n}));\n\n// Mock the API module using shared utilities\njest.mock(\"../../services/api\", () => ({\n  createProject: jest.fn().mockResolvedValue({\n    id: \"project-123\",\n    name: \"Advanced Physics\",\n    project_type: \"school\",\n  }),\n  uploadFileWithProgress: jest.fn(),\n  APIError: jest.fn().mockImplementation((message: string, status: number) => {\n    const error = new Error(message) as Error & { statusCode: number };\n    error.statusCode = status;\n    return error;\n  }),\n}));\n\ndescribe(\"SyllabusUploadStep - Real Issue Reproduction\", () => {\n  const mockOnUploadComplete = jest.fn();\n  const mockOnBack = jest.fn();\n\n  beforeEach(() => {\n    // Clear all mocks before each test to ensure clean state\n    jest.clearAllMocks();\n    mockOnUploadComplete.mockClear();\n    mockOnBack.mockClear();\n  });\n\n  describe(\"Production Flow - User Reported Issue\", () => {\n    beforeEach(() => {\n      // Reset to production mode for these tests\n      process.env.NODE_ENV = \"production\";\n      process.env.NEXT_PUBLIC_TEST_MODE = \"false\";\n    });\n\n    it(\"should handle successful PDF upload and processing flow correctly\", async () => {\n      // Mock the complete API flow that should happen\n      let pollCount = 0;\n      mockFetch\n        // 1. Upload PDF - should succeed\n        .mockImplementationOnce(() =>\n          Promise.resolve({\n            ok: true,\n            json: () =>\n              Promise.resolve({\n                id: 123,\n                filename: \"syllabus.pdf\",\n                status: \"pending\",\n              }),\n          }),\n        )\n        // 2. Start processing - should succeed\n        .mockImplementationOnce(() =>\n          Promise.resolve({\n            ok: true,\n            json: () =>\n              Promise.resolve({\n                message: \"Processing started\",\n                document_id: 123,\n                task_id: \"task-123\", // Add task_id to fix the error\n              }),\n          }),\n        )\n        // 3. Polling requests - return processing status, then completed\n        .mockImplementation(() => {\n          pollCount++;\n          if (pollCount <= 3) {\n            return Promise.resolve({\n              ok: true,\n              json: () =>\n                Promise.resolve({\n                  id: 123,\n                  status: \"processing\",\n                  original_text: \"\",\n                  metadata: {},\n                }),\n            });\n          } else {\n            return Promise.resolve({\n              ok: true,\n              json: () =>\n                Promise.resolve({\n                  id: 123,\n                  status: \"completed\",\n                  original_text: \"Course: Advanced Physics\",\n                  processed_data: {\n                    course_name: \"Advanced Physics\",\n                    topics: [\"mechanics\", \"thermodynamics\"],\n                  },\n                  metadata: {\n                    course_name: \"Advanced Physics\",\n                    topics: [\"mechanics\", \"thermodynamics\"],\n                  },\n                }),\n            });\n          }\n        });\n\n      const setup = createMockProjectSetup({ projectName: \"Advanced Physics\" });\n\n      render(\n        <SyllabusUploadStep\n          setup={setup}\n          onUploadComplete={mockOnUploadComplete}\n          onBack={mockOnBack}\n        />,\n      );\n\n      // Find the file input and upload the file\n      const fileInput = screen.getByTestId(\"file-input\");\n      const testFile = createTestFile(\"syllabus.pdf\", \"test pdf content\");\n\n      await simulateFileUpload(fileInput, testFile);\n\n      // Wait for file to be displayed and analyze button to appear\n      await waitFor(() => {\n        expect(screen.getByText(\"syllabus.pdf\")).toBeInTheDocument();\n        expect(screen.getByTestId(\"analyze-button\")).toBeInTheDocument();\n      });\n\n      // Find and click the analyze button\n      const analyzeButton = screen.getByTestId(\"analyze-button\");\n\n      await act(async () => {\n        fireEvent.click(analyzeButton);\n      });\n\n      // Wait for the processing to complete and callback to be called\n      await waitFor(\n        () => {\n          expect(mockOnUploadComplete).toHaveBeenCalledWith(\n            \"project-123\",\n            expect.objectContaining({\n              id: 123,\n              status: \"completed\",\n              original_text: \"Course: Advanced Physics\",\n              metadata: expect.objectContaining({\n                course_name: \"Advanced Physics\",\n                topics: [\"mechanics\", \"thermodynamics\"],\n              }),\n            }),\n            \"syllabus.pdf\",\n          );\n        },\n        { timeout: 15000 },\n      );\n    }, 20000);\n\n    it(\"should handle API failure gracefully and show error message\", async () => {\n      // Mock upload failure\n      mockFetch.mockRejectedValueOnce(new Error(\"Upload failed\"));\n\n      const setup = createMockProjectSetup({ projectName: \"Advanced Physics\" });\n\n      render(\n        <SyllabusUploadStep\n          setup={setup}\n          onUploadComplete={mockOnUploadComplete}\n          onBack={mockOnBack}\n        />,\n      );\n\n      const fileInput = screen.getByTestId(\"file-input\");\n      const testFile = createTestFile(\"syllabus.pdf\", \"test pdf content\");\n\n      await simulateFileUpload(fileInput, testFile);\n\n      // Wait for analyze button to appear\n      await waitFor(() => {\n        expect(screen.getByTestId(\"analyze-button\")).toBeInTheDocument();\n      });\n\n      const analyzeButton = screen.getByTestId(\"analyze-button\");\n\n      await act(async () => {\n        fireEvent.click(analyzeButton);\n      });\n\n      // Should show error message - update to match actual error text\n      await waitFor(() => {\n        expect(screen.getByText(/Upload failed/i)).toBeInTheDocument();\n      });\n    });\n\n    it(\"should handle processing timeout correctly\", async () => {\n      // Mock successful upload and processing start\n      let pollCount = 0;\n      mockFetch\n        .mockImplementationOnce(() =>\n          Promise.resolve({\n            ok: true,\n            json: () =>\n              Promise.resolve({\n                id: 123,\n                filename: \"syllabus.pdf\",\n                status: \"pending\",\n              }),\n          }),\n        )\n        .mockImplementationOnce(() =>\n          Promise.resolve({\n            ok: true,\n            json: () =>\n              Promise.resolve({\n                message: \"Processing started\",\n                document_id: 123,\n                task_id: \"task-123\", // Add task_id to fix the error\n              }),\n          }),\n        )\n        // Mock all polling requests to return processing status (simulating timeout)\n        .mockImplementation(() => {\n          pollCount++;\n          return Promise.resolve({\n            ok: true,\n            json: () =>\n              Promise.resolve({\n                id: 123,\n                status: \"processing\",\n                original_text: \"\",\n                metadata: {},\n              }),\n          });\n        });\n\n      const setup = createMockProjectSetup({ projectName: \"Advanced Physics\" });\n\n      render(\n        <SyllabusUploadStep\n          setup={setup}\n          onUploadComplete={mockOnUploadComplete}\n          onBack={mockOnBack}\n          testTimeoutSeconds={5} // Use 5 seconds for testing\n        />,\n      );\n\n      const fileInput = screen.getByTestId(\"file-input\");\n      const testFile = createTestFile(\"syllabus.pdf\", \"test pdf content\");\n\n      await simulateFileUpload(fileInput, testFile);\n\n      // Wait for analyze button to appear\n      await waitFor(() => {\n        expect(screen.getByTestId(\"analyze-button\")).toBeInTheDocument();\n      });\n\n      const analyzeButton = screen.getByTestId(\"analyze-button\");\n\n      await act(async () => {\n        fireEvent.click(analyzeButton);\n      });\n\n      // Wait for timeout to occur and callback to be called with fallback data\n      // Note: Using testTimeoutSeconds={5} so timeout occurs after 5 seconds\n      await waitFor(\n        () => {\n          expect(mockOnUploadComplete).toHaveBeenCalledWith(\n            \"project-123\",\n            expect.objectContaining({\n              id: 123,\n              status: \"completed\",\n              original_text: \"Course materials for syllabus\",\n              metadata: expect.objectContaining({\n                course_name: \"syllabus\",\n                instructor: \"Unknown\",\n                semester: \"Unknown\",\n                topics: [\"Course content will be available after processing\"],\n                meeting_times: \"To be determined\",\n                important_dates: \"Please check with instructor\",\n                processing_status: \"timeout\",\n                timeout_reason: \"Processing took longer than expected\"\n              }),\n            }),\n            \"syllabus.pdf\",\n          );\n        },\n        { timeout: 10000 }, // 10 seconds to allow for component timeout (5s) + buffer\n      );\n    }, 15000); // 15 seconds total test timeout\n  });\n\n  describe(\"Skip Functionality\", () => {\n    beforeEach(() => {\n      // Test the skip functionality in both test and production modes\n      process.env.NODE_ENV = \"production\";\n      process.env.NEXT_PUBLIC_TEST_MODE = \"false\";\n      \n      // Clear all mocks to ensure clean state\n      jest.clearAllMocks();\n      mockOnUploadComplete.mockClear();\n    });\n\n    it(\"should call onSkip when skip button is clicked and skip extraction results step\", async () => {\n      const mockOnSkip = jest.fn();\n\n      // Mock fetch to prevent any API calls\n      const originalFetch = global.fetch;\n      global.fetch = jest.fn().mockResolvedValue({\n        ok: true,\n        json: () => Promise.resolve({})\n      });\n\n      const setup = createMockProjectSetup({ projectName: \"Test Project\" });\n\n      render(\n        <SyllabusUploadStep\n          setup={setup}\n          onUploadComplete={mockOnUploadComplete}\n          onSkip={mockOnSkip}\n          onBack={mockOnBack}\n        />,\n      );\n\n      // Should show skip button\n      const skipButton = screen.getByTestId(\"skip-button\");\n      expect(skipButton).toBeInTheDocument();\n\n      // Click skip button\n      await act(async () => {\n        fireEvent.click(skipButton);\n      });\n\n      // Should call onSkip\n      expect(mockOnSkip).toHaveBeenCalledTimes(1);\n\n      // Wait a bit to ensure no background processing happens\n      await new Promise(resolve => setTimeout(resolve, 100));\n\n      // Should not trigger any upload or analysis\n      expect(mockOnUploadComplete).not.toHaveBeenCalled();\n\n      // Restore original fetch\n      global.fetch = originalFetch;\n    });\n\n    it(\"should not show skip button when onSkip prop is not provided\", () => {\n      const setup = createMockProjectSetup({ projectName: \"Test Project\" });\n\n      render(\n        <SyllabusUploadStep\n          setup={setup}\n          onUploadComplete={mockOnUploadComplete}\n          onBack={mockOnBack}\n        />,\n      );\n\n      // Should not show skip button\n      expect(screen.queryByTestId(\"skip-button\")).not.toBeInTheDocument();\n    });\n\n    it(\"should show skip button text correctly\", () => {\n      const mockOnSkip = jest.fn();\n\n      const setup = createMockProjectSetup({ projectName: \"Test Project\" });\n\n      render(\n        <SyllabusUploadStep\n          setup={setup}\n          onUploadComplete={mockOnUploadComplete}\n          onSkip={mockOnSkip}\n          onBack={mockOnBack}\n        />,\n      );\n\n      expect(\n        screen.getByText(\"Skip\"),\n      ).toBeInTheDocument();\n    });\n  });\n\n  describe(\"Test Mode Flow\", () => {\n    beforeEach(() => {\n      // Ensure test mode is enabled for these tests\n      process.env.NODE_ENV = \"development\";\n      process.env.NEXT_PUBLIC_TEST_MODE = \"true\";\n      \n      // Clear any previous mock calls\n      mockFetch.mockClear();\n    });\n\n    it(\"should use mock data in test mode and skip API calls\", async () => {\n      // Mock fetch to prevent any API calls\n      const originalFetch = global.fetch;\n      global.fetch = jest.fn().mockResolvedValue({\n        ok: true,\n        json: () => Promise.resolve({})\n      });\n\n      const setup = createMockProjectSetup();\n\n      render(\n        <SyllabusUploadStep\n          setup={setup}\n          onUploadComplete={mockOnUploadComplete}\n          onBack={mockOnBack}\n        />,\n      );\n\n      // Should show test mode indicator\n      expect(screen.getByText(/Mock Mode Active/i)).toBeInTheDocument();\n\n      const testFile = createTestFile(\"syllabus.pdf\", \"test pdf content\");\n      const fileInput = screen.getByTestId(\"file-input\");\n\n      await simulateFileUpload(fileInput, testFile);\n\n      // Wait for analyze button to appear\n      await waitFor(() => {\n        expect(screen.getByTestId(\"analyze-button\")).toBeInTheDocument();\n      });\n\n      const analyzeButton = screen.getByTestId(\"analyze-button\");\n\n      await act(async () => {\n        fireEvent.click(analyzeButton);\n      });\n\n      // Should use mock data and call the callback quickly\n      await waitFor(\n        () => {\n          expect(mockOnUploadComplete).toHaveBeenCalledWith(\n            \"project-123\",\n            expect.objectContaining({\n              status: \"completed\",\n              metadata: expect.objectContaining({\n                course_title: expect.any(String),\n              }),\n            }),\n            \"syllabus.pdf\",\n          );\n        },\n        { timeout: 3000 },\n      );\n\n      // Restore original fetch\n      global.fetch = originalFetch;\n    });\n  });\n});\n"],"names":["jest","mock","requireActual","isTestMode","process","env","NODE_ENV","NEXT_PUBLIC_TEST_MODE","createProject","fn","mockResolvedValue","id","name","project_type","uploadFileWithProgress","APIError","mockImplementation","message","status","error","Error","statusCode","mocks","createBeforeEach","createAfterEach","createUploadTestSetup","localStorageMock","createLocalStorageMock","mockFetch","global","fetch","createTestFile","content","type","File","simulateFileUpload","fileInput","files","fileList","Array","isArray","act","fireEvent","change","target","describe","mockOnUploadComplete","mockOnBack","beforeEach","clearAllMocks","mockClear","it","pollCount","mockImplementationOnce","Promise","resolve","ok","json","filename","document_id","task_id","original_text","metadata","processed_data","course_name","topics","setup","createMockProjectSetup","projectName","render","SyllabusUploadStep","onUploadComplete","onBack","screen","getByTestId","testFile","waitFor","expect","getByText","toBeInTheDocument","analyzeButton","click","toHaveBeenCalledWith","objectContaining","timeout","mockRejectedValueOnce","testTimeoutSeconds","instructor","semester","meeting_times","important_dates","processing_status","timeout_reason","mockOnSkip","originalFetch","onSkip","skipButton","toHaveBeenCalledTimes","setTimeout","not","toHaveBeenCalled","queryByTestId","course_title","any","String"],"mappings":"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"}