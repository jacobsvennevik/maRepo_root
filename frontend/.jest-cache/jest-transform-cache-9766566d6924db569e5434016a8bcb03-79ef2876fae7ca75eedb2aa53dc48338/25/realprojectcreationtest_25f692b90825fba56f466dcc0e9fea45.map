{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/features/projects/components/__tests__/real-project-creation.test.tsx"],"sourcesContent":["import React from 'react';\nimport { render, screen, waitFor, fireEvent } from '@testing-library/react';\nimport { renderWithProviders } from '../../../../test-utils/setup/shared-setup';\nimport { ProjectSummaryColorful } from '../project-summary-variants';\nimport { createProject } from '../../services/api';\nimport { isTestMode } from '../../services/mock-data';\n\n// Mock the API functions\njest.mock('../../services/api', () => ({\n  createProject: jest.fn(),\n  uploadFile: jest.fn(),\n}));\n\n// Mock Next.js navigation\njest.mock('next/navigation', () => ({\n  useRouter: jest.fn(() => ({\n    push: jest.fn(),\n    replace: jest.fn(),\n    back: jest.fn(),\n    forward: jest.fn(),\n    refresh: jest.fn(),\n    prefetch: jest.fn(),\n  }))\n}));\n\n// Mock the mock-data module\njest.mock('../../services/mock-data', () => ({\n  isTestMode: jest.fn(),\n}));\n\nconst mockCreateProject = createProject as jest.MockedFunction<typeof createProject>;\nconst mockIsTestMode = isTestMode as jest.MockedFunction<typeof isTestMode>;\n\ndescribe('Real Project Creation in Test Mode', () => {\n  const mockSetup = {\n    projectName: 'Test Project',\n    studyFrequency: 'daily',\n    importantDates: [\n      { description: 'Midterm Exam', date: '2024-03-15' },\n      { description: 'Final Exam', date: '2024-05-20' }\n    ],\n    courseFiles: [],\n    testFiles: [],\n    uploadedFiles: [],\n  };\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    // Set up test mode environment\n    process.env.NODE_ENV = 'development';\n    process.env.NEXT_PUBLIC_TEST_MODE = 'true';\n    \n    // Mock test mode detection\n    mockIsTestMode.mockReturnValue(true);\n    \n    // Mock successful project creation\n    mockCreateProject.mockResolvedValue({\n      id: '123', // Real project ID, not mock123\n      name: 'Test Project',\n      project_type: 'school',\n      course_name: 'Test Course',\n      created_at: '2024-01-01T00:00:00Z',\n      updated_at: '2024-01-01T00:00:00Z',\n    });\n  });\n\n  it('should create real project with real ID in test mode', async () => {\n    const mockRouter = {\n      push: jest.fn(),\n      replace: jest.fn(),\n      back: jest.fn(),\n      forward: jest.fn(),\n      refresh: jest.fn(),\n      prefetch: jest.fn(),\n    };\n\n    // Mock useRouter to return our mock\n    const { useRouter } = require('next/navigation');\n    useRouter.mockReturnValue(mockRouter);\n\n    renderWithProviders(\n      <ProjectSummaryColorful setup={mockSetup} onBack={jest.fn()} />\n    );\n\n    // Find and click the create project button\n    const createButton = screen.getByRole('button', { name: /start learning journey/i });\n    expect(createButton).toBeInTheDocument();\n\n    fireEvent.click(createButton);\n\n    // Wait for the API call to complete\n    await waitFor(() => {\n      expect(mockCreateProject).toHaveBeenCalledTimes(1);\n    });\n\n    // Verify that createProject was called with correct data\n    expect(mockCreateProject).toHaveBeenCalledWith(\n      expect.objectContaining({\n        name: 'Test Project',\n        project_type: 'school',\n        mock_mode: true, // Should be true in test mode\n        seed_syllabus: true,\n        seed_tests: true,\n        seed_content: true,\n        seed_flashcards: false,\n      })\n    );\n\n    // Verify that navigation uses real project ID\n    await waitFor(() => {\n      expect(mockRouter.push).toHaveBeenCalledWith('/projects/123/overview');\n    });\n\n    // Verify that the project ID is real (not mock123)\n    expect(mockRouter.push).toHaveBeenCalledWith(\n      expect.stringMatching(/^\\/projects\\/\\d+\\/overview$/)\n    );\n    expect(mockRouter.push).not.toHaveBeenCalledWith('/projects/mock123/overview');\n  });\n\n  it('should not create mock projects with hardcoded IDs', async () => {\n    const mockRouter = {\n      push: jest.fn(),\n      replace: jest.fn(),\n      back: jest.fn(),\n      forward: jest.fn(),\n      refresh: jest.fn(),\n      prefetch: jest.fn(),\n    };\n\n    const { useRouter } = require('next/navigation');\n    useRouter.mockReturnValue(mockRouter);\n\n    renderWithProviders(\n      <ProjectSummaryColorful setup={mockSetup} onBack={jest.fn()} />\n    );\n\n    const createButton = screen.getByRole('button', { name: /start learning journey/i });\n    fireEvent.click(createButton);\n\n    await waitFor(() => {\n      expect(mockCreateProject).toHaveBeenCalledTimes(1);\n    });\n\n    // Verify that we're making a real API call, not using mock data\n    expect(mockCreateProject).toHaveBeenCalledWith(\n      expect.objectContaining({\n        name: 'Test Project',\n        project_type: 'school',\n      })\n    );\n\n    // Verify that navigation uses the real project ID from the API response\n    await waitFor(() => {\n      expect(mockRouter.push).toHaveBeenCalledWith('/projects/123/overview');\n    });\n\n    // Ensure we never navigate to mock123\n    expect(mockRouter.push).not.toHaveBeenCalledWith('/projects/mock123/overview');\n  });\n\n  it('should handle test mode correctly - real project creation with AI mocking', async () => {\n    const mockRouter = {\n      push: jest.fn(),\n      replace: jest.fn(),\n      back: jest.fn(),\n      forward: jest.fn(),\n      refresh: jest.fn(),\n      prefetch: jest.fn(),\n    };\n\n    const { useRouter } = require('next/navigation');\n    useRouter.mockReturnValue(mockRouter);\n\n    renderWithProviders(\n      <ProjectSummaryColorful setup={mockSetup} onBack={jest.fn()} />\n    );\n\n    const createButton = screen.getByRole('button', { name: /start learning journey/i });\n    fireEvent.click(createButton);\n\n    await waitFor(() => {\n      expect(mockCreateProject).toHaveBeenCalledTimes(1);\n    });\n\n    // Verify that mock_mode is set to true for AI mocking\n    expect(mockCreateProject).toHaveBeenCalledWith(\n      expect.objectContaining({\n        mock_mode: true, // This tells the backend to mock AI calls only\n        seed_syllabus: true,\n        seed_tests: true,\n        seed_content: true,\n        seed_flashcards: false,\n      })\n    );\n\n    // Verify that the project creation is real (not mocked)\n    expect(mockCreateProject).toHaveBeenCalledWith(\n      expect.objectContaining({\n        name: 'Test Project',\n        project_type: 'school',\n        study_frequency: 'daily',\n        important_dates: expect.arrayContaining([\n          expect.objectContaining({\n            title: 'Midterm Exam',\n            date: '2024-03-15'\n          }),\n          expect.objectContaining({\n            title: 'Final Exam',\n            date: '2024-05-20'\n          })\n        ])\n      })\n    );\n  });\n\n  it('should work in both test mode and production mode', async () => {\n    const mockRouter = {\n      push: jest.fn(),\n      replace: jest.fn(),\n      back: jest.fn(),\n      forward: jest.fn(),\n      refresh: jest.fn(),\n      prefetch: jest.fn(),\n    };\n\n    const { useRouter } = require('next/navigation');\n    useRouter.mockReturnValue(mockRouter);\n\n    // Test production mode\n    mockIsTestMode.mockReturnValue(false);\n    \n    renderWithProviders(\n      <ProjectSummaryColorful setup={mockSetup} onBack={jest.fn()} />\n    );\n\n    const createButton = screen.getByRole('button', { name: /start learning journey/i });\n    fireEvent.click(createButton);\n\n    await waitFor(() => {\n      expect(mockCreateProject).toHaveBeenCalledTimes(1);\n    });\n\n    // In production mode, mock_mode should be false\n    expect(mockCreateProject).toHaveBeenCalledWith(\n      expect.objectContaining({\n        mock_mode: false, // No AI mocking in production\n      })\n    );\n\n    // Test test mode\n    mockIsTestMode.mockReturnValue(true);\n    \n    // Re-render for test mode\n    renderWithProviders(\n      <ProjectSummaryColorful setup={mockSetup} onBack={jest.fn()} />\n    );\n\n    const createButtons = screen.getAllByRole('button', { name: /start learning journey/i });\n    const createButtonTestMode = createButtons[1]; // Get the second one (test mode)\n    fireEvent.click(createButtonTestMode);\n\n    await waitFor(() => {\n      expect(mockCreateProject).toHaveBeenCalledTimes(2);\n    });\n\n    // In test mode, mock_mode should be true\n    expect(mockCreateProject).toHaveBeenLastCalledWith(\n      expect.objectContaining({\n        mock_mode: true, // AI mocking enabled in test mode\n      })\n    );\n  });\n});\n"],"names":["jest","mock","createProject","fn","uploadFile","useRouter","push","replace","back","forward","refresh","prefetch","isTestMode","mockCreateProject","mockIsTestMode","describe","mockSetup","projectName","studyFrequency","importantDates","description","date","courseFiles","testFiles","uploadedFiles","beforeEach","clearAllMocks","process","env","NODE_ENV","NEXT_PUBLIC_TEST_MODE","mockReturnValue","mockResolvedValue","id","name","project_type","course_name","created_at","updated_at","it","mockRouter","require","renderWithProviders","ProjectSummaryColorful","setup","onBack","createButton","screen","getByRole","expect","toBeInTheDocument","fireEvent","click","waitFor","toHaveBeenCalledTimes","toHaveBeenCalledWith","objectContaining","mock_mode","seed_syllabus","seed_tests","seed_content","seed_flashcards","stringMatching","not","study_frequency","important_dates","arrayContaining","title","createButtons","getAllByRole","createButtonTestMode","toHaveBeenLastCalledWith"],"mappings":"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"}