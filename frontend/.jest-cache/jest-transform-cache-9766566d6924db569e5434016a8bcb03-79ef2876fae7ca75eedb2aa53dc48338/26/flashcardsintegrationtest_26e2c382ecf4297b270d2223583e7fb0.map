{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/test-utils/integration/flashcards-integration.test.ts"],"sourcesContent":["import { renderHook, waitFor } from '@testing-library/react';\nimport { useProjectFlashcards } from '@/app/projects/[projectId]/flashcards/hooks/use-project-flashcards';\n\n// Integration test - tests against REAL backend\ndescribe('Flashcards Integration Tests', () => {\n  const mockProjectId = '203062be-58d0-4f98-bbd4-33b4ce081276';\n\n  beforeAll(async () => {\n    // Check if backend is running\n    try {\n      const response = await fetch('http://localhost:8000/api/');\n      if (!response.ok && response.status !== 401) {\n        throw new Error('Backend not running');\n      }\n    } catch (error) {\n      console.warn('⚠️ Backend not running - integration tests will fail');\n      console.warn('Start backend with: cd /path/to/backend && python manage.py runserver');\n    }\n  });\n\n  it('should handle real network errors when backend is down', async () => {\n    // This test will ACTUALLY fail if backend is not running\n    // Unlike unit tests with mocks, this tests the real error paths\n    \n    const { result } = renderHook(() => useProjectFlashcards(mockProjectId));\n\n    // Wait for the real network call to complete\n    await waitFor(() => {\n      expect(result.current.isLoading).toBe(false);\n    }, { timeout: 10000 });\n\n    // If backend is down, we should see a real error\n    if (result.current.error) {\n      expect(result.current.error.message).toMatch(/Network|Connection|fetch/i);\n      console.log('✅ Integration test caught real network error:', result.current.error.message);\n    } else {\n      console.log('✅ Backend is running and responded successfully');\n    }\n  });\n\n  it('should make real API calls to the correct endpoints', async () => {\n    // Monitor network requests\n    const originalFetch = global.fetch;\n    const fetchCalls: string[] = [];\n    \n    global.fetch = jest.fn().mockImplementation((url, ...args) => {\n      fetchCalls.push(url.toString());\n      return originalFetch(url, ...args);\n    });\n\n    const { result } = renderHook(() => useProjectFlashcards(mockProjectId));\n\n    await waitFor(() => {\n      expect(result.current.isLoading).toBe(false);\n    }, { timeout: 10000 });\n\n    // Verify the real URLs being called\n    expect(fetchCalls.some(url => url.includes('/generation/api/projects/'))).toBe(true);\n    expect(fetchCalls.some(url => url.includes('/api/projects/'))).toBe(true);\n    \n    console.log('🔍 Real API calls made:', fetchCalls);\n\n    global.fetch = originalFetch;\n  });\n});\n\n// Helper function to run integration tests only when backend is available\nexport const runIntegrationTests = async () => {\n  try {\n    const response = await fetch('http://localhost:8000/api/');\n    return response.status === 401; // 401 means backend is running but needs auth\n  } catch {\n    return false;\n  }\n};\n"],"names":["runIntegrationTests","describe","mockProjectId","beforeAll","response","fetch","ok","status","Error","error","console","warn","it","result","renderHook","useProjectFlashcards","waitFor","expect","current","isLoading","toBe","timeout","message","toMatch","log","originalFetch","global","fetchCalls","jest","fn","mockImplementation","url","args","push","toString","some","includes"],"mappings":";;;;+BAmEaA;;;eAAAA;;;uBAnEuB;sCACC;AAErC,gDAAgD;AAChDC,SAAS,gCAAgC;IACvC,MAAMC,gBAAgB;IAEtBC,UAAU;QACR,8BAA8B;QAC9B,IAAI;YACF,MAAMC,WAAW,MAAMC,MAAM;YAC7B,IAAI,CAACD,SAASE,EAAE,IAAIF,SAASG,MAAM,KAAK,KAAK;gBAC3C,MAAM,IAAIC,MAAM;YAClB;QACF,EAAE,OAAOC,OAAO;YACdC,QAAQC,IAAI,CAAC;YACbD,QAAQC,IAAI,CAAC;QACf;IACF;IAEAC,GAAG,0DAA0D;QAC3D,yDAAyD;QACzD,gEAAgE;QAEhE,MAAM,EAAEC,MAAM,EAAE,GAAGC,IAAAA,iBAAU,EAAC,IAAMC,IAAAA,0CAAoB,EAACb;QAEzD,6CAA6C;QAC7C,MAAMc,IAAAA,cAAO,EAAC;YACZC,OAAOJ,OAAOK,OAAO,CAACC,SAAS,EAAEC,IAAI,CAAC;QACxC,GAAG;YAAEC,SAAS;QAAM;QAEpB,iDAAiD;QACjD,IAAIR,OAAOK,OAAO,CAACT,KAAK,EAAE;YACxBQ,OAAOJ,OAAOK,OAAO,CAACT,KAAK,CAACa,OAAO,EAAEC,OAAO,CAAC;YAC7Cb,QAAQc,GAAG,CAAC,iDAAiDX,OAAOK,OAAO,CAACT,KAAK,CAACa,OAAO;QAC3F,OAAO;YACLZ,QAAQc,GAAG,CAAC;QACd;IACF;IAEAZ,GAAG,uDAAuD;QACxD,2BAA2B;QAC3B,MAAMa,gBAAgBC,OAAOrB,KAAK;QAClC,MAAMsB,aAAuB,EAAE;QAE/BD,OAAOrB,KAAK,GAAGuB,KAAKC,EAAE,GAAGC,kBAAkB,CAAC,CAACC,KAAK,GAAGC;YACnDL,WAAWM,IAAI,CAACF,IAAIG,QAAQ;YAC5B,OAAOT,cAAcM,QAAQC;QAC/B;QAEA,MAAM,EAAEnB,MAAM,EAAE,GAAGC,IAAAA,iBAAU,EAAC,IAAMC,IAAAA,0CAAoB,EAACb;QAEzD,MAAMc,IAAAA,cAAO,EAAC;YACZC,OAAOJ,OAAOK,OAAO,CAACC,SAAS,EAAEC,IAAI,CAAC;QACxC,GAAG;YAAEC,SAAS;QAAM;QAEpB,oCAAoC;QACpCJ,OAAOU,WAAWQ,IAAI,CAACJ,CAAAA,MAAOA,IAAIK,QAAQ,CAAC,+BAA+BhB,IAAI,CAAC;QAC/EH,OAAOU,WAAWQ,IAAI,CAACJ,CAAAA,MAAOA,IAAIK,QAAQ,CAAC,oBAAoBhB,IAAI,CAAC;QAEpEV,QAAQc,GAAG,CAAC,2BAA2BG;QAEvCD,OAAOrB,KAAK,GAAGoB;IACjB;AACF;AAGO,MAAMzB,sBAAsB;IACjC,IAAI;QACF,MAAMI,WAAW,MAAMC,MAAM;QAC7B,OAAOD,SAASG,MAAM,KAAK,KAAK,8CAA8C;IAChF,EAAE,OAAM;QACN,OAAO;IACT;AACF"}