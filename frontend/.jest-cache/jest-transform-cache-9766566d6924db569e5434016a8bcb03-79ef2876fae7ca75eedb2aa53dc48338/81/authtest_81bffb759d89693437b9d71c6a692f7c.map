{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/app/(auth)/services/__tests__/auth.test.ts"],"sourcesContent":["import { AuthService } from \"../auth\";\n\n// Mock axios-auth used by AuthService\njest.mock(\"../../../../lib/axios-auth\", () => ({\n  __esModule: true,\n  axiosAuth: {\n    post: jest.fn(),\n  },\n}));\n\nimport { axiosAuth } from \"../../../../lib/axios-auth\";\n\ndescribe(\"AuthService\", () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    // Mock localStorage\n    let store: { [key: string]: string } = {};\n    Object.defineProperty(window, \"localStorage\", {\n      value: {\n        getItem: jest.fn((key) => store[key] || null),\n        setItem: jest.fn((key, value) => {\n          store[key] = value.toString();\n        }),\n        removeItem: jest.fn((key) => {\n          delete store[key];\n        }),\n        clear: jest.fn(() => {\n          store = {};\n        }),\n      },\n      writable: true,\n    });\n  });\n\n  describe(\"login\", () => {\n    it(\"should login successfully and store tokens\", async () => {\n      const mockResponse = {\n        data: {\n          access: \"mock-access-token\",\n          refresh: \"mock-refresh-token\",\n        },\n      };\n\n      (axiosAuth.post as jest.Mock).mockResolvedValue(mockResponse);\n\n      const result = await AuthService.login({\n        email: \"test@example.com\",\n        password: \"password123\",\n      });\n\n      expect(axiosAuth.post).toHaveBeenCalledWith(\"/token/\", {\n        email: \"test@example.com\",\n        password: \"password123\",\n      });\n\n      expect(localStorage.setItem).toHaveBeenCalledWith(\n        \"access_token\",\n        \"mock-access-token\",\n      );\n      expect(localStorage.setItem).toHaveBeenCalledWith(\n        \"refresh_token\",\n        \"mock-refresh-token\",\n      );\n\n      expect(result).toEqual({\n        access: \"mock-access-token\",\n        refresh: \"mock-refresh-token\",\n      });\n    });\n\n    it(\"should handle login failure\", async () => {\n      const mockError = {\n        response: {\n          status: 401,\n          data: { detail: \"Invalid credentials\" },\n        },\n      };\n\n      (axiosAuth.post as jest.Mock).mockRejectedValue(mockError);\n\n      await expect(\n        AuthService.login({\n          email: \"test@example.com\",\n          password: \"wrongpassword\",\n        }),\n      ).rejects.toThrow(\"Invalid credentials\");\n\n      expect(localStorage.setItem).not.toHaveBeenCalled();\n    });\n  });\n\n  describe(\"logout\", () => {\n    it(\"should clear tokens from localStorage\", () => {\n      AuthService.logout();\n\n      expect(localStorage.removeItem).toHaveBeenCalledWith(\"access_token\");\n      expect(localStorage.removeItem).toHaveBeenCalledWith(\"refresh_token\");\n    });\n  });\n\n  describe(\"getAuthToken\", () => {\n    it(\"should return token from localStorage\", () => {\n      (localStorage.getItem as jest.Mock).mockReturnValue(\"mock-token\");\n\n      const token = AuthService.getAuthToken();\n\n      expect(localStorage.getItem).toHaveBeenCalledWith(\"access_token\");\n      expect(token).toBe(\"mock-token\");\n    });\n\n    it(\"should return null if no token\", () => {\n      (localStorage.getItem as jest.Mock).mockReturnValue(null);\n\n      const token = AuthService.getAuthToken();\n\n      expect(token).toBeNull();\n    });\n  });\n\n  describe(\"getRefreshToken\", () => {\n    it(\"should return refresh token from localStorage\", () => {\n      (localStorage.getItem as jest.Mock).mockReturnValue(\"mock-refresh-token\");\n\n      const token = AuthService.getRefreshToken();\n\n      expect(localStorage.getItem).toHaveBeenCalledWith(\"refresh_token\");\n      expect(token).toBe(\"mock-refresh-token\");\n    });\n  });\n\n  describe(\"isAuthenticated\", () => {\n    it(\"should return true if auth token exists\", () => {\n      (localStorage.getItem as jest.Mock).mockReturnValue(\"mock-token\");\n\n      const isAuth = AuthService.isAuthenticated();\n\n      expect(isAuth).toBe(true);\n    });\n\n    it(\"should return false if no auth token\", () => {\n      (localStorage.getItem as jest.Mock).mockReturnValue(null);\n\n      const isAuth = AuthService.isAuthenticated();\n\n      expect(isAuth).toBe(false);\n    });\n  });\n});\n"],"names":["jest","mock","__esModule","axiosAuth","post","fn","describe","beforeEach","clearAllMocks","store","Object","defineProperty","window","value","getItem","key","setItem","toString","removeItem","clear","writable","it","mockResponse","data","access","refresh","mockResolvedValue","result","AuthService","login","email","password","expect","toHaveBeenCalledWith","localStorage","toEqual","mockError","response","status","detail","mockRejectedValue","rejects","toThrow","not","toHaveBeenCalled","logout","mockReturnValue","token","getAuthToken","toBe","toBeNull","getRefreshToken","isAuth","isAuthenticated"],"mappings":"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"}