{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/test-utils/setup/shared-setup.ts"],"sourcesContent":["import { beforeAll, beforeEach, afterEach, afterAll } from '@jest/globals';\nimport { cleanup, render, RenderOptions } from '@testing-library/react';\nimport React from 'react';\nimport { standardMocks } from '../mocks';\nimport { testFactories } from '../factories';\n\n/**\n * Shared test environment setup and teardown utilities\n */\n\ninterface TestEnvironmentOptions {\n  timeout?: number;\n  includeMSW?: boolean;\n  includeStorage?: boolean;\n  includeNavigation?: boolean;\n  includeAPI?: boolean;\n  resetMocks?: boolean;\n}\n\n/**\n * Global test environment setup\n */\nexport const setupGlobalTestEnvironment = (options: TestEnvironmentOptions = {}) => {\n  const {\n    timeout = 10000,\n    includeMSW = true,\n    includeStorage = true,\n    includeNavigation = true,\n    includeAPI = true,\n    resetMocks = true\n  } = options;\n\n  // Set global timeout\n  jest.setTimeout(timeout);\n\n  beforeAll(() => {\n    // Setup all mocks\n    if (includeAPI) {\n      standardMocks.setupAll();\n    }\n    \n    if (includeStorage) {\n      standardMocks.fileSystemMocks.setupStorageMocks();\n    }\n\n    // Setup MSW if needed\n    if (includeMSW) {\n      // MSW setup will be handled by the MSW setup file\n      console.log('MSW setup handled by setup file');\n    }\n  });\n\n  beforeEach(() => {\n    // Reset all mocks before each test\n    if (resetMocks) {\n      jest.clearAllMocks();\n      standardMocks.resetAll();\n    }\n\n    // Cleanup React Testing Library\n    cleanup();\n  });\n\n  afterEach(() => {\n    // Additional cleanup if needed\n    jest.clearAllTimers();\n  });\n\n  afterAll(() => {\n    // Global cleanup\n    standardMocks.resetAll();\n  });\n};\n\n/**\n * Component-specific test setup\n */\nexport const setupComponentTestEnvironment = (componentName: string) => {\n  beforeEach(() => {\n    // Component-specific setup\n    console.log(`Setting up test environment for ${componentName}`);\n  });\n\n  afterEach(() => {\n    // Component-specific cleanup\n    cleanup();\n  });\n};\n\n/**\n * API test environment setup\n */\nexport const setupAPITestEnvironment = () => {\n  const { apiMocks } = standardMocks;\n\n  beforeEach(() => {\n    // Reset API mocks\n    apiMocks.reset();\n    \n    // Setup default successful responses\n    apiMocks.setupMockResponses({\n      'POST:/backend/api/upload/': {\n        ok: true,\n        status: 200,\n        json: async () => ({ id: 123, status: 'pending' })\n      },\n      'GET:/backend/api/analysis/123/': {\n        ok: true,\n        status: 200,\n        json: async () => ({\n          id: 123,\n          status: 'completed',\n          original_text: 'Mock analysis result'\n        })\n      }\n    });\n  });\n\n  return {\n    mockFetch: apiMocks.mockFetch,\n    setupMockResponses: apiMocks.setupMockResponses,\n    mockNetworkError: apiMocks.mockNetworkError,\n    mockTimeout: apiMocks.mockTimeout\n  };\n};\n\n/**\n * File upload test environment setup\n */\nexport const setupFileUploadTestEnvironment = () => {\n  const { fileSystemMocks } = standardMocks;\n  const { createFileUploadTest } = testFactories;\n\n  beforeEach(() => {\n    // Setup file system mocks\n    fileSystemMocks.setupStorageMocks();\n    \n    // Reset file system mocks\n    fileSystemMocks.reset();\n  });\n\n  const createTestFile = (options = {}) => {\n    return createFileUploadTest(options);\n  };\n\n  const createMultipleTestFiles = (count: number, options = {}) => {\n    return Array.from({ length: count }, (_, index) => \n      createFileUploadTest({ \n        fileName: `test${index + 1}.pdf`,\n        ...options \n      })\n    );\n  };\n\n  return {\n    createTestFile,\n    createMultipleTestFiles,\n    mockLocalStorage: fileSystemMocks.mockLocalStorage,\n    mockSessionStorage: fileSystemMocks.mockSessionStorage,\n    mockFileReader: fileSystemMocks.mockFileReader\n  };\n};\n\n/**\n * Navigation test environment setup\n */\nexport const setupNavigationTestEnvironment = () => {\n  const { navigationMocks } = standardMocks;\n\n  beforeEach(() => {\n    // Reset navigation mocks\n    navigationMocks.reset();\n  });\n\n  return {\n    mockRouter: navigationMocks.mockRouter,\n    mockUseRouter: navigationMocks.mockUseRouter,\n    mockUsePathname: navigationMocks.mockUsePathname,\n    mockUseSearchParams: navigationMocks.mockUseSearchParams\n  };\n};\n\n/**\n * Environment variable test setup\n */\nexport const setupEnvironmentTest = (env: Record<string, string> = {}) => {\n  const { environmentMocks } = standardMocks;\n  const originalEnv = process.env;\n\n  beforeEach(() => {\n    // Set test environment\n    environmentMocks.mockEnvironment({\n      NODE_ENV: 'test',\n      NEXT_PUBLIC_TEST_MODE: 'true',\n      ...env\n    });\n  });\n\n  afterEach(() => {\n    // Reset environment\n    environmentMocks.resetEnvironment();\n  });\n\n  return {\n    setEnv: environmentMocks.mockEnvironment,\n    resetEnv: environmentMocks.resetEnvironment\n  };\n};\n\n/**\n * Comprehensive test setup that combines all environments\n */\nexport const setupFullTestEnvironment = (options: TestEnvironmentOptions = {}) => {\n  const apiEnv = setupAPITestEnvironment();\n  const fileEnv = setupFileUploadTestEnvironment();\n  const navEnv = setupNavigationTestEnvironment();\n  const envTest = setupEnvironmentTest();\n\n  // Setup global environment\n  setupGlobalTestEnvironment(options);\n\n  return {\n    api: apiEnv,\n    files: fileEnv,\n    navigation: navEnv,\n    environment: envTest,\n    mocks: standardMocks,\n    factories: testFactories\n  };\n};\n\n/**\n * Test cleanup utilities\n */\nexport const createTestCleanup = () => {\n  const cleanupFunctions: (() => void)[] = [];\n\n  const addCleanup = (fn: () => void) => {\n    cleanupFunctions.push(fn);\n  };\n\n  const runCleanup = () => {\n    cleanupFunctions.forEach(fn => {\n      try {\n        fn();\n      } catch (error) {\n        console.warn('Cleanup function failed:', error);\n      }\n    });\n    cleanupFunctions.length = 0;\n  };\n\n  afterEach(() => {\n    runCleanup();\n  });\n\n  return {\n    addCleanup,\n    runCleanup\n  };\n};\n\n/**\n * Performance test setup\n */\nexport const setupPerformanceTest = () => {\n  const startTime = Date.now();\n  const measurements: Record<string, number> = {};\n\n  const startMeasurement = (name: string) => {\n    measurements[name] = Date.now();\n  };\n\n  const endMeasurement = (name: string) => {\n    const duration = Date.now() - measurements[name];\n    console.log(`Performance: ${name} took ${duration}ms`);\n    return duration;\n  };\n\n  const getTotalTime = () => Date.now() - startTime;\n\n  return {\n    startMeasurement,\n    endMeasurement,\n    getTotalTime\n  };\n};\n\n/**\n * Simple render function for testing components\n */\nexport const renderWithProviders = (\n  component: React.ReactElement,\n  options?: RenderOptions\n) => {\n  return render(component, options);\n};\n\n"],"names":["createTestCleanup","renderWithProviders","setupAPITestEnvironment","setupComponentTestEnvironment","setupEnvironmentTest","setupFileUploadTestEnvironment","setupFullTestEnvironment","setupGlobalTestEnvironment","setupNavigationTestEnvironment","setupPerformanceTest","options","timeout","includeMSW","includeStorage","includeNavigation","includeAPI","resetMocks","jest","setTimeout","beforeAll","standardMocks","setupAll","fileSystemMocks","setupStorageMocks","console","log","beforeEach","clearAllMocks","resetAll","cleanup","afterEach","clearAllTimers","afterAll","componentName","apiMocks","reset","setupMockResponses","ok","status","json","id","original_text","mockFetch","mockNetworkError","mockTimeout","createFileUploadTest","testFactories","createTestFile","createMultipleTestFiles","count","Array","from","length","_","index","fileName","mockLocalStorage","mockSessionStorage","mockFileReader","navigationMocks","mockRouter","mockUseRouter","mockUsePathname","mockUseSearchParams","env","environmentMocks","originalEnv","process","mockEnvironment","NODE_ENV","NEXT_PUBLIC_TEST_MODE","resetEnvironment","setEnv","resetEnv","apiEnv","fileEnv","navEnv","envTest","api","files","navigation","environment","mocks","factories","cleanupFunctions","addCleanup","fn","push","runCleanup","forEach","error","warn","startTime","Date","now","measurements","startMeasurement","name","endMeasurement","duration","getTotalTime","component","render"],"mappings":";;;;;;;;;;;IA0OaA,iBAAiB;eAAjBA;;IAyDAC,mBAAmB;eAAnBA;;IAvMAC,uBAAuB;eAAvBA;;IAfAC,6BAA6B;eAA7BA;;IA4GAC,oBAAoB;eAApBA;;IAxDAC,8BAA8B;eAA9BA;;IAmFAC,wBAAwB;eAAxBA;;IA9LAC,0BAA0B;eAA1BA;;IAgJAC,8BAA8B;eAA9BA;;IAmGAC,oBAAoB;eAApBA;;;yBAzQ8C;uBACZ;+DAC7B;uBACY;2BACA;;;;;;AAkBvB,MAAMF,6BAA6B,CAACG,UAAkC,CAAC,CAAC;IAC7E,MAAM,EACJC,UAAU,KAAK,EACfC,aAAa,IAAI,EACjBC,iBAAiB,IAAI,EACrBC,oBAAoB,IAAI,EACxBC,aAAa,IAAI,EACjBC,aAAa,IAAI,EAClB,GAAGN;IAEJ,qBAAqB;IACrBO,KAAKC,UAAU,CAACP;IAEhBQ,IAAAA,kBAAS,EAAC;QACR,kBAAkB;QAClB,IAAIJ,YAAY;YACdK,oBAAa,CAACC,QAAQ;QACxB;QAEA,IAAIR,gBAAgB;YAClBO,oBAAa,CAACE,eAAe,CAACC,iBAAiB;QACjD;QAEA,sBAAsB;QACtB,IAAIX,YAAY;YACd,kDAAkD;YAClDY,QAAQC,GAAG,CAAC;QACd;IACF;IAEAC,IAAAA,mBAAU,EAAC;QACT,mCAAmC;QACnC,IAAIV,YAAY;YACdC,KAAKU,aAAa;YAClBP,oBAAa,CAACQ,QAAQ;QACxB;QAEA,gCAAgC;QAChCC,IAAAA,cAAO;IACT;IAEAC,IAAAA,kBAAS,EAAC;QACR,+BAA+B;QAC/Bb,KAAKc,cAAc;IACrB;IAEAC,IAAAA,iBAAQ,EAAC;QACP,iBAAiB;QACjBZ,oBAAa,CAACQ,QAAQ;IACxB;AACF;AAKO,MAAMzB,gCAAgC,CAAC8B;IAC5CP,IAAAA,mBAAU,EAAC;QACT,2BAA2B;QAC3BF,QAAQC,GAAG,CAAC,CAAC,gCAAgC,EAAEQ,eAAe;IAChE;IAEAH,IAAAA,kBAAS,EAAC;QACR,6BAA6B;QAC7BD,IAAAA,cAAO;IACT;AACF;AAKO,MAAM3B,0BAA0B;IACrC,MAAM,EAAEgC,QAAQ,EAAE,GAAGd,oBAAa;IAElCM,IAAAA,mBAAU,EAAC;QACT,kBAAkB;QAClBQ,SAASC,KAAK;QAEd,qCAAqC;QACrCD,SAASE,kBAAkB,CAAC;YAC1B,6BAA6B;gBAC3BC,IAAI;gBACJC,QAAQ;gBACRC,MAAM,UAAa,CAAA;wBAAEC,IAAI;wBAAKF,QAAQ;oBAAU,CAAA;YAClD;YACA,kCAAkC;gBAChCD,IAAI;gBACJC,QAAQ;gBACRC,MAAM,UAAa,CAAA;wBACjBC,IAAI;wBACJF,QAAQ;wBACRG,eAAe;oBACjB,CAAA;YACF;QACF;IACF;IAEA,OAAO;QACLC,WAAWR,SAASQ,SAAS;QAC7BN,oBAAoBF,SAASE,kBAAkB;QAC/CO,kBAAkBT,SAASS,gBAAgB;QAC3CC,aAAaV,SAASU,WAAW;IACnC;AACF;AAKO,MAAMvC,iCAAiC;IAC5C,MAAM,EAAEiB,eAAe,EAAE,GAAGF,oBAAa;IACzC,MAAM,EAAEyB,oBAAoB,EAAE,GAAGC,wBAAa;IAE9CpB,IAAAA,mBAAU,EAAC;QACT,0BAA0B;QAC1BJ,gBAAgBC,iBAAiB;QAEjC,0BAA0B;QAC1BD,gBAAgBa,KAAK;IACvB;IAEA,MAAMY,iBAAiB,CAACrC,UAAU,CAAC,CAAC;QAClC,OAAOmC,qBAAqBnC;IAC9B;IAEA,MAAMsC,0BAA0B,CAACC,OAAevC,UAAU,CAAC,CAAC;QAC1D,OAAOwC,MAAMC,IAAI,CAAC;YAAEC,QAAQH;QAAM,GAAG,CAACI,GAAGC,QACvCT,qBAAqB;gBACnBU,UAAU,CAAC,IAAI,EAAED,QAAQ,EAAE,IAAI,CAAC;gBAChC,GAAG5C,OAAO;YACZ;IAEJ;IAEA,OAAO;QACLqC;QACAC;QACAQ,kBAAkBlC,gBAAgBkC,gBAAgB;QAClDC,oBAAoBnC,gBAAgBmC,kBAAkB;QACtDC,gBAAgBpC,gBAAgBoC,cAAc;IAChD;AACF;AAKO,MAAMlD,iCAAiC;IAC5C,MAAM,EAAEmD,eAAe,EAAE,GAAGvC,oBAAa;IAEzCM,IAAAA,mBAAU,EAAC;QACT,yBAAyB;QACzBiC,gBAAgBxB,KAAK;IACvB;IAEA,OAAO;QACLyB,YAAYD,gBAAgBC,UAAU;QACtCC,eAAeF,gBAAgBE,aAAa;QAC5CC,iBAAiBH,gBAAgBG,eAAe;QAChDC,qBAAqBJ,gBAAgBI,mBAAmB;IAC1D;AACF;AAKO,MAAM3D,uBAAuB,CAAC4D,MAA8B,CAAC,CAAC;IACnE,MAAM,EAAEC,gBAAgB,EAAE,GAAG7C,oBAAa;IAC1C,MAAM8C,cAAcC,QAAQH,GAAG;IAE/BtC,IAAAA,mBAAU,EAAC;QACT,uBAAuB;QACvBuC,iBAAiBG,eAAe,CAAC;YAC/BC,UAAU;YACVC,uBAAuB;YACvB,GAAGN,GAAG;QACR;IACF;IAEAlC,IAAAA,kBAAS,EAAC;QACR,oBAAoB;QACpBmC,iBAAiBM,gBAAgB;IACnC;IAEA,OAAO;QACLC,QAAQP,iBAAiBG,eAAe;QACxCK,UAAUR,iBAAiBM,gBAAgB;IAC7C;AACF;AAKO,MAAMjE,2BAA2B,CAACI,UAAkC,CAAC,CAAC;IAC3E,MAAMgE,SAASxE;IACf,MAAMyE,UAAUtE;IAChB,MAAMuE,SAASpE;IACf,MAAMqE,UAAUzE;IAEhB,2BAA2B;IAC3BG,2BAA2BG;IAE3B,OAAO;QACLoE,KAAKJ;QACLK,OAAOJ;QACPK,YAAYJ;QACZK,aAAaJ;QACbK,OAAO9D,oBAAa;QACpB+D,WAAWrC,wBAAa;IAC1B;AACF;AAKO,MAAM9C,oBAAoB;IAC/B,MAAMoF,mBAAmC,EAAE;IAE3C,MAAMC,aAAa,CAACC;QAClBF,iBAAiBG,IAAI,CAACD;IACxB;IAEA,MAAME,aAAa;QACjBJ,iBAAiBK,OAAO,CAACH,CAAAA;YACvB,IAAI;gBACFA;YACF,EAAE,OAAOI,OAAO;gBACdlE,QAAQmE,IAAI,CAAC,4BAA4BD;YAC3C;QACF;QACAN,iBAAiBhC,MAAM,GAAG;IAC5B;IAEAtB,IAAAA,kBAAS,EAAC;QACR0D;IACF;IAEA,OAAO;QACLH;QACAG;IACF;AACF;AAKO,MAAM/E,uBAAuB;IAClC,MAAMmF,YAAYC,KAAKC,GAAG;IAC1B,MAAMC,eAAuC,CAAC;IAE9C,MAAMC,mBAAmB,CAACC;QACxBF,YAAY,CAACE,KAAK,GAAGJ,KAAKC,GAAG;IAC/B;IAEA,MAAMI,iBAAiB,CAACD;QACtB,MAAME,WAAWN,KAAKC,GAAG,KAAKC,YAAY,CAACE,KAAK;QAChDzE,QAAQC,GAAG,CAAC,CAAC,aAAa,EAAEwE,KAAK,MAAM,EAAEE,SAAS,EAAE,CAAC;QACrD,OAAOA;IACT;IAEA,MAAMC,eAAe,IAAMP,KAAKC,GAAG,KAAKF;IAExC,OAAO;QACLI;QACAE;QACAE;IACF;AACF;AAKO,MAAMnG,sBAAsB,CACjCoG,WACA3F;IAEA,OAAO4F,IAAAA,aAAM,EAACD,WAAW3F;AAC3B"}