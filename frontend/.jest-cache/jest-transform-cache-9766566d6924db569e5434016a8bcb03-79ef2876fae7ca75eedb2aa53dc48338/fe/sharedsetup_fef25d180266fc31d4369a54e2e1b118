501051573a84f37ff169e71d82ffe32f
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    createTestCleanup: function() {
        return createTestCleanup;
    },
    setupAPITestEnvironment: function() {
        return setupAPITestEnvironment;
    },
    setupComponentTestEnvironment: function() {
        return setupComponentTestEnvironment;
    },
    setupEnvironmentTest: function() {
        return setupEnvironmentTest;
    },
    setupFileUploadTestEnvironment: function() {
        return setupFileUploadTestEnvironment;
    },
    setupFullTestEnvironment: function() {
        return setupFullTestEnvironment;
    },
    setupGlobalTestEnvironment: function() {
        return setupGlobalTestEnvironment;
    },
    setupNavigationTestEnvironment: function() {
        return setupNavigationTestEnvironment;
    },
    setupPerformanceTest: function() {
        return setupPerformanceTest;
    }
});
const _globals = require("@jest/globals");
const _react = require("@testing-library/react");
const _mocks = require("../mocks");
const _factories = require("../factories");
const setupGlobalTestEnvironment = (options = {})=>{
    const { timeout = 10000, includeMSW = true, includeStorage = true, includeNavigation = true, includeAPI = true, resetMocks = true } = options;
    // Set global timeout
    jest.setTimeout(timeout);
    (0, _globals.beforeAll)(()=>{
        // Setup all mocks
        if (includeAPI) {
            _mocks.standardMocks.setupAll();
        }
        if (includeStorage) {
            _mocks.standardMocks.fileSystemMocks.setupStorageMocks();
        }
        // Setup MSW if needed
        if (includeMSW) {
            // MSW setup will be handled by the MSW setup file
            console.log('MSW setup handled by setup file');
        }
    });
    (0, _globals.beforeEach)(()=>{
        // Reset all mocks before each test
        if (resetMocks) {
            jest.clearAllMocks();
            _mocks.standardMocks.resetAll();
        }
        // Cleanup React Testing Library
        (0, _react.cleanup)();
    });
    (0, _globals.afterEach)(()=>{
        // Additional cleanup if needed
        jest.clearAllTimers();
    });
    (0, _globals.afterAll)(()=>{
        // Global cleanup
        _mocks.standardMocks.resetAll();
    });
};
const setupComponentTestEnvironment = (componentName)=>{
    (0, _globals.beforeEach)(()=>{
        // Component-specific setup
        console.log(`Setting up test environment for ${componentName}`);
    });
    (0, _globals.afterEach)(()=>{
        // Component-specific cleanup
        (0, _react.cleanup)();
    });
};
const setupAPITestEnvironment = ()=>{
    const { apiMocks } = _mocks.standardMocks;
    (0, _globals.beforeEach)(()=>{
        // Reset API mocks
        apiMocks.reset();
        // Setup default successful responses
        apiMocks.setupMockResponses({
            'POST:/backend/api/upload/': {
                ok: true,
                status: 200,
                json: async ()=>({
                        id: 123,
                        status: 'pending'
                    })
            },
            'GET:/backend/api/analysis/123/': {
                ok: true,
                status: 200,
                json: async ()=>({
                        id: 123,
                        status: 'completed',
                        original_text: 'Mock analysis result'
                    })
            }
        });
    });
    return {
        mockFetch: apiMocks.mockFetch,
        setupMockResponses: apiMocks.setupMockResponses,
        mockNetworkError: apiMocks.mockNetworkError,
        mockTimeout: apiMocks.mockTimeout
    };
};
const setupFileUploadTestEnvironment = ()=>{
    const { fileSystemMocks } = _mocks.standardMocks;
    const { createFileUploadTest } = _factories.testFactories;
    (0, _globals.beforeEach)(()=>{
        // Setup file system mocks
        fileSystemMocks.setupStorageMocks();
        // Reset file system mocks
        fileSystemMocks.reset();
    });
    const createTestFile = (options = {})=>{
        return createFileUploadTest(options);
    };
    const createMultipleTestFiles = (count, options = {})=>{
        return Array.from({
            length: count
        }, (_, index)=>createFileUploadTest({
                fileName: `test${index + 1}.pdf`,
                ...options
            }));
    };
    return {
        createTestFile,
        createMultipleTestFiles,
        mockLocalStorage: fileSystemMocks.mockLocalStorage,
        mockSessionStorage: fileSystemMocks.mockSessionStorage,
        mockFileReader: fileSystemMocks.mockFileReader
    };
};
const setupNavigationTestEnvironment = ()=>{
    const { navigationMocks } = _mocks.standardMocks;
    (0, _globals.beforeEach)(()=>{
        // Reset navigation mocks
        navigationMocks.reset();
    });
    return {
        mockRouter: navigationMocks.mockRouter,
        mockUseRouter: navigationMocks.mockUseRouter,
        mockUsePathname: navigationMocks.mockUsePathname,
        mockUseSearchParams: navigationMocks.mockUseSearchParams
    };
};
const setupEnvironmentTest = (env = {})=>{
    const { environmentMocks } = _mocks.standardMocks;
    const originalEnv = process.env;
    (0, _globals.beforeEach)(()=>{
        // Set test environment
        environmentMocks.mockEnvironment({
            NODE_ENV: 'test',
            NEXT_PUBLIC_TEST_MODE: 'true',
            ...env
        });
    });
    (0, _globals.afterEach)(()=>{
        // Reset environment
        environmentMocks.resetEnvironment();
    });
    return {
        setEnv: environmentMocks.mockEnvironment,
        resetEnv: environmentMocks.resetEnvironment
    };
};
const setupFullTestEnvironment = (options = {})=>{
    const apiEnv = setupAPITestEnvironment();
    const fileEnv = setupFileUploadTestEnvironment();
    const navEnv = setupNavigationTestEnvironment();
    const envTest = setupEnvironmentTest();
    // Setup global environment
    setupGlobalTestEnvironment(options);
    return {
        api: apiEnv,
        files: fileEnv,
        navigation: navEnv,
        environment: envTest,
        mocks: _mocks.standardMocks,
        factories: _factories.testFactories
    };
};
const createTestCleanup = ()=>{
    const cleanupFunctions = [];
    const addCleanup = (fn)=>{
        cleanupFunctions.push(fn);
    };
    const runCleanup = ()=>{
        cleanupFunctions.forEach((fn)=>{
            try {
                fn();
            } catch (error) {
                console.warn('Cleanup function failed:', error);
            }
        });
        cleanupFunctions.length = 0;
    };
    (0, _globals.afterEach)(()=>{
        runCleanup();
    });
    return {
        addCleanup,
        runCleanup
    };
};
const setupPerformanceTest = ()=>{
    const startTime = Date.now();
    const measurements = {};
    const startMeasurement = (name)=>{
        measurements[name] = Date.now();
    };
    const endMeasurement = (name)=>{
        const duration = Date.now() - measurements[name];
        console.log(`Performance: ${name} took ${duration}ms`);
        return duration;
    };
    const getTotalTime = ()=>Date.now() - startTime;
    return {
        startMeasurement,
        endMeasurement,
        getTotalTime
    };
};

//# sourceMappingURL=data:application/json;base64,