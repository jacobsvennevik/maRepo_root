{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/features/diagnostics/components/__tests__/DiagnosticDashboard-optimized.test.tsx"],"sourcesContent":["import React from 'react';\nimport { screen, fireEvent, waitFor } from '@testing-library/react';\nimport '@testing-library/jest-dom';\nimport DiagnosticDashboard from '../DiagnosticDashboard';\n\n// Import new centralized utilities\nimport {\n  renderWithProviders,\n  setupFullTestEnvironment,\n  testFactories,\n  standardMocks\n} from '../../../../../src/test-utils';\n\n// Setup test environment\nconst testEnv = setupFullTestEnvironment({\n  timeout: 10000,\n  includeAPI: true,\n  includeStorage: true,\n  includeNavigation: true\n});\n\nconst { apiMocks } = standardMocks;\n\ndescribe('DiagnosticDashboard - Optimized', () => {\n  const mockProjectId = 'test-project-123';\n\n  beforeEach(() => {\n    testEnv.mocks.resetAll();\n    \n    // Setup default API responses\n    apiMocks.setupMockResponses({\n      'GET:/backend/api/diagnostics/': {\n        ok: true,\n        status: 200,\n        json: async () => ({ results: [] })\n      },\n      'POST:/backend/api/diagnostics/': {\n        ok: true,\n        status: 201,\n        json: async () => ({ \n          id: 'new-session-123', \n          topic: 'New Topic', \n          status: 'DRAFT', \n          delivery_mode: 'DEFERRED_FEEDBACK', \n          max_questions: 3, \n          created_at: '2024-01-01T00:00:00Z' \n        })\n      }\n    });\n  });\n\n  describe('Dashboard Rendering', () => {\n    it('should render dashboard with correct title and description', () => {\n      renderWithProviders(<DiagnosticDashboard projectId={mockProjectId} />);\n      \n      expect(screen.getByText('Pre-Lecture Diagnostics')).toBeInTheDocument();\n      expect(screen.getByText(/Assess student readiness and identify knowledge gaps/)).toBeInTheDocument();\n    });\n\n    it('should show create diagnostic button', () => {\n      renderWithProviders(<DiagnosticDashboard projectId={mockProjectId} />);\n      \n      expect(screen.getByText('Create Diagnostic')).toBeInTheDocument();\n    });\n\n    it('should display empty state when no diagnostics exist', () => {\n      renderWithProviders(<DiagnosticDashboard projectId={mockProjectId} />);\n      \n      expect(screen.getByText(/No diagnostics created yet/)).toBeInTheDocument();\n    });\n  });\n\n  describe('Create Diagnostic Dialog', () => {\n    it('should open create diagnostic dialog when button is clicked', () => {\n      renderWithProviders(<DiagnosticDashboard projectId={mockProjectId} />);\n      \n      const createButton = screen.getByText('Create Diagnostic');\n      fireEvent.click(createButton);\n      \n      expect(screen.getByText('Create New Diagnostic')).toBeInTheDocument();\n      expect(screen.getByText(/Generate a pre-lecture diagnostic/)).toBeInTheDocument();\n    });\n\n    it('should display form fields in create dialog', () => {\n      renderWithProviders(<DiagnosticDashboard projectId={mockProjectId} />);\n      \n      const createButton = screen.getByText('Create Diagnostic');\n      fireEvent.click(createButton);\n      \n      expect(screen.getByLabelText(/Topic/)).toBeInTheDocument();\n      expect(screen.getByLabelText(/Delivery Mode/)).toBeInTheDocument();\n      expect(screen.getByLabelText(/Max Questions/)).toBeInTheDocument();\n    });\n\n    it('should close dialog when cancel is clicked', () => {\n      renderWithProviders(<DiagnosticDashboard projectId={mockProjectId} />);\n      \n      const createButton = screen.getByText('Create Diagnostic');\n      fireEvent.click(createButton);\n      \n      const cancelButton = screen.getByText('Cancel');\n      fireEvent.click(cancelButton);\n      \n      expect(screen.queryByText('Create New Diagnostic')).not.toBeInTheDocument();\n    });\n  });\n\n  describe('Form Validation', () => {\n    it('should validate required fields', async () => {\n      renderWithProviders(<DiagnosticDashboard projectId={mockProjectId} />);\n      \n      const createButton = screen.getByText('Create Diagnostic');\n      fireEvent.click(createButton);\n      \n      const submitButton = screen.getByText('Create Diagnostic');\n      fireEvent.click(submitButton);\n      \n      await waitFor(() => {\n        expect(screen.getByText(/Topic is required/)).toBeInTheDocument();\n      });\n    });\n\n    it('should accept valid form input', async () => {\n      renderWithProviders(<DiagnosticDashboard projectId={mockProjectId} />);\n      \n      const createButton = screen.getByText('Create Diagnostic');\n      fireEvent.click(createButton);\n      \n      // Fill in form fields\n      const topicInput = screen.getByLabelText(/Topic/);\n      fireEvent.change(topicInput, { target: { value: 'Mathematics' } });\n      \n      const maxQuestionsInput = screen.getByLabelText(/Max Questions/);\n      fireEvent.change(maxQuestionsInput, { target: { value: '5' } });\n      \n      const submitButton = screen.getByText('Create Diagnostic');\n      fireEvent.click(submitButton);\n      \n      // Should create diagnostic\n      await waitFor(() => {\n        expect(apiMocks.mockFetch).toHaveBeenCalledWith(\n          expect.stringContaining('/backend/api/diagnostics/'),\n          expect.objectContaining({\n            method: 'POST',\n            body: expect.stringContaining('Mathematics')\n          })\n        );\n      });\n    });\n  });\n\n  describe('API Integration', () => {\n    it('should handle successful diagnostic creation', async () => {\n      renderWithProviders(<DiagnosticDashboard projectId={mockProjectId} />);\n      \n      const createButton = screen.getByText('Create Diagnostic');\n      fireEvent.click(createButton);\n      \n      // Fill form and submit\n      fireEvent.change(screen.getByLabelText(/Topic/), { target: { value: 'Test Topic' } });\n      fireEvent.change(screen.getByLabelText(/Max Questions/), { target: { value: '3' } });\n      fireEvent.click(screen.getByText('Create Diagnostic'));\n      \n      // Should show success and close dialog\n      await waitFor(() => {\n        expect(screen.queryByText('Create New Diagnostic')).not.toBeInTheDocument();\n      });\n    });\n\n    it('should handle API errors gracefully', async () => {\n      // Mock API error\n      apiMocks.mockFetch.mockResolvedValueOnce({\n        ok: false,\n        status: 500,\n        json: async () => ({ error: 'Internal server error' })\n      });\n\n      renderWithProviders(<DiagnosticDashboard projectId={mockProjectId} />);\n      \n      const createButton = screen.getByText('Create Diagnostic');\n      fireEvent.click(createButton);\n      \n      // Fill form and submit\n      fireEvent.change(screen.getByLabelText(/Topic/), { target: { value: 'Test Topic' } });\n      fireEvent.click(screen.getByText('Create Diagnostic'));\n      \n      // Should show error message\n      await waitFor(() => {\n        expect(screen.getByText(/Failed to create diagnostic/)).toBeInTheDocument();\n      });\n    });\n\n    it('should load existing diagnostics on mount', async () => {\n      // Mock existing diagnostics\n      apiMocks.mockFetch.mockResolvedValueOnce({\n        ok: true,\n        status: 200,\n        json: async () => ({ \n          results: [\n            { id: '1', topic: 'Math', status: 'ACTIVE' },\n            { id: '2', topic: 'Science', status: 'DRAFT' }\n          ]\n        })\n      });\n\n      renderWithProviders(<DiagnosticDashboard projectId={mockProjectId} />);\n      \n      // Should load and display diagnostics\n      await waitFor(() => {\n        expect(screen.getByText('Math')).toBeInTheDocument();\n        expect(screen.getByText('Science')).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Diagnostic Management', () => {\n    it('should display diagnostic status badges', async () => {\n      // Mock diagnostics with different statuses\n      apiMocks.mockFetch.mockResolvedValueOnce({\n        ok: true,\n        status: 200,\n        json: async () => ({ \n          results: [\n            { id: '1', topic: 'Math', status: 'ACTIVE' },\n            { id: '2', topic: 'Science', status: 'DRAFT' }\n          ]\n        })\n      });\n\n      renderWithProviders(<DiagnosticDashboard projectId={mockProjectId} />);\n      \n      await waitFor(() => {\n        expect(screen.getByText('ACTIVE')).toBeInTheDocument();\n        expect(screen.getByText('DRAFT')).toBeInTheDocument();\n      });\n    });\n\n    it('should handle diagnostic actions', async () => {\n      // Mock diagnostics\n      apiMocks.mockFetch.mockResolvedValueOnce({\n        ok: true,\n        status: 200,\n        json: async () => ({ \n          results: [\n            { id: '1', topic: 'Math', status: 'ACTIVE' }\n          ]\n        })\n      });\n\n      renderWithProviders(<DiagnosticDashboard projectId={mockProjectId} />);\n      \n      await waitFor(() => {\n        expect(screen.getByText('Math')).toBeInTheDocument();\n      });\n\n      // Should show action buttons\n      expect(screen.getByText('Edit')).toBeInTheDocument();\n      expect(screen.getByText('Delete')).toBeInTheDocument();\n    });\n  });\n\n  describe('Accessibility', () => {\n    it('should have proper ARIA labels', () => {\n      renderWithProviders(<DiagnosticDashboard projectId={mockProjectId} />);\n      \n      expect(screen.getByRole('button', { name: /Create Diagnostic/ })).toBeInTheDocument();\n    });\n\n    it('should support keyboard navigation', () => {\n      renderWithProviders(<DiagnosticDashboard projectId={mockProjectId} />);\n      \n      const createButton = screen.getByText('Create Diagnostic');\n      createButton.focus();\n      expect(document.activeElement).toBe(createButton);\n    });\n\n    it('should have proper heading structure', () => {\n      renderWithProviders(<DiagnosticDashboard projectId={mockProjectId} />);\n      \n      expect(screen.getByRole('heading', { name: /Pre-Lecture Diagnostics/ })).toBeInTheDocument();\n    });\n  });\n});\n"],"names":["testEnv","setupFullTestEnvironment","timeout","includeAPI","includeStorage","includeNavigation","apiMocks","standardMocks","describe","mockProjectId","beforeEach","mocks","resetAll","setupMockResponses","ok","status","json","results","id","topic","delivery_mode","max_questions","created_at","it","renderWithProviders","DiagnosticDashboard","projectId","expect","screen","getByText","toBeInTheDocument","createButton","fireEvent","click","getByLabelText","cancelButton","queryByText","not","submitButton","waitFor","topicInput","change","target","value","maxQuestionsInput","mockFetch","toHaveBeenCalledWith","stringContaining","objectContaining","method","body","mockResolvedValueOnce","error","getByRole","name","focus","document","activeElement","toBe"],"mappings":"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"}