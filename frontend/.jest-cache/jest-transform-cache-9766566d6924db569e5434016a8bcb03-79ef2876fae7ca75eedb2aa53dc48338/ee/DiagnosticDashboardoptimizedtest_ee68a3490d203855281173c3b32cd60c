b2412dc39eaaa6af34e12dbfa3fd80e2
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
require("@testing-library/jest-dom");
const _DiagnosticDashboard = /*#__PURE__*/ _interop_require_default(require("../DiagnosticDashboard"));
const _testutils = require("../../../../test-utils");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Setup test environment
const testEnv = (0, _testutils.setupFullTestEnvironment)({
    timeout: 10000,
    includeAPI: true,
    includeStorage: true,
    includeNavigation: true
});
const { apiMocks } = _testutils.standardMocks;
describe('DiagnosticDashboard - Optimized', ()=>{
    const mockProjectId = 'test-project-123';
    beforeEach(()=>{
        testEnv.mocks.resetAll();
        // Setup default API responses
        apiMocks.setupMockResponses({
            'GET:/backend/api/diagnostics/': {
                ok: true,
                status: 200,
                json: async ()=>({
                        results: []
                    })
            },
            'POST:/backend/api/diagnostics/': {
                ok: true,
                status: 201,
                json: async ()=>({
                        id: 'new-session-123',
                        topic: 'New Topic',
                        status: 'DRAFT',
                        delivery_mode: 'DEFERRED_FEEDBACK',
                        max_questions: 3,
                        created_at: '2024-01-01T00:00:00Z'
                    })
            }
        });
    });
    describe('Dashboard Rendering', ()=>{
        it('should render dashboard with correct title and description', ()=>{
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_DiagnosticDashboard.default, {
                projectId: mockProjectId
            }));
            expect(_react1.screen.getByText('Pre-Lecture Diagnostics')).toBeInTheDocument();
            expect(_react1.screen.getByText(/Assess student readiness and identify knowledge gaps/)).toBeInTheDocument();
        });
        it('should show create diagnostic button', ()=>{
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_DiagnosticDashboard.default, {
                projectId: mockProjectId
            }));
            expect(_react1.screen.getByText('Create Diagnostic')).toBeInTheDocument();
        });
        it('should display empty state when no diagnostics exist', ()=>{
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_DiagnosticDashboard.default, {
                projectId: mockProjectId
            }));
            expect(_react1.screen.getByText(/No diagnostics created yet/)).toBeInTheDocument();
        });
    });
    describe('Create Diagnostic Dialog', ()=>{
        it('should open create diagnostic dialog when button is clicked', ()=>{
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_DiagnosticDashboard.default, {
                projectId: mockProjectId
            }));
            const createButton = _react1.screen.getByText('Create Diagnostic');
            _react1.fireEvent.click(createButton);
            expect(_react1.screen.getByText('Create New Diagnostic')).toBeInTheDocument();
            expect(_react1.screen.getByText(/Generate a pre-lecture diagnostic/)).toBeInTheDocument();
        });
        it('should display form fields in create dialog', ()=>{
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_DiagnosticDashboard.default, {
                projectId: mockProjectId
            }));
            const createButton = _react1.screen.getByText('Create Diagnostic');
            _react1.fireEvent.click(createButton);
            expect(_react1.screen.getByLabelText(/Topic/)).toBeInTheDocument();
            expect(_react1.screen.getByLabelText(/Delivery Mode/)).toBeInTheDocument();
            expect(_react1.screen.getByLabelText(/Max Questions/)).toBeInTheDocument();
        });
        it('should close dialog when cancel is clicked', ()=>{
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_DiagnosticDashboard.default, {
                projectId: mockProjectId
            }));
            const createButton = _react1.screen.getByText('Create Diagnostic');
            _react1.fireEvent.click(createButton);
            const cancelButton = _react1.screen.getByText('Cancel');
            _react1.fireEvent.click(cancelButton);
            expect(_react1.screen.queryByText('Create New Diagnostic')).not.toBeInTheDocument();
        });
    });
    describe('Form Validation', ()=>{
        it('should validate required fields', async ()=>{
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_DiagnosticDashboard.default, {
                projectId: mockProjectId
            }));
            const createButton = _react1.screen.getByText('Create Diagnostic');
            _react1.fireEvent.click(createButton);
            const submitButton = _react1.screen.getByText('Create Diagnostic');
            _react1.fireEvent.click(submitButton);
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText(/Topic is required/)).toBeInTheDocument();
            });
        });
        it('should accept valid form input', async ()=>{
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_DiagnosticDashboard.default, {
                projectId: mockProjectId
            }));
            const createButton = _react1.screen.getByText('Create Diagnostic');
            _react1.fireEvent.click(createButton);
            // Fill in form fields
            const topicInput = _react1.screen.getByLabelText(/Topic/);
            _react1.fireEvent.change(topicInput, {
                target: {
                    value: 'Mathematics'
                }
            });
            const maxQuestionsInput = _react1.screen.getByLabelText(/Max Questions/);
            _react1.fireEvent.change(maxQuestionsInput, {
                target: {
                    value: '5'
                }
            });
            const submitButton = _react1.screen.getByText('Create Diagnostic');
            _react1.fireEvent.click(submitButton);
            // Should create diagnostic
            await (0, _react1.waitFor)(()=>{
                expect(apiMocks.mockFetch).toHaveBeenCalledWith(expect.stringContaining('/backend/api/diagnostics/'), expect.objectContaining({
                    method: 'POST',
                    body: expect.stringContaining('Mathematics')
                }));
            });
        });
    });
    describe('API Integration', ()=>{
        it('should handle successful diagnostic creation', async ()=>{
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_DiagnosticDashboard.default, {
                projectId: mockProjectId
            }));
            const createButton = _react1.screen.getByText('Create Diagnostic');
            _react1.fireEvent.click(createButton);
            // Fill form and submit
            _react1.fireEvent.change(_react1.screen.getByLabelText(/Topic/), {
                target: {
                    value: 'Test Topic'
                }
            });
            _react1.fireEvent.change(_react1.screen.getByLabelText(/Max Questions/), {
                target: {
                    value: '3'
                }
            });
            _react1.fireEvent.click(_react1.screen.getByText('Create Diagnostic'));
            // Should show success and close dialog
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.queryByText('Create New Diagnostic')).not.toBeInTheDocument();
            });
        });
        it('should handle API errors gracefully', async ()=>{
            // Mock API error
            apiMocks.mockFetch.mockResolvedValueOnce({
                ok: false,
                status: 500,
                json: async ()=>({
                        error: 'Internal server error'
                    })
            });
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_DiagnosticDashboard.default, {
                projectId: mockProjectId
            }));
            const createButton = _react1.screen.getByText('Create Diagnostic');
            _react1.fireEvent.click(createButton);
            // Fill form and submit
            _react1.fireEvent.change(_react1.screen.getByLabelText(/Topic/), {
                target: {
                    value: 'Test Topic'
                }
            });
            _react1.fireEvent.click(_react1.screen.getByText('Create Diagnostic'));
            // Should show error message
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText(/Failed to create diagnostic/)).toBeInTheDocument();
            });
        });
        it('should load existing diagnostics on mount', async ()=>{
            // Mock existing diagnostics
            apiMocks.mockFetch.mockResolvedValueOnce({
                ok: true,
                status: 200,
                json: async ()=>({
                        results: [
                            {
                                id: '1',
                                topic: 'Math',
                                status: 'ACTIVE'
                            },
                            {
                                id: '2',
                                topic: 'Science',
                                status: 'DRAFT'
                            }
                        ]
                    })
            });
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_DiagnosticDashboard.default, {
                projectId: mockProjectId
            }));
            // Should load and display diagnostics
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText('Math')).toBeInTheDocument();
                expect(_react1.screen.getByText('Science')).toBeInTheDocument();
            });
        });
    });
    describe('Diagnostic Management', ()=>{
        it('should display diagnostic status badges', async ()=>{
            // Mock diagnostics with different statuses
            apiMocks.mockFetch.mockResolvedValueOnce({
                ok: true,
                status: 200,
                json: async ()=>({
                        results: [
                            {
                                id: '1',
                                topic: 'Math',
                                status: 'ACTIVE'
                            },
                            {
                                id: '2',
                                topic: 'Science',
                                status: 'DRAFT'
                            }
                        ]
                    })
            });
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_DiagnosticDashboard.default, {
                projectId: mockProjectId
            }));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText('ACTIVE')).toBeInTheDocument();
                expect(_react1.screen.getByText('DRAFT')).toBeInTheDocument();
            });
        });
        it('should handle diagnostic actions', async ()=>{
            // Mock diagnostics
            apiMocks.mockFetch.mockResolvedValueOnce({
                ok: true,
                status: 200,
                json: async ()=>({
                        results: [
                            {
                                id: '1',
                                topic: 'Math',
                                status: 'ACTIVE'
                            }
                        ]
                    })
            });
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_DiagnosticDashboard.default, {
                projectId: mockProjectId
            }));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText('Math')).toBeInTheDocument();
            });
            // Should show action buttons
            expect(_react1.screen.getByText('Edit')).toBeInTheDocument();
            expect(_react1.screen.getByText('Delete')).toBeInTheDocument();
        });
    });
    describe('Accessibility', ()=>{
        it('should have proper ARIA labels', ()=>{
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_DiagnosticDashboard.default, {
                projectId: mockProjectId
            }));
            expect(_react1.screen.getByRole('button', {
                name: /Create Diagnostic/
            })).toBeInTheDocument();
        });
        it('should support keyboard navigation', ()=>{
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_DiagnosticDashboard.default, {
                projectId: mockProjectId
            }));
            const createButton = _react1.screen.getByText('Create Diagnostic');
            createButton.focus();
            expect(document.activeElement).toBe(createButton);
        });
        it('should have proper heading structure', ()=>{
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_DiagnosticDashboard.default, {
                projectId: mockProjectId
            }));
            expect(_react1.screen.getByRole('heading', {
                name: /Pre-Lecture Diagnostics/
            })).toBeInTheDocument();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,