62a703065eec474833ee3f899e531d61
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    AssessmentApi: function() {
        return AssessmentApi;
    },
    FlashcardApi: function() {
        return FlashcardApi;
    }
});
const _projects = require("../features/projects");
const _http = require("./http");
const BASE = '/generation/api';
const AssessmentApi = {
    // Assessment Set Management
    async getProjectAssessmentSets (projectId) {
        const url = `${BASE}/projects/${projectId}/assessment-sets/`;
        const fallback = {
            results: []
        };
        const data = await (0, _http.fetchJsonOrElse)(url, {
            headers: (0, _projects.getAuthHeaders)()
        }, fallback);
        return data.results || [];
    },
    async getAssessmentSet (setId) {
        const url = `${BASE}/assessment-sets/${setId}/`;
        return await (0, _http.fetchJsonOrElse)(url, {
            headers: (0, _projects.getAuthHeaders)()
        }, null);
    },
    async createAssessmentSet (projectId, form) {
        const url = `${BASE}/projects/${projectId}/assessment-sets/`;
        try {
            const payload = {
                title: form.title,
                kind: form.kind,
                description: form.description,
                difficulty_level: form.difficulty_level,
                target_audience: form.target_audience,
                estimated_study_time: form.estimated_study_time,
                tags: form.tags,
                assessment_config: form.assessment_config
            };
            const res = await fetch(url, {
                method: 'POST',
                headers: (0, _projects.getAuthHeaders)(),
                body: JSON.stringify(payload)
            });
            if (!res.ok) {
                let errorMessage = `HTTP ${res.status}: ${res.statusText}`;
                let errorData = null;
                try {
                    errorData = await res.clone().json();
                    errorMessage = errorData.detail || errorData.error || errorMessage;
                } catch  {
                // ignore JSON parse failures
                }
                const error = new Error(errorMessage);
                error.status = res.status;
                error.response = {
                    url,
                    status: res.status,
                    headers: Object.fromEntries(res.headers.entries()),
                    body: errorData
                };
                throw error;
            }
            try {
                const data = await res.json();
                return data || null;
            } catch (parseError) {
                const location = res.headers.get('Location') || res.headers.get('location');
                if (location) {
                    const follow = await fetch(location, {
                        headers: (0, _projects.getAuthHeaders)()
                    });
                    if (follow.ok) {
                        try {
                            const followData = await follow.json();
                            return followData;
                        } catch  {
                            return null;
                        }
                    }
                }
                return null;
            }
        } catch (error) {
            console.error('Failed to create assessment set:', error);
            throw error;
        }
    },
    async deleteAssessmentSet (projectId, setId) {
        const url = `${BASE}/projects/${projectId}/assessment-sets/${setId}/`;
        try {
            await fetch(url, {
                method: 'DELETE',
                headers: (0, _projects.getAuthHeaders)()
            });
        } catch  {}
    },
    // Assessment Item Management
    async getAssessmentItems (setId) {
        const url = `${BASE}/assessment-items/?assessment_set=${setId}`;
        const data = await (0, _http.fetchJsonOrElse)(url, {
            headers: (0, _projects.getAuthHeaders)()
        }, []);
        if (Array.isArray(data)) {
            return data;
        } else if (data && typeof data === 'object' && 'results' in data) {
            return data.results || [];
        } else {
            return [];
        }
    },
    async createAssessmentItem (payload) {
        const url = `${BASE}/assessment-items/`;
        return await (0, _http.fetchJsonOrElse)(url, {
            method: 'POST',
            headers: (0, _projects.getAuthHeaders)(),
            body: JSON.stringify(payload)
        }, null);
    },
    async updateAssessmentItem (itemId, payload) {
        const url = `${BASE}/assessment-items/${itemId}/`;
        return await (0, _http.fetchJsonOrElse)(url, {
            method: 'PUT',
            headers: (0, _projects.getAuthHeaders)(),
            body: JSON.stringify(payload)
        }, null);
    },
    async deleteAssessmentItem (itemId) {
        const url = `${BASE}/assessment-items/${itemId}/`;
        try {
            await fetch(url, {
                method: 'DELETE',
                headers: (0, _projects.getAuthHeaders)()
            });
        } catch  {}
    },
    async resetAssessmentItem (itemId) {
        const url = `${BASE}/assessment-items/${itemId}/reset/`;
        try {
            await fetch(url, {
                method: 'POST',
                headers: (0, _projects.getAuthHeaders)()
            });
        } catch  {}
    },
    // Review/Attempt Management
    async reviewAssessmentItem (itemId, review) {
        const url = `${BASE}/assessment-items/${itemId}/review/`;
        try {
            const res = await fetch(url, {
                method: 'POST',
                headers: (0, _projects.getAuthHeaders)(),
                body: JSON.stringify(review)
            });
            if (res.ok) {
                return await res.json();
            }
        } catch (error) {
            console.error('Failed to review assessment item:', error);
        }
        return null;
    },
    // Project-level Assessment Item Management
    async getProjectDueItems (projectId, options) {
        const params = new URLSearchParams();
        if (options?.limit) params.append('limit', options.limit.toString());
        if (options?.item_type) params.append('item_type', options.item_type);
        if (options?.algorithm) params.append('algorithm', options.algorithm);
        const url = `${BASE}/projects/${projectId}/assessment-items/due/?${params.toString()}`;
        return await (0, _http.fetchJsonOrElse)(url, {
            headers: (0, _projects.getAuthHeaders)()
        }, null);
    },
    // Generation
    async generateAssessmentFromProject (projectId, request) {
        const url = `${BASE}/projects/${projectId}/assessment-sets/generate/`;
        try {
            const payload = {
                title: request.title,
                kind: request.kind,
                description: request.description,
                content: request.content,
                document_id: request.document_id,
                num_items: request.num_items,
                difficulty: request.difficulty,
                choices_per_item: request.choices_per_item,
                assessment_config: request.assessment_config,
                mock_mode: request.mock_mode || false
            };
            const res = await fetch(url, {
                method: 'POST',
                headers: (0, _projects.getAuthHeaders)(),
                body: JSON.stringify(payload)
            });
            if (!res.ok) {
                let errorMessage = `HTTP ${res.status}: ${res.statusText}`;
                let errorData = null;
                try {
                    errorData = await res.clone().json();
                    errorMessage = errorData.detail || errorData.error || errorMessage;
                } catch  {
                // ignore JSON parse failures
                }
                const error = new Error(errorMessage);
                error.status = res.status;
                error.response = {
                    url,
                    status: res.status,
                    headers: Object.fromEntries(res.headers.entries()),
                    body: errorData
                };
                throw error;
            }
            const result = await res.json();
            return result;
        } catch (error) {
            console.error('Error generating assessment:', error);
            throw error;
        }
    },
    // Statistics
    async getProjectAssessmentStats (projectId) {
        try {
            const sets = await this.getProjectAssessmentSets(projectId);
            let totalItems = 0;
            let totalDueItems = 0;
            let totalLearningItems = 0;
            let totalReviewItems = 0;
            let totalMasteredItems = 0;
            for (const set of sets){
                if (set.items) {
                    totalItems += set.items.length;
                    for (const item of set.items){
                        if (item.learning_state === 'learning') totalLearningItems++;
                        else if (item.learning_state === 'review') totalReviewItems++;
                        else if (item.learning_state === 'mastered') totalMasteredItems++;
                        if (item.next_review && new Date(item.next_review) <= new Date()) {
                            totalDueItems++;
                        }
                    }
                }
            }
            const retentionRate = totalItems > 0 ? Math.round(totalMasteredItems / totalItems * 100) : 0;
            return {
                total_items: totalItems,
                due_items: totalDueItems,
                mastered_items: totalMasteredItems,
                learning_items: totalLearningItems,
                review_items: totalReviewItems,
                retention_rate: retentionRate,
                streak_days: 0,
                next_review: new Date().toISOString()
            };
        } catch (error) {
            console.error('Error calculating assessment stats:', error);
            return {
                total_items: 0,
                due_items: 0,
                mastered_items: 0,
                learning_items: 0,
                review_items: 0,
                retention_rate: 0,
                streak_days: 0,
                next_review: new Date().toISOString()
            };
        }
    },
    // Mock Mode Support
    async getMockAssessmentData () {
        if (process.env.NEXT_PUBLIC_MOCK_MODE !== 'true') {
            return null;
        }
        // Generate mock data for testing
        const mockSets = [
            {
                id: 1,
                title: "Mock Flashcards Set",
                description: "A mock set of flashcards for testing",
                kind: "FLASHCARDS",
                owner: 1,
                created_at: new Date().toISOString(),
                updated_at: new Date().toISOString(),
                total_items: 5,
                due_items: 2,
                learning_items: 1,
                review_items: 2,
                new_items: 0,
                average_accuracy: 75
            },
            {
                id: 2,
                title: "Mock MCQ Set",
                description: "A mock set of multiple choice questions",
                kind: "MCQ",
                owner: 1,
                created_at: new Date().toISOString(),
                updated_at: new Date().toISOString(),
                total_items: 3,
                due_items: 1,
                learning_items: 0,
                review_items: 1,
                new_items: 2,
                average_accuracy: 80
            },
            {
                id: 3,
                title: "Mock Mixed Set",
                description: "A mock set with mixed assessment types",
                kind: "MIXED",
                owner: 1,
                created_at: new Date().toISOString(),
                updated_at: new Date().toISOString(),
                assessment_config: {
                    "FLASHCARD": 60,
                    "MCQ": 40
                },
                total_items: 10,
                due_items: 4,
                learning_items: 3,
                review_items: 3,
                new_items: 4,
                average_accuracy: 75
            }
        ];
        const mockItems = [
            // Flashcard items
            {
                id: 1,
                assessment_set: 1,
                item_type: "FLASHCARD",
                order_index: 0,
                is_active: true,
                question: "What is the capital of France?",
                answer: "Paris",
                difficulty: "INTERMEDIATE",
                bloom_level: "remember",
                algorithm: "sm2",
                learning_state: "review",
                interval: 3,
                repetitions: 2,
                ease_factor: 2.5,
                leitner_box: 2,
                next_review: new Date(Date.now() - 86400000).toISOString(),
                total_reviews: 5,
                correct_reviews: 4,
                created_at: new Date().toISOString(),
                updated_at: new Date().toISOString(),
                retention_rate: 80,
                is_due: true,
                is_overdue: true,
                days_until_due: -1
            },
            {
                id: 2,
                assessment_set: 1,
                item_type: "FLASHCARD",
                order_index: 1,
                is_active: true,
                question: "What is 2 + 2?",
                answer: "4",
                difficulty: "BEGINNER",
                bloom_level: "apply",
                algorithm: "sm2",
                learning_state: "learning",
                interval: 1,
                repetitions: 1,
                ease_factor: 2.5,
                leitner_box: 1,
                next_review: new Date().toISOString(),
                total_reviews: 2,
                correct_reviews: 1,
                created_at: new Date().toISOString(),
                updated_at: new Date().toISOString(),
                retention_rate: 50,
                is_due: true,
                is_overdue: false,
                days_until_due: 0
            },
            // MCQ items with rich NLP/ML content
            {
                id: 3,
                assessment_set: 2,
                item_type: "MCQ",
                order_index: 0,
                is_active: true,
                question: "The principle of compositionality states that the meaning of an expression is determined by:",
                answer: "The meanings of its parts and how they are combined",
                choices: [
                    "The most frequent word in the expression",
                    "The meanings of its parts and how they are combined",
                    "The length of the sentence only",
                    "The parser used to analyze it"
                ],
                correct_index: 1,
                explanation: "Compositionality is a fundamental principle in linguistics and semantics where the meaning of a complex expression is determined by the meanings of its constituent parts and the rules used to combine them.",
                difficulty: "INTERMEDIATE",
                bloom_level: "understand",
                algorithm: "sm2",
                learning_state: "new",
                interval: 1,
                repetitions: 0,
                ease_factor: 2.5,
                leitner_box: 1,
                next_review: new Date().toISOString(),
                total_reviews: 0,
                correct_reviews: 0,
                created_at: new Date().toISOString(),
                updated_at: new Date().toISOString(),
                retention_rate: 0,
                is_due: true,
                is_overdue: false,
                days_until_due: 0
            },
            {
                id: 4,
                assessment_set: 2,
                item_type: "MCQ",
                order_index: 1,
                is_active: true,
                question: "In distributional semantics, a word's meaning is represented primarily as:",
                answer: "A vector derived from co-occurrence statistics",
                choices: [
                    "A hand-crafted symbolic rule",
                    "A vector derived from co-occurrence statistics",
                    "A tree of syntactic categories only",
                    "A list of dictionary senses"
                ],
                correct_index: 1,
                explanation: "Distributional semantics represents word meanings as vectors based on the statistical patterns of word co-occurrence in large text corpora.",
                difficulty: "INTERMEDIATE",
                bloom_level: "understand",
                algorithm: "sm2",
                learning_state: "new",
                interval: 1,
                repetitions: 0,
                ease_factor: 2.5,
                leitner_box: 1,
                next_review: new Date().toISOString(),
                total_reviews: 0,
                correct_reviews: 0,
                created_at: new Date().toISOString(),
                updated_at: new Date().toISOString(),
                retention_rate: 0,
                is_due: true,
                is_overdue: false,
                days_until_due: 0
            },
            {
                id: 5,
                assessment_set: 2,
                item_type: "MCQ",
                order_index: 2,
                is_active: true,
                question: "Transformer models, as presented in the slides, primarily:",
                answer: "Dispense with both recurrence and convolution, using multi-head attention with positional embeddings",
                choices: [
                    "Rely on recurrence and convolution",
                    "Dispense with both recurrence and convolution, using multi-head attention with positional embeddings",
                    "Require processing tokens strictly one-by-one without parallelism",
                    "Cannot outperform encoder-decoder CNNs on translation"
                ],
                correct_index: 1,
                explanation: "Transformers replace recurrence and convolution with multi-head self-attention and positional embeddings.",
                difficulty: "INTERMEDIATE",
                bloom_level: "understand",
                algorithm: "sm2",
                learning_state: "new",
                interval: 1,
                repetitions: 0,
                ease_factor: 2.5,
                leitner_box: 1,
                next_review: new Date().toISOString(),
                total_reviews: 0,
                correct_reviews: 0,
                created_at: new Date().toISOString(),
                updated_at: new Date().toISOString(),
                retention_rate: 0,
                is_due: true,
                is_overdue: false,
                days_until_due: 0
            }
        ];
        const mockAttempts = [
            {
                id: 1,
                user: 1,
                assessment_item: 1,
                attempt_type: "SPACED_REPETITION",
                created_at: new Date().toISOString(),
                response_time_ms: 5000,
                quality: 4,
                payload: {
                    quality: 4,
                    response_time_seconds: 5
                }
            },
            {
                id: 2,
                user: 1,
                assessment_item: 3,
                attempt_type: "QUIZ",
                created_at: new Date().toISOString(),
                response_time_ms: 3000,
                selected_index: 0,
                is_correct: true,
                confidence: 0.8,
                payload: {
                    selected_index: 0,
                    correct_index: 0,
                    is_correct: true
                }
            }
        ];
        return {
            sets: mockSets,
            items: mockItems,
            attempts: mockAttempts
        };
    }
};
const FlashcardApi = {
    // Re-export flashcard-specific methods for backward compatibility
    getProjectFlashcardSets: AssessmentApi.getProjectAssessmentSets,
    getFlashcardSet: AssessmentApi.getAssessmentSet,
    createProjectFlashcardSet: AssessmentApi.createAssessmentSet,
    deleteProjectFlashcardSet: AssessmentApi.deleteAssessmentSet,
    getFlashcards: AssessmentApi.getAssessmentItems,
    createFlashcard: AssessmentApi.createAssessmentItem,
    updateFlashcard: AssessmentApi.updateAssessmentItem,
    deleteFlashcard: AssessmentApi.deleteAssessmentItem,
    resetFlashcard: AssessmentApi.resetAssessmentItem,
    reviewFlashcard: AssessmentApi.reviewAssessmentItem,
    getProjectFlashcardStats: AssessmentApi.getProjectAssessmentStats,
    generateFlashcardsFromProject: AssessmentApi.generateAssessmentFromProject
};

//# sourceMappingURL=data:application/json;base64,