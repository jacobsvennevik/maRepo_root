{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/lib/assessmentApi.ts"],"sourcesContent":["import { getAuthHeaders } from '@/features/projects';\nimport { fetchJsonOrElse } from '@/lib/http';\nimport type { \n  AssessmentSet, \n  AssessmentItem, \n  AssessmentAttempt,\n  CreateAssessmentSetForm, \n  CreateAssessmentItemForm, \n  StudyStats,\n  AssessmentGenerationRequest,\n  DueItemsResponse,\n  MockGenerationResponse\n} from '@/features/diagnostics/types/assessment';\n\nconst BASE = '/generation/api';\n\nexport const AssessmentApi = {\n  // Assessment Set Management\n  async getProjectAssessmentSets(projectId: string): Promise<AssessmentSet[]> {\n    const url = `${BASE}/projects/${projectId}/assessment-sets/`;\n    const fallback: { results: AssessmentSet[] } = { results: [] };\n    const data = await fetchJsonOrElse<{ results: AssessmentSet[] }>(url, { headers: getAuthHeaders() }, fallback);\n    return data.results || [];\n  },\n\n  async getAssessmentSet(setId: string | number): Promise<AssessmentSet | null> {\n    const url = `${BASE}/assessment-sets/${setId}/`;\n    return await fetchJsonOrElse<AssessmentSet>(url, { headers: getAuthHeaders() }, null as any);\n  },\n\n  async createAssessmentSet(projectId: string, form: CreateAssessmentSetForm): Promise<AssessmentSet | null> {\n    const url = `${BASE}/projects/${projectId}/assessment-sets/`;\n    try {\n      const payload = { \n        title: form.title,\n        kind: form.kind,\n        description: form.description,\n        difficulty_level: form.difficulty_level,\n        target_audience: form.target_audience,\n        estimated_study_time: form.estimated_study_time,\n        tags: form.tags,\n        assessment_config: form.assessment_config\n      };\n      \n      const res = await fetch(url, {\n        method: 'POST', \n        headers: getAuthHeaders(), \n        body: JSON.stringify(payload) \n      });\n      \n      if (!res.ok) {\n        let errorMessage = `HTTP ${res.status}: ${res.statusText}`;\n        let errorData: any = null;\n        try {\n          errorData = await res.clone().json();\n          errorMessage = errorData.detail || errorData.error || errorMessage;\n        } catch {\n          // ignore JSON parse failures\n        }\n        \n        const error = new Error(errorMessage);\n        (error as any).status = res.status;\n        (error as any).response = { url, status: res.status, headers: Object.fromEntries(res.headers.entries()), body: errorData };\n        throw error;\n      }\n      \n      try {\n        const data = (await res.json()) as AssessmentSet;\n        return data || (null as any);\n      } catch (parseError) {\n        const location = res.headers.get('Location') || res.headers.get('location');\n        if (location) {\n          const follow = await fetch(location, { headers: getAuthHeaders() });\n          if (follow.ok) {\n            try {\n              const followData = await follow.json();\n              return followData as AssessmentSet;\n            } catch {\n              return null as any;\n            }\n          }\n        }\n        return null as any;\n      }\n    } catch (error) {\n      console.error('Failed to create assessment set:', error);\n      throw error;\n    }\n  },\n\n  async deleteAssessmentSet(projectId: string, setId: number): Promise<void> {\n    const url = `${BASE}/projects/${projectId}/assessment-sets/${setId}/`;\n    try {\n      await fetch(url, { method: 'DELETE', headers: getAuthHeaders() });\n    } catch {/* noop */}\n  },\n\n  // Assessment Item Management\n  async getAssessmentItems(setId: string | number): Promise<AssessmentItem[]> {\n    const url = `${BASE}/assessment-items/?assessment_set=${setId}`;\n    \n    const data = await fetchJsonOrElse<AssessmentItem[] | { results: AssessmentItem[] }>(\n      url, \n      { headers: getAuthHeaders() }, \n      []\n    );\n    \n    if (Array.isArray(data)) {\n      return data;\n    } else if (data && typeof data === 'object' && 'results' in data) {\n      return data.results || [];\n    } else {\n      return [];\n    }\n  },\n\n  async createAssessmentItem(payload: Partial<AssessmentItem> & CreateAssessmentItemForm & { assessment_set: number }): Promise<AssessmentItem | null> {\n    const url = `${BASE}/assessment-items/`;\n    return await fetchJsonOrElse<AssessmentItem>(url, { method: 'POST', headers: getAuthHeaders(), body: JSON.stringify(payload) }, null as any);\n  },\n\n  async updateAssessmentItem(itemId: number, payload: Partial<AssessmentItem>): Promise<AssessmentItem | null> {\n    const url = `${BASE}/assessment-items/${itemId}/`;\n    return await fetchJsonOrElse<AssessmentItem>(url, { method: 'PUT', headers: getAuthHeaders(), body: JSON.stringify(payload) }, null as any);\n  },\n\n  async deleteAssessmentItem(itemId: number): Promise<void> {\n    const url = `${BASE}/assessment-items/${itemId}/`;\n    try {\n      await fetch(url, { method: 'DELETE', headers: getAuthHeaders() });\n    } catch {/* noop */}\n  },\n\n  async resetAssessmentItem(itemId: number): Promise<void> {\n    const url = `${BASE}/assessment-items/${itemId}/reset/`;\n    try {\n      await fetch(url, { method: 'POST', headers: getAuthHeaders() });\n    } catch {/* noop */}\n  },\n\n  // Review/Attempt Management\n  async reviewAssessmentItem(itemId: number, review: any): Promise<any> {\n    const url = `${BASE}/assessment-items/${itemId}/review/`;\n    try {\n      const res = await fetch(url, { method: 'POST', headers: getAuthHeaders(), body: JSON.stringify(review) });\n      if (res.ok) {\n        return await res.json();\n      }\n    } catch (error) {\n      console.error('Failed to review assessment item:', error);\n    }\n    return null;\n  },\n\n  // Project-level Assessment Item Management\n  async getProjectDueItems(projectId: string, options?: {\n    limit?: number;\n    item_type?: string;\n    algorithm?: string;\n  }): Promise<DueItemsResponse | null> {\n    const params = new URLSearchParams();\n    if (options?.limit) params.append('limit', options.limit.toString());\n    if (options?.item_type) params.append('item_type', options.item_type);\n    if (options?.algorithm) params.append('algorithm', options.algorithm);\n    \n    const url = `${BASE}/projects/${projectId}/assessment-items/due/?${params.toString()}`;\n    return await fetchJsonOrElse<DueItemsResponse>(url, { headers: getAuthHeaders() }, null as any);\n  },\n\n  // Generation\n  async generateAssessmentFromProject(projectId: string, request: AssessmentGenerationRequest): Promise<MockGenerationResponse | null> {\n    const url = `${BASE}/projects/${projectId}/assessment-sets/generate/`;\n    try {\n      const payload = {\n        title: request.title,\n        kind: request.kind,\n        description: request.description,\n        content: request.content,\n        document_id: request.document_id,\n        num_items: request.num_items,\n        difficulty: request.difficulty,\n        choices_per_item: request.choices_per_item,\n        assessment_config: request.assessment_config,\n        mock_mode: request.mock_mode || false\n      };\n      \n      const res = await fetch(url, {\n        method: 'POST', \n        headers: getAuthHeaders(), \n        body: JSON.stringify(payload) \n      });\n      \n      if (!res.ok) {\n        let errorMessage = `HTTP ${res.status}: ${res.statusText}`;\n        let errorData: any = null;\n        try {\n          errorData = await res.clone().json();\n          errorMessage = errorData.detail || errorData.error || errorMessage;\n        } catch {\n          // ignore JSON parse failures\n        }\n        \n        const error = new Error(errorMessage);\n        (error as any).status = res.status;\n        (error as any).response = { url, status: res.status, headers: Object.fromEntries(res.headers.entries()), body: errorData };\n        throw error;\n      }\n      \n      const result = await res.json();\n      return result;\n    } catch (error) {\n      console.error('Error generating assessment:', error);\n      throw error;\n    }\n  },\n\n  // Statistics\n  async getProjectAssessmentStats(projectId: string): Promise<StudyStats | null> {\n    try {\n      const sets = await this.getProjectAssessmentSets(projectId);\n      \n      let totalItems = 0;\n      let totalDueItems = 0;\n      let totalLearningItems = 0;\n      let totalReviewItems = 0;\n      let totalMasteredItems = 0;\n      \n      for (const set of sets) {\n        if (set.items) {\n          totalItems += set.items.length;\n          \n          for (const item of set.items) {\n            if (item.learning_state === 'learning') totalLearningItems++;\n            else if (item.learning_state === 'review') totalReviewItems++;\n            else if (item.learning_state === 'mastered') totalMasteredItems++;\n            \n            if (item.next_review && new Date(item.next_review) <= new Date()) {\n              totalDueItems++;\n            }\n          }\n        }\n      }\n      \n      const retentionRate = totalItems > 0 ? Math.round((totalMasteredItems / totalItems) * 100) : 0;\n      \n      return {\n        total_items: totalItems,\n        due_items: totalDueItems,\n        mastered_items: totalMasteredItems,\n        learning_items: totalLearningItems,\n        review_items: totalReviewItems,\n        retention_rate: retentionRate,\n        streak_days: 0, // Not implemented yet\n        next_review: new Date().toISOString(),\n      };\n    } catch (error) {\n      console.error('Error calculating assessment stats:', error);\n      return {\n        total_items: 0,\n        due_items: 0,\n        mastered_items: 0,\n        learning_items: 0,\n        review_items: 0,\n        retention_rate: 0,\n        streak_days: 0,\n        next_review: new Date().toISOString(),\n      };\n    }\n  },\n\n  // Mock Mode Support\n  async getMockAssessmentData(): Promise<{\n    sets: AssessmentSet[];\n    items: AssessmentItem[];\n    attempts: AssessmentAttempt[];\n  } | null> {\n    if (process.env.NEXT_PUBLIC_MOCK_MODE !== 'true') {\n      return null;\n    }\n    \n    // Generate mock data for testing\n    const mockSets: AssessmentSet[] = [\n      {\n        id: 1,\n        title: \"Mock Flashcards Set\",\n        description: \"A mock set of flashcards for testing\",\n        kind: \"FLASHCARDS\",\n        owner: 1,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n        total_items: 5,\n        due_items: 2,\n        learning_items: 1,\n        review_items: 2,\n        new_items: 0,\n        average_accuracy: 75\n      },\n      {\n        id: 2,\n        title: \"Mock MCQ Set\",\n        description: \"A mock set of multiple choice questions\",\n        kind: \"MCQ\",\n        owner: 1,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n        total_items: 3,\n        due_items: 1,\n        learning_items: 0,\n        review_items: 1,\n        new_items: 2,\n        average_accuracy: 80\n      },\n      {\n        id: 3,\n        title: \"Mock Mixed Set\",\n        description: \"A mock set with mixed assessment types\",\n        kind: \"MIXED\",\n        owner: 1,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n        assessment_config: { \"FLASHCARD\": 60, \"MCQ\": 40 },\n        total_items: 10,\n        due_items: 4,\n        learning_items: 3,\n        review_items: 3,\n        new_items: 4,\n        average_accuracy: 75\n      }\n    ];\n    \n    const mockItems: AssessmentItem[] = [\n      // Flashcard items\n      {\n        id: 1,\n        assessment_set: 1,\n        item_type: \"FLASHCARD\",\n        order_index: 0,\n        is_active: true,\n        question: \"What is the capital of France?\",\n        answer: \"Paris\",\n        difficulty: \"INTERMEDIATE\",\n        bloom_level: \"remember\",\n        algorithm: \"sm2\",\n        learning_state: \"review\",\n        interval: 3,\n        repetitions: 2,\n        ease_factor: 2.5,\n        leitner_box: 2,\n        next_review: new Date(Date.now() - 86400000).toISOString(), // Due yesterday\n        total_reviews: 5,\n        correct_reviews: 4,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n        retention_rate: 80,\n        is_due: true,\n        is_overdue: true,\n        days_until_due: -1\n      },\n      {\n        id: 2,\n        assessment_set: 1,\n        item_type: \"FLASHCARD\",\n        order_index: 1,\n        is_active: true,\n        question: \"What is 2 + 2?\",\n        answer: \"4\",\n        difficulty: \"BEGINNER\",\n        bloom_level: \"apply\",\n        algorithm: \"sm2\",\n        learning_state: \"learning\",\n        interval: 1,\n        repetitions: 1,\n        ease_factor: 2.5,\n        leitner_box: 1,\n        next_review: new Date().toISOString(),\n        total_reviews: 2,\n        correct_reviews: 1,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n        retention_rate: 50,\n        is_due: true,\n        is_overdue: false,\n        days_until_due: 0\n      },\n      // MCQ items with rich NLP/ML content\n      {\n        id: 3,\n        assessment_set: 2,\n        item_type: \"MCQ\",\n        order_index: 0,\n        is_active: true,\n        question: \"The principle of compositionality states that the meaning of an expression is determined by:\",\n        answer: \"The meanings of its parts and how they are combined\",\n        choices: [\n          \"The most frequent word in the expression\",\n          \"The meanings of its parts and how they are combined\",\n          \"The length of the sentence only\",\n          \"The parser used to analyze it\"\n        ],\n        correct_index: 1,\n        explanation: \"Compositionality is a fundamental principle in linguistics and semantics where the meaning of a complex expression is determined by the meanings of its constituent parts and the rules used to combine them.\",\n        difficulty: \"INTERMEDIATE\",\n        bloom_level: \"understand\",\n        algorithm: \"sm2\",\n        learning_state: \"new\",\n        interval: 1,\n        repetitions: 0,\n        ease_factor: 2.5,\n        leitner_box: 1,\n        next_review: new Date().toISOString(),\n        total_reviews: 0,\n        correct_reviews: 0,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n        retention_rate: 0,\n        is_due: true,\n        is_overdue: false,\n        days_until_due: 0\n      },\n      {\n        id: 4,\n        assessment_set: 2,\n        item_type: \"MCQ\",\n        order_index: 1,\n        is_active: true,\n        question: \"In distributional semantics, a word's meaning is represented primarily as:\",\n        answer: \"A vector derived from co-occurrence statistics\",\n        choices: [\n          \"A hand-crafted symbolic rule\",\n          \"A vector derived from co-occurrence statistics\",\n          \"A tree of syntactic categories only\",\n          \"A list of dictionary senses\"\n        ],\n        correct_index: 1,\n        explanation: \"Distributional semantics represents word meanings as vectors based on the statistical patterns of word co-occurrence in large text corpora.\",\n        difficulty: \"INTERMEDIATE\",\n        bloom_level: \"understand\",\n        algorithm: \"sm2\",\n        learning_state: \"new\",\n        interval: 1,\n        repetitions: 0,\n        ease_factor: 2.5,\n        leitner_box: 1,\n        next_review: new Date().toISOString(),\n        total_reviews: 0,\n        correct_reviews: 0,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n        retention_rate: 0,\n        is_due: true,\n        is_overdue: false,\n        days_until_due: 0\n      },\n      {\n        id: 5,\n        assessment_set: 2,\n        item_type: \"MCQ\",\n        order_index: 2,\n        is_active: true,\n        question: \"Transformer models, as presented in the slides, primarily:\",\n        answer: \"Dispense with both recurrence and convolution, using multi-head attention with positional embeddings\",\n        choices: [\n          \"Rely on recurrence and convolution\",\n          \"Dispense with both recurrence and convolution, using multi-head attention with positional embeddings\",\n          \"Require processing tokens strictly one-by-one without parallelism\",\n          \"Cannot outperform encoder-decoder CNNs on translation\"\n        ],\n        correct_index: 1,\n        explanation: \"Transformers replace recurrence and convolution with multi-head self-attention and positional embeddings.\",\n        difficulty: \"INTERMEDIATE\",\n        bloom_level: \"understand\",\n        algorithm: \"sm2\",\n        learning_state: \"new\",\n        interval: 1,\n        repetitions: 0,\n        ease_factor: 2.5,\n        leitner_box: 1,\n        next_review: new Date().toISOString(),\n        total_reviews: 0,\n        correct_reviews: 0,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n        retention_rate: 0,\n        is_due: true,\n        is_overdue: false,\n        days_until_due: 0\n      }\n    ];\n    \n    const mockAttempts: AssessmentAttempt[] = [\n      {\n        id: 1,\n        user: 1,\n        assessment_item: 1,\n        attempt_type: \"SPACED_REPETITION\",\n        created_at: new Date().toISOString(),\n        response_time_ms: 5000,\n        quality: 4,\n        payload: { quality: 4, response_time_seconds: 5 }\n      },\n      {\n        id: 2,\n        user: 1,\n        assessment_item: 3,\n        attempt_type: \"QUIZ\",\n        created_at: new Date().toISOString(),\n        response_time_ms: 3000,\n        selected_index: 0,\n        is_correct: true,\n        confidence: 0.8,\n        payload: { selected_index: 0, correct_index: 0, is_correct: true }\n      }\n    ];\n    \n    return {\n      sets: mockSets,\n      items: mockItems,\n      attempts: mockAttempts\n    };\n  }\n};\n\n// Backward compatibility exports\nexport const FlashcardApi = {\n  // Re-export flashcard-specific methods for backward compatibility\n  getProjectFlashcardSets: AssessmentApi.getProjectAssessmentSets,\n  getFlashcardSet: AssessmentApi.getAssessmentSet,\n  createProjectFlashcardSet: AssessmentApi.createAssessmentSet,\n  deleteProjectFlashcardSet: AssessmentApi.deleteAssessmentSet,\n  getFlashcards: AssessmentApi.getAssessmentItems,\n  createFlashcard: AssessmentApi.createAssessmentItem,\n  updateFlashcard: AssessmentApi.updateAssessmentItem,\n  deleteFlashcard: AssessmentApi.deleteAssessmentItem,\n  resetFlashcard: AssessmentApi.resetAssessmentItem,\n  reviewFlashcard: AssessmentApi.reviewAssessmentItem,\n  getProjectFlashcardStats: AssessmentApi.getProjectAssessmentStats,\n  generateFlashcardsFromProject: AssessmentApi.generateAssessmentFromProject\n};\n"],"names":["AssessmentApi","FlashcardApi","BASE","getProjectAssessmentSets","projectId","url","fallback","results","data","fetchJsonOrElse","headers","getAuthHeaders","getAssessmentSet","setId","createAssessmentSet","form","payload","title","kind","description","difficulty_level","target_audience","estimated_study_time","tags","assessment_config","res","fetch","method","body","JSON","stringify","ok","errorMessage","status","statusText","errorData","clone","json","detail","error","Error","response","Object","fromEntries","entries","parseError","location","get","follow","followData","console","deleteAssessmentSet","getAssessmentItems","Array","isArray","createAssessmentItem","updateAssessmentItem","itemId","deleteAssessmentItem","resetAssessmentItem","reviewAssessmentItem","review","getProjectDueItems","options","params","URLSearchParams","limit","append","toString","item_type","algorithm","generateAssessmentFromProject","request","content","document_id","num_items","difficulty","choices_per_item","mock_mode","result","getProjectAssessmentStats","sets","totalItems","totalDueItems","totalLearningItems","totalReviewItems","totalMasteredItems","set","items","length","item","learning_state","next_review","Date","retentionRate","Math","round","total_items","due_items","mastered_items","learning_items","review_items","retention_rate","streak_days","toISOString","getMockAssessmentData","process","env","NEXT_PUBLIC_MOCK_MODE","mockSets","id","owner","created_at","updated_at","new_items","average_accuracy","mockItems","assessment_set","order_index","is_active","question","answer","bloom_level","interval","repetitions","ease_factor","leitner_box","now","total_reviews","correct_reviews","is_due","is_overdue","days_until_due","choices","correct_index","explanation","mockAttempts","user","assessment_item","attempt_type","response_time_ms","quality","response_time_seconds","selected_index","is_correct","confidence","attempts","getProjectFlashcardSets","getFlashcardSet","createProjectFlashcardSet","deleteProjectFlashcardSet","getFlashcards","createFlashcard","updateFlashcard","deleteFlashcard","resetFlashcard","reviewFlashcard","getProjectFlashcardStats","generateFlashcardsFromProject"],"mappings":"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"}