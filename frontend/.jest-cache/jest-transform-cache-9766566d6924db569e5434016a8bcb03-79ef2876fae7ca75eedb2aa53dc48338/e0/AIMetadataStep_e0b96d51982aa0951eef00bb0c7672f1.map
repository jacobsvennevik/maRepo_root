{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/components/wizard/shared/AIMetadataStep.tsx"],"sourcesContent":["/**\n * AI-Powered Metadata Generation Step\n * \n * Generates and manages quiz/content metadata including titles, descriptions,\n * and topics using AI analysis of selected sources. Follows CEFR-B2 guidelines\n * and ensures uniqueness within the project.\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Badge } from '@/components/ui/badge';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { \n  Brain,\n  RefreshCw,\n  CheckCircle2,\n  AlertTriangle,\n  Loader2,\n  Sparkles,\n  Edit3,\n  Save,\n  X,\n} from 'lucide-react';\n\n// ============================================================================\n// Types and Interfaces\n// ============================================================================\n\nexport interface AIMetadataSuggestions {\n  topic: string;\n  title: string;\n  description: string;\n  confidence: number;\n  source_analysis: {\n    dominant_concepts: string[];\n    difficulty_indicators: string[];\n    content_type: string;\n    estimated_scope: string;\n  };\n}\n\nexport interface MetadataFormData {\n  topic: string;\n  title: string;\n  description: string;\n  suggestedByAI: boolean;\n  userModified: boolean;\n}\n\ninterface AIMetadataStepProps {\n  sources: any[];\n  initialMetadata?: Partial<MetadataFormData>;\n  onMetadataChange: (metadata: MetadataFormData) => void;\n  titleTemplate?: string;\n  contentType?: 'quiz' | 'flashcard' | 'diagnostic';\n  projectId: string;\n  isGenerating?: boolean;\n  onRegenerate?: () => void;\n}\n\n// ============================================================================\n// Constants and Configuration\n// ============================================================================\n\nconst CONTENT_TYPE_CONFIG = {\n  quiz: {\n    titleSuffix: 'Quiz',\n    descriptionPrefix: 'Test your knowledge of',\n    icon: Brain,\n    color: 'bg-blue-100 text-blue-800',\n  },\n  flashcard: {\n    titleSuffix: 'Flashcards',\n    descriptionPrefix: 'Review and memorize',\n    icon: Brain,\n    color: 'bg-green-100 text-green-800',\n  },\n  diagnostic: {\n    titleSuffix: 'Assessment',\n    descriptionPrefix: 'Assess your understanding of',\n    icon: Brain,\n    color: 'bg-purple-100 text-purple-800',\n  },\n};\n\nconst QUALITY_INDICATORS = {\n  title: {\n    maxLength: 60,\n    minLength: 5,\n    patterns: {\n      good: /^[A-Z][a-zA-Z0-9\\s\\-—]+$/,\n      avoid: /[!@#$%^&*()_+={}[\\]|\\\\:\";'<>?,./]/,\n    },\n  },\n  description: {\n    maxLength: 200,\n    minLength: 20,\n    cefr_b2_words: ['assess', 'understand', 'explore', 'analyze', 'demonstrate', 'evaluate'],\n  },\n  topic: {\n    maxLength: 50,\n    minLength: 3,\n    maxWords: 8,\n  },\n};\n\n// ============================================================================\n// Utility Functions\n// ============================================================================\n\nconst validateTitle = (title: string): { isValid: boolean; issues: string[] } => {\n  const issues: string[] = [];\n  \n  if (title.length < QUALITY_INDICATORS.title.minLength) {\n    issues.push('Title too short');\n  }\n  if (title.length > QUALITY_INDICATORS.title.maxLength) {\n    issues.push('Title too long');\n  }\n  if (QUALITY_INDICATORS.title.patterns.avoid.test(title)) {\n    issues.push('Contains special characters');\n  }\n  if (!QUALITY_INDICATORS.title.patterns.good.test(title)) {\n    issues.push('Should start with capital letter');\n  }\n  \n  return { isValid: issues.length === 0, issues };\n};\n\nconst validateDescription = (description: string): { isValid: boolean; issues: string[] } => {\n  const issues: string[] = [];\n  \n  if (description.length < QUALITY_INDICATORS.description.minLength) {\n    issues.push('Description too short');\n  }\n  if (description.length > QUALITY_INDICATORS.description.maxLength) {\n    issues.push('Description too long');\n  }\n  \n  return { isValid: issues.length === 0, issues };\n};\n\nconst validateTopic = (topic: string): { isValid: boolean; issues: string[] } => {\n  const issues: string[] = [];\n  const wordCount = topic.split(' ').filter(word => word.length > 0).length;\n  \n  if (topic.length < QUALITY_INDICATORS.topic.minLength) {\n    issues.push('Topic too short');\n  }\n  if (topic.length > QUALITY_INDICATORS.topic.maxLength) {\n    issues.push('Topic too long');\n  }\n  if (wordCount > QUALITY_INDICATORS.topic.maxWords) {\n    issues.push(`Too many words (${wordCount}/${QUALITY_INDICATORS.topic.maxWords})`);\n  }\n  \n  return { isValid: issues.length === 0, issues };\n};\n\nconst generateDefaultMetadata = (\n  sources: any[], \n  contentType: string,\n  titleTemplate?: string\n): Partial<MetadataFormData> => {\n  const config = CONTENT_TYPE_CONFIG[contentType as keyof typeof CONTENT_TYPE_CONFIG];\n  \n  // Extract topic from sources\n  let topic = 'General Knowledge';\n  if (sources.length > 0) {\n    const sourceTitles = sources.map(s => s.title || s.name || '').filter(Boolean);\n    if (sourceTitles.length > 0) {\n      topic = sourceTitles[0].replace(/\\.[^.]+$/, ''); // Remove file extension\n    }\n  }\n  \n  // Generate title using template or default pattern\n  const title = titleTemplate \n    ? titleTemplate.replace('{topic}', topic).replace('{type}', config.titleSuffix)\n    : `${topic} — ${config.titleSuffix}`;\n  \n  // Generate description\n  const description = `${config.descriptionPrefix} ${topic.toLowerCase()}. This content is based on your selected materials and designed to help you learn effectively.`;\n  \n  return {\n    topic,\n    title,\n    description,\n    suggestedByAI: false,\n    userModified: false,\n  };\n};\n\n// ============================================================================\n// Main Component\n// ============================================================================\n\nexport const AIMetadataStep: React.FC<AIMetadataStepProps> = ({\n  sources,\n  initialMetadata,\n  onMetadataChange,\n  titleTemplate,\n  contentType = 'quiz',\n  projectId,\n  isGenerating = false,\n  onRegenerate,\n}) => {\n  const [metadata, setMetadata] = useState<MetadataFormData>({\n    topic: '',\n    title: '',\n    description: '',\n    suggestedByAI: false,\n    userModified: false,\n    ...initialMetadata,\n  });\n  \n  const [isEditing, setIsEditing] = useState(false);\n  const [editingField, setEditingField] = useState<keyof MetadataFormData | null>(null);\n  const [tempValue, setTempValue] = useState('');\n  const [aiSuggestions, setAiSuggestions] = useState<AIMetadataSuggestions | null>(null);\n  \n  const config = CONTENT_TYPE_CONFIG[contentType];\n  const Icon = config.icon;\n  \n  // ============================================================================\n  // Validation\n  // ============================================================================\n  \n  const titleValidation = validateTitle(metadata.title);\n  const descriptionValidation = validateDescription(metadata.description);\n  const topicValidation = validateTopic(metadata.topic);\n  \n  const isFormValid = titleValidation.isValid && descriptionValidation.isValid && topicValidation.isValid;\n  \n  // ============================================================================\n  // Effects\n  // ============================================================================\n  \n  // Initialize with default metadata if empty\n  useEffect(() => {\n    if (!metadata.title && !metadata.topic && !metadata.description && sources.length > 0) {\n      const defaultMetadata = generateDefaultMetadata(sources, contentType, titleTemplate);\n      const newMetadata = { ...metadata, ...defaultMetadata };\n      setMetadata(newMetadata);\n      onMetadataChange(newMetadata);\n    }\n  }, [sources, contentType, titleTemplate]);\n  \n  // Notify parent of changes\n  useEffect(() => {\n    onMetadataChange(metadata);\n  }, [metadata, onMetadataChange]);\n  \n  // ============================================================================\n  // Event Handlers\n  // ============================================================================\n  \n  const handleFieldEdit = (field: keyof MetadataFormData, value: string) => {\n    setEditingField(field);\n    setTempValue(value);\n    setIsEditing(true);\n  };\n  \n  const handleSaveEdit = () => {\n    if (editingField) {\n      const newMetadata = {\n        ...metadata,\n        [editingField]: tempValue,\n        userModified: true,\n      };\n      setMetadata(newMetadata);\n    }\n    setIsEditing(false);\n    setEditingField(null);\n    setTempValue('');\n  };\n  \n  const handleCancelEdit = () => {\n    setIsEditing(false);\n    setEditingField(null);\n    setTempValue('');\n  };\n  \n  const handleRegenerate = async () => {\n    try {\n      // Mock AI generation - replace with actual API call\n      const mockSuggestions: AIMetadataSuggestions = {\n        topic: \"Machine Learning Fundamentals\",\n        title: \"Machine Learning Fundamentals — Diagnostic Quiz\",\n        description: \"Assess your understanding of core machine learning concepts including supervised learning, neural networks, and model evaluation techniques.\",\n        confidence: 0.87,\n        source_analysis: {\n          dominant_concepts: [\"neural networks\", \"supervised learning\", \"classification\"],\n          difficulty_indicators: [\"intermediate\", \"technical terms\"],\n          content_type: \"academic\",\n          estimated_scope: \"comprehensive overview\",\n        },\n      };\n      \n      setAiSuggestions(mockSuggestions);\n      \n      const newMetadata = {\n        ...metadata,\n        topic: mockSuggestions.topic,\n        title: mockSuggestions.title,\n        description: mockSuggestions.description,\n        suggestedByAI: true,\n        userModified: false,\n      };\n      \n      setMetadata(newMetadata);\n      onRegenerate?.();\n      \n    } catch (error) {\n      console.error('Failed to generate AI suggestions:', error);\n    }\n  };\n  \n  // ============================================================================\n  // Render Helpers\n  // ============================================================================\n  \n  const renderFieldEditor = (\n    field: keyof MetadataFormData,\n    label: string,\n    value: string,\n    validation: { isValid: boolean; issues: string[] },\n    isTextarea = false\n  ) => {\n    const isCurrentlyEditing = isEditing && editingField === field;\n    \n    return (\n      <div className=\"space-y-2\">\n        <Label className=\"flex items-center justify-between\">\n          {label}\n          {!isCurrentlyEditing && (\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => handleFieldEdit(field, value)}\n              className=\"h-6 px-2 text-slate-500 hover:text-slate-700\"\n            >\n              <Edit3 className=\"h-3 w-3\" />\n            </Button>\n          )}\n        </Label>\n        \n        {isCurrentlyEditing ? (\n          <div className=\"space-y-2\">\n            {isTextarea ? (\n              <Textarea\n                value={tempValue}\n                onChange={(e) => setTempValue(e.target.value)}\n                rows={3}\n                className=\"resize-none\"\n              />\n            ) : (\n              <Input\n                value={tempValue}\n                onChange={(e) => setTempValue(e.target.value)}\n              />\n            )}\n            <div className=\"flex gap-2\">\n              <Button size=\"sm\" onClick={handleSaveEdit}>\n                <Save className=\"h-3 w-3 mr-1\" />\n                Save\n              </Button>\n              <Button variant=\"outline\" size=\"sm\" onClick={handleCancelEdit}>\n                <X className=\"h-3 w-3 mr-1\" />\n                Cancel\n              </Button>\n            </div>\n          </div>\n        ) : (\n          <div className={`p-3 rounded-lg border ${validation.isValid ? 'border-slate-200 bg-slate-50' : 'border-red-200 bg-red-50'}`}>\n            <p className=\"text-sm\">{value || 'No value set'}</p>\n            {!validation.isValid && (\n              <div className=\"mt-2\">\n                {validation.issues.map((issue, index) => (\n                  <p key={index} className=\"text-xs text-red-600\">• {issue}</p>\n                ))}\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n    );\n  };\n  \n  // ============================================================================\n  // Main Render\n  // ============================================================================\n  \n  return (\n    <div className=\"space-y-6\">\n      <div className=\"text-center space-y-2\">\n        <div className=\"flex items-center justify-center gap-2\">\n          <Icon className=\"h-6 w-6 text-slate-600\" />\n          <h2 className=\"text-xl font-semibold text-slate-900\">Content Details</h2>\n        </div>\n        <p className=\"text-sm text-slate-600\">\n          Review and customize the title, topic, and description for your content\n        </p>\n      </div>\n\n      {/* AI Generation Section */}\n      <Card>\n        <CardHeader className=\"pb-3\">\n          <CardTitle className=\"flex items-center gap-2 text-base\">\n            <Sparkles className=\"h-4 w-4 text-blue-600\" />\n            AI-Generated Suggestions\n            <Badge variant=\"secondary\" className={config.color}>\n              {sources.length} source{sources.length !== 1 ? 's' : ''}\n            </Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <p className=\"text-sm text-slate-600\">\n              Generate smart titles and descriptions based on your selected sources\n            </p>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={handleRegenerate}\n              disabled={isGenerating || sources.length === 0}\n            >\n              {isGenerating ? (\n                <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />\n              ) : (\n                <RefreshCw className=\"h-4 w-4 mr-2\" />\n              )}\n              {isGenerating ? 'Generating...' : 'Generate'}\n            </Button>\n          </div>\n          \n          {aiSuggestions && (\n            <Alert>\n              <Brain className=\"h-4 w-4\" />\n              <AlertDescription>\n                AI confidence: {Math.round(aiSuggestions.confidence * 100)}% • \n                Key concepts: {aiSuggestions.source_analysis.dominant_concepts.join(', ')}\n              </AlertDescription>\n            </Alert>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Metadata Form */}\n      <div className=\"space-y-4\">\n        {renderFieldEditor('topic', 'Topic/Subject', metadata.topic, topicValidation)}\n        {renderFieldEditor('title', 'Title', metadata.title, titleValidation)}\n        {renderFieldEditor('description', 'Description', metadata.description, descriptionValidation, true)}\n      </div>\n\n      {/* Validation Summary */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              {isFormValid ? (\n                <>\n                  <CheckCircle2 className=\"h-5 w-5 text-green-600\" />\n                  <span className=\"text-sm font-medium text-green-900\">Ready to proceed</span>\n                </>\n              ) : (\n                <>\n                  <AlertTriangle className=\"h-5 w-5 text-orange-500\" />\n                  <span className=\"text-sm font-medium text-orange-900\">Please fix validation issues</span>\n                </>\n              )}\n            </div>\n            \n            <div className=\"flex gap-2\">\n              {metadata.suggestedByAI && (\n                <Badge variant=\"secondary\" className=\"bg-blue-100 text-blue-800\">\n                  <Sparkles className=\"h-3 w-3 mr-1\" />\n                  AI Generated\n                </Badge>\n              )}\n              {metadata.userModified && (\n                <Badge variant=\"secondary\" className=\"bg-slate-100 text-slate-800\">\n                  Modified\n                </Badge>\n              )}\n            </div>\n          </div>\n          \n          {!isFormValid && (\n            <div className=\"mt-3 text-sm text-slate-600\">\n              <p>Please review and fix the issues highlighted above before continuing.</p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default AIMetadataStep;\n\n"],"names":["AIMetadataStep","CONTENT_TYPE_CONFIG","quiz","titleSuffix","descriptionPrefix","icon","Brain","color","flashcard","diagnostic","QUALITY_INDICATORS","title","maxLength","minLength","patterns","good","avoid","description","cefr_b2_words","topic","maxWords","validateTitle","issues","length","push","test","isValid","validateDescription","validateTopic","wordCount","split","filter","word","generateDefaultMetadata","sources","contentType","titleTemplate","config","sourceTitles","map","s","name","Boolean","replace","toLowerCase","suggestedByAI","userModified","initialMetadata","onMetadataChange","projectId","isGenerating","onRegenerate","metadata","setMetadata","useState","isEditing","setIsEditing","editingField","setEditingField","tempValue","setTempValue","aiSuggestions","setAiSuggestions","Icon","titleValidation","descriptionValidation","topicValidation","isFormValid","useEffect","defaultMetadata","newMetadata","handleFieldEdit","field","value","handleSaveEdit","handleCancelEdit","handleRegenerate","mockSuggestions","confidence","source_analysis","dominant_concepts","difficulty_indicators","content_type","estimated_scope","error","console","renderFieldEditor","label","validation","isTextarea","isCurrentlyEditing","div","className","Label","Button","variant","size","onClick","Edit3","Textarea","onChange","e","target","rows","Input","Save","X","p","issue","index","h2","Card","CardHeader","CardTitle","Sparkles","Badge","CardContent","disabled","Loader2","RefreshCw","Alert","AlertDescription","Math","round","join","CheckCircle2","span","AlertTriangle"],"mappings":"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"}