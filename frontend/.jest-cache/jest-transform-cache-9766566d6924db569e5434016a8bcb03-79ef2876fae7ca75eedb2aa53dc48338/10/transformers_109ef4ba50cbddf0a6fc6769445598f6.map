{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/features/quiz/utils/transformers.ts"],"sourcesContent":["/**\n * Quiz Data Transformation Utilities\n * \n * Transforms backend API responses to frontend data formats,\n * following the established patterns from Flashcards and Files.\n */\n\nimport type {\n  DiagnosticSession,\n  DiagnosticQuestion,\n  DiagnosticResponse,\n  DiagnosticAnalytics,\n  QuizSession,\n  QuizQuestion,\n  QuizResponse,\n  QuizAnalytics,\n  QuizChoice,\n  QuizSessionStatus,\n  QuizQuestionType,\n  BloomLevel\n} from '../types';\n\n/**\n * Transform backend DiagnosticSession to frontend QuizSession\n */\nexport function transformSession(backendSession: DiagnosticSession): QuizSession {\n  return {\n    id: backendSession.id,\n    projectId: backendSession.project,\n    title: backendSession.title || 'Quiz Session',\n    topic: backendSession.topic,\n    status: mapBackendStatus(backendSession.status),\n    deliveryMode: backendSession.delivery_mode,\n    maxQuestions: backendSession.max_questions,\n    timeLimitSec: backendSession.time_limit_sec,\n    createdAt: new Date(backendSession.created_at),\n    updatedAt: new Date(backendSession.updated_at),\n    createdBy: backendSession.created_by,\n    seed: backendSession.seed,\n    \n    // Computed fields (will be populated by the service)\n    questionCount: undefined,\n    completionRate: undefined,\n    averageScore: undefined,\n    lastAccessed: undefined\n  };\n}\n\n/**\n * Transform backend DiagnosticQuestion to frontend QuizQuestion\n */\nexport function transformQuestion(backendQuestion: DiagnosticQuestion): QuizQuestion {\n  return {\n    id: backendQuestion.id,\n    sessionId: backendQuestion.session,\n    type: mapBackendQuestionType(backendQuestion.type),\n    text: backendQuestion.text,\n    choices: backendQuestion.choices?.map((choice, index) => ({\n      id: String.fromCharCode(65 + index), // A, B, C, D\n      text: choice,\n      isCorrect: index === backendQuestion.correct_choice_index\n    })),\n    correctChoiceIndex: backendQuestion.correct_choice_index,\n    acceptableAnswers: backendQuestion.acceptable_answers,\n    explanation: backendQuestion.explanation,\n    difficulty: backendQuestion.difficulty,\n    bloomLevel: backendQuestion.bloom_level,\n    conceptId: backendQuestion.concept_id,\n    tags: backendQuestion.tags || [],\n    \n    // UI state (will be populated during quiz session)\n    userAnswer: undefined,\n    isCorrect: undefined,\n    timeTakenSec: undefined,\n    isAnswered: false\n  };\n}\n\n/**\n * Transform backend DiagnosticResponse to frontend QuizResponse\n */\nexport function transformResponse(backendResponse: DiagnosticResponse): QuizResponse {\n  return {\n    id: backendResponse.id,\n    sessionId: backendResponse.session,\n    questionId: backendResponse.question,\n    userAnswer: backendResponse.user_answer,\n    isCorrect: backendResponse.is_correct,\n    timeTakenSec: backendResponse.time_taken_sec,\n    submittedAt: new Date(backendResponse.submitted_at)\n  };\n}\n\n/**\n * Transform backend DiagnosticAnalytics to frontend QuizAnalytics\n */\nexport function transformAnalytics(backendAnalytics: DiagnosticAnalytics): QuizAnalytics {\n  const score = Math.round(backendAnalytics.accuracy_percentage);\n  const grade = calculateGrade(score);\n  const timeEfficiency = calculateTimeEfficiency(backendAnalytics.average_time_per_question);\n  \n  return {\n    id: backendAnalytics.id,\n    sessionId: backendAnalytics.session,\n    totalQuestions: backendAnalytics.total_questions,\n    correctAnswers: backendAnalytics.correct_answers,\n    accuracyPercentage: backendAnalytics.accuracy_percentage,\n    averageTimePerQuestion: backendAnalytics.average_time_per_question,\n    totalTimeTaken: backendAnalytics.total_time_taken,\n    completedAt: new Date(backendAnalytics.completed_at),\n    \n    // Computed fields\n    score,\n    grade,\n    timeEfficiency\n  };\n}\n\n/**\n * Map backend status to frontend status\n */\nfunction mapBackendStatus(backendStatus: string): QuizSessionStatus {\n  const statusMap: Record<string, QuizSessionStatus> = {\n    'DRAFT': 'draft',\n    'ACTIVE': 'active',\n    'COMPLETED': 'completed',\n    'ARCHIVED': 'archived'\n  };\n  \n  return statusMap[backendStatus] || 'draft';\n}\n\n/**\n * Map backend question type to frontend question type\n */\nfunction mapBackendQuestionType(backendType: string): QuizQuestionType {\n  const typeMap: Record<string, QuizQuestionType> = {\n    'MCQ': 'multiple_choice',\n    'SHORT_ANSWER': 'short_answer',\n    'PRINCIPLE': 'principle'\n  };\n  \n  return typeMap[backendType] || 'short_answer';\n}\n\n/**\n * Calculate letter grade based on percentage score\n */\nfunction calculateGrade(score: number): 'A' | 'B' | 'C' | 'D' | 'F' {\n  if (score >= 90) return 'A';\n  if (score >= 80) return 'B';\n  if (score >= 70) return 'C';\n  if (score >= 60) return 'D';\n  return 'F';\n}\n\n/**\n * Calculate time efficiency based on average time per question\n */\nfunction calculateTimeEfficiency(avgTimePerQuestion: number): 'fast' | 'normal' | 'slow' {\n  if (avgTimePerQuestion <= 30) return 'fast';\n  if (avgTimePerQuestion <= 60) return 'normal';\n  return 'slow';\n}\n\n/**\n * Transform multiple sessions at once\n */\nexport function transformSessions(backendSessions: DiagnosticSession[]): QuizSession[] {\n  return backendSessions.map(transformSession);\n}\n\n/**\n * Transform multiple questions at once\n */\nexport function transformQuestions(backendQuestions: DiagnosticQuestion[]): QuizQuestion[] {\n  return backendQuestions.map(transformQuestion);\n}\n\n/**\n * Transform multiple responses at once\n */\nexport function transformResponses(backendResponses: DiagnosticResponse[]): QuizResponse[] {\n  return backendResponses.map(transformResponse);\n}\n\n/**\n * Calculate session statistics\n */\nexport function calculateSessionStats(session: QuizSession, responses: QuizResponse[]): {\n  questionCount: number;\n  completionRate: number;\n  averageScore: number;\n  lastAccessed?: Date;\n} {\n  const questionCount = session.maxQuestions;\n  const answeredQuestions = responses.length;\n  const completionRate = questionCount > 0 ? (answeredQuestions / questionCount) * 100 : 0;\n  const correctAnswers = responses.filter(r => r.isCorrect).length;\n  const averageScore = answeredQuestions > 0 ? (correctAnswers / answeredQuestions) * 100 : 0;\n  const lastAccessed = responses.length > 0 \n    ? new Date(Math.max(...responses.map(r => r.submittedAt.getTime())))\n    : undefined;\n\n  return {\n    questionCount,\n    completionRate,\n    averageScore,\n    lastAccessed\n  };\n}\n\n/**\n * Calculate project-level statistics\n */\nexport function calculateProjectStats(sessions: QuizSession[]): {\n  totalSessions: number;\n  completedSessions: number;\n  averageScore: number;\n  totalTimeSpent: number;\n} {\n  const totalSessions = sessions.length;\n  const completedSessions = sessions.filter(s => s.status === 'completed').length;\n  const sessionsWithScores = sessions.filter(s => s.averageScore !== undefined);\n  const averageScore = sessionsWithScores.length > 0\n    ? sessionsWithScores.reduce((sum, s) => sum + (s.averageScore || 0), 0) / sessionsWithScores.length\n    : 0;\n  const totalTimeSpent = sessions.reduce((sum, s) => sum + (s.timeLimitSec || 0), 0);\n\n  return {\n    totalSessions,\n    completedSessions,\n    averageScore,\n    totalTimeSpent\n  };\n}\n\n/**\n * Validate quiz session data\n */\nexport function validateSession(session: Partial<QuizSession>): string[] {\n  const errors: string[] = [];\n  \n  if (!session.title || session.title.trim().length === 0) {\n    errors.push('Title is required');\n  }\n  \n  if (!session.maxQuestions || session.maxQuestions < 1) {\n    errors.push('Must have at least 1 question');\n  }\n  \n  if (session.maxQuestions && session.maxQuestions > 50) {\n    errors.push('Cannot have more than 50 questions');\n  }\n  \n  if (session.timeLimitSec && session.timeLimitSec < 60) {\n    errors.push('Time limit must be at least 60 seconds');\n  }\n  \n  return errors;\n}\n\n/**\n * Validate quiz question data\n */\nexport function validateQuestion(question: Partial<QuizQuestion>): string[] {\n  const errors: string[] = [];\n  \n  if (!question.text || question.text.trim().length === 0) {\n    errors.push('Question text is required');\n  }\n  \n  if (question.type === 'multiple_choice') {\n    if (!question.choices || question.choices.length < 2) {\n      errors.push('Multiple choice questions must have at least 2 choices');\n    }\n    if (question.correctChoiceIndex === undefined) {\n      errors.push('Must specify correct choice for multiple choice questions');\n    }\n  }\n  \n  if (!question.explanation || question.explanation.trim().length === 0) {\n    errors.push('Explanation is required');\n  }\n  \n  return errors;\n}\n\n/**\n * Format time duration for display\n */\nexport function formatQuizDuration(seconds: number): string {\n  const hours = Math.floor(seconds / 3600);\n  const minutes = Math.floor((seconds % 3600) / 60);\n  const secs = seconds % 60;\n  \n  if (hours > 0) {\n    return `${hours}h ${minutes}m ${secs}s`;\n  } else if (minutes > 0) {\n    return `${minutes}m ${secs}s`;\n  } else {\n    return `${secs}s`;\n  }\n}\n\n/**\n * Format percentage for display\n */\nexport function formatQuizPercentage(value: number, decimals: number = 1): string {\n  return `${value.toFixed(decimals)}%`;\n}\n\n/**\n * Get status color for UI display\n */\nexport function getQuizStatusColor(status: QuizSessionStatus): string {\n  const colorMap: Record<QuizSessionStatus, string> = {\n    draft: 'gray',\n    active: 'blue',\n    completed: 'green',\n    archived: 'orange'\n  };\n  \n  return colorMap[status] || 'gray';\n}\n\n/**\n * Get difficulty color for UI display\n */\nexport function getQuizDifficultyColor(difficulty: number): string {\n  if (difficulty <= 2) return 'green';\n  if (difficulty <= 3) return 'yellow';\n  if (difficulty <= 4) return 'orange';\n  return 'red';\n}\n\n/**\n * Get bloom level description\n */\nexport function getQuizBloomLevelDescription(level: BloomLevel): string {\n  const descriptions: Record<BloomLevel, string> = {\n    Remember: 'Recall facts and basic concepts',\n    Understand: 'Explain ideas or concepts',\n    Apply: 'Use information in new situations',\n    Analyze: 'Draw connections among ideas',\n    Evaluate: 'Justify decisions or courses of action',\n    Create: 'Produce new or original work'\n  };\n  \n  return descriptions[level];\n}\n"],"names":["calculateProjectStats","calculateSessionStats","formatQuizDuration","formatQuizPercentage","getQuizBloomLevelDescription","getQuizDifficultyColor","getQuizStatusColor","transformAnalytics","transformQuestion","transformQuestions","transformResponse","transformResponses","transformSession","transformSessions","validateQuestion","validateSession","backendSession","id","projectId","project","title","topic","status","mapBackendStatus","deliveryMode","delivery_mode","maxQuestions","max_questions","timeLimitSec","time_limit_sec","createdAt","Date","created_at","updatedAt","updated_at","createdBy","created_by","seed","questionCount","undefined","completionRate","averageScore","lastAccessed","backendQuestion","sessionId","session","type","mapBackendQuestionType","text","choices","map","choice","index","String","fromCharCode","isCorrect","correct_choice_index","correctChoiceIndex","acceptableAnswers","acceptable_answers","explanation","difficulty","bloomLevel","bloom_level","conceptId","concept_id","tags","userAnswer","timeTakenSec","isAnswered","backendResponse","questionId","question","user_answer","is_correct","time_taken_sec","submittedAt","submitted_at","backendAnalytics","score","Math","round","accuracy_percentage","grade","calculateGrade","timeEfficiency","calculateTimeEfficiency","average_time_per_question","totalQuestions","total_questions","correctAnswers","correct_answers","accuracyPercentage","averageTimePerQuestion","totalTimeTaken","total_time_taken","completedAt","completed_at","backendStatus","statusMap","backendType","typeMap","avgTimePerQuestion","backendSessions","backendQuestions","backendResponses","responses","answeredQuestions","length","filter","r","max","getTime","sessions","totalSessions","completedSessions","s","sessionsWithScores","reduce","sum","totalTimeSpent","errors","trim","push","seconds","hours","floor","minutes","secs","value","decimals","toFixed","colorMap","draft","active","completed","archived","level","descriptions","Remember","Understand","Apply","Analyze","Evaluate","Create"],"mappings":"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"}