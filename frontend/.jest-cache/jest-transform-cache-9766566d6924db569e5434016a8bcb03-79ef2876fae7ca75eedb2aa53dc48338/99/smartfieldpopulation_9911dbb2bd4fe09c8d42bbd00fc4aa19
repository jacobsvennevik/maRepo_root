f76a30baac29525a27b45ade2c53596e
'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "SmartFieldPopulation", {
    enumerable: true,
    get: function() {
        return SmartFieldPopulation;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _button = require("../../../../components/ui/button");
const _badge = require("../../../../components/ui/badge");
const _card = require("../../../../components/ui/card");
const _lucidereact = require("lucide-react");
function SmartFieldPopulation({ detectedTopics, detectedTestTypes, detectedDates, currentSetup, onApplySuggestion, onDismiss }) {
    const [suggestions, setSuggestions] = (0, _react.useState)([]);
    const [appliedSuggestions, setAppliedSuggestions] = (0, _react.useState)([]);
    // Generate smart suggestions based on detected data
    (0, _react.useEffect)(()=>{
        const newSuggestions = [];
        // Timeline suggestions
        if (detectedDates.length > 0 && !currentSetup.timeframe) {
            const hasMultipleDates = detectedDates.length >= 2;
            const hasExams = detectedDates.some((date)=>date.type === 'exam');
            if (hasMultipleDates && hasExams) {
                newSuggestions.push({
                    id: 'timeline-1',
                    field: 'timeframe',
                    currentValue: 'Not set',
                    suggestedValue: '3-months',
                    reason: 'Multiple exam dates detected - 3-month timeline recommended',
                    confidence: 90,
                    applied: false
                });
            } else if (hasExams) {
                newSuggestions.push({
                    id: 'timeline-2',
                    field: 'timeframe',
                    currentValue: 'Not set',
                    suggestedValue: '1-month',
                    reason: 'Exam detected - 1-month intensive timeline',
                    confidence: 85,
                    applied: false
                });
            }
        }
        // Study frequency suggestions
        if (detectedTestTypes.length > 0 && !currentSetup.studyFrequency) {
            const hasMultipleTypes = detectedTestTypes.length >= 2;
            const hasEssay = detectedTestTypes.some((type)=>type.toLowerCase().includes('essay'));
            if (hasMultipleTypes) {
                newSuggestions.push({
                    id: 'frequency-1',
                    field: 'studyFrequency',
                    currentValue: 'Not set',
                    suggestedValue: 'daily',
                    reason: 'Multiple test types detected - daily practice recommended',
                    confidence: 88,
                    applied: false
                });
            } else if (hasEssay) {
                newSuggestions.push({
                    id: 'frequency-2',
                    field: 'studyFrequency',
                    currentValue: 'Not set',
                    suggestedValue: 'weekly',
                    reason: 'Essay-based tests - weekly writing practice',
                    confidence: 82,
                    applied: false
                });
            }
        }
        // Goal suggestions
        if (detectedTopics.length > 0 && !currentSetup.goal) {
            const mainTopics = detectedTopics.slice(0, 2).join(' and ');
            newSuggestions.push({
                id: 'goal-1',
                field: 'goal',
                currentValue: 'Not set',
                suggestedValue: `Master ${mainTopics} concepts and achieve strong performance in all assessments`,
                reason: `Based on detected topics: ${mainTopics}`,
                confidence: 85,
                applied: false
            });
        }
        // Collaboration suggestions
        if (detectedTestTypes.length > 0 && !currentSetup.collaboration) {
            const hasGroupWork = detectedTestTypes.some((type)=>type.toLowerCase().includes('presentation') || type.toLowerCase().includes('group'));
            if (hasGroupWork) {
                newSuggestions.push({
                    id: 'collab-1',
                    field: 'collaboration',
                    currentValue: 'Not set',
                    suggestedValue: 'study-group',
                    reason: 'Group presentations detected - study group recommended',
                    confidence: 87,
                    applied: false
                });
            } else {
                newSuggestions.push({
                    id: 'collab-2',
                    field: 'collaboration',
                    currentValue: 'Not set',
                    suggestedValue: 'individual',
                    reason: 'Individual test formats - solo study recommended',
                    confidence: 80,
                    applied: false
                });
            }
        }
        setSuggestions(newSuggestions);
    }, [
        detectedTopics,
        detectedTestTypes,
        detectedDates,
        currentSetup
    ]);
    const handleApplySuggestion = (suggestion)=>{
        onApplySuggestion(suggestion.field, suggestion.suggestedValue);
        setAppliedSuggestions((prev)=>[
                ...prev,
                suggestion.id
            ]);
        // Mark as applied
        setSuggestions((prev)=>prev.map((s)=>s.id === suggestion.id ? {
                    ...s,
                    applied: true
                } : s));
        const handleApplyAll = ()=>{
            suggestions.forEach((suggestion)=>{
                if (!appliedSuggestions.includes(suggestion.id)) {
                    onApplySuggestion(suggestion.field, suggestion.suggestedValue);
                }
            });
            setAppliedSuggestions(suggestions.map((s)=>s.id));
            onDismiss();
            if (suggestions.length === 0) return null;
            const unappliedSuggestions = suggestions.filter((s)=>!appliedSuggestions.includes(s.id));
            return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_card.Card, {
                className: "border-green-200 bg-green-50/50",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)(_card.CardHeader, {
                        className: "pb-3",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                className: "flex items-center gap-2",
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                        className: "w-8 h-8 bg-gradient-to-r from-green-500 to-emerald-600 rounded-full flex items-center justify-center",
                                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Lightbulb, {
                                            className: "h-4 w-4 text-white"
                                        })
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.CardTitle, {
                                        className: "text-lg text-green-900",
                                        children: "Smart Field Suggestions"
                                    })
                                ]
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                                className: "text-sm text-green-700",
                                children: "We've detected patterns in your data and suggest filling these fields:"
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)(_card.CardContent, {
                        className: "space-y-4",
                        children: [
                            suggestions.map((suggestion)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                    className: "flex items-center gap-3 p-3 bg-white rounded-lg border border-green-200",
                                    children: [
                                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                            className: "flex-1",
                                            children: [
                                                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                    className: "flex items-center gap-2 mb-1",
                                                    children: [
                                                        /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                                            className: "text-sm font-medium text-green-900 capitalize",
                                                            children: suggestion.field.replace(/([A-Z])/g, ' $1').trim()
                                                        }),
                                                        /*#__PURE__*/ (0, _jsxruntime.jsxs)(_badge.Badge, {
                                                            variant: "outline",
                                                            className: "text-xs",
                                                            children: [
                                                                suggestion.confidence,
                                                                "% confidence"
                                                            ]
                                                        }),
                                                        appliedSuggestions.includes(suggestion.id) && /*#__PURE__*/ (0, _jsxruntime.jsx)(_badge.Badge, {
                                                            variant: "secondary",
                                                            className: "text-xs bg-green-100 text-green-800",
                                                            children: "Applied"
                                                        })
                                                    ]
                                                }),
                                                /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                                                    className: "text-xs text-green-700 mb-1",
                                                    children: suggestion.reason
                                                }),
                                                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                    className: "flex items-center gap-2",
                                                    children: [
                                                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("span", {
                                                            className: "text-xs text-gray-500",
                                                            children: [
                                                                "Current: ",
                                                                suggestion.currentValue
                                                            ]
                                                        }),
                                                        /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                                            className: "text-xs text-gray-400",
                                                            children: "→"
                                                        }),
                                                        /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                                            className: "text-xs font-medium text-green-800",
                                                            children: suggestion.suggestedValue
                                                        })
                                                    ]
                                                })
                                            ]
                                        }),
                                        !appliedSuggestions.includes(suggestion.id) && /*#__PURE__*/ (0, _jsxruntime.jsxs)(_button.Button, {
                                            size: "sm",
                                            onClick: ()=>handleApplySuggestion(suggestion),
                                            className: "bg-green-600 hover:bg-green-700 text-white",
                                            children: [
                                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.CheckCircle, {
                                                    className: "h-3 w-3 mr-1"
                                                }),
                                                "Apply"
                                            ]
                                        })
                                    ]
                                }, suggestion.id)),
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                className: "flex gap-2 pt-2",
                                children: [
                                    unappliedSuggestions.length > 0 && /*#__PURE__*/ (0, _jsxruntime.jsxs)(_button.Button, {
                                        onClick: handleApplyAll,
                                        className: "bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700 text-white",
                                        children: [
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Zap, {
                                                className: "h-4 w-4 mr-2"
                                            }),
                                            "Apply All (",
                                            unappliedSuggestions.length,
                                            ")"
                                        ]
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                                        variant: "outline",
                                        onClick: onDismiss,
                                        className: "border-gray-300 text-gray-600 hover:bg-gray-50",
                                        children: "Dismiss"
                                    })
                                ]
                            })
                        ]
                    })
                ]
            });
        };
    };
}

//# sourceMappingURL=data:application/json;base64,