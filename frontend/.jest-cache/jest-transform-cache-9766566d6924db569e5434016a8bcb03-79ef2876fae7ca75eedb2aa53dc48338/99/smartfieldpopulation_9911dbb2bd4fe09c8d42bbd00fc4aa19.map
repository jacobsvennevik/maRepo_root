{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/features/projects/components/ai/smart-field-population.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { \n  Lightbulb, \n  Target, \n  Clock, \n  BookOpen,\n  CheckCircle,\n  Zap\n} from \"lucide-react\";\n\ninterface SmartSuggestion {\n  id: string;\n  field: string;\n  currentValue: string;\n  suggestedValue: string;\n  reason: string;\n  confidence: number;\n  applied: boolean;\n}\n\ninterface SmartFieldPopulationProps {\n  detectedTopics: string[];\n  detectedTestTypes: string[];\n  detectedDates: any[];\n  currentSetup: any;\n  onApplySuggestion: (field: string, value: string) => void;\n  onDismiss: () => void;\n}\n\nexport function SmartFieldPopulation({\n  detectedTopics,\n  detectedTestTypes,\n  detectedDates,\n  currentSetup,\n  onApplySuggestion,\n  onDismiss\n}: SmartFieldPopulationProps) {\n  const [suggestions, setSuggestions] = useState<SmartSuggestion[]>([]);\n  const [appliedSuggestions, setAppliedSuggestions] = useState<string[]>([]);\n\n  // Generate smart suggestions based on detected data\n  useEffect(() => {\n    const newSuggestions: SmartSuggestion[] = [];\n\n    // Timeline suggestions\n    if (detectedDates.length > 0 && !currentSetup.timeframe) {\n      const hasMultipleDates = detectedDates.length >= 2;\n      const hasExams = detectedDates.some((date: any) => date.type === 'exam');\n      \n      if (hasMultipleDates && hasExams) {\n        newSuggestions.push({\n          id: 'timeline-1',\n          field: 'timeframe',\n          currentValue: 'Not set',\n          suggestedValue: '3-months',\n          reason: 'Multiple exam dates detected - 3-month timeline recommended',\n          confidence: 90,\n          applied: false\n        });\n      } else if (hasExams) {\n        newSuggestions.push({\n          id: 'timeline-2',\n          field: 'timeframe',\n          currentValue: 'Not set',\n          suggestedValue: '1-month',\n          reason: 'Exam detected - 1-month intensive timeline',\n          confidence: 85,\n          applied: false\n        });\n      }\n    }\n\n    // Study frequency suggestions\n    if (detectedTestTypes.length > 0 && !currentSetup.studyFrequency) {\n      const hasMultipleTypes = detectedTestTypes.length >= 2;\n      const hasEssay = detectedTestTypes.some((type: string) => type.toLowerCase().includes('essay'));\n      \n      if (hasMultipleTypes) {\n        newSuggestions.push({\n          id: 'frequency-1',\n          field: 'studyFrequency',\n          currentValue: 'Not set',\n          suggestedValue: 'daily',\n          reason: 'Multiple test types detected - daily practice recommended',\n          confidence: 88,\n          applied: false\n        });\n      } else if (hasEssay) {\n        newSuggestions.push({\n          id: 'frequency-2',\n          field: 'studyFrequency',\n          currentValue: 'Not set',\n          suggestedValue: 'weekly',\n          reason: 'Essay-based tests - weekly writing practice',\n          confidence: 82,\n          applied: false\n        });\n      }\n    }\n\n    // Goal suggestions\n    if (detectedTopics.length > 0 && !currentSetup.goal) {\n      const mainTopics = detectedTopics.slice(0, 2).join(' and ');\n      newSuggestions.push({\n        id: 'goal-1',\n        field: 'goal',\n        currentValue: 'Not set',\n        suggestedValue: `Master ${mainTopics} concepts and achieve strong performance in all assessments`,\n        reason: `Based on detected topics: ${mainTopics}`,\n        confidence: 85,\n        applied: false\n      });\n    }\n\n    // Collaboration suggestions\n    if (detectedTestTypes.length > 0 && !currentSetup.collaboration) {\n      const hasGroupWork = detectedTestTypes.some((type: string) => \n        type.toLowerCase().includes('presentation') || type.toLowerCase().includes('group')\n      );\n      \n      if (hasGroupWork) {\n        newSuggestions.push({\n          id: 'collab-1',\n          field: 'collaboration',\n          currentValue: 'Not set',\n          suggestedValue: 'study-group',\n          reason: 'Group presentations detected - study group recommended',\n          confidence: 87,\n          applied: false\n        });\n      } else {\n        newSuggestions.push({\n          id: 'collab-2',\n          field: 'collaboration',\n          currentValue: 'Not set',\n          suggestedValue: 'individual',\n          reason: 'Individual test formats - solo study recommended',\n          confidence: 80,\n          applied: false\n        });\n      }\n    }\n\n    setSuggestions(newSuggestions);\n  }, [detectedTopics, detectedTestTypes, detectedDates, currentSetup]);\n\n  const handleApplySuggestion = (suggestion: SmartSuggestion) => {\n    onApplySuggestion(suggestion.field, suggestion.suggestedValue);\n    setAppliedSuggestions(prev => [...prev, suggestion.id]);\n    \n    // Mark as applied\n    setSuggestions(prev => \n      prev.map(s => \n        s.id === suggestion.id \n          ? { ...s, applied: true }\n          : s\n      )\n    );\n\n  const handleApplyAll = () => {\n    suggestions.forEach(suggestion => {\n      if (!appliedSuggestions.includes(suggestion.id)) {\n        onApplySuggestion(suggestion.field, suggestion.suggestedValue);\n      }\n    });\n    setAppliedSuggestions(suggestions.map(s => s.id));\n    onDismiss();\n\n  if (suggestions.length === 0) return null;\n\n  const unappliedSuggestions = suggestions.filter(s => !appliedSuggestions.includes(s.id));\n\n  return (\n    <Card className=\"border-green-200 bg-green-50/50\">\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-center gap-2\">\n          <div className=\"w-8 h-8 bg-gradient-to-r from-green-500 to-emerald-600 rounded-full flex items-center justify-center\">\n            <Lightbulb className=\"h-4 w-4 text-white\" />\n          </div>\n          <CardTitle className=\"text-lg text-green-900\">\n            Smart Field Suggestions\n          </CardTitle>\n        </div>\n        <p className=\"text-sm text-green-700\">\n          We've detected patterns in your data and suggest filling these fields:\n        </p>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {suggestions.map((suggestion) => (\n          <div key={suggestion.id} className=\"flex items-center gap-3 p-3 bg-white rounded-lg border border-green-200\">\n            <div className=\"flex-1\">\n              <div className=\"flex items-center gap-2 mb-1\">\n                <span className=\"text-sm font-medium text-green-900 capitalize\">\n                  {suggestion.field.replace(/([A-Z])/g, ' $1').trim()}\n                </span>\n                <Badge variant=\"outline\" className=\"text-xs\">\n                  {suggestion.confidence}% confidence\n                </Badge>\n                {appliedSuggestions.includes(suggestion.id) && (\n                  <Badge variant=\"secondary\" className=\"text-xs bg-green-100 text-green-800\">\n                    Applied\n                  </Badge>\n                )}\n              </div>\n              <p className=\"text-xs text-green-700 mb-1\">{suggestion.reason}</p>\n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-xs text-gray-500\">Current: {suggestion.currentValue}</span>\n                <span className=\"text-xs text-gray-400\">â†’</span>\n                <span className=\"text-xs font-medium text-green-800\">{suggestion.suggestedValue}</span>\n              </div>\n            </div>\n            {!appliedSuggestions.includes(suggestion.id) && (\n              <Button\n                size=\"sm\"\n                onClick={() => handleApplySuggestion(suggestion)}\n                className=\"bg-green-600 hover:bg-green-700 text-white\"\n              >\n                <CheckCircle className=\"h-3 w-3 mr-1\" />\n                Apply\n              </Button>\n            )}\n          </div>\n        ))}\n\n        {/* Action Buttons */}\n        <div className=\"flex gap-2 pt-2\">\n          {unappliedSuggestions.length > 0 && (\n            <Button \n              onClick={handleApplyAll}\n              className=\"bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700 text-white\"\n            >\n              <Zap className=\"h-4 w-4 mr-2\" />\n              Apply All ({unappliedSuggestions.length})\n            </Button>\n          )}\n          <Button \n            variant=\"outline\" \n            onClick={onDismiss}\n            className=\"border-gray-300 text-gray-600 hover:bg-gray-50\"\n          >\n            Dismiss\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n} }\n}\n"],"names":["SmartFieldPopulation","detectedTopics","detectedTestTypes","detectedDates","currentSetup","onApplySuggestion","onDismiss","suggestions","setSuggestions","useState","appliedSuggestions","setAppliedSuggestions","useEffect","newSuggestions","length","timeframe","hasMultipleDates","hasExams","some","date","type","push","id","field","currentValue","suggestedValue","reason","confidence","applied","studyFrequency","hasMultipleTypes","hasEssay","toLowerCase","includes","goal","mainTopics","slice","join","collaboration","hasGroupWork","handleApplySuggestion","suggestion","prev","map","s","handleApplyAll","forEach","unappliedSuggestions","filter","Card","className","CardHeader","div","Lightbulb","CardTitle","p","CardContent","span","replace","trim","Badge","variant","Button","size","onClick","CheckCircle","Zap"],"mappings":"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"}