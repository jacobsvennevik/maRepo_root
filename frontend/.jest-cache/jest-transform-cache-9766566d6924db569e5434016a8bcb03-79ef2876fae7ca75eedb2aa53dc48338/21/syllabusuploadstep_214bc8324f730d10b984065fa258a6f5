a8f13a0f00f0702857dd363abcef37b7
'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "SyllabusUploadStep", {
    enumerable: true,
    get: function() {
        return SyllabusUploadStep;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _navigation = require("next/navigation");
const _fileupload = require("../../../../components/ui/file-upload");
const _api = require("../../services/api");
const _uploadutils = require("../../services/upload-utils");
const _mockmodebanner = require("../shared/mock-mode-banner");
const _shared = require("./shared");
const _button = require("../../../../components/ui/button");
const _mockdata = require("../../services/mock-data");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
function SyllabusUploadStep({ setup, onUploadComplete, onNext, onBack, onSkip, hasUploadCompleted = false, onResetUploadState, testTimeoutSeconds }) {
    const [files, setFiles] = (0, _react.useState)([]);
    const [uploadProgress, setUploadProgress] = (0, _react.useState)({});
    const [error, setError] = (0, _react.useState)(null);
    const [isProcessing, setIsProcessing] = (0, _react.useState)(false);
    const [isAnalyzing, setIsAnalyzing] = (0, _react.useState)(false);
    const [showSuccess, setShowSuccess] = (0, _react.useState)(false);
    const [storedResults, setStoredResults] = (0, _react.useState)(null);
    const [hasNavigated, setHasNavigated] = (0, _react.useState)(false);
    const router = (0, _navigation.useRouter)();
    const handleSkip = (0, _react.useCallback)(()=>{
        if (onSkip) {
            onSkip();
        }
    }, [
        onSkip
    ]);
    // Reset success state when component mounts (when user goes back to this step)
    _react.default.useEffect(()=>{
        if (showSuccess) {
            console.log('üîÑ Resetting success state on component mount');
            setShowSuccess(false);
            setStoredResults(null);
        }
    }, []); // Empty dependency array means this runs only on mount
    // Call onUploadComplete immediately when analysis completes for the guided setup
    _react.default.useEffect(()=>{
        if (showSuccess && storedResults && !hasNavigated) {
            // Only call onUploadComplete if we haven't already completed an upload in this session
            if (!hasUploadCompleted) {
                onUploadComplete(storedResults.projectId, storedResults.extractedData, storedResults.fileName);
            }
            // Automatically navigate to the next step after a short delay
            const timeoutId = setTimeout(()=>{
                if (onNext && !hasNavigated) {
                    setHasNavigated(true);
                    onNext();
                }
            }, 1500); // 1.5 second delay to show success message
            // Cleanup timeout on unmount or dependency change
            return ()=>clearTimeout(timeoutId);
        }
    }, [
        showSuccess,
        storedResults,
        onUploadComplete,
        onNext,
        hasNavigated,
        hasUploadCompleted
    ]);
    const handleUpload = (0, _react.useCallback)(async (updatedFiles)=>{
        setFiles(updatedFiles);
        setError(null);
        setHasNavigated(false); // Reset navigation flag when files change
        setShowSuccess(false); // Reset success state when new files are uploaded
    }, []);
    const handleAnalyze = (0, _react.useCallback)(async ()=>{
        if (files.length === 0) {
            setError("Please upload at least one file before analyzing.");
            return;
        }
        // Check file size and warn about large files
        const firstFile = files[0];
        const fileSizeMB = firstFile.size / 1024 / 1024;
        if (fileSizeMB > 10) {
            console.warn(`‚ö†Ô∏è Large file detected: ${firstFile.name} (${fileSizeMB.toFixed(2)} MB)`);
            console.warn('   Large files may take longer to process or timeout');
        }
        setError(null);
        setIsAnalyzing(true);
        setHasNavigated(false); // Reset navigation flag when starting analysis
        // Reset upload completion state when starting new analysis
        if (onResetUploadState) {
            onResetUploadState();
        }
        try {
            // TEST MODE: Skip API calls and use mock data
            if ((0, _mockdata.isTestMode)()) {
                console.log('üß™ TEST MODE: Analyzing', files.length, 'files with mock data');
                // Simulate upload progress for all files
                for (const file of files){
                    setUploadProgress((prev)=>({
                            ...prev,
                            [file.name]: 100
                        }));
                }
                // Simulate processing time with realistic delay
                await (0, _mockdata.simulateProcessingDelay)(1000, 2000);
                // Always use the main mock syllabus extraction data
                const mockSyllabusData = _mockdata.MOCK_SYLLABUS_EXTRACTION;
                const mockProcessedDoc = (0, _mockdata.createMockProcessedDocument)(mockSyllabusData, 123);
                const fileName = files[0].name;
                console.log('üß™ TEST MODE: Using main mock syllabus data:', mockSyllabusData.course_title);
                console.log('üß™ TEST MODE: Extraction completed for:', fileName);
                setIsAnalyzing(false);
                setShowSuccess(true);
                setStoredResults({
                    projectId: 'project-123',
                    extractedData: mockProcessedDoc,
                    fileName: fileName
                });
                // Auto-navigation will be handled by the useEffect hook
                return;
            }
            // Real API calls for production
            // Upload and process the first file only
            let processedData = null;
            let documentId = null;
            // Step 1: Upload the file
            const formData = new FormData();
            formData.append('file', firstFile);
            formData.append('file_type', 'pdf');
            formData.append('upload_type', 'course_files');
            formData.append('title', firstFile.name);
            console.log('Uploading syllabus to PDF service:', firstFile.name);
            const uploadResponse = await fetch(`${_uploadutils.API_BASE_URL}/api/pdf_service/documents/`, {
                method: 'POST',
                body: formData,
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('authToken') || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzUwMzE4MDc5LCJpYXQiOjE3NTAzMTQ0NzksImp0aSI6IjU1MmVjNDQ4ZTllNjRmNjM5OTBlNTgyNzk3NzBjNjg2IiwidXNlcl9pZCI6MX0.O8k3yL_dUEMvkBaqxViq-syDXTZNqDfjKtWZEMlxJ14'}`
                }
            });
            if (!uploadResponse.ok) {
                const errorText = await uploadResponse.text();
                console.error('Upload failed:', {
                    status: uploadResponse.status,
                    statusText: uploadResponse.statusText,
                    error: errorText
                });
                throw new Error(`Failed to upload ${firstFile.name} to PDF service: ${uploadResponse.status} ${uploadResponse.statusText} - ${errorText}`);
            }
            const document = await uploadResponse.json();
            documentId = document.id;
            console.log('File uploaded successfully:', document);
            setUploadProgress((prev)=>({
                    ...prev,
                    [firstFile.name]: 100
                }));
            // Step 2: Start processing
            console.log('üöÄ Starting PDF processing...');
            const processResponse = await fetch(`${_uploadutils.API_BASE_URL}/api/pdf_service/documents/${documentId}/process/`, {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('authToken') || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzUwMzE4MDc5LCJpYXQiOjE3NTAzMTQ0NzksImp0aSI6IjU1MmVjNDQ4ZTllNjRmNjM5OTBlNTgyNzk3NzBjNjg2IiwidXNlcl9pZCI6MX0.O8k3yL_dUEMvkBaqxViq-syDXTZNqDfjKtWZEMlxJ14'}`,
                    'Content-Type': 'application/json'
                }
            });
            if (!processResponse.ok) {
                const errorText = await processResponse.text();
                console.error('‚ùå Failed to start processing:', {
                    status: processResponse.status,
                    statusText: processResponse.statusText,
                    error: errorText
                });
                throw new Error(`Failed to start processing: ${processResponse.status} ${processResponse.statusText} - ${errorText}`);
            }
            const processData = await processResponse.json();
            console.log('‚úÖ Processing started successfully:', processData);
            // Verify we got a task ID
            if (!processData.task_id) {
                console.error('‚ùå No task ID returned from processing request:', processData);
                throw new Error('Processing request did not return a task ID. Backend processing service may be unavailable.');
            }
            console.log('üìã Task details:', {
                taskId: processData.task_id,
                documentId: processData.document_id,
                status: processData.status
            });
            // Step 3: Poll for completion
            const maxAttempts = testTimeoutSeconds || 180; // Use test timeout or default 3 minutes
            console.log('Starting to poll for processing completion...');
            console.log(`üìä Polling configuration: ${maxAttempts} attempts, 1 second intervals (${maxAttempts / 60} minutes total)`);
            let attempts = 0;
            while(attempts < maxAttempts && !processedData){
                try {
                    if (documentId) {
                        // Use the correct endpoint to get document details including status
                        const statusResponse = await fetch(`${_uploadutils.API_BASE_URL}/api/pdf_service/documents/${documentId}/`, {
                            method: 'GET',
                            headers: {
                                'Authorization': `Bearer ${localStorage.getItem('authToken') || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzUwMzE4MDc5LCJpYXQiOjE3NTAzMTQ0NzksImp0aSI6IjU1MmVjNDQ4ZTllNjRmNjM5OTBlNTgyNzk3NzBjNjg2IiwidXNlcl9pZCI6MX0.O8k3yL_dUEMvkBaqxViq-syDXTZNqDfjKtWZEMlxJ14'}`,
                                'Content-Type': 'application/json'
                            }
                        });
                        if (statusResponse.ok) {
                            const statusData = await statusResponse.json();
                            console.log(`Polling attempt ${attempts + 1}:`, {
                                id: statusData.id,
                                status: statusData.status,
                                document_type: statusData.document_type,
                                has_processed_data: !!(statusData.processed_data && Object.keys(statusData.processed_data).length > 0)
                            });
                            if (statusData.status === 'completed') {
                                console.log('üéâ Document processing completed!');
                                console.log('üìä Full status data:', statusData);
                                // First priority: Use AI-extracted processed_data if available
                                if (statusData.processed_data && Object.keys(statusData.processed_data).length > 0) {
                                    processedData = {
                                        id: statusData.id,
                                        original_text: statusData.original_text,
                                        metadata: statusData.processed_data,
                                        status: 'completed'
                                    };
                                    console.log('‚úÖ Using AI-extracted processed data:', statusData.processed_data);
                                    console.log('üìã Extracted course info:');
                                    console.log('  - Course Title:', statusData.processed_data.course_title || 'N/A');
                                    console.log('  - Instructor:', statusData.processed_data.instructor || 'N/A');
                                    console.log('  - Semester:', statusData.processed_data.semester || 'N/A');
                                    console.log('  - Topics:', statusData.processed_data.topics || 'N/A');
                                    console.log('  - Meeting Times:', statusData.processed_data.meeting_times || 'N/A');
                                    console.log('  - Important Dates:', statusData.processed_data.important_dates || 'N/A');
                                    break;
                                }
                                // Fallback to processed_data endpoint if not in main response
                                try {
                                    const processedDataResponse = await fetch(`${_uploadutils.API_BASE_URL}/api/pdf_service/documents/${documentId}/processed_data/`, {
                                        method: 'GET',
                                        headers: {
                                            'Authorization': `Bearer ${localStorage.getItem('authToken') || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzUwMzE4MDc5LCJpYXQiOjE3NTAzMTQ0NzksImp0aSI6IjU1MmVjNDQ4ZTllNjRmNjM5OTBlNTgyNzk3NzBjNjg2IiwidXNlcl9pZCI6MX0.O8k3yL_dUEMvkBaqxViq-syDXTZNqDfjKtWZEMlxJ14'}`,
                                            'Content-Type': 'application/json'
                                        }
                                    });
                                    if (processedDataResponse.ok) {
                                        const processedDataObj = await processedDataResponse.json();
                                        processedData = {
                                            id: statusData.id,
                                            original_text: statusData.original_text,
                                            metadata: processedDataObj.data,
                                            status: 'completed'
                                        };
                                        console.log('‚úÖ Using processed data from endpoint:', processedDataObj.data);
                                        break;
                                    }
                                } catch (processedDataError) {
                                    console.log('‚ö†Ô∏è Processed data endpoint failed, using document metadata');
                                }
                                // Final fallback: use basic document metadata
                                processedData = {
                                    id: statusData.id,
                                    original_text: statusData.original_text,
                                    metadata: statusData.metadata || {},
                                    status: 'completed'
                                };
                                console.log('‚ö†Ô∏è Using basic document metadata as fallback:', statusData.metadata);
                                break;
                            } else if (statusData.status === 'error') {
                                console.error('Processing failed:', statusData.error_message || 'Unknown error');
                                throw new Error('Document processing failed: ' + (statusData.error_message || 'Unknown error'));
                            }
                        // If status is 'pending' or 'processing', continue polling
                        }
                    }
                    attempts++;
                    if (attempts < maxAttempts) {
                        // Log progress every 30 seconds
                        if (attempts % 30 === 0) {
                            console.log(`‚è≥ Still polling... (${attempts}/${maxAttempts} attempts, ${Math.round(attempts / maxAttempts * 100)}% of timeout)`);
                        }
                        await new Promise((resolve)=>setTimeout(resolve, 1000)); // Wait 1 second before next poll
                    }
                } catch (pollError) {
                    console.error('Polling error:', pollError);
                    attempts++;
                    if (attempts < maxAttempts) {
                        await new Promise((resolve)=>setTimeout(resolve, 1000));
                    }
                }
            }
            // Handle timeout - provide fallback data instead of throwing error
            if (!processedData) {
                console.warn('‚è∞ Processing timed out after 3 minutes - using fallback data');
                console.warn('üìä Processing details:');
                console.warn(`   - Document ID: ${documentId}`);
                console.warn(`   - File: ${firstFile.name} (${(firstFile.size / 1024 / 1024).toFixed(2)} MB)`);
                console.warn(`   - Polling attempts: ${attempts}/${maxAttempts}`);
                console.warn('üîç Possible causes:');
                console.warn('   - Large or complex PDF file (>10MB)');
                console.warn('   - Backend processing queue is busy');
                console.warn('   - Network connectivity issues');
                console.warn('   - AI service temporarily unavailable');
                console.warn('   - Celery worker not running');
                console.warn('   - Redis connection issues');
                // Create fallback data for timeout scenario
                const fallbackCourseName = firstFile.name.replace(/\.[^/.]+$/, ''); // Use filename as course name
                processedData = {
                    id: documentId || 123,
                    original_text: `Course materials for ${fallbackCourseName}`,
                    metadata: {
                        course_name: fallbackCourseName,
                        instructor: 'Unknown',
                        semester: 'Unknown',
                        topics: [
                            'Course content will be available after processing'
                        ],
                        meeting_times: 'To be determined',
                        important_dates: 'Please check with instructor',
                        processing_status: 'timeout',
                        timeout_reason: 'Processing took longer than expected'
                    },
                    status: 'completed'
                };
                console.log('üîÑ Using timeout fallback data:', processedData);
            }
            // Create project with extracted course name
            let projectName = firstFile.name.replace(/\.[^/.]+$/, ''); // Default to filename
            if (processedData && processedData.metadata && processedData.metadata.course_name) {
                projectName = processedData.metadata.course_name;
            }
            const projectData = {
                name: projectName,
                project_type: 'school',
                course_name: projectName,
                is_draft: true
            };
            const newProject = await (0, _api.createProject)(projectData);
            console.log('Project created:', newProject);
            setIsAnalyzing(false);
            setShowSuccess(true);
            setStoredResults({
                projectId: newProject.id,
                extractedData: processedData,
                fileName: firstFile.name
            });
            // Call onUploadComplete with the results
            onUploadComplete(newProject.id, processedData, firstFile.name);
            // Auto-navigation will be handled by the useEffect hook
            // Use processed data (either real or timeout fallback)
            console.log('üéâ SUCCESS: Using processed data:', processedData);
        } catch (error) {
            console.error("Syllabus analysis failed:", error);
            setIsAnalyzing(false);
            setShowSuccess(false);
            setStoredResults(null);
            // Enhanced error handling with specific messages
            if (error instanceof _api.APIError) {
                if (error.statusCode === 401) {
                    setError("Your session has expired. Please log in again.");
                    router.push('/login');
                } else if (error.statusCode === 413) {
                    setError("File too large. Please upload a smaller PDF file (max 10MB).");
                } else if (error.statusCode === 503) {
                    setError("Processing service is temporarily unavailable. Please try again in a few minutes.");
                } else {
                    setError(`Processing failed: ${error.message}`);
                }
            } else if (error instanceof Error) {
                const errorMessage = error.message;
                // Handle specific timeout errors
                if (errorMessage.includes('timed out')) {
                    setError(`Processing timeout: ${errorMessage}. Please try again with a smaller file or contact support.`);
                } else if (errorMessage.includes('Failed to upload')) {
                    setError(`Upload failed: ${errorMessage}. Please check your internet connection and try again.`);
                } else if (errorMessage.includes('Failed to start processing')) {
                    setError(`Processing service error: ${errorMessage}. Please try again later.`);
                } else if (errorMessage.includes('Document processing failed')) {
                    setError(`PDF processing failed: ${errorMessage}. The file may be corrupted or in an unsupported format.`);
                } else {
                    setError(`Analysis failed: ${errorMessage}. Please try again or contact support.`);
                }
            } else {
                setError("An unexpected error occurred during analysis. Please try again.");
            }
        }
    }, [
        files,
        onUploadComplete,
        router
    ]);
    const handleRemove = (0, _react.useCallback)((index)=>{
        setFiles((prev)=>prev.filter((_, i)=>i !== index));
        setError(null);
        // Clear progress for the removed file
        const removedFile = files[index];
        if (removedFile) {
            setUploadProgress((prev)=>{
                const newProgress = {
                    ...prev
                };
                delete newProgress[removedFile.name];
                return newProgress;
            });
        }
    }, [
        files
    ]);
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        className: "space-y-6",
        "data-testid": "syllabus-upload-step",
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_mockmodebanner.SyllabusMockBanner, {
                courseName: _mockdata.MOCK_SYLLABUS_EXTRACTION.course_title
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_fileupload.FileUpload, {
                onUpload: handleUpload,
                onRemove: handleRemove,
                accept: ".pdf",
                maxFiles: 5,
                maxSize: 10 * 1024 * 1024,
                required: true,
                title: "Upload your course materials",
                description: "Upload your syllabus, course documents, tests, and other materials. We will analyze them to extract course details, deadlines, and topics.",
                buttonText: "Browse for course materials",
                files: files,
                uploadProgress: uploadProgress,
                error: error || undefined
            }),
            files.length > 0 && !isAnalyzing && !showSuccess && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: "flex justify-center gap-4",
                "data-testid": "analyze-button-container",
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_shared.StepAnalyzeButton, {
                    onClick: handleAnalyze,
                    isAnalyzing: isAnalyzing,
                    disabled: isAnalyzing,
                    filesCount: files.length
                })
            }),
            onSkip && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: "flex justify-center mt-2",
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                    "data-testid": "skip-button",
                    variant: "outline",
                    onClick: handleSkip,
                    children: "Skip"
                })
            }),
            showSuccess && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: "space-y-4",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_shared.SuccessMessage, {
                        message: "Syllabus analyzed successfully! Redirecting to review results..."
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        className: "flex justify-center",
                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            className: "text-sm text-gray-600",
                            children: "Please wait while we prepare your analysis results..."
                        })
                    })
                ]
            }),
            isAnalyzing && /*#__PURE__*/ (0, _jsxruntime.jsx)(_shared.LoadingSpinner, {
                message: (0, _mockdata.isTestMode)() ? `üß™ Simulating AI analysis of ${files.length} files...` : `AI is analyzing your ${files.length} course materials...`,
                subMessage: (0, _mockdata.isTestMode)() ? 'Using mock data for testing' : 'This may take a few moments'
            })
        ]
    });
}

//# sourceMappingURL=data:application/json;base64,