{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/features/projects/components/steps/syllabus-upload-step.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState, useCallback } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { FileUpload } from '@/components/ui/file-upload';\nimport { createProject, uploadFileWithProgress, APIError, ProjectData } from '../../services/api';\nimport { ProjectSetup } from '../../types';\nimport { \n  API_BASE_URL, \n  getAuthHeaders,\n  uploadFileToService, \n  startDocumentProcessing, \n  pollDocumentStatus,\n  validateFiles,\n  updateProgress,\n  clearProgress\n} from '../../services/upload-utils';\nimport { TestModeBanner, ErrorMessage } from '../shared/upload-ui';\nimport { SyllabusMockBanner } from '../shared/mock-mode-banner';\nimport { StepAnalyzeButton, SuccessMessage, LoadingSpinner, SkipButton } from './shared';\nimport { Button } from '@/components/ui/button';\nimport { \n  MOCK_SYLLABUS_PROCESSED_DOCUMENT,\n  MOCK_SYLLABUS_EXTRACTION,\n  createMockProcessedDocument,\n  simulateProcessingDelay,\n  isTestMode,\n  type ProcessedDocument \n} from '../../services/mock-data';\n\n\n\n// Note: Mock data is now centralized in services/mock-data.ts\n\ninterface SyllabusUploadStepProps {\n  setup?: ProjectSetup;\n  onUploadComplete: (projectId: string, extractedData: ProcessedDocument, fileName?: string) => void;\n  onNext?: () => void;\n  onBack?: () => void;\n  onSkip?: () => void; // Add onSkip callback\n  hasUploadCompleted?: boolean; // Add flag to check if upload is already completed\n  onResetUploadState?: () => void; // Add callback to reset upload state\n  testTimeoutSeconds?: number; // Add configurable timeout for testing\n}\n\nexport function SyllabusUploadStep({ setup, onUploadComplete, onNext, onBack, onSkip, hasUploadCompleted = false, onResetUploadState, testTimeoutSeconds }: SyllabusUploadStepProps) {\n  const [files, setFiles] = useState<File[]>([]);\n  const [uploadProgress, setUploadProgress] = useState<Record<string, number>>({});\n  const [error, setError] = useState<string | null>(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n  const [showSuccess, setShowSuccess] = useState(false);\n  const [storedResults, setStoredResults] = useState<{ projectId: string, extractedData: ProcessedDocument, fileName?: string } | null>(null);\n  const [hasNavigated, setHasNavigated] = useState(false);\n  const router = useRouter();\n\n  const handleSkip = useCallback(() => {\n    if (onSkip) {\n      onSkip();\n    }\n  }, [onSkip]);\n\n\n\n  // Reset success state when component mounts (when user goes back to this step)\n  React.useEffect(() => {\n    if (showSuccess) {\n      console.log('üîÑ Resetting success state on component mount');\n      setShowSuccess(false);\n      setStoredResults(null);\n    }\n  }, []); // Empty dependency array means this runs only on mount\n\n  // Call onUploadComplete immediately when analysis completes for the guided setup\n  React.useEffect(() => {\n    if (showSuccess && storedResults && !hasNavigated) {\n      // Only call onUploadComplete if we haven't already completed an upload in this session\n      if (!hasUploadCompleted) {\n        onUploadComplete(storedResults.projectId, storedResults.extractedData, storedResults.fileName);\n      }\n      \n      // Automatically navigate to the next step after a short delay\n      const timeoutId = setTimeout(() => {\n        if (onNext && !hasNavigated) {\n          setHasNavigated(true);\n          onNext();\n        }\n      }, 1500); // 1.5 second delay to show success message\n      \n      // Cleanup timeout on unmount or dependency change\n      return () => clearTimeout(timeoutId);\n    }\n  }, [showSuccess, storedResults, onUploadComplete, onNext, hasNavigated, hasUploadCompleted]);\n\n\n  const handleUpload = useCallback(async (updatedFiles: File[]) => {\n    setFiles(updatedFiles);\n    setError(null);\n    setHasNavigated(false); // Reset navigation flag when files change\n    setShowSuccess(false); // Reset success state when new files are uploaded\n  }, []);\n\n   const handleAnalyze = useCallback(async () => {\n     if (files.length === 0) {\n       setError(\"Please upload at least one file before analyzing.\");\n       return;\n     }\n\n     // Check file size and warn about large files\n     const firstFile = files[0];\n     const fileSizeMB = firstFile.size / 1024 / 1024;\n     if (fileSizeMB > 10) {\n       console.warn(`‚ö†Ô∏è Large file detected: ${firstFile.name} (${fileSizeMB.toFixed(2)} MB)`);\n       console.warn('   Large files may take longer to process or timeout');\n     }\n\n     setError(null);\n     setIsAnalyzing(true);\n     setHasNavigated(false); // Reset navigation flag when starting analysis\n     \n     // Reset upload completion state when starting new analysis\n     if (onResetUploadState) {\n       onResetUploadState();\n     }\n\n     try {\n       // TEST MODE: Skip API calls and use mock data\n       if (isTestMode()) {\n         console.log('üß™ TEST MODE: Analyzing', files.length, 'files with mock data');\n         \n         // Simulate upload progress for all files\n         for (const file of files) {\n           setUploadProgress(prev => ({ ...prev, [file.name]: 100 }));\n         }\n         \n         // Simulate processing time with realistic delay\n         await simulateProcessingDelay(1000, 2000);\n         \n         // Always use the main mock syllabus extraction data\n         const mockSyllabusData = MOCK_SYLLABUS_EXTRACTION;\n         const mockProcessedDoc = createMockProcessedDocument(mockSyllabusData, 123);\n         \n         const fileName = files[0].name;\n         console.log('üß™ TEST MODE: Using main mock syllabus data:', mockSyllabusData.course_title);\n         console.log('üß™ TEST MODE: Extraction completed for:', fileName);\n\n         setIsAnalyzing(false);\n         setShowSuccess(true);\n         setStoredResults({\n           projectId: 'project-123',\n           extractedData: mockProcessedDoc,\n           fileName: fileName\n         });\n         \n         // Auto-navigation will be handled by the useEffect hook\n         return;\n       }\n\n       // Real API calls for production\n       // Upload and process the first file only\n       let processedData = null;\n       let documentId = null;\n\n       // Step 1: Upload the file\n         const formData = new FormData();\n       formData.append('file', firstFile);\n         formData.append('file_type', 'pdf');\n         formData.append('upload_type', 'course_files');\n         formData.append('title', firstFile.name);\n\n       console.log('Uploading syllabus to PDF service:', firstFile.name);\n         \n         const uploadResponse = await fetch(`${API_BASE_URL}/api/pdf_service/documents/`, {\n           method: 'POST',\n           body: formData,\n           headers: {\n             'Authorization': `Bearer ${localStorage.getItem('authToken') || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzUwMzE4MDc5LCJpYXQiOjE3NTAzMTQ0NzksImp0aSI6IjU1MmVjNDQ4ZTllNjRmNjM5OTBlNTgyNzk3NzBjNjg2IiwidXNlcl9pZCI6MX0.O8k3yL_dUEMvkBaqxViq-syDXTZNqDfjKtWZEMlxJ14'}`,\n           },\n         });\n\n         if (!uploadResponse.ok) {\n           const errorText = await uploadResponse.text();\n           console.error('Upload failed:', {\n             status: uploadResponse.status,\n             statusText: uploadResponse.statusText,\n             error: errorText\n           });\n         throw new Error(`Failed to upload ${firstFile.name} to PDF service: ${uploadResponse.status} ${uploadResponse.statusText} - ${errorText}`);\n         }\n\n         const document = await uploadResponse.json();\n       documentId = document.id;\n       console.log('File uploaded successfully:', document);\n       setUploadProgress(prev => ({ ...prev, [firstFile.name]: 100 }));\n         \n       // Step 2: Start processing\n       console.log('üöÄ Starting PDF processing...');\n       const processResponse = await fetch(`${API_BASE_URL}/api/pdf_service/documents/${documentId}/process/`, {\n           method: 'POST',\n           headers: {\n             'Authorization': `Bearer ${localStorage.getItem('authToken') || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzUwMzE4MDc5LCJpYXQiOjE3NTAzMTQ0NzksImp0aSI6IjU1MmVjNDQ4ZTllNjRmNjM5OTBlNTgyNzk3NzBjNjg2IiwidXNlcl9pZCI6MX0.O8k3yL_dUEMvkBaqxViq-syDXTZNqDfjKtWZEMlxJ14'}`,\n             'Content-Type': 'application/json',\n           },\n         });\n\n         if (!processResponse.ok) {\n           const errorText = await processResponse.text();\n           console.error('‚ùå Failed to start processing:', {\n             status: processResponse.status,\n             statusText: processResponse.statusText,\n             error: errorText\n           });\n           throw new Error(`Failed to start processing: ${processResponse.status} ${processResponse.statusText} - ${errorText}`);\n         }\n       \n       const processData = await processResponse.json();\n       console.log('‚úÖ Processing started successfully:', processData);\n       \n       // Verify we got a task ID\n       if (!processData.task_id) {\n         console.error('‚ùå No task ID returned from processing request:', processData);\n         throw new Error('Processing request did not return a task ID. Backend processing service may be unavailable.');\n       }\n       \n       console.log('üìã Task details:', {\n         taskId: processData.task_id,\n         documentId: processData.document_id,\n         status: processData.status\n       });\n\n       // Step 3: Poll for completion\n       const maxAttempts = testTimeoutSeconds || 180; // Use test timeout or default 3 minutes\n       console.log('Starting to poll for processing completion...');\n       console.log(`üìä Polling configuration: ${maxAttempts} attempts, 1 second intervals (${maxAttempts/60} minutes total)`);\n       let attempts = 0;\n\n       while (attempts < maxAttempts && !processedData) {\n         try {\n           if (documentId) {\n             // Use the correct endpoint to get document details including status\n             const statusResponse = await fetch(`${API_BASE_URL}/api/pdf_service/documents/${documentId}/`, {\n               method: 'GET',\n               headers: {\n                 'Authorization': `Bearer ${localStorage.getItem('authToken') || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzUwMzE4MDc5LCJpYXQiOjE3NTAzMTQ0NzksImp0aSI6IjU1MmVjNDQ4ZTllNjRmNjM5OTBlNTgyNzk3NzBjNjg2IiwidXNlcl9pZCI6MX0.O8k3yL_dUEMvkBaqxViq-syDXTZNqDfjKtWZEMlxJ14'}`,\n                 'Content-Type': 'application/json',\n               },\n             });\n\n             if (statusResponse.ok) {\n               const statusData = await statusResponse.json();\n               console.log(`Polling attempt ${attempts + 1}:`, {\n                 id: statusData.id,\n                 status: statusData.status,\n                 document_type: statusData.document_type,\n                 has_processed_data: !!(statusData.processed_data && Object.keys(statusData.processed_data).length > 0)\n               });\n               \n               if (statusData.status === 'completed') {\n                 console.log('üéâ Document processing completed!');\n                 console.log('üìä Full status data:', statusData);\n                 \n                 // First priority: Use AI-extracted processed_data if available\n                 if (statusData.processed_data && Object.keys(statusData.processed_data).length > 0) {\n                   processedData = {\n                     id: statusData.id,\n                     original_text: statusData.original_text,\n                     metadata: statusData.processed_data,\n                     status: 'completed' as const\n                   };\n                   console.log('‚úÖ Using AI-extracted processed data:', statusData.processed_data);\n                   console.log('üìã Extracted course info:');\n                   console.log('  - Course Title:', statusData.processed_data.course_title || 'N/A');\n                   console.log('  - Instructor:', statusData.processed_data.instructor || 'N/A');\n                   console.log('  - Semester:', statusData.processed_data.semester || 'N/A');\n                   console.log('  - Topics:', statusData.processed_data.topics || 'N/A');\n                   console.log('  - Meeting Times:', statusData.processed_data.meeting_times || 'N/A');\n                   console.log('  - Important Dates:', statusData.processed_data.important_dates || 'N/A');\n                   break;\n                 }\n                 \n                 // Fallback to processed_data endpoint if not in main response\n                 try {\n                   const processedDataResponse = await fetch(`${API_BASE_URL}/api/pdf_service/documents/${documentId}/processed_data/`, {\n                     method: 'GET',\n                     headers: {\n                       'Authorization': `Bearer ${localStorage.getItem('authToken') || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzUwMzE4MDc5LCJpYXQiOjE3NTAzMTQ0NzksImp0aSI6IjU1MmVjNDQ4ZTllNjRmNjM5OTBlNTgyNzk3NzBjNjg2IiwidXNlcl9pZCI6MX0.O8k3yL_dUEMvkBaqxViq-syDXTZNqDfjKtWZEMlxJ14'}`,\n                       'Content-Type': 'application/json',\n                     },\n                   });\n                   \n                   if (processedDataResponse.ok) {\n                     const processedDataObj = await processedDataResponse.json();\n                     processedData = {\n                       id: statusData.id,\n                       original_text: statusData.original_text,\n                                            metadata: processedDataObj.data,\n                     status: 'completed' as const\n                   };\n                   console.log('‚úÖ Using processed data from endpoint:', processedDataObj.data);\n                     break;\n                   }\n                 } catch (processedDataError) {\n                   console.log('‚ö†Ô∏è Processed data endpoint failed, using document metadata');\n                 }\n                 \n                 // Final fallback: use basic document metadata\n                   processedData = {\n                     id: statusData.id,\n                     original_text: statusData.original_text,\n                     metadata: statusData.metadata || {},\n                     status: 'completed' as const\n                   };\n                   console.log('‚ö†Ô∏è Using basic document metadata as fallback:', statusData.metadata);\n                   break;\n               } else if (statusData.status === 'error') {\n                 console.error('Processing failed:', statusData.error_message || 'Unknown error');\n                 throw new Error('Document processing failed: ' + (statusData.error_message || 'Unknown error'));\n               }\n               // If status is 'pending' or 'processing', continue polling\n             }\n           }\n           \n           attempts++;\n           if (attempts < maxAttempts) {\n             // Log progress every 30 seconds\n             if (attempts % 30 === 0) {\n               console.log(`‚è≥ Still polling... (${attempts}/${maxAttempts} attempts, ${Math.round(attempts/maxAttempts*100)}% of timeout)`);\n             }\n             await new Promise(resolve => setTimeout(resolve, 1000)); // Wait 1 second before next poll\n           }\n         } catch (pollError) {\n           console.error('Polling error:', pollError);\n           attempts++;\n           if (attempts < maxAttempts) {\n             await new Promise(resolve => setTimeout(resolve, 1000));\n           }\n         }\n       }\n\n      // Handle timeout - provide fallback data instead of throwing error\n      if (!processedData) {\n        console.warn('‚è∞ Processing timed out after 3 minutes - using fallback data');\n        console.warn('üìä Processing details:');\n        console.warn(`   - Document ID: ${documentId}`);\n        console.warn(`   - File: ${firstFile.name} (${(firstFile.size / 1024 / 1024).toFixed(2)} MB)`);\n        console.warn(`   - Polling attempts: ${attempts}/${maxAttempts}`);\n        console.warn('üîç Possible causes:');\n        console.warn('   - Large or complex PDF file (>10MB)');\n        console.warn('   - Backend processing queue is busy');\n        console.warn('   - Network connectivity issues');\n        console.warn('   - AI service temporarily unavailable');\n        console.warn('   - Celery worker not running');\n        console.warn('   - Redis connection issues');\n        \n        // Create fallback data for timeout scenario\n        const fallbackCourseName = firstFile.name.replace(/\\.[^/.]+$/, ''); // Use filename as course name\n        processedData = {\n          id: documentId || 123,\n          original_text: `Course materials for ${fallbackCourseName}`,\n          metadata: {\n            course_name: fallbackCourseName,\n            instructor: 'Unknown',\n            semester: 'Unknown',\n            topics: ['Course content will be available after processing'],\n            meeting_times: 'To be determined',\n            important_dates: 'Please check with instructor',\n            processing_status: 'timeout',\n            timeout_reason: 'Processing took longer than expected'\n          },\n          status: 'completed' as const\n        };\n        \n        console.log('üîÑ Using timeout fallback data:', processedData);\n      }\n\n       // Create project with extracted course name\n       let projectName = firstFile.name.replace(/\\.[^/.]+$/, ''); // Default to filename\n       if (processedData && processedData.metadata && processedData.metadata.course_name) {\n         projectName = processedData.metadata.course_name;\n       }\n       \n       const projectData: Partial<ProjectData> = {\n         name: projectName,\n         project_type: 'school',\n         course_name: projectName,\n         is_draft: true,\n       };\n\n       const newProject = await createProject(projectData as ProjectData);\n       console.log('Project created:', newProject);\n\n       setIsAnalyzing(false);\n       setShowSuccess(true);\n       setStoredResults({\n         projectId: newProject.id,\n         extractedData: processedData,\n         fileName: firstFile.name\n       });\n       \n       // Call onUploadComplete with the results\n       onUploadComplete(newProject.id, processedData, firstFile.name);\n       \n       // Auto-navigation will be handled by the useEffect hook\n       \n       // Use processed data (either real or timeout fallback)\n       console.log('üéâ SUCCESS: Using processed data:', processedData);\n\n     } catch (error) {\n       console.error(\"Syllabus analysis failed:\", error);\n       setIsAnalyzing(false);\n       setShowSuccess(false);\n       setStoredResults(null);\n       \n       // Enhanced error handling with specific messages\n       if (error instanceof APIError) {\n         if (error.statusCode === 401) {\n           setError(\"Your session has expired. Please log in again.\");\n           router.push('/login');\n         } else if (error.statusCode === 413) {\n           setError(\"File too large. Please upload a smaller PDF file (max 10MB).\");\n         } else if (error.statusCode === 503) {\n           setError(\"Processing service is temporarily unavailable. Please try again in a few minutes.\");\n         } else {\n           setError(`Processing failed: ${error.message}`);\n         }\n       } else if (error instanceof Error) {\n         const errorMessage = error.message;\n         \n         // Handle specific timeout errors\n         if (errorMessage.includes('timed out')) {\n           setError(`Processing timeout: ${errorMessage}. Please try again with a smaller file or contact support.`);\n         } else if (errorMessage.includes('Failed to upload')) {\n           setError(`Upload failed: ${errorMessage}. Please check your internet connection and try again.`);\n         } else if (errorMessage.includes('Failed to start processing')) {\n           setError(`Processing service error: ${errorMessage}. Please try again later.`);\n         } else if (errorMessage.includes('Document processing failed')) {\n           setError(`PDF processing failed: ${errorMessage}. The file may be corrupted or in an unsupported format.`);\n         } else {\n           setError(`Analysis failed: ${errorMessage}. Please try again or contact support.`);\n         }\n       } else {\n         setError(\"An unexpected error occurred during analysis. Please try again.\");\n       }\n     }\n   }, [files, onUploadComplete, router]);\n\n  const handleRemove = useCallback((index: number) => {\n    setFiles(prev => prev.filter((_, i) => i !== index));\n    setError(null);\n    \n    // Clear progress for the removed file\n    const removedFile = files[index];\n    if (removedFile) {\n      setUploadProgress(prev => {\n        const newProgress = { ...prev };\n        delete newProgress[removedFile.name];\n        return newProgress;\n      });\n    }\n  }, [files]);\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"syllabus-upload-step\">\n      <SyllabusMockBanner courseName={MOCK_SYLLABUS_EXTRACTION.course_title} />\n      \n      <FileUpload\n        onUpload={handleUpload}\n        onRemove={handleRemove}\n        accept=\".pdf\"\n        maxFiles={5}\n        maxSize={10 * 1024 * 1024} // 10MB\n        required={true}\n        title=\"Upload your course materials\"\n        description=\"Upload your syllabus, course documents, tests, and other materials. We will analyze them to extract course details, deadlines, and topics.\"\n        buttonText=\"Browse for course materials\"\n        files={files}\n        uploadProgress={uploadProgress}\n        error={error || undefined}\n      />\n      \n\n      \n      {/* Analyze and Skip Buttons */}\n      {files.length > 0 && !isAnalyzing && !showSuccess && (\n        <div className=\"flex justify-center gap-4\" data-testid=\"analyze-button-container\">\n          <StepAnalyzeButton\n            onClick={handleAnalyze}\n            isAnalyzing={isAnalyzing}\n            disabled={isAnalyzing}\n            filesCount={files.length}\n          />\n        </div>\n      )}\n\n      {onSkip && (\n        <div className=\"flex justify-center mt-2\">\n          <Button data-testid=\"skip-button\" variant=\"outline\" onClick={handleSkip}>Skip</Button>\n        </div>\n      )}\n\n      {showSuccess && (\n        <div className=\"space-y-4\">\n          <SuccessMessage message=\"Syllabus analyzed successfully! Redirecting to review results...\" />\n          <div className=\"flex justify-center\">\n            <div className=\"text-sm text-gray-600\">\n              Please wait while we prepare your analysis results...\n            </div>\n          </div>\n        </div>\n      )}\n      {isAnalyzing && (\n        <LoadingSpinner\n          message={isTestMode() ? `üß™ Simulating AI analysis of ${files.length} files...` : `AI is analyzing your ${files.length} course materials...`}\n          subMessage={isTestMode() ? 'Using mock data for testing' : 'This may take a few moments'}\n        />\n      )}\n    </div>\n  );\n}"],"names":["SyllabusUploadStep","setup","onUploadComplete","onNext","onBack","onSkip","hasUploadCompleted","onResetUploadState","testTimeoutSeconds","files","setFiles","useState","uploadProgress","setUploadProgress","error","setError","isProcessing","setIsProcessing","isAnalyzing","setIsAnalyzing","showSuccess","setShowSuccess","storedResults","setStoredResults","hasNavigated","setHasNavigated","router","useRouter","handleSkip","useCallback","React","useEffect","console","log","projectId","extractedData","fileName","timeoutId","setTimeout","clearTimeout","handleUpload","updatedFiles","handleAnalyze","length","firstFile","fileSizeMB","size","warn","name","toFixed","isTestMode","file","prev","simulateProcessingDelay","mockSyllabusData","MOCK_SYLLABUS_EXTRACTION","mockProcessedDoc","createMockProcessedDocument","course_title","processedData","documentId","formData","FormData","append","uploadResponse","fetch","API_BASE_URL","method","body","headers","localStorage","getItem","ok","errorText","text","status","statusText","Error","document","json","id","processResponse","processData","task_id","taskId","document_id","maxAttempts","attempts","statusResponse","statusData","document_type","has_processed_data","processed_data","Object","keys","original_text","metadata","instructor","semester","topics","meeting_times","important_dates","processedDataResponse","processedDataObj","data","processedDataError","error_message","Math","round","Promise","resolve","pollError","fallbackCourseName","replace","course_name","processing_status","timeout_reason","projectName","projectData","project_type","is_draft","newProject","createProject","APIError","statusCode","push","message","errorMessage","includes","handleRemove","index","filter","_","i","removedFile","newProgress","div","className","data-testid","SyllabusMockBanner","courseName","FileUpload","onUpload","onRemove","accept","maxFiles","maxSize","required","title","description","buttonText","undefined","StepAnalyzeButton","onClick","disabled","filesCount","Button","variant","SuccessMessage","LoadingSpinner","subMessage"],"mappings":"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"}