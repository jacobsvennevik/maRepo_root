{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/features/flashcards/components/deck-grid.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useState } from 'react';\nimport { DeckCard } from './deck-card';\nimport { SortChips } from './sort-chips';\nimport { LayoutToggle } from './layout-toggle';\nimport { LoadingState, ErrorState, EmptyState } from './state-components';\nimport { useDeckSorting } from './hooks';\nimport { GRID_LAYOUT_CLASSES, LIST_LAYOUT_CLASSES } from './constants';\nimport { FlashcardSet } from '@/features/flashcards/types';\nimport { cn } from '@/lib/utils';\nimport type { SortOption, LayoutMode, DeckActionHandlers } from './types';\n\nexport interface DeckGridProps extends DeckActionHandlers {\n  decks: FlashcardSet[];\n  isLoading?: boolean;\n  error?: string | null;\n  projectId?: string;\n  className?: string;\n}\n\nexport function DeckGrid({\n  decks,\n  isLoading = false,\n  error = null,\n  projectId,\n  onEdit,\n  onDelete,\n  onShare,\n  onToggleFavorite,\n  className,\n}: DeckGridProps) {\n  const [sortOption, setSortOption] = useState<SortOption>('recent');\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('desc');\n  const [layoutMode, setLayoutMode] = useState<LayoutMode>('grid');\n\n  const sortedDecks = useDeckSorting(decks, sortOption, sortDirection);\n\n  // Loading state\n  if (isLoading) {\n    return <LoadingState />;\n  }\n\n  // Error state\n  if (error) {\n    return <ErrorState error={error} />;\n  }\n\n  // Empty state\n  if (decks.length === 0) {\n    return <EmptyState />;\n  }\n\n  return (\n    <div className={cn('space-y-6', className)}>\n      {/* Controls */}\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n        <div className=\"flex items-center space-x-4\">\n          <h2 className=\"text-xl font-semibold text-gray-900\">\n            All Decks\n          </h2>\n          <span className=\"text-sm text-gray-500\">\n            {decks.length} {decks.length === 1 ? 'deck' : 'decks'}\n          </span>\n        </div>\n\n        <div className=\"flex flex-col sm:flex-row items-start sm:items-center space-y-2 sm:space-y-0 sm:space-x-4\">\n          <SortChips\n            currentSort={sortOption}\n            sortDirection={sortDirection}\n            onSortChange={setSortOption}\n            onDirectionChange={setSortDirection}\n          />\n          \n          <LayoutToggle\n            currentLayout={layoutMode}\n            onLayoutChange={setLayoutMode}\n          />\n        </div>\n      </div>\n\n      {/* Deck Grid/List */}\n      <div\n        className={cn(\n          layoutMode === 'grid' ? GRID_LAYOUT_CLASSES : LIST_LAYOUT_CLASSES\n        )}\n        role=\"grid\"\n        aria-label=\"Flashcard decks\"\n      >\n        {sortedDecks.map((deck, index) => (\n          <div\n            key={deck.id}\n            role=\"gridcell\"\n            aria-rowindex={Math.floor(index / (layoutMode === 'grid' ? 3 : 1)) + 1}\n            aria-colindex={(index % (layoutMode === 'grid' ? 3 : 1)) + 1}\n          >\n            <DeckCard\n              deck={deck}\n              layout={layoutMode}\n              projectId={projectId}\n              onEdit={onEdit}\n              onDelete={onDelete}\n              onShare={onShare}\n              onToggleFavorite={onToggleFavorite}\n              className=\"h-full\"\n            />\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n"],"names":["DeckGrid","decks","isLoading","error","projectId","onEdit","onDelete","onShare","onToggleFavorite","className","sortOption","setSortOption","useState","sortDirection","setSortDirection","layoutMode","setLayoutMode","sortedDecks","useDeckSorting","LoadingState","ErrorState","length","EmptyState","div","cn","h2","span","SortChips","currentSort","onSortChange","onDirectionChange","LayoutToggle","currentLayout","onLayoutChange","GRID_LAYOUT_CLASSES","LIST_LAYOUT_CLASSES","role","aria-label","map","deck","index","aria-rowindex","Math","floor","aria-colindex","DeckCard","layout","id"],"mappings":"AAAA;;;;;+BAqBgBA;;;eAAAA;;;;+DAnBgB;0BACP;2BACC;8BACG;iCACwB;uBACtB;2BAC0B;uBAEtC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWZ,SAASA,SAAS,EACvBC,KAAK,EACLC,YAAY,KAAK,EACjBC,QAAQ,IAAI,EACZC,SAAS,EACTC,MAAM,EACNC,QAAQ,EACRC,OAAO,EACPC,gBAAgB,EAChBC,SAAS,EACK;IACd,MAAM,CAACC,YAAYC,cAAc,GAAGC,IAAAA,eAAQ,EAAa;IACzD,MAAM,CAACC,eAAeC,iBAAiB,GAAGF,IAAAA,eAAQ,EAAiB;IACnE,MAAM,CAACG,YAAYC,cAAc,GAAGJ,IAAAA,eAAQ,EAAa;IAEzD,MAAMK,cAAcC,IAAAA,qBAAc,EAACjB,OAAOS,YAAYG;IAEtD,gBAAgB;IAChB,IAAIX,WAAW;QACb,qBAAO,qBAACiB,6BAAY;IACtB;IAEA,cAAc;IACd,IAAIhB,OAAO;QACT,qBAAO,qBAACiB,2BAAU;YAACjB,OAAOA;;IAC5B;IAEA,cAAc;IACd,IAAIF,MAAMoB,MAAM,KAAK,GAAG;QACtB,qBAAO,qBAACC,2BAAU;IACpB;IAEA,qBACE,sBAACC;QAAId,WAAWe,IAAAA,SAAE,EAAC,aAAaf;;0BAE9B,sBAACc;gBAAId,WAAU;;kCACb,sBAACc;wBAAId,WAAU;;0CACb,qBAACgB;gCAAGhB,WAAU;0CAAsC;;0CAGpD,sBAACiB;gCAAKjB,WAAU;;oCACbR,MAAMoB,MAAM;oCAAC;oCAAEpB,MAAMoB,MAAM,KAAK,IAAI,SAAS;;;;;kCAIlD,sBAACE;wBAAId,WAAU;;0CACb,qBAACkB,oBAAS;gCACRC,aAAalB;gCACbG,eAAeA;gCACfgB,cAAclB;gCACdmB,mBAAmBhB;;0CAGrB,qBAACiB,0BAAY;gCACXC,eAAejB;gCACfkB,gBAAgBjB;;;;;;0BAMtB,qBAACO;gBACCd,WAAWe,IAAAA,SAAE,EACXT,eAAe,SAASmB,8BAAmB,GAAGC,8BAAmB;gBAEnEC,MAAK;gBACLC,cAAW;0BAEVpB,YAAYqB,GAAG,CAAC,CAACC,MAAMC,sBACtB,qBAACjB;wBAECa,MAAK;wBACLK,iBAAeC,KAAKC,KAAK,CAACH,QAASzB,CAAAA,eAAe,SAAS,IAAI,CAAA,KAAM;wBACrE6B,iBAAe,AAACJ,QAASzB,CAAAA,eAAe,SAAS,IAAI,CAAA,IAAM;kCAE3D,cAAA,qBAAC8B,kBAAQ;4BACPN,MAAMA;4BACNO,QAAQ/B;4BACRX,WAAWA;4BACXC,QAAQA;4BACRC,UAAUA;4BACVC,SAASA;4BACTC,kBAAkBA;4BAClBC,WAAU;;uBAbP8B,KAAKQ,EAAE;;;;AAoBxB"}