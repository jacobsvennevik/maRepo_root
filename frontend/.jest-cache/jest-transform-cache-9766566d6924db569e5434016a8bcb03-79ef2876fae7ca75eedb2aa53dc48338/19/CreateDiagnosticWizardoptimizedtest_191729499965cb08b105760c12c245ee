dd9af9066ce7dcbe45794839c93a2abc
"use strict";
// Mock the StylePicker component
jest.mock('../StylePicker', ()=>({
        StylePicker: ({ onNext, onBack })=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                "data-testid": "style-picker",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                        onClick: onNext,
                        "data-testid": "style-next",
                        children: "Next"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                        onClick: onBack,
                        "data-testid": "style-back",
                        children: "Back"
                    })
                ]
            })
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
require("@testing-library/jest-dom");
const _CreateDiagnosticWizard = require("../CreateDiagnosticWizard");
const _testutils = require("../../../../test-utils");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Setup test environment
const testEnv = (0, _testutils.setupFullTestEnvironment)({
    timeout: 10000,
    includeAPI: true,
    includeStorage: true,
    includeNavigation: true
});
const { apiMocks } = _testutils.standardMocks;
describe('CreateDiagnosticWizard - Optimized', ()=>{
    beforeEach(()=>{
        testEnv.mocks.resetAll();
        // Setup default API responses
        apiMocks.setupMockResponses({
            'POST:/backend/api/diagnostics/': {
                ok: true,
                status: 201,
                json: async ()=>({
                        id: 'test-session-123',
                        topic: 'Test Topic'
                    })
            }
        });
    });
    describe('Wizard Flow', ()=>{
        it('should render wizard dialog when opened', ()=>{
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CreateDiagnosticWizard.CreateDiagnosticWizard, {
                isOpen: true,
                onClose: jest.fn()
            }));
            expect(_react1.screen.getByTestId('dialog')).toBeInTheDocument();
            expect(_react1.screen.getByTestId('dialog-title')).toHaveTextContent('Create Diagnostic Session');
        });
        it('should not render dialog when closed', ()=>{
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CreateDiagnosticWizard.CreateDiagnosticWizard, {
                isOpen: false,
                onClose: jest.fn()
            }));
            expect(_react1.screen.queryByTestId('dialog')).not.toBeInTheDocument();
        });
        it('should handle wizard step navigation', async ()=>{
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CreateDiagnosticWizard.CreateDiagnosticWizard, {
                isOpen: true,
                onClose: jest.fn()
            }));
            // Should start with style picker
            expect(_react1.screen.getByTestId('style-picker')).toBeInTheDocument();
            // Navigate to next step
            _react1.fireEvent.click(_react1.screen.getByTestId('style-next'));
            // Should show topic input step
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId('input')).toBeInTheDocument();
            });
        });
        it('should handle back navigation', async ()=>{
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CreateDiagnosticWizard.CreateDiagnosticWizard, {
                isOpen: true,
                onClose: jest.fn()
            }));
            // Navigate to next step first
            _react1.fireEvent.click(_react1.screen.getByTestId('style-next'));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId('input')).toBeInTheDocument();
            });
            // Go back
            _react1.fireEvent.click(_react1.screen.getByTestId('style-back'));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId('style-picker')).toBeInTheDocument();
            });
        });
    });
    describe('Form Validation', ()=>{
        it('should validate required fields', async ()=>{
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CreateDiagnosticWizard.CreateDiagnosticWizard, {
                isOpen: true,
                onClose: jest.fn()
            }));
            // Navigate to topic input step
            _react1.fireEvent.click(_react1.screen.getByTestId('style-next'));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId('input')).toBeInTheDocument();
            });
            // Try to submit without entering topic
            const submitButton = _react1.screen.getByTestId('button');
            _react1.fireEvent.click(submitButton);
            // Should show validation error
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText(/Topic is required/)).toBeInTheDocument();
            });
        });
        it('should accept valid input', async ()=>{
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CreateDiagnosticWizard.CreateDiagnosticWizard, {
                isOpen: true,
                onClose: jest.fn()
            }));
            // Navigate to topic input step
            _react1.fireEvent.click(_react1.screen.getByTestId('style-next'));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId('input')).toBeInTheDocument();
            });
            // Enter valid topic
            const topicInput = _react1.screen.getByTestId('input');
            _react1.fireEvent.change(topicInput, {
                target: {
                    value: 'Mathematics'
                }
            });
            // Submit
            const submitButton = _react1.screen.getByTestId('button');
            _react1.fireEvent.click(submitButton);
            // Should create diagnostic session
            await (0, _react1.waitFor)(()=>{
                expect(apiMocks.mockFetch).toHaveBeenCalledWith(expect.stringContaining('/backend/api/diagnostics/'), expect.objectContaining({
                    method: 'POST',
                    body: expect.stringContaining('Mathematics')
                }));
            });
        });
    });
    describe('API Integration', ()=>{
        it('should handle successful diagnostic creation', async ()=>{
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CreateDiagnosticWizard.CreateDiagnosticWizard, {
                isOpen: true,
                onClose: jest.fn()
            }));
            // Complete the wizard flow
            _react1.fireEvent.click(_react1.screen.getByTestId('style-next'));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId('input')).toBeInTheDocument();
            });
            _react1.fireEvent.change(_react1.screen.getByTestId('input'), {
                target: {
                    value: 'Test Topic'
                }
            });
            _react1.fireEvent.click(_react1.screen.getByTestId('button'));
            // Should show success state
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText(/Diagnostic session created successfully/)).toBeInTheDocument();
            });
        });
        it('should handle API errors gracefully', async ()=>{
            // Mock API error
            apiMocks.mockFetch.mockResolvedValueOnce({
                ok: false,
                status: 500,
                json: async ()=>({
                        error: 'Internal server error'
                    })
            });
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CreateDiagnosticWizard.CreateDiagnosticWizard, {
                isOpen: true,
                onClose: jest.fn()
            }));
            // Complete the wizard flow
            _react1.fireEvent.click(_react1.screen.getByTestId('style-next'));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId('input')).toBeInTheDocument();
            });
            _react1.fireEvent.change(_react1.screen.getByTestId('input'), {
                target: {
                    value: 'Test Topic'
                }
            });
            _react1.fireEvent.click(_react1.screen.getByTestId('button'));
            // Should show error message
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText(/Failed to create diagnostic session/)).toBeInTheDocument();
            });
        });
    });
    describe('Accessibility', ()=>{
        it('should have proper ARIA labels', ()=>{
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CreateDiagnosticWizard.CreateDiagnosticWizard, {
                isOpen: true,
                onClose: jest.fn()
            }));
            expect(_react1.screen.getByRole('dialog')).toBeInTheDocument();
            expect(_react1.screen.getByTestId('dialog-title')).toBeInTheDocument();
        });
        it('should handle keyboard navigation', ()=>{
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CreateDiagnosticWizard.CreateDiagnosticWizard, {
                isOpen: true,
                onClose: jest.fn()
            }));
            // Tab navigation should work
            const firstButton = _react1.screen.getByTestId('style-next');
            firstButton.focus();
            expect(document.activeElement).toBe(firstButton);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,