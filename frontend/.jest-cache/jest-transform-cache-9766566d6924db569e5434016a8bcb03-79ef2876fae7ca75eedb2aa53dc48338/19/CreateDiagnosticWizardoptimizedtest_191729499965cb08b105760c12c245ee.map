{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/features/diagnostics/components/__tests__/CreateDiagnosticWizard-optimized.test.tsx"],"sourcesContent":["import React from 'react';\nimport { screen, fireEvent, waitFor } from '@testing-library/react';\nimport '@testing-library/jest-dom';\nimport { CreateDiagnosticWizard } from '../CreateDiagnosticWizard';\n\n// Import new centralized utilities\nimport {\n  renderWithProviders,\n  setupFullTestEnvironment,\n  testFactories,\n  standardMocks\n} from '../../../../../src/test-utils';\n\n// Setup test environment\nconst testEnv = setupFullTestEnvironment({\n  timeout: 10000,\n  includeAPI: true,\n  includeStorage: true,\n  includeNavigation: true\n});\n\nconst { apiMocks } = standardMocks;\n\n// Mock the StylePicker component\njest.mock('../StylePicker', () => ({\n  StylePicker: ({ onNext, onBack }: any) => (\n    <div data-testid=\"style-picker\">\n      <button onClick={onNext} data-testid=\"style-next\">Next</button>\n      <button onClick={onBack} data-testid=\"style-back\">Back</button>\n    </div>\n  ),\n}));\n\ndescribe('CreateDiagnosticWizard - Optimized', () => {\n  beforeEach(() => {\n    testEnv.mocks.resetAll();\n    \n    // Setup default API responses\n    apiMocks.setupMockResponses({\n      'POST:/backend/api/diagnostics/': {\n        ok: true,\n        status: 201,\n        json: async () => ({ id: 'test-session-123', topic: 'Test Topic' })\n      }\n    });\n  });\n\n  describe('Wizard Flow', () => {\n    it('should render wizard dialog when opened', () => {\n      renderWithProviders(\n        <CreateDiagnosticWizard \n          isOpen={true}\n          onClose={jest.fn()}\n        />\n      );\n\n      expect(screen.getByTestId('dialog')).toBeInTheDocument();\n      expect(screen.getByTestId('dialog-title')).toHaveTextContent('Create Diagnostic Session');\n    });\n\n    it('should not render dialog when closed', () => {\n      renderWithProviders(\n        <CreateDiagnosticWizard \n          isOpen={false}\n          onClose={jest.fn()}\n        />\n      );\n\n      expect(screen.queryByTestId('dialog')).not.toBeInTheDocument();\n    });\n\n    it('should handle wizard step navigation', async () => {\n      renderWithProviders(\n        <CreateDiagnosticWizard \n          isOpen={true}\n          onClose={jest.fn()}\n        />\n      );\n\n      // Should start with style picker\n      expect(screen.getByTestId('style-picker')).toBeInTheDocument();\n\n      // Navigate to next step\n      fireEvent.click(screen.getByTestId('style-next'));\n\n      // Should show topic input step\n      await waitFor(() => {\n        expect(screen.getByTestId('input')).toBeInTheDocument();\n      });\n    });\n\n    it('should handle back navigation', async () => {\n      renderWithProviders(\n        <CreateDiagnosticWizard \n          isOpen={true}\n          onClose={jest.fn()}\n        />\n      );\n\n      // Navigate to next step first\n      fireEvent.click(screen.getByTestId('style-next'));\n\n      await waitFor(() => {\n        expect(screen.getByTestId('input')).toBeInTheDocument();\n      });\n\n      // Go back\n      fireEvent.click(screen.getByTestId('style-back'));\n\n      await waitFor(() => {\n        expect(screen.getByTestId('style-picker')).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Form Validation', () => {\n    it('should validate required fields', async () => {\n      renderWithProviders(\n        <CreateDiagnosticWizard \n          isOpen={true}\n          onClose={jest.fn()}\n        />\n      );\n\n      // Navigate to topic input step\n      fireEvent.click(screen.getByTestId('style-next'));\n\n      await waitFor(() => {\n        expect(screen.getByTestId('input')).toBeInTheDocument();\n      });\n\n      // Try to submit without entering topic\n      const submitButton = screen.getByTestId('button');\n      fireEvent.click(submitButton);\n\n      // Should show validation error\n      await waitFor(() => {\n        expect(screen.getByText(/Topic is required/)).toBeInTheDocument();\n      });\n    });\n\n    it('should accept valid input', async () => {\n      renderWithProviders(\n        <CreateDiagnosticWizard \n          isOpen={true}\n          onClose={jest.fn()}\n        />\n      );\n\n      // Navigate to topic input step\n      fireEvent.click(screen.getByTestId('style-next'));\n\n      await waitFor(() => {\n        expect(screen.getByTestId('input')).toBeInTheDocument();\n      });\n\n      // Enter valid topic\n      const topicInput = screen.getByTestId('input');\n      fireEvent.change(topicInput, { target: { value: 'Mathematics' } });\n\n      // Submit\n      const submitButton = screen.getByTestId('button');\n      fireEvent.click(submitButton);\n\n      // Should create diagnostic session\n      await waitFor(() => {\n        expect(apiMocks.mockFetch).toHaveBeenCalledWith(\n          expect.stringContaining('/backend/api/diagnostics/'),\n          expect.objectContaining({\n            method: 'POST',\n            body: expect.stringContaining('Mathematics')\n          })\n        );\n      });\n    });\n  });\n\n  describe('API Integration', () => {\n    it('should handle successful diagnostic creation', async () => {\n      renderWithProviders(\n        <CreateDiagnosticWizard \n          isOpen={true}\n          onClose={jest.fn()}\n        />\n      );\n\n      // Complete the wizard flow\n      fireEvent.click(screen.getByTestId('style-next'));\n      \n      await waitFor(() => {\n        expect(screen.getByTestId('input')).toBeInTheDocument();\n      });\n\n      fireEvent.change(screen.getByTestId('input'), { target: { value: 'Test Topic' } });\n      fireEvent.click(screen.getByTestId('button'));\n\n      // Should show success state\n      await waitFor(() => {\n        expect(screen.getByText(/Diagnostic session created successfully/)).toBeInTheDocument();\n      });\n    });\n\n    it('should handle API errors gracefully', async () => {\n      // Mock API error\n      apiMocks.mockFetch.mockResolvedValueOnce({\n        ok: false,\n        status: 500,\n        json: async () => ({ error: 'Internal server error' })\n      });\n\n      renderWithProviders(\n        <CreateDiagnosticWizard \n          isOpen={true}\n          onClose={jest.fn()}\n        />\n      );\n\n      // Complete the wizard flow\n      fireEvent.click(screen.getByTestId('style-next'));\n      \n      await waitFor(() => {\n        expect(screen.getByTestId('input')).toBeInTheDocument();\n      });\n\n      fireEvent.change(screen.getByTestId('input'), { target: { value: 'Test Topic' } });\n      fireEvent.click(screen.getByTestId('button'));\n\n      // Should show error message\n      await waitFor(() => {\n        expect(screen.getByText(/Failed to create diagnostic session/)).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Accessibility', () => {\n    it('should have proper ARIA labels', () => {\n      renderWithProviders(\n        <CreateDiagnosticWizard \n          isOpen={true}\n          onClose={jest.fn()}\n        />\n      );\n\n      expect(screen.getByRole('dialog')).toBeInTheDocument();\n      expect(screen.getByTestId('dialog-title')).toBeInTheDocument();\n    });\n\n    it('should handle keyboard navigation', () => {\n      renderWithProviders(\n        <CreateDiagnosticWizard \n          isOpen={true}\n          onClose={jest.fn()}\n        />\n      );\n\n      // Tab navigation should work\n      const firstButton = screen.getByTestId('style-next');\n      firstButton.focus();\n      expect(document.activeElement).toBe(firstButton);\n    });\n  });\n});\n"],"names":["jest","mock","StylePicker","onNext","onBack","div","data-testid","button","onClick","testEnv","setupFullTestEnvironment","timeout","includeAPI","includeStorage","includeNavigation","apiMocks","standardMocks","describe","beforeEach","mocks","resetAll","setupMockResponses","ok","status","json","id","topic","it","renderWithProviders","CreateDiagnosticWizard","isOpen","onClose","fn","expect","screen","getByTestId","toBeInTheDocument","toHaveTextContent","queryByTestId","not","fireEvent","click","waitFor","submitButton","getByText","topicInput","change","target","value","mockFetch","toHaveBeenCalledWith","stringContaining","objectContaining","method","body","mockResolvedValueOnce","error","getByRole","firstButton","focus","document","activeElement","toBe"],"mappings":"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"}