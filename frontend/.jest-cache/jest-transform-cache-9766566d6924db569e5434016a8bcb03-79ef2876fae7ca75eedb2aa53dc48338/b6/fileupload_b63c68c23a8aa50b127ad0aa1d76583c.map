{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/components/ui/file-upload.tsx"],"sourcesContent":["\"use client\"\n\nimport React, { useCallback, useState } from \"react\"\nimport { useDropzone } from \"react-dropzone\"\nimport { Upload, X, FileText, AlertCircle } from \"lucide-react\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"./button\"\nimport { Progress } from \"./progress\"\nimport { Alert, AlertDescription } from \"./alert\"\nimport { formatFileSize, formatAcceptedTypes, getUploadStatus, extensionToMimeType } from \"@/utils/fileHelpers\"\n\nexport interface FileUploadProps {\n  onUpload: (files: File[]) => void\n  onRemove?: (index: number) => void\n  accept?: string\n  maxFiles?: number\n  maxSize?: number\n  required?: boolean\n  title?: string\n  description?: string\n  buttonText?: string\n  showFileList?: boolean\n  className?: string\n  files?: File[]\n  uploadProgress?: Record<string, number>\n  error?: string\n}\n\nexport function FileUpload({\n  onUpload,\n  onRemove,\n  accept = \"application/pdf,application/vnd.openxmlformats-officedocument.wordprocessingml.document,text/plain\",\n  maxFiles = 5,\n  maxSize = 50 * 1024 * 1024, // 50MB default\n  required = false,\n  title = \"Drag & drop files here\",\n  description = \"or click to browse\",\n  buttonText = \"Browse files\",\n  showFileList = true,\n  className = \"\",\n  files = [],\n  uploadProgress = {},\n  error\n}: FileUploadProps) {\n  const [isDragActive, setIsDragActive] = useState(false)\n  const [validationError, setValidationError] = useState<string | null>(null)\n  const [fileHashes, setFileHashes] = useState<Map<string, string>>(new Map())\n\n  // Function to compute a hash of file content\n  const computeFileHash = async (file: File): Promise<string> => {\n    return new Promise((resolve) => {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        const content = e.target?.result;\n        if (content) {\n          // Simple hash function for demo - in production you might want to use a proper hash function\n          const hash = btoa(String(file.size) + String(file.lastModified) + file.name);\n          resolve(hash);\n        }\n      };\n      reader.readAsArrayBuffer(file);\n    });\n  };\n\n  // Check if a file is a duplicate based on content\n  const isDuplicate = async (newFile: File): Promise<boolean> => {\n    const newHash = await computeFileHash(newFile);\n    \n    // Check if we already have a file with this hash\n    for (const [existingHash] of fileHashes) {\n      if (existingHash === newHash) {\n        return true;\n      }\n    }\n    \n    return false;\n  };\n\n  const onDrop = useCallback(\n    async (acceptedFiles: File[], rejectedFiles: any[]) => {\n      // Handle rejected files\n      if (rejectedFiles.length > 0) {\n        const errors = rejectedFiles.map(rejection => {\n          const file = rejection.file\n          const error = rejection.errors[0] // Get the first error for simplicity\n          switch (error.code) {\n            case 'file-too-large':\n              return `${file.name} is too large. Max size is ${formatFileSize(maxSize)}`\n            case 'file-invalid-type':\n              return `${file.name} is not a supported file type`\n            case 'too-many-files':\n              return `Too many files. Max allowed is ${maxFiles}`\n            default:\n              return `${file.name} could not be uploaded`\n          }\n        })\n        setValidationError(errors.join('. '))\n        return\n      }\n\n      // Clear any previous errors if the upload is successful\n      setValidationError(null)\n\n      // Filter out duplicates and oversized files\n      const newValidFiles: File[] = [];\n      const duplicates: string[] = [];\n\n      for (const file of acceptedFiles) {\n        if (file.size > maxSize) continue;\n        \n        const isDup = await isDuplicate(file);\n        if (isDup) {\n          duplicates.push(file.name);\n          continue;\n        }\n\n        const hash = await computeFileHash(file);\n        setFileHashes(prev => new Map(prev).set(hash, file.name));\n        newValidFiles.push(file);\n      }\n\n      // Show warning for duplicates if any were found\n      if (duplicates.length > 0) {\n        setValidationError(\n          `Skipped duplicate file${duplicates.length > 1 ? 's' : ''}: ${duplicates.join(', ')}`\n        );\n        // If we have some valid files along with duplicates, wait a bit so user can read the message\n        if (newValidFiles.length > 0) {\n          setTimeout(() => setValidationError(null), 3000);\n        }\n      }\n\n      // Update files list with new unique files\n      const updatedFiles = [...files, ...newValidFiles].slice(0, maxFiles);\n      onUpload(updatedFiles);\n    },\n    [files, maxFiles, maxSize, onUpload, fileHashes]\n  );\n\n  // Clear file hashes when files are removed\n  const handleRemove = (index: number) => {\n    if (onRemove) {\n      const removedFile = files[index];\n      onRemove(index);\n      \n      // Remove the hash for the removed file\n      setFileHashes(prev => {\n        const newHashes = new Map(prev);\n        for (const [hash, fileName] of newHashes) {\n          if (fileName === removedFile.name) {\n            newHashes.delete(hash);\n            break;\n          }\n        }\n        return newHashes;\n      });\n    }\n  };\n\n  const { getRootProps, getInputProps, isDragReject } = useDropzone({\n    onDrop,\n    accept: accept.split(\",\").reduce((acc, type) => {\n      // Convert file extensions to MIME types if needed\n      const trimmedType = type.trim();\n      if (trimmedType.startsWith('.')) {\n        // Handle file extensions\n        const mimeType = {\n          '.pdf': 'application/pdf',\n          '.docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n          '.txt': 'text/plain'\n        }[trimmedType];\n        \n        if (mimeType) {\n          return { ...acc, [mimeType]: [trimmedType] };\n        }\n      }\n      // Handle MIME types directly\n      return { ...acc, [trimmedType]: [] };\n    }, {}),\n    maxFiles,\n    maxSize,\n    onDragEnter: () => setIsDragActive(true),\n    onDragLeave: () => setIsDragActive(false),\n    onDropAccepted: () => {\n      setIsDragActive(false)\n      setValidationError(null)\n    },\n    onDropRejected: () => {\n      setIsDragActive(false)\n    }\n  })\n\n\n\n  return (\n    <div className={cn(\"space-y-4\", className)}>\n      <div\n        {...getRootProps()}\n        className={cn(\n          \"border-2 border-dashed rounded-lg p-8 text-center transition-all duration-300\",\n          isDragActive && \"border-blue-400 bg-blue-50/50 scale-105\",\n          isDragReject && \"border-red-400 bg-red-50/50\",\n          !isDragActive && !isDragReject && \"border-gray-300 hover:border-blue-300 hover:bg-gray-50/50\",\n          required && files.length === 0 && \"border-red-200 bg-red-50/10\",\n          \"cursor-pointer\"\n        )}\n      >\n        <input {...getInputProps()} data-testid=\"file-input\" />\n        <div className=\"space-y-4\">\n          <div className=\"mx-auto w-16 h-16 bg-gradient-to-r from-blue-400 to-purple-600 rounded-full flex items-center justify-center\">\n            <Upload className=\"h-8 w-8 text-white\" />\n          </div>\n          <div>\n            <h3 className=\"text-lg font-semibold text-slate-900 mb-2\">\n              {isDragActive ? \"Drop files here!\" : title}\n            </h3>\n            <p className=\"text-slate-600 mb-4\">\n              {description}\n            </p>\n            <p className=\"text-xs text-gray-500 mb-4\">\n              Max size: {formatFileSize(maxSize)} â€¢ Supported formats: {formatAcceptedTypes(accept)}\n            </p>\n            <Button \n              variant=\"outline\" \n              onClick={(e) => {\n                e.stopPropagation();\n                // Use the dropzone's input instead of creating a new one\n                const dropzoneInput = document.querySelector('[data-testid=\"file-input\"]') as HTMLInputElement;\n                if (dropzoneInput) {\n                  dropzoneInput.click();\n                }\n              }}\n              className=\"border-blue-200 text-blue-600 hover:bg-blue-50\"\n            >\n              {buttonText}\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {(error || validationError) && (\n        <Alert variant=\"destructive\" data-testid=\"error-message\">\n          <AlertCircle className=\"h-4 w-4\" />\n          <AlertDescription>\n            {error || validationError}\n          </AlertDescription>\n        </Alert>\n      )}\n\n      {showFileList && files.length > 0 && (\n        <div className=\"space-y-2\">\n          {files.map((file, index) => {\n            const status = getUploadStatus(file.name, uploadProgress)\n            return (\n              <div\n                key={`${file.name}-${file.lastModified}-${file.size}`}\n                className={cn(\n                  \"flex items-center justify-between bg-slate-50 rounded-lg p-3\",\n                  status === 'error' && \"bg-red-50\",\n                  status === 'success' && \"bg-green-50\"\n                )}\n              >\n                <div className=\"flex items-center space-x-3\">\n                  <FileText className={cn(\n                    \"h-5 w-5\",\n                    status === 'error' && \"text-red-600\",\n                    status === 'success' && \"text-green-600\",\n                    status === 'uploading' && \"text-blue-600\",\n                    status === 'idle' && \"text-slate-600\"\n                  )} />\n                  <div>\n                    <p className=\"text-sm font-medium text-slate-900 truncate max-w-[200px]\" data-testid={`file-name-${file.name}`}>\n                      {file.name}\n                    </p>\n                    <p className=\"text-xs text-slate-500\">\n                      {formatFileSize(file.size)}\n                    </p>\n                  </div>\n                </div>\n                <div className=\"flex items-center space-x-4\">\n                  {uploadProgress[file.name] !== undefined && uploadProgress[file.name] !== -1 && (\n                    <div className=\"w-24\">\n                      <Progress\n                        value={uploadProgress[file.name]}\n                        aria-label={`Upload progress for ${file.name}`}\n                        aria-valuenow={uploadProgress[file.name]}\n                        aria-valuemin={0}\n                        aria-valuemax={100}\n                      />\n                    </div>\n                  )}\n                  {onRemove && (\n                    <button\n                      type=\"button\"\n                      onClick={() => handleRemove(index)}\n                      className=\"text-slate-400 hover:text-slate-600\"\n                      aria-label={`Remove file ${file.name}`}\n                      data-testid={`remove-file-${file.name}`}\n                    >\n                      <X className=\"h-4 w-4\" />\n                    </button>\n                  )}\n                </div>\n              </div>\n            )\n          })}\n        </div>\n      )}\n    </div>\n  )\n} "],"names":["FileUpload","onUpload","onRemove","accept","maxFiles","maxSize","required","title","description","buttonText","showFileList","className","files","uploadProgress","error","isDragActive","setIsDragActive","useState","validationError","setValidationError","fileHashes","setFileHashes","Map","computeFileHash","file","Promise","resolve","reader","FileReader","onload","e","content","target","result","hash","btoa","String","size","lastModified","name","readAsArrayBuffer","isDuplicate","newFile","newHash","existingHash","onDrop","useCallback","acceptedFiles","rejectedFiles","length","errors","map","rejection","code","formatFileSize","join","newValidFiles","duplicates","isDup","push","prev","set","setTimeout","updatedFiles","slice","handleRemove","index","removedFile","newHashes","fileName","delete","getRootProps","getInputProps","isDragReject","useDropzone","split","reduce","acc","type","trimmedType","trim","startsWith","mimeType","onDragEnter","onDragLeave","onDropAccepted","onDropRejected","div","cn","input","data-testid","Upload","h3","p","formatAcceptedTypes","Button","variant","onClick","stopPropagation","dropzoneInput","document","querySelector","click","Alert","AlertCircle","AlertDescription","status","getUploadStatus","FileText","undefined","Progress","value","aria-label","aria-valuenow","aria-valuemin","aria-valuemax","button","X"],"mappings":"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"}