d413479f34a55e60ac508cd94f95e8cf
"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "FileUpload", {
    enumerable: true,
    get: function() {
        return FileUpload;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _reactdropzone = require("react-dropzone");
const _lucidereact = require("lucide-react");
const _utils = require("../../lib/utils");
const _button = require("./button");
const _progress = require("./progress");
const _alert = require("./alert");
const _fileHelpers = require("../../utils/fileHelpers");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
function FileUpload({ onUpload, onRemove, accept = "application/pdf,application/vnd.openxmlformats-officedocument.wordprocessingml.document,text/plain", maxFiles = 5, maxSize = 50 * 1024 * 1024, required = false, title = "Drag & drop files here", description = "or click to browse", buttonText = "Browse files", showFileList = true, className = "", files = [], uploadProgress = {}, error }) {
    const [isDragActive, setIsDragActive] = (0, _react.useState)(false);
    const [validationError, setValidationError] = (0, _react.useState)(null);
    const [fileHashes, setFileHashes] = (0, _react.useState)(new Map());
    // Function to compute a hash of file content
    const computeFileHash = async (file)=>{
        return new Promise((resolve)=>{
            const reader = new FileReader();
            reader.onload = (e)=>{
                const content = e.target?.result;
                if (content) {
                    // Simple hash function for demo - in production you might want to use a proper hash function
                    const hash = btoa(String(file.size) + String(file.lastModified) + file.name);
                    resolve(hash);
                }
            };
            reader.readAsArrayBuffer(file);
        });
    };
    // Check if a file is a duplicate based on content
    const isDuplicate = async (newFile)=>{
        const newHash = await computeFileHash(newFile);
        // Check if we already have a file with this hash
        for (const [existingHash] of fileHashes){
            if (existingHash === newHash) {
                return true;
            }
        }
        return false;
    };
    const onDrop = (0, _react.useCallback)(async (acceptedFiles, rejectedFiles)=>{
        // Handle rejected files
        if (rejectedFiles.length > 0) {
            const errors = rejectedFiles.map((rejection)=>{
                const file = rejection.file;
                const error = rejection.errors[0] // Get the first error for simplicity
                ;
                switch(error.code){
                    case 'file-too-large':
                        return `${file.name} is too large. Max size is ${(0, _fileHelpers.formatFileSize)(maxSize)}`;
                    case 'file-invalid-type':
                        return `${file.name} is not a supported file type`;
                    case 'too-many-files':
                        return `Too many files. Max allowed is ${maxFiles}`;
                    default:
                        return `${file.name} could not be uploaded`;
                }
            });
            setValidationError(errors.join('. '));
            return;
        }
        // Clear any previous errors if the upload is successful
        setValidationError(null);
        // Filter out duplicates and oversized files
        const newValidFiles = [];
        const duplicates = [];
        for (const file of acceptedFiles){
            if (file.size > maxSize) continue;
            const isDup = await isDuplicate(file);
            if (isDup) {
                duplicates.push(file.name);
                continue;
            }
            const hash = await computeFileHash(file);
            setFileHashes((prev)=>new Map(prev).set(hash, file.name));
            newValidFiles.push(file);
        }
        // Show warning for duplicates if any were found
        if (duplicates.length > 0) {
            setValidationError(`Skipped duplicate file${duplicates.length > 1 ? 's' : ''}: ${duplicates.join(', ')}`);
            // If we have some valid files along with duplicates, wait a bit so user can read the message
            if (newValidFiles.length > 0) {
                setTimeout(()=>setValidationError(null), 3000);
            }
        }
        // Update files list with new unique files
        const updatedFiles = [
            ...files,
            ...newValidFiles
        ].slice(0, maxFiles);
        onUpload(updatedFiles);
    }, [
        files,
        maxFiles,
        maxSize,
        onUpload,
        fileHashes
    ]);
    // Clear file hashes when files are removed
    const handleRemove = (index)=>{
        if (onRemove) {
            const removedFile = files[index];
            onRemove(index);
            // Remove the hash for the removed file
            setFileHashes((prev)=>{
                const newHashes = new Map(prev);
                for (const [hash, fileName] of newHashes){
                    if (fileName === removedFile.name) {
                        newHashes.delete(hash);
                        break;
                    }
                }
                return newHashes;
            });
        }
    };
    const { getRootProps, getInputProps, isDragReject } = (0, _reactdropzone.useDropzone)({
        onDrop,
        accept: accept.split(",").reduce((acc, type)=>{
            // Convert file extensions to MIME types if needed
            const trimmedType = type.trim();
            if (trimmedType.startsWith('.')) {
                // Handle file extensions
                const mimeType = {
                    '.pdf': 'application/pdf',
                    '.docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
                    '.txt': 'text/plain'
                }[trimmedType];
                if (mimeType) {
                    return {
                        ...acc,
                        [mimeType]: [
                            trimmedType
                        ]
                    };
                }
            }
            // Handle MIME types directly
            return {
                ...acc,
                [trimmedType]: []
            };
        }, {}),
        maxFiles,
        maxSize,
        onDragEnter: ()=>setIsDragActive(true),
        onDragLeave: ()=>setIsDragActive(false),
        onDropAccepted: ()=>{
            setIsDragActive(false);
            setValidationError(null);
        },
        onDropRejected: ()=>{
            setIsDragActive(false);
        }
    });
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        className: (0, _utils.cn)("space-y-4", className),
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                ...getRootProps(),
                className: (0, _utils.cn)("border-2 border-dashed rounded-lg p-8 text-center transition-all duration-300", isDragActive && "border-blue-400 bg-blue-50/50 scale-105", isDragReject && "border-red-400 bg-red-50/50", !isDragActive && !isDragReject && "border-gray-300 hover:border-blue-300 hover:bg-gray-50/50", required && files.length === 0 && "border-red-200 bg-red-50/10", "cursor-pointer"),
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                        ...getInputProps(),
                        "data-testid": "file-input"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "space-y-4",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                className: "mx-auto w-16 h-16 bg-gradient-to-r from-blue-400 to-purple-600 rounded-full flex items-center justify-center",
                                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Upload, {
                                    className: "h-8 w-8 text-white"
                                })
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("h3", {
                                        className: "text-lg font-semibold text-slate-900 mb-2",
                                        children: isDragActive ? "Drop files here!" : title
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                                        className: "text-slate-600 mb-4",
                                        children: description
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("p", {
                                        className: "text-xs text-gray-500 mb-4",
                                        children: [
                                            "Max size: ",
                                            (0, _fileHelpers.formatFileSize)(maxSize),
                                            " • Supported formats: ",
                                            (0, _fileHelpers.formatAcceptedTypes)(accept)
                                        ]
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                                        variant: "outline",
                                        onClick: (e)=>{
                                            e.stopPropagation();
                                            // Use the dropzone's input instead of creating a new one
                                            const dropzoneInput = document.querySelector('[data-testid="file-input"]');
                                            if (dropzoneInput) {
                                                dropzoneInput.click();
                                            }
                                        },
                                        className: "border-blue-200 text-blue-600 hover:bg-blue-50",
                                        children: buttonText
                                    })
                                ]
                            })
                        ]
                    })
                ]
            }),
            (error || validationError) && /*#__PURE__*/ (0, _jsxruntime.jsxs)(_alert.Alert, {
                variant: "destructive",
                "data-testid": "error-message",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.AlertCircle, {
                        className: "h-4 w-4"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_alert.AlertDescription, {
                        children: error || validationError
                    })
                ]
            }),
            showFileList && files.length > 0 && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: "space-y-2",
                children: files.map((file, index)=>{
                    const status = (0, _fileHelpers.getUploadStatus)(file.name, uploadProgress);
                    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: (0, _utils.cn)("flex items-center justify-between bg-slate-50 rounded-lg p-3", status === 'error' && "bg-red-50", status === 'success' && "bg-green-50"),
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                className: "flex items-center space-x-3",
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.FileText, {
                                        className: (0, _utils.cn)("h-5 w-5", status === 'error' && "text-red-600", status === 'success' && "text-green-600", status === 'uploading' && "text-blue-600", status === 'idle' && "text-slate-600")
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                        children: [
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                                                className: "text-sm font-medium text-slate-900 truncate max-w-[200px]",
                                                "data-testid": `file-name-${file.name}`,
                                                children: file.name
                                            }),
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                                                className: "text-xs text-slate-500",
                                                children: (0, _fileHelpers.formatFileSize)(file.size)
                                            })
                                        ]
                                    })
                                ]
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                className: "flex items-center space-x-4",
                                children: [
                                    uploadProgress[file.name] !== undefined && uploadProgress[file.name] !== -1 && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                        className: "w-24",
                                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_progress.Progress, {
                                            value: uploadProgress[file.name],
                                            "aria-label": `Upload progress for ${file.name}`,
                                            "aria-valuenow": uploadProgress[file.name],
                                            "aria-valuemin": 0,
                                            "aria-valuemax": 100
                                        })
                                    }),
                                    onRemove && /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                                        type: "button",
                                        onClick: ()=>handleRemove(index),
                                        className: "text-slate-400 hover:text-slate-600",
                                        "aria-label": `Remove file ${file.name}`,
                                        "data-testid": `remove-file-${file.name}`,
                                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.X, {
                                            className: "h-4 w-4"
                                        })
                                    })
                                ]
                            })
                        ]
                    }, `${file.name}-${file.lastModified}-${file.size}`);
                })
            })
        ]
    });
}

//# sourceMappingURL=data:application/json;base64,