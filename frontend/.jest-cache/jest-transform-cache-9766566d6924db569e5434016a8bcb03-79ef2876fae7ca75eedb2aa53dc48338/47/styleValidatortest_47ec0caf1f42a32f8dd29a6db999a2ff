6e2cfd2526d693f0537d9e5107e5979a
// Unit Tests for Style Validator
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _styleValidator = require("../styleValidator");
describe('Style Validator', ()=>{
    describe('validateConfig', ()=>{
        it('should validate item mix normalization', ()=>{
            const config = {
                item_mix: {
                    single_select: 0.5,
                    short_answer: 0.3
                }
            };
            const result = (0, _styleValidator.validateConfig)(config);
            expect(result.issues).toHaveLength(1);
            expect(result.issues[0].code).toBe('NORMALIZE_MIX');
            expect(result.issues[0].level).toBe('warning');
            expect(result.fixes).toHaveLength(1);
            expect(result.fixes[0].path).toBe('item_mix');
        });
        it('should validate hard timing constraints', ()=>{
            const config = {
                timing: {
                    mode: 'hard',
                    per_item_seconds: 3
                }
            };
            const result = (0, _styleValidator.validateConfig)(config);
            expect(result.issues).toHaveLength(1);
            expect(result.issues[0].code).toBe('HARD_TIMING_MIN');
            expect(result.issues[0].level).toBe('error');
            expect(result.fixes[0].value).toBe(60);
        });
        it('should validate end-only feedback constraint', ()=>{
            const config = {
                feedback: 'end_only',
                hints: true
            };
            const result = (0, _styleValidator.validateConfig)(config);
            expect(result.issues).toHaveLength(1);
            expect(result.issues[0].code).toBe('END_ONLY_NO_HINTS');
            expect(result.issues[0].level).toBe('warning');
            expect(result.fixes[0].value).toBe(false);
        });
        it('should pass valid configuration', ()=>{
            const config = {
                item_mix: {
                    single_select: 0.6,
                    short_answer: 0.4
                },
                timing: {
                    mode: 'soft',
                    total_minutes: 30,
                    per_item_seconds: 90
                },
                feedback: 'immediate',
                hints: false
            };
            const result = (0, _styleValidator.validateConfig)(config);
            expect(result.issues).toHaveLength(0);
            expect(result.fixes).toHaveLength(0);
        });
    });
    describe('applyFixes', ()=>{
        it('should apply fixes to configuration', ()=>{
            const config = {
                item_mix: {
                    single_select: 0.5,
                    short_answer: 0.3
                }
            };
            const fixes = [
                {
                    path: 'item_mix',
                    value: {
                        single_select: 0.625,
                        short_answer: 0.375
                    }
                }
            ];
            const result = (0, _styleValidator.applyFixes)(config, fixes);
            expect(result.item_mix?.single_select).toBe(0.625);
            expect(result.item_mix?.short_answer).toBe(0.375);
        });
        it('should handle nested path fixes', ()=>{
            const config = {
                timing: {
                    mode: 'hard',
                    per_item_seconds: 3
                }
            };
            const fixes = [
                {
                    path: 'timing.per_item_seconds',
                    value: 60
                }
            ];
            const result = (0, _styleValidator.applyFixes)(config, fixes);
            expect(result.timing?.per_item_seconds).toBe(60);
        });
    });
    describe('getValidationSummary', ()=>{
        it('should return correct summary counts', ()=>{
            const config = {
                item_mix: {
                    single_select: 0.5,
                    short_answer: 0.3
                },
                timing: {
                    mode: 'hard',
                    per_item_seconds: 3
                },
                feedback: 'end_only',
                hints: true
            };
            const summary = (0, _styleValidator.getValidationSummary)(config);
            expect(summary.errors).toBe(1);
            expect(summary.warnings).toBe(2);
            expect(summary.info).toBe(0);
            expect(summary.total).toBe(3);
        });
    });
    describe('hasCriticalErrors', ()=>{
        it('should return true for configurations with errors', ()=>{
            const config = {
                timing: {
                    mode: 'hard',
                    per_item_seconds: 3
                }
            };
            expect((0, _styleValidator.hasCriticalErrors)(config)).toBe(true);
        });
        it('should return false for configurations without errors', ()=>{
            const config = {
                timing: {
                    mode: 'soft',
                    per_item_seconds: 60
                }
            };
            expect((0, _styleValidator.hasCriticalErrors)(config)).toBe(false);
        });
    });
    describe('validateField', ()=>{
        it('should validate individual fields', ()=>{
            const config = {
                timing: {
                    mode: 'soft',
                    per_item_seconds: 60
                }
            };
            const issues = (0, _styleValidator.validateField)(config, 'timing.per_item_seconds', 3);
            expect(issues).toHaveLength(0); // No issues for soft timing
        });
    });
});

//# sourceMappingURL=data:application/json;base64,