{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/features/projects/services/utils.ts"],"sourcesContent":["import {\n  ProjectApiResponse,\n  ProjectV2,\n  SchoolMeta,\n  SelfStudyMeta,\n  ProjectType,\n} from \"../types\";\n\n/**\n * Type guard to check if a project is a school project\n */\nexport function isSchoolProject(\n  project: unknown,\n): project is ProjectV2 & { kind: \"school\" } {\n  return (\n    typeof project === \"object\" &&\n    project !== null &&\n    \"kind\" in project &&\n    \"school_meta\" in project &&\n    (project as any).kind === \"school\" &&\n    (project as any).school_meta\n  );\n}\n\n/**\n * Type guard to check if a project is a self-study project\n */\nexport function isSelfStudyProject(\n  project: unknown,\n): project is ProjectV2 & { kind: \"self_study\" } {\n  return (\n    typeof project === \"object\" &&\n    project !== null &&\n    \"kind\" in project &&\n    \"self_study_meta\" in project &&\n    (project as any).kind === \"self_study\" &&\n    (project as any).self_study_meta\n  );\n}\n\n/**\n * Determine project type from course name or other metadata\n */\nfunction determineProjectType(apiResponse: ProjectApiResponse): ProjectType {\n  const courseName = \"\"; // course_name not available in ProjectApiResponse\n  const projectName = apiResponse.title?.toLowerCase() || \"\";\n  const goalDescription = apiResponse.description?.toLowerCase() || \"\";\n\n  // Check for specific keywords in course names\n  if (courseName.includes(\"math\") || courseName.includes(\"mathematics\") || courseName.includes(\"calculus\")) {\n    return \"math\";\n  }\n  if (courseName.includes(\"biology\") || courseName.includes(\"bio\")) {\n    return \"biology\";\n  }\n  if (courseName.includes(\"chemistry\") || courseName.includes(\"chem\")) {\n    return \"chemistry\";\n  }\n  if (courseName.includes(\"physics\")) {\n    return \"physics\";\n  }\n  if (courseName.includes(\"computer\") || courseName.includes(\"programming\") || courseName.includes(\"coding\")) {\n    return \"computer-science\";\n  }\n  if (courseName.includes(\"history\") || courseName.includes(\"historical\")) {\n    return \"history\";\n  }\n  if (courseName.includes(\"geography\") || courseName.includes(\"geo\")) {\n    return \"geography\";\n  }\n  if (courseName.includes(\"literature\") || courseName.includes(\"english\") || courseName.includes(\"writing\")) {\n    return \"literature\";\n  }\n\n  // Check project name as fallback\n  if (projectName.includes(\"math\") || projectName.includes(\"mathematics\")) {\n    return \"math\";\n  }\n  if (projectName.includes(\"biology\") || projectName.includes(\"bio\")) {\n    return \"biology\";\n  }\n  if (projectName.includes(\"chemistry\") || projectName.includes(\"chem\")) {\n    return \"chemistry\";\n  }\n  if (projectName.includes(\"physics\")) {\n    return \"physics\";\n  }\n  if (projectName.includes(\"computer\") || projectName.includes(\"programming\")) {\n    return \"computer-science\";\n  }\n  if (projectName.includes(\"history\")) {\n    return \"history\";\n  }\n  if (projectName.includes(\"geography\")) {\n    return \"geography\";\n  }\n  if (projectName.includes(\"literature\") || projectName.includes(\"english\")) {\n    return \"literature\";\n  }\n\n  // Check goal description for self-study projects\n  if (goalDescription.includes(\"math\") || goalDescription.includes(\"mathematics\")) {\n    return \"math\";\n  }\n  if (goalDescription.includes(\"biology\") || goalDescription.includes(\"bio\")) {\n    return \"biology\";\n  }\n  if (goalDescription.includes(\"chemistry\") || goalDescription.includes(\"chem\")) {\n    return \"chemistry\";\n  }\n  if (goalDescription.includes(\"physics\")) {\n    return \"physics\";\n  }\n  if (goalDescription.includes(\"computer\") || goalDescription.includes(\"programming\")) {\n    return \"computer-science\";\n  }\n  if (goalDescription.includes(\"history\")) {\n    return \"history\";\n  }\n  if (goalDescription.includes(\"geography\")) {\n    return \"geography\";\n  }\n  if (goalDescription.includes(\"literature\") || goalDescription.includes(\"english\")) {\n    return \"literature\";\n  }\n\n  // Default to biology if no specific type can be determined\n  return \"biology\";\n}\n\n/**\n * Map backend API response to frontend ProjectV2 format\n */\nexport function mapApiResponseToProjectV2(\n  apiResponse: ProjectApiResponse,\n): ProjectV2 {\n  const projectType = determineProjectType(apiResponse);\n  \n  const baseProject = {\n    id: apiResponse.id,\n    title: apiResponse.title, // Use title as title\n    description: apiResponse.description || apiResponse.title, // Use description or title as fallback\n    lastUpdated: new Date(apiResponse.updated_at).toLocaleDateString(),\n    type: projectType,\n    progress: 0,\n    collaborators: 0,\n  };\n\n  if (apiResponse.type === \"school\") {\n      const schoolMeta: SchoolMeta = {\n        course_name: \"\", // school_data not available in ProjectApiResponse\n        instructor: \"\", // school_data not available in ProjectApiResponse\n      };\n\n    return {\n      ...baseProject,\n      kind: \"school\",\n      school_meta: schoolMeta,\n    };\n  } else {\n    const selfStudyMeta: SelfStudyMeta = {\n      goals: [], // self_study_data not available in ProjectApiResponse\n      learning_style: \"\", // self_study_data not available in ProjectApiResponse\n    };\n\n    return {\n      ...baseProject,\n      kind: \"self_study\",\n      self_study_meta: selfStudyMeta,\n    };\n  }\n}\n\n/**\n * Get display name for a project based on its type\n */\nexport function getProjectDisplayName(project: ProjectV2): string {\n  if (isSchoolProject(project)) {\n    return project.school_meta?.course_name || project.title || project.description;\n  }\n  if (isSelfStudyProject(project)) {\n    return project.self_study_meta?.goals?.[0] || project.title || project.description;\n  }\n  // Fallback to title or description if type guards fail\n  return project.title || project.description || \"Unknown Project\";\n}\n"],"names":["getProjectDisplayName","isSchoolProject","isSelfStudyProject","mapApiResponseToProjectV2","project","kind","school_meta","self_study_meta","determineProjectType","apiResponse","courseName","projectName","title","toLowerCase","goalDescription","description","includes","projectType","baseProject","id","lastUpdated","Date","updated_at","toLocaleDateString","type","progress","collaborators","schoolMeta","course_name","instructor","selfStudyMeta","goals","learning_style"],"mappings":"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"}