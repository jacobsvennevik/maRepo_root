{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/features/quiz/index.ts"],"sourcesContent":["// Export the new comprehensive architecture\nexport { quizApi as QuizApiService } from './services/quizApi';\nexport { useQuizCenter } from './hooks/useQuizCenter';\nexport * from './types';\nexport * from './utils/transformers';\n\n// Enhanced wizard components\nexport { EnhancedQuizWizard } from './components/QuizWizard';\nexport * from './components/QuizWizard/steps';\nexport * from './schemas/quizCreation';\n\n// Shared utilities and hooks\nexport * from './constants';\nexport * from './utils';\nexport * from './hooks';\n\n// Legacy exports for backward compatibility\nimport { axiosGeneration } from \"@/lib/axios\";\nimport { normalizeProjectId } from \"@/lib/projectId\";\nimport { isTestMode } from \"@/features/projects/services/upload-utils\";\n\n// Types aligned with backend diagnostic endpoints\nexport interface DiagnosticSession {\n  id: string;\n  project: string;\n  title: string;\n  status: string;\n  time_limit_sec?: number;\n  created_at: string;\n}\n\nexport interface GenerateDiagnosticRequest {\n  project: string; // UUID\n  topic?: string;\n  source_ids?: string[];\n  question_mix?: Record<string, number>;\n  difficulty: \"BEGINNER\" | \"INTERMEDIATE\" | \"ADVANCED\" | \"EXPERT\";\n  delivery_mode: \"IMMEDIATE\" | \"DEFERRED\";\n  max_questions: number;\n}\n\nexport interface StartSessionResponse {\n  session_id: string;\n  questions: any[];\n  time_limit_sec?: number;\n  delivery_mode: string;\n}\n\n// Legacy API functions (deprecated - use quizApi instead)\nexport const quizApi = {\n  async listSessions(params: { project: string }) {\n    const pid = normalizeProjectId(params.project);\n    const res = await axiosGeneration.get(`diagnostic-sessions/`, { params: { project: pid } });\n    return Array.isArray(res.data) ? res.data : (res.data?.results || []);\n  },\n\n  async listToday(params: { project: string }) {\n    const pid = normalizeProjectId(params.project);\n    const res = await axiosGeneration.get(`diagnostic-sessions/today/`, { params: { project: pid } });\n    return Array.isArray(res.data) ? res.data : (res.data?.results || []);\n  },\n\n  async generate(req: GenerateDiagnosticRequest) {\n    const headers: any = {};\n    \n    // Add test mode header if in test mode (backend will handle AI mocking)\n    if (isTestMode()) {\n      headers['X-Test-Mode'] = 'true';\n      console.log('ðŸ§ª Test mode: Adding X-Test-Mode header for backend AI mocking');\n    }\n\n    const difficultyMap: any = { BEGINNER: 1, INTERMEDIATE: 3, ADVANCED: 4, EXPERT: 5 }\n    const deliveryMap: any = { IMMEDIATE: 'IMMEDIATE', DEFERRED: 'DEFERRED_FEEDBACK' }\n    const pid = normalizeProjectId(req.project)\n    const max = Math.max(1, req.max_questions || 3)\n    let question_mix = req.question_mix as any\n    if (!question_mix) {\n      const base = Math.floor(max / 3)\n      const remainder = max % 3\n      question_mix = { MCQ: base, SHORT_ANSWER: base, PRINCIPLE: base }\n      if (remainder >= 1) question_mix.MCQ += 1\n      if (remainder === 2) question_mix.SHORT_ANSWER += 1\n    }\n\n    const payload = {\n      project: pid,\n      topic: req.topic,\n      source_ids: req.source_ids,\n      question_mix,\n      difficulty: difficultyMap[req.difficulty] ?? 2,\n      delivery_mode: deliveryMap[req.delivery_mode] ?? 'DEFERRED_FEEDBACK',\n      max_questions: max,\n    }\n\n    const res = await axiosGeneration.post(`diagnostics/generate/`, payload, {\n      headers\n    });\n    return res.data as DiagnosticSession;\n  },\n\n  async start(sessionId: string) {\n    const res = await axiosGeneration.post(\n      `diagnostic-sessions/${sessionId}/start/`\n    );\n    return res.data as StartSessionResponse;\n  },\n};\n\n// Public API for quiz feature\nexport {};\n\n\n\n"],"names":["EnhancedQuizWizard","QuizApiService","quizApi","useQuizCenter","listSessions","params","pid","normalizeProjectId","project","res","axiosGeneration","get","Array","isArray","data","results","listToday","generate","req","headers","isTestMode","console","log","difficultyMap","BEGINNER","INTERMEDIATE","ADVANCED","EXPERT","deliveryMap","IMMEDIATE","DEFERRED","max","Math","max_questions","question_mix","base","floor","remainder","MCQ","SHORT_ANSWER","PRINCIPLE","payload","topic","source_ids","difficulty","delivery_mode","post","start","sessionId"],"mappings":"AAAA,4CAA4C;;;;;;;;;;;;IAOnCA,kBAAkB;eAAlBA,8BAAkB;;IANPC,cAAc;eAAzBC,gBAAO;;IAgDHA,OAAO;eAAPA;;IA/CJC,aAAa;eAAbA,4BAAa;;;yBADoB;+BACZ;qBAChB;qBACA;4BAGqB;qBACrB;qBACA;qBAGA;qBACA;qBACA;uBAGkB;2BACG;6BACR;;;;;;;;;;;;;;AA8BpB,MAAMD,UAAU;IACrB,MAAME,cAAaC,MAA2B;QAC5C,MAAMC,MAAMC,IAAAA,6BAAkB,EAACF,OAAOG,OAAO;QAC7C,MAAMC,MAAM,MAAMC,sBAAe,CAACC,GAAG,CAAC,CAAC,oBAAoB,CAAC,EAAE;YAAEN,QAAQ;gBAAEG,SAASF;YAAI;QAAE;QACzF,OAAOM,MAAMC,OAAO,CAACJ,IAAIK,IAAI,IAAIL,IAAIK,IAAI,GAAIL,IAAIK,IAAI,EAAEC,WAAW,EAAE;IACtE;IAEA,MAAMC,WAAUX,MAA2B;QACzC,MAAMC,MAAMC,IAAAA,6BAAkB,EAACF,OAAOG,OAAO;QAC7C,MAAMC,MAAM,MAAMC,sBAAe,CAACC,GAAG,CAAC,CAAC,0BAA0B,CAAC,EAAE;YAAEN,QAAQ;gBAAEG,SAASF;YAAI;QAAE;QAC/F,OAAOM,MAAMC,OAAO,CAACJ,IAAIK,IAAI,IAAIL,IAAIK,IAAI,GAAIL,IAAIK,IAAI,EAAEC,WAAW,EAAE;IACtE;IAEA,MAAME,UAASC,GAA8B;QAC3C,MAAMC,UAAe,CAAC;QAEtB,wEAAwE;QACxE,IAAIC,IAAAA,uBAAU,KAAI;YAChBD,OAAO,CAAC,cAAc,GAAG;YACzBE,QAAQC,GAAG,CAAC;QACd;QAEA,MAAMC,gBAAqB;YAAEC,UAAU;YAAGC,cAAc;YAAGC,UAAU;YAAGC,QAAQ;QAAE;QAClF,MAAMC,cAAmB;YAAEC,WAAW;YAAaC,UAAU;QAAoB;QACjF,MAAMxB,MAAMC,IAAAA,6BAAkB,EAACW,IAAIV,OAAO;QAC1C,MAAMuB,MAAMC,KAAKD,GAAG,CAAC,GAAGb,IAAIe,aAAa,IAAI;QAC7C,IAAIC,eAAehB,IAAIgB,YAAY;QACnC,IAAI,CAACA,cAAc;YACjB,MAAMC,OAAOH,KAAKI,KAAK,CAACL,MAAM;YAC9B,MAAMM,YAAYN,MAAM;YACxBG,eAAe;gBAAEI,KAAKH;gBAAMI,cAAcJ;gBAAMK,WAAWL;YAAK;YAChE,IAAIE,aAAa,GAAGH,aAAaI,GAAG,IAAI;YACxC,IAAID,cAAc,GAAGH,aAAaK,YAAY,IAAI;QACpD;QAEA,MAAME,UAAU;YACdjC,SAASF;YACToC,OAAOxB,IAAIwB,KAAK;YAChBC,YAAYzB,IAAIyB,UAAU;YAC1BT;YACAU,YAAYrB,aAAa,CAACL,IAAI0B,UAAU,CAAC,IAAI;YAC7CC,eAAejB,WAAW,CAACV,IAAI2B,aAAa,CAAC,IAAI;YACjDZ,eAAeF;QACjB;QAEA,MAAMtB,MAAM,MAAMC,sBAAe,CAACoC,IAAI,CAAC,CAAC,qBAAqB,CAAC,EAAEL,SAAS;YACvEtB;QACF;QACA,OAAOV,IAAIK,IAAI;IACjB;IAEA,MAAMiC,OAAMC,SAAiB;QAC3B,MAAMvC,MAAM,MAAMC,sBAAe,CAACoC,IAAI,CACpC,CAAC,oBAAoB,EAAEE,UAAU,OAAO,CAAC;QAE3C,OAAOvC,IAAIK,IAAI;IACjB;AACF"}