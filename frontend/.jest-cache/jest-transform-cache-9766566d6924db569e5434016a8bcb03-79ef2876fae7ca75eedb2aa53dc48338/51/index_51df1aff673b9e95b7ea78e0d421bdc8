e30f1df492efe3ca87f3dac47d4169ac
// Export the new comprehensive architecture
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    EnhancedQuizWizard: function() {
        return _QuizWizard.EnhancedQuizWizard;
    },
    QuizApiService: function() {
        return _quizApi.quizApi;
    },
    quizApi: function() {
        return quizApi;
    },
    useQuizCenter: function() {
        return _useQuizCenter.useQuizCenter;
    }
});
const _quizApi = require("./services/quizApi");
const _useQuizCenter = require("./hooks/useQuizCenter");
_export_star(require("./types"), exports);
_export_star(require("./utils/transformers"), exports);
const _QuizWizard = require("./components/QuizWizard");
_export_star(require("./components/QuizWizard/steps"), exports);
_export_star(require("./schemas/quizCreation"), exports);
_export_star(require("./constants"), exports);
_export_star(require("./utils"), exports);
_export_star(require("./hooks"), exports);
const _axios = require("../../lib/axios");
const _projectId = require("../../lib/projectId");
const _uploadutils = require("../projects/services/upload-utils");
function _export_star(from, to) {
    Object.keys(from).forEach(function(k) {
        if (k !== "default" && !Object.prototype.hasOwnProperty.call(to, k)) {
            Object.defineProperty(to, k, {
                enumerable: true,
                get: function() {
                    return from[k];
                }
            });
        }
    });
    return from;
}
const quizApi = {
    async listSessions (params) {
        const pid = (0, _projectId.normalizeProjectId)(params.project);
        const res = await _axios.axiosGeneration.get(`diagnostic-sessions/`, {
            params: {
                project: pid
            }
        });
        return Array.isArray(res.data) ? res.data : res.data?.results || [];
    },
    async listToday (params) {
        const pid = (0, _projectId.normalizeProjectId)(params.project);
        const res = await _axios.axiosGeneration.get(`diagnostic-sessions/today/`, {
            params: {
                project: pid
            }
        });
        return Array.isArray(res.data) ? res.data : res.data?.results || [];
    },
    async generate (req) {
        const headers = {};
        // Add test mode header if in test mode (backend will handle AI mocking)
        if ((0, _uploadutils.isTestMode)()) {
            headers['X-Test-Mode'] = 'true';
            console.log('ðŸ§ª Test mode: Adding X-Test-Mode header for backend AI mocking');
        }
        const difficultyMap = {
            BEGINNER: 1,
            INTERMEDIATE: 3,
            ADVANCED: 4,
            EXPERT: 5
        };
        const deliveryMap = {
            IMMEDIATE: 'IMMEDIATE',
            DEFERRED: 'DEFERRED_FEEDBACK'
        };
        const pid = (0, _projectId.normalizeProjectId)(req.project);
        const max = Math.max(1, req.max_questions || 3);
        let question_mix = req.question_mix;
        if (!question_mix) {
            const base = Math.floor(max / 3);
            const remainder = max % 3;
            question_mix = {
                MCQ: base,
                SHORT_ANSWER: base,
                PRINCIPLE: base
            };
            if (remainder >= 1) question_mix.MCQ += 1;
            if (remainder === 2) question_mix.SHORT_ANSWER += 1;
        }
        const payload = {
            project: pid,
            topic: req.topic,
            source_ids: req.source_ids,
            question_mix,
            difficulty: difficultyMap[req.difficulty] ?? 2,
            delivery_mode: deliveryMap[req.delivery_mode] ?? 'DEFERRED_FEEDBACK',
            max_questions: max
        };
        const res = await _axios.axiosGeneration.post(`diagnostics/generate/`, payload, {
            headers
        });
        return res.data;
    },
    async start (sessionId) {
        const res = await _axios.axiosGeneration.post(`diagnostic-sessions/${sessionId}/start/`);
        return res.data;
    }
};

//# sourceMappingURL=data:application/json;base64,