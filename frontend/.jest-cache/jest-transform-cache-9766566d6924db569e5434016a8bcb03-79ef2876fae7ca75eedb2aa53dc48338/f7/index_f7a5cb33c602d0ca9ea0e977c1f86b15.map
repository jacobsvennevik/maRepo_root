{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/test-utils/index.ts"],"sourcesContent":["/**\n * Test Utilities Index\n * \n * Centralized exports for all test utilities, patterns, and helpers.\n */\n\n// ============================================================================\n// Core Test Utilities\n// ============================================================================\n\nexport { renderWithProviders } from './setup/shared-setup';\nexport { testFactories } from './factories';\nexport { standardMocks } from './mocks';\n\n// ============================================================================\n// Test Patterns\n// ============================================================================\n\n// Authentication patterns\nexport {\n  createLoginFlowTest,\n  createTokenHandlingTest,\n  createErrorScenarioTest,\n  createAuthAccessibilityTest,\n  createAuthPerformanceTest\n} from './patterns/auth/login-flow.test';\n\n// File upload patterns\nexport {\n  createFileValidationTest,\n  createDragDropTest,\n  createUploadProgressTest,\n  createFileListTest,\n  createFileUploadErrorTest\n} from './patterns/file-upload/validation.test';\n\n// Form patterns\nexport {\n  createFormRenderingTest,\n  createFormValidationTest,\n  createFormInteractionTest,\n  createFormStateTest,\n  createFormAccessibilityTest,\n  createFormPerformanceTest\n} from './patterns/forms/validation.test';\n\n// ============================================================================\n// Helper Functions\n// ============================================================================\n\n// Authentication helpers\nexport {\n  authHelpers,\n  authScenarios,\n  authTestUtils\n} from './helpers/auth-helpers';\n\n// File upload helpers\nexport {\n  fileUploadHelpers,\n  fileValidationHelpers,\n  fileUploadScenarios,\n  fileUploadTestUtils\n} from './helpers/file-helpers';\n\n// ============================================================================\n// Test Suite Creators\n// ============================================================================\n\n/**\n * Create a complete authentication test suite\n */\nexport const createAuthTestSuite = (component: React.ComponentType<any>, props: any = {}) => {\n  const { authTestUtils } = require('./helpers/auth-helpers.ts');\n  return authTestUtils.createAuthTestSuite(component, props);\n};\n\n/**\n * Create a complete file upload test suite\n */\nexport const createFileUploadTestSuite = (component: React.ComponentType<any>, props: any = {}) => {\n  const { fileUploadTestUtils } = require('./helpers/file-helpers.ts');\n  return fileUploadTestUtils.createFileUploadTestSuite(component, props);\n};\n\n// ============================================================================\n// Common Test Scenarios\n// ============================================================================\n\nexport const commonScenarios = {\n  // Authentication scenarios\n  auth: {\n    validCredentials: [\n      { email: 'test@example.com', password: 'password123' },\n      { email: 'user@domain.org', password: 'securepass456' },\n      { email: 'admin@company.com', password: 'adminpass789' }\n    ],\n    invalidCredentials: [\n      { email: 'test@example.com', password: 'wrongpassword' },\n      { email: 'nonexistent@example.com', password: 'password123' },\n      { email: 'test@example.com', password: '' }\n    ],\n    errorScenarios: [\n      {\n        name: 'Invalid credentials',\n        mockError: { response: { data: { detail: 'Invalid credentials' } } },\n        expectedMessage: /invalid credentials/i\n      },\n      {\n        name: 'Network error',\n        mockError: new Error('Network Error'),\n        expectedMessage: /network error/i\n      },\n      {\n        name: 'Server error',\n        mockError: { response: { status: 500, data: { detail: 'Internal server error' } } },\n        expectedMessage: /internal server error/i\n      }\n    ]\n  },\n\n  // File upload scenarios\n  fileUpload: {\n    validFiles: [\n      { name: 'test1.pdf', content: 'PDF content', type: 'application/pdf' },\n      { name: 'test2.docx', content: 'DOCX content', type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' },\n      { name: 'test3.pptx', content: 'PPTX content', type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation' }\n    ],\n    invalidFiles: [\n      { name: 'test.txt', content: 'TXT content', type: 'text/plain' },\n      { name: 'test.jpg', content: 'JPG content', type: 'image/jpeg' },\n      { name: 'large.pdf', content: 'x'.repeat(26 * 1024 * 1024), type: 'application/pdf' }\n    ],\n    validationScenarios: [\n      {\n        name: 'Valid PDF file',\n        file: { name: 'valid.pdf', content: 'content', type: 'application/pdf' },\n        shouldPass: true\n      },\n      {\n        name: 'Valid DOCX file',\n        file: { name: 'valid.docx', content: 'content', type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' },\n        shouldPass: true\n      },\n      {\n        name: 'Invalid TXT file',\n        file: { name: 'invalid.txt', content: 'content', type: 'text/plain' },\n        shouldPass: false,\n        expectedError: 'is not a supported file type'\n      },\n      {\n        name: 'File too large',\n        file: { name: 'large.pdf', content: 'x'.repeat(26 * 1024 * 1024), type: 'application/pdf' },\n        shouldPass: false,\n        expectedError: 'File is too large'\n      }\n    ]\n  }\n};\n\n// ============================================================================\n// Utility Functions\n// ============================================================================\n\n/**\n * Setup test environment with common mocks\n */\nexport const setupTestEnvironment = (options: {\n  includeAuth?: boolean;\n  includeFileUpload?: boolean;\n  includeForms?: boolean;\n  timeout?: number;\n} = {}) => {\n  const { standardMocks } = require('./mocks/index.ts');\n  const { testFactories } = require('./factories/index.ts');\n  \n  const mocks = standardMocks;\n  const factories = testFactories;\n  \n  // Setup common mocks based on options\n  if (options.includeAuth) {\n    // Setup authentication mocks\n    mocks.mockAxiosAuth.post.mockClear();\n    mocks.mockAxiosApi.get.mockClear();\n  }\n  \n  if (options.includeFileUpload) {\n    // Setup file upload mocks\n    // Add file upload specific mock setup\n  }\n  \n  if (options.includeForms) {\n    // Setup form mocks\n    // Add form specific mock setup\n  }\n  \n  return {\n    mocks,\n    factories,\n    cleanup: () => {\n      jest.clearAllMocks();\n    }\n  };\n};\n\n/**\n * Create a test with automatic cleanup\n */\nexport const createTestWithCleanup = (testFn: () => void | Promise<void>) => {\n  return async () => {\n    try {\n      await testFn();\n    } finally {\n      jest.clearAllMocks();\n    }\n  };\n};\n\n// ============================================================================\n// Type Definitions\n// ============================================================================\n\nexport interface TestConfig {\n  component: React.ComponentType<any>;\n  props?: any;\n  mocks?: any;\n  setup?: () => void;\n  teardown?: () => void;\n}\n\nexport interface AuthTestConfig extends TestConfig {\n  mockResponses?: {\n    login?: any;\n    profile?: any;\n    error?: any;\n  };\n}\n\nexport interface FileUploadTestConfig extends TestConfig {\n  mockResponses?: {\n    upload?: any;\n    progress?: any;\n    error?: any;\n  };\n}\n\nexport interface FormTestConfig extends TestConfig {\n  fields: Array<{\n    name: string;\n    type: 'text' | 'email' | 'password' | 'number' | 'select' | 'checkbox' | 'textarea';\n    label: string;\n    required?: boolean;\n    placeholder?: string;\n  }>;\n  validationRules?: Array<{\n    field: string;\n    rule: 'required' | 'email' | 'minLength' | 'maxLength' | 'pattern';\n    value?: any;\n    message: string;\n  }>;\n}"],"names":["authHelpers","authScenarios","authTestUtils","commonScenarios","createAuthAccessibilityTest","createAuthPerformanceTest","createAuthTestSuite","createDragDropTest","createErrorScenarioTest","createFileListTest","createFileUploadErrorTest","createFileUploadTestSuite","createFileValidationTest","createFormAccessibilityTest","createFormInteractionTest","createFormPerformanceTest","createFormRenderingTest","createFormStateTest","createFormValidationTest","createLoginFlowTest","createTestWithCleanup","createTokenHandlingTest","createUploadProgressTest","fileUploadHelpers","fileUploadScenarios","fileUploadTestUtils","fileValidationHelpers","renderWithProviders","setupTestEnvironment","standardMocks","testFactories","component","props","require","auth","validCredentials","email","password","invalidCredentials","errorScenarios","name","mockError","response","data","detail","expectedMessage","Error","status","fileUpload","validFiles","content","type","invalidFiles","repeat","validationScenarios","file","shouldPass","expectedError","options","mocks","factories","includeAuth","mockAxiosAuth","post","mockClear","mockAxiosApi","get","includeFileUpload","includeForms","cleanup","jest","clearAllMocks","testFn"],"mappings":"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"}