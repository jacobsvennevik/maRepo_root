26ac18bd516628859dcff581f695f59c
/**
 * Test Utilities Index
 * 
 * Centralized exports for all test utilities, patterns, and helpers.
 */ // ============================================================================
// Core Test Utilities
// ============================================================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    authHelpers: function() {
        return _authhelpers.authHelpers;
    },
    authScenarios: function() {
        return _authhelpers.authScenarios;
    },
    authTestUtils: function() {
        return _authhelpers.authTestUtils;
    },
    commonScenarios: function() {
        return commonScenarios;
    },
    createAuthAccessibilityTest: function() {
        return _loginflow.createAuthAccessibilityTest;
    },
    createAuthPerformanceTest: function() {
        return _loginflow.createAuthPerformanceTest;
    },
    createAuthTestSuite: function() {
        return createAuthTestSuite;
    },
    createDragDropTest: function() {
        return _validation.createDragDropTest;
    },
    createErrorScenarioTest: function() {
        return _loginflow.createErrorScenarioTest;
    },
    createFileListTest: function() {
        return _validation.createFileListTest;
    },
    createFileUploadErrorTest: function() {
        return _validation.createFileUploadErrorTest;
    },
    createFileUploadTestSuite: function() {
        return createFileUploadTestSuite;
    },
    createFileValidationTest: function() {
        return _validation.createFileValidationTest;
    },
    createFormAccessibilityTest: function() {
        return _validation1.createFormAccessibilityTest;
    },
    createFormInteractionTest: function() {
        return _validation1.createFormInteractionTest;
    },
    createFormPerformanceTest: function() {
        return _validation1.createFormPerformanceTest;
    },
    createFormRenderingTest: function() {
        return _validation1.createFormRenderingTest;
    },
    createFormStateTest: function() {
        return _validation1.createFormStateTest;
    },
    createFormValidationTest: function() {
        return _validation1.createFormValidationTest;
    },
    createLoginFlowTest: function() {
        return _loginflow.createLoginFlowTest;
    },
    createTestWithCleanup: function() {
        return createTestWithCleanup;
    },
    createTokenHandlingTest: function() {
        return _loginflow.createTokenHandlingTest;
    },
    createUploadProgressTest: function() {
        return _validation.createUploadProgressTest;
    },
    fileUploadHelpers: function() {
        return _filehelpers.fileUploadHelpers;
    },
    fileUploadScenarios: function() {
        return _filehelpers.fileUploadScenarios;
    },
    fileUploadTestUtils: function() {
        return _filehelpers.fileUploadTestUtils;
    },
    fileValidationHelpers: function() {
        return _filehelpers.fileValidationHelpers;
    },
    renderWithProviders: function() {
        return _sharedsetup.renderWithProviders;
    },
    setupTestEnvironment: function() {
        return setupTestEnvironment;
    },
    standardMocks: function() {
        return _mocks.standardMocks;
    },
    testFactories: function() {
        return _factories.testFactories;
    }
});
const _sharedsetup = require("./setup/shared-setup");
const _factories = require("./factories");
const _mocks = require("./mocks");
const _loginflow = require("./patterns/auth/login-flow");
const _validation = require("./patterns/file-upload/validation");
const _validation1 = require("./patterns/forms/validation");
const _authhelpers = require("./helpers/auth-helpers");
const _filehelpers = require("./helpers/file-helpers");
const createAuthTestSuite = (component, props = {})=>{
    const { authTestUtils } = require('./helpers/auth-helpers');
    return authTestUtils.createAuthTestSuite(component, props);
};
const createFileUploadTestSuite = (component, props = {})=>{
    const { fileUploadTestUtils } = require('./helpers/file-helpers');
    return fileUploadTestUtils.createFileUploadTestSuite(component, props);
};
const commonScenarios = {
    // Authentication scenarios
    auth: {
        validCredentials: [
            {
                email: 'test@example.com',
                password: 'password123'
            },
            {
                email: 'user@domain.org',
                password: 'securepass456'
            },
            {
                email: 'admin@company.com',
                password: 'adminpass789'
            }
        ],
        invalidCredentials: [
            {
                email: 'test@example.com',
                password: 'wrongpassword'
            },
            {
                email: 'nonexistent@example.com',
                password: 'password123'
            },
            {
                email: 'test@example.com',
                password: ''
            }
        ],
        errorScenarios: [
            {
                name: 'Invalid credentials',
                mockError: {
                    response: {
                        data: {
                            detail: 'Invalid credentials'
                        }
                    }
                },
                expectedMessage: /invalid credentials/i
            },
            {
                name: 'Network error',
                mockError: new Error('Network Error'),
                expectedMessage: /network error/i
            },
            {
                name: 'Server error',
                mockError: {
                    response: {
                        status: 500,
                        data: {
                            detail: 'Internal server error'
                        }
                    }
                },
                expectedMessage: /internal server error/i
            }
        ]
    },
    // File upload scenarios
    fileUpload: {
        validFiles: [
            {
                name: 'test1.pdf',
                content: 'PDF content',
                type: 'application/pdf'
            },
            {
                name: 'test2.docx',
                content: 'DOCX content',
                type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
            },
            {
                name: 'test3.pptx',
                content: 'PPTX content',
                type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation'
            }
        ],
        invalidFiles: [
            {
                name: 'test.txt',
                content: 'TXT content',
                type: 'text/plain'
            },
            {
                name: 'test.jpg',
                content: 'JPG content',
                type: 'image/jpeg'
            },
            {
                name: 'large.pdf',
                content: 'x'.repeat(26 * 1024 * 1024),
                type: 'application/pdf'
            }
        ],
        validationScenarios: [
            {
                name: 'Valid PDF file',
                file: {
                    name: 'valid.pdf',
                    content: 'content',
                    type: 'application/pdf'
                },
                shouldPass: true
            },
            {
                name: 'Valid DOCX file',
                file: {
                    name: 'valid.docx',
                    content: 'content',
                    type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
                },
                shouldPass: true
            },
            {
                name: 'Invalid TXT file',
                file: {
                    name: 'invalid.txt',
                    content: 'content',
                    type: 'text/plain'
                },
                shouldPass: false,
                expectedError: 'is not a supported file type'
            },
            {
                name: 'File too large',
                file: {
                    name: 'large.pdf',
                    content: 'x'.repeat(26 * 1024 * 1024),
                    type: 'application/pdf'
                },
                shouldPass: false,
                expectedError: 'File is too large'
            }
        ]
    }
};
const setupTestEnvironment = (options = {})=>{
    const { standardMocks } = require('./mocks');
    const { testFactories } = require('./factories');
    const mocks = standardMocks;
    const factories = testFactories;
    // Setup common mocks based on options
    if (options.includeAuth) {
        // Setup authentication mocks
        mocks.mockAxiosAuth.post.mockClear();
        mocks.mockAxiosApi.get.mockClear();
    }
    if (options.includeFileUpload) {
    // Setup file upload mocks
    // Add file upload specific mock setup
    }
    if (options.includeForms) {
    // Setup form mocks
    // Add form specific mock setup
    }
    return {
        mocks,
        factories,
        cleanup: ()=>{
            jest.clearAllMocks();
        }
    };
};
const createTestWithCleanup = (testFn)=>{
    return async ()=>{
        try {
            await testFn();
        } finally{
            jest.clearAllMocks();
        }
    };
};

//# sourceMappingURL=data:application/json;base64,