64255eeee167aca9e8b788618c19e120
"use strict";
// Mock the API functions
jest.mock('../../services/api', ()=>({
        createProject: jest.fn(),
        uploadFile: jest.fn()
    }));
// Mock Next.js navigation
jest.mock('next/navigation', ()=>({
        useRouter: jest.fn(()=>({
                push: jest.fn(),
                replace: jest.fn(),
                back: jest.fn(),
                forward: jest.fn(),
                refresh: jest.fn(),
                prefetch: jest.fn()
            }))
    }));
// Mock the mock-data module
jest.mock('../../services/mock-data', ()=>({
        isTestMode: jest.fn()
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _sharedsetup = require("../../../../test-utils/setup/shared-setup");
const _projectsummaryvariants = require("../project-summary-variants");
const _api = require("../../services/api");
const _mockdata = require("../../services/mock-data");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const mockCreateProject = _api.createProject;
const mockIsTestMode = _mockdata.isTestMode;
describe('Real Project Creation in Test Mode', ()=>{
    const mockSetup = {
        projectName: 'Test Project',
        studyFrequency: 'daily',
        importantDates: [
            {
                description: 'Midterm Exam',
                date: '2024-03-15'
            },
            {
                description: 'Final Exam',
                date: '2024-05-20'
            }
        ],
        courseFiles: [],
        testFiles: [],
        uploadedFiles: []
    };
    beforeEach(()=>{
        jest.clearAllMocks();
        // Set up test mode environment
        process.env.NODE_ENV = 'development';
        process.env.NEXT_PUBLIC_TEST_MODE = 'true';
        // Mock test mode detection
        mockIsTestMode.mockReturnValue(true);
        // Mock successful project creation
        mockCreateProject.mockResolvedValue({
            id: '123',
            name: 'Test Project',
            project_type: 'school',
            course_name: 'Test Course',
            created_at: '2024-01-01T00:00:00Z',
            updated_at: '2024-01-01T00:00:00Z'
        });
    });
    it('should create real project with real ID in test mode', async ()=>{
        const mockRouter = {
            push: jest.fn(),
            replace: jest.fn(),
            back: jest.fn(),
            forward: jest.fn(),
            refresh: jest.fn(),
            prefetch: jest.fn()
        };
        // Mock useRouter to return our mock
        const { useRouter } = require('next/navigation');
        useRouter.mockReturnValue(mockRouter);
        (0, _sharedsetup.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_projectsummaryvariants.ProjectSummaryColorful, {
            setup: mockSetup,
            onBack: jest.fn()
        }));
        // Find and click the create project button
        const createButton = _react1.screen.getByRole('button', {
            name: /create project/i
        });
        expect(createButton).toBeInTheDocument();
        _react1.fireEvent.click(createButton);
        // Wait for the API call to complete
        await (0, _react1.waitFor)(()=>{
            expect(mockCreateProject).toHaveBeenCalledTimes(1);
        });
        // Verify that createProject was called with correct data
        expect(mockCreateProject).toHaveBeenCalledWith(expect.objectContaining({
            name: 'Test Project',
            project_type: 'school',
            mock_mode: true,
            seed_syllabus: true,
            seed_tests: true,
            seed_content: true,
            seed_flashcards: false
        }));
        // Verify that navigation uses real project ID
        await (0, _react1.waitFor)(()=>{
            expect(mockRouter.push).toHaveBeenCalledWith('/projects/123/overview');
        });
        // Verify that the project ID is real (not mock123)
        expect(mockRouter.push).toHaveBeenCalledWith(expect.stringMatching(/^\/projects\/\d+\/overview$/));
        expect(mockRouter.push).not.toHaveBeenCalledWith('/projects/mock123/overview');
    });
    it('should not create mock projects with hardcoded IDs', async ()=>{
        const mockRouter = {
            push: jest.fn(),
            replace: jest.fn(),
            back: jest.fn(),
            forward: jest.fn(),
            refresh: jest.fn(),
            prefetch: jest.fn()
        };
        const { useRouter } = require('next/navigation');
        useRouter.mockReturnValue(mockRouter);
        (0, _sharedsetup.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_projectsummaryvariants.ProjectSummaryColorful, {
            setup: mockSetup,
            onBack: jest.fn()
        }));
        const createButton = _react1.screen.getByRole('button', {
            name: /create project/i
        });
        _react1.fireEvent.click(createButton);
        await (0, _react1.waitFor)(()=>{
            expect(mockCreateProject).toHaveBeenCalledTimes(1);
        });
        // Verify that we're making a real API call, not using mock data
        expect(mockCreateProject).toHaveBeenCalledWith(expect.objectContaining({
            name: 'Test Project',
            project_type: 'school'
        }));
        // Verify that navigation uses the real project ID from the API response
        await (0, _react1.waitFor)(()=>{
            expect(mockRouter.push).toHaveBeenCalledWith('/projects/123/overview');
        });
        // Ensure we never navigate to mock123
        expect(mockRouter.push).not.toHaveBeenCalledWith('/projects/mock123/overview');
    });
    it('should handle test mode correctly - real project creation with AI mocking', async ()=>{
        const mockRouter = {
            push: jest.fn(),
            replace: jest.fn(),
            back: jest.fn(),
            forward: jest.fn(),
            refresh: jest.fn(),
            prefetch: jest.fn()
        };
        const { useRouter } = require('next/navigation');
        useRouter.mockReturnValue(mockRouter);
        (0, _sharedsetup.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_projectsummaryvariants.ProjectSummaryColorful, {
            setup: mockSetup,
            onBack: jest.fn()
        }));
        const createButton = _react1.screen.getByRole('button', {
            name: /create project/i
        });
        _react1.fireEvent.click(createButton);
        await (0, _react1.waitFor)(()=>{
            expect(mockCreateProject).toHaveBeenCalledTimes(1);
        });
        // Verify that mock_mode is set to true for AI mocking
        expect(mockCreateProject).toHaveBeenCalledWith(expect.objectContaining({
            mock_mode: true,
            seed_syllabus: true,
            seed_tests: true,
            seed_content: true,
            seed_flashcards: false
        }));
        // Verify that the project creation is real (not mocked)
        expect(mockCreateProject).toHaveBeenCalledWith(expect.objectContaining({
            name: 'Test Project',
            project_type: 'school',
            study_frequency: 'daily',
            important_dates: expect.arrayContaining([
                expect.objectContaining({
                    title: 'Midterm Exam',
                    date: '2024-03-15'
                }),
                expect.objectContaining({
                    title: 'Final Exam',
                    date: '2024-05-20'
                })
            ])
        }));
    });
    it('should work in both test mode and production mode', async ()=>{
        const mockRouter = {
            push: jest.fn(),
            replace: jest.fn(),
            back: jest.fn(),
            forward: jest.fn(),
            refresh: jest.fn(),
            prefetch: jest.fn()
        };
        const { useRouter } = require('next/navigation');
        useRouter.mockReturnValue(mockRouter);
        // Test production mode
        mockIsTestMode.mockReturnValue(false);
        (0, _sharedsetup.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_projectsummaryvariants.ProjectSummaryColorful, {
            setup: mockSetup,
            onBack: jest.fn()
        }));
        const createButton = _react1.screen.getByRole('button', {
            name: /create project/i
        });
        _react1.fireEvent.click(createButton);
        await (0, _react1.waitFor)(()=>{
            expect(mockCreateProject).toHaveBeenCalledTimes(1);
        });
        // In production mode, mock_mode should be false
        expect(mockCreateProject).toHaveBeenCalledWith(expect.objectContaining({
            mock_mode: false
        }));
        // Test test mode
        mockIsTestMode.mockReturnValue(true);
        // Re-render for test mode
        (0, _sharedsetup.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_projectsummaryvariants.ProjectSummaryColorful, {
            setup: mockSetup,
            onBack: jest.fn()
        }));
        const createButtonTestMode = _react1.screen.getByRole('button', {
            name: /create project/i
        });
        _react1.fireEvent.click(createButtonTestMode);
        await (0, _react1.waitFor)(()=>{
            expect(mockCreateProject).toHaveBeenCalledTimes(2);
        });
        // In test mode, mock_mode should be true
        expect(mockCreateProject).toHaveBeenLastCalledWith(expect.objectContaining({
            mock_mode: true
        }));
    });
});

//# sourceMappingURL=data:application/json;base64,