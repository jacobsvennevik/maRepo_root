{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/test-utils/helpers/auth-helpers.ts"],"sourcesContent":["/**\n * Authentication Test Helpers\n * \n * Reusable helper functions for authentication testing scenarios.\n */\n\nimport { screen, fireEvent, waitFor, act } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { renderWithProviders } from '../setup/shared-setup';\nimport { testFactories } from '../factories';\nimport { standardMocks } from '../mocks';\n\n// ============================================================================\n// Authentication Helpers\n// ============================================================================\n\nexport const authHelpers = {\n  /**\n   * Setup authentication mocks with default responses\n   */\n  setupAuthMocks: (responses: {\n    login?: any;\n    profile?: any;\n    error?: any;\n  } = {}) => {\n    const { mockAxiosAuth, mockAxiosApi } = standardMocks;\n    \n    // Default successful responses\n    mockAxiosAuth.post.mockResolvedValueOnce({\n      data: {\n        access: 'mock-access-token',\n        refresh: 'mock-refresh-token',\n        ...responses.login\n      },\n    });\n    \n    mockAxiosApi.get.mockResolvedValueOnce({\n      data: { id: 1, email: 'test@example.com', ...responses.profile }\n    });\n\n    return { mockAxiosAuth, mockAxiosApi };\n  },\n\n  /**\n   * Setup authentication error mocks\n   */\n  setupAuthErrorMocks: (error: any) => {\n    const { mockAxiosAuth } = standardMocks;\n    mockAxiosAuth.post.mockRejectedValueOnce(error);\n    return { mockAxiosAuth };\n  },\n\n  /**\n   * Fill login form with credentials\n   */\n  fillLoginForm: async (credentials: { email: string; password: string }) => {\n    const user = userEvent.setup();\n    \n    await act(async () => {\n      await user.type(screen.getByLabelText(/email/i), credentials.email);\n      await user.type(screen.getByLabelText(/password/i), credentials.password);\n    });\n\n    return user;\n  },\n\n  /**\n   * Submit login form\n   */\n  submitLoginForm: async (user: any) => {\n    await act(async () => {\n      await user.click(screen.getByRole('button', { name: /^sign in$/i }));\n    });\n  },\n\n  /**\n   * Complete login flow\n   */\n  completeLoginFlow: async (credentials: { email: string; password: string }) => {\n    const user = await authHelpers.fillLoginForm(credentials);\n    await authHelpers.submitLoginForm(user);\n    return user;\n  },\n\n  /**\n   * Verify successful login\n   */\n  verifySuccessfulLogin: async (credentials: { email: string; password: string }, expectedNavigation?: string) => {\n    const { mockAxiosAuth, mockAxiosApi, mockRouter } = standardMocks;\n    \n    await waitFor(() => {\n      expect(mockAxiosAuth.post).toHaveBeenCalledWith('/token/', {\n        email: credentials.email,\n        password: credentials.password,\n      });\n      expect(mockAxiosApi.get).toHaveBeenCalledWith('users/me/');\n      \n      if (expectedNavigation) {\n        expect(mockRouter.push).toHaveBeenCalledWith(expectedNavigation);\n      }\n    }, { timeout: 5000 });\n  },\n\n  /**\n   * Verify login error\n   */\n  verifyLoginError: async (expectedMessage: string) => {\n    await waitFor(() => {\n      expect(screen.getByText(new RegExp(expectedMessage, 'i'))).toBeInTheDocument();\n    }, { timeout: 3000 });\n  },\n\n  /**\n   * Verify form validation errors\n   */\n  verifyFormValidation: async () => {\n    await waitFor(() => {\n      expect(screen.getByText(/please enter a valid email address/i)).toBeInTheDocument();\n      expect(screen.getByText(/password must be at least 8 characters/i)).toBeInTheDocument();\n    }, { timeout: 3000 });\n  },\n\n  /**\n   * Test authentication scenarios\n   */\n  testAuthScenarios: async (scenarios: Array<{\n    name: string;\n    credentials: { email: string; password: string };\n    mockResponse?: any;\n    mockError?: any;\n    expectedResult: 'success' | 'error';\n    expectedMessage?: string;\n    expectedNavigation?: string;\n  }>) => {\n    for (const scenario of scenarios) {\n      // Setup mocks based on scenario\n      if (scenario.mockError) {\n        authHelpers.setupAuthErrorMocks(scenario.mockError);\n      } else {\n        authHelpers.setupAuthMocks({ login: scenario.mockResponse });\n      }\n\n      // Complete login flow\n      await authHelpers.completeLoginFlow(scenario.credentials);\n\n      // Verify results\n      if (scenario.expectedResult === 'success') {\n        await authHelpers.verifySuccessfulLogin(scenario.credentials, scenario.expectedNavigation);\n      } else {\n        await authHelpers.verifyLoginError(scenario.expectedMessage || 'Invalid credentials');\n      }\n\n      // Clean up for next iteration\n      jest.clearAllMocks();\n    }\n  }\n};\n\n// ============================================================================\n// Common Authentication Test Scenarios\n// ============================================================================\n\nexport const authScenarios = {\n  validCredentials: [\n    { email: 'test@example.com', password: 'password123' },\n    { email: 'user@domain.org', password: 'securepass456' },\n    { email: 'admin@company.com', password: 'adminpass789' }\n  ],\n\n  invalidCredentials: [\n    { email: 'test@example.com', password: 'wrongpassword' },\n    { email: 'nonexistent@example.com', password: 'password123' },\n    { email: 'test@example.com', password: '' }\n  ],\n\n  errorScenarios: [\n    {\n      name: 'Invalid credentials',\n      mockError: { response: { data: { detail: 'Invalid credentials' } } },\n      expectedMessage: /invalid credentials/i\n    },\n    {\n      name: 'Network error',\n      mockError: new Error('Network Error'),\n      expectedMessage: /network error/i\n    },\n    {\n      name: 'Server error',\n      mockError: { response: { status: 500, data: { detail: 'Internal server error' } } },\n      expectedMessage: /internal server error/i\n    },\n    {\n      name: 'Account locked',\n      mockError: { response: { status: 423, data: { detail: 'Account is locked' } } },\n      expectedMessage: /account is locked/i\n    }\n  ]\n};\n\n// ============================================================================\n// Authentication Test Utilities\n// ============================================================================\n\nexport const authTestUtils = {\n  /**\n   * Create a complete authentication test suite\n   */\n  createAuthTestSuite: (component: React.ComponentType<any>, props: any = {}) => {\n    return {\n      async testSuccessfulLogin() {\n        authHelpers.setupAuthMocks();\n        await authHelpers.completeLoginFlow(authScenarios.validCredentials[0]);\n        await authHelpers.verifySuccessfulLogin(authScenarios.validCredentials[0], '/dashboard');\n      },\n\n      async testLoginError() {\n        authHelpers.setupAuthErrorMocks(authScenarios.errorScenarios[0].mockError);\n        await authHelpers.completeLoginFlow(authScenarios.invalidCredentials[0]);\n        await authHelpers.verifyLoginError('Invalid credentials');\n      },\n\n      async testFormValidation() {\n        const user = userEvent.setup();\n        renderWithProviders(React.createElement(component, props));\n        \n        await user.click(screen.getByRole('button', { name: /^sign in$/i }));\n        await authHelpers.verifyFormValidation();\n      },\n\n      async testTokenStorage() {\n        authHelpers.setupAuthMocks();\n        await authHelpers.completeLoginFlow(authScenarios.validCredentials[0]);\n        \n        const mockLocalStorage = testFactories.createLocalStorageMock();\n        await waitFor(() => {\n          expect(mockLocalStorage.setItem).toHaveBeenCalledWith('access_token', 'mock-access-token');\n          expect(mockLocalStorage.setItem).toHaveBeenCalledWith('refresh_token', 'mock-refresh-token');\n        });\n      },\n\n      async testAccessibility() {\n        renderWithProviders(React.createElement(component, props));\n        \n        const emailInput = screen.getByLabelText(/email/i);\n        const passwordInput = screen.getByLabelText(/password/i);\n        const submitButton = screen.getByRole('button', { name: /^sign in$/i });\n        \n        expect(emailInput).toHaveAttribute('type', 'email');\n        expect(passwordInput).toHaveAttribute('type', 'password');\n        expect(submitButton).toHaveAttribute('type', 'submit');\n      },\n\n      async testPerformance() {\n        const startTime = performance.now();\n        renderWithProviders(React.createElement(component, props));\n        const endTime = performance.now();\n        \n        expect(endTime - startTime).toBeLessThan(100);\n      }\n    };\n  }\n};\n"],"names":["authHelpers","authScenarios","authTestUtils","setupAuthMocks","responses","mockAxiosAuth","mockAxiosApi","standardMocks","post","mockResolvedValueOnce","data","access","refresh","login","get","id","email","profile","setupAuthErrorMocks","error","mockRejectedValueOnce","fillLoginForm","credentials","user","userEvent","setup","act","type","screen","getByLabelText","password","submitLoginForm","click","getByRole","name","completeLoginFlow","verifySuccessfulLogin","expectedNavigation","mockRouter","waitFor","expect","toHaveBeenCalledWith","push","timeout","verifyLoginError","expectedMessage","getByText","RegExp","toBeInTheDocument","verifyFormValidation","testAuthScenarios","scenarios","scenario","mockError","mockResponse","expectedResult","jest","clearAllMocks","validCredentials","invalidCredentials","errorScenarios","response","detail","Error","status","createAuthTestSuite","component","props","testSuccessfulLogin","testLoginError","testFormValidation","renderWithProviders","React","createElement","testTokenStorage","mockLocalStorage","testFactories","createLocalStorageMock","setItem","testAccessibility","emailInput","passwordInput","submitButton","toHaveAttribute","testPerformance","startTime","performance","now","endTime","toBeLessThan"],"mappings":"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"}