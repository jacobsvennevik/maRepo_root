6d3c5f01e5bd0b893c723c80c68931ce
/**
 * Authentication Test Helpers
 * 
 * Reusable helper functions for authentication testing scenarios.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    authHelpers: function() {
        return authHelpers;
    },
    authScenarios: function() {
        return authScenarios;
    },
    authTestUtils: function() {
        return authTestUtils;
    }
});
const _react = require("@testing-library/react");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
const _sharedsetup = require("../setup/shared-setup");
const _factories = require("../factories");
const _mocks = require("../mocks");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const authHelpers = {
    /**
   * Setup authentication mocks with default responses
   */ setupAuthMocks: (responses = {})=>{
        const { mockAxiosAuth, mockAxiosApi } = _mocks.standardMocks;
        // Default successful responses
        mockAxiosAuth.post.mockResolvedValueOnce({
            data: {
                access: 'mock-access-token',
                refresh: 'mock-refresh-token',
                ...responses.login
            }
        });
        mockAxiosApi.get.mockResolvedValueOnce({
            data: {
                id: 1,
                email: 'test@example.com',
                ...responses.profile
            }
        });
        return {
            mockAxiosAuth,
            mockAxiosApi
        };
    },
    /**
   * Setup authentication error mocks
   */ setupAuthErrorMocks: (error)=>{
        const { mockAxiosAuth } = _mocks.standardMocks;
        mockAxiosAuth.post.mockRejectedValueOnce(error);
        return {
            mockAxiosAuth
        };
    },
    /**
   * Fill login form with credentials
   */ fillLoginForm: async (credentials)=>{
        const user = _userevent.default.setup();
        await (0, _react.act)(async ()=>{
            await user.type(_react.screen.getByLabelText(/email/i), credentials.email);
            await user.type(_react.screen.getByLabelText(/password/i), credentials.password);
        });
        return user;
    },
    /**
   * Submit login form
   */ submitLoginForm: async (user)=>{
        await (0, _react.act)(async ()=>{
            await user.click(_react.screen.getByRole('button', {
                name: /^sign in$/i
            }));
        });
    },
    /**
   * Complete login flow
   */ completeLoginFlow: async (credentials)=>{
        const user = await authHelpers.fillLoginForm(credentials);
        await authHelpers.submitLoginForm(user);
        return user;
    },
    /**
   * Verify successful login
   */ verifySuccessfulLogin: async (credentials, expectedNavigation)=>{
        const { mockAxiosAuth, mockAxiosApi, mockRouter } = _mocks.standardMocks;
        await (0, _react.waitFor)(()=>{
            expect(mockAxiosAuth.post).toHaveBeenCalledWith('/token/', {
                email: credentials.email,
                password: credentials.password
            });
            expect(mockAxiosApi.get).toHaveBeenCalledWith('users/me/');
            if (expectedNavigation) {
                expect(mockRouter.push).toHaveBeenCalledWith(expectedNavigation);
            }
        }, {
            timeout: 5000
        });
    },
    /**
   * Verify login error
   */ verifyLoginError: async (expectedMessage)=>{
        await (0, _react.waitFor)(()=>{
            expect(_react.screen.getByText(new RegExp(expectedMessage, 'i'))).toBeInTheDocument();
        }, {
            timeout: 3000
        });
    },
    /**
   * Verify form validation errors
   */ verifyFormValidation: async ()=>{
        await (0, _react.waitFor)(()=>{
            expect(_react.screen.getByText(/please enter a valid email address/i)).toBeInTheDocument();
            expect(_react.screen.getByText(/password must be at least 8 characters/i)).toBeInTheDocument();
        }, {
            timeout: 3000
        });
    },
    /**
   * Test authentication scenarios
   */ testAuthScenarios: async (scenarios)=>{
        for (const scenario of scenarios){
            // Setup mocks based on scenario
            if (scenario.mockError) {
                authHelpers.setupAuthErrorMocks(scenario.mockError);
            } else {
                authHelpers.setupAuthMocks({
                    login: scenario.mockResponse
                });
            }
            // Complete login flow
            await authHelpers.completeLoginFlow(scenario.credentials);
            // Verify results
            if (scenario.expectedResult === 'success') {
                await authHelpers.verifySuccessfulLogin(scenario.credentials, scenario.expectedNavigation);
            } else {
                await authHelpers.verifyLoginError(scenario.expectedMessage || 'Invalid credentials');
            }
            // Clean up for next iteration
            jest.clearAllMocks();
        }
    }
};
const authScenarios = {
    validCredentials: [
        {
            email: 'test@example.com',
            password: 'password123'
        },
        {
            email: 'user@domain.org',
            password: 'securepass456'
        },
        {
            email: 'admin@company.com',
            password: 'adminpass789'
        }
    ],
    invalidCredentials: [
        {
            email: 'test@example.com',
            password: 'wrongpassword'
        },
        {
            email: 'nonexistent@example.com',
            password: 'password123'
        },
        {
            email: 'test@example.com',
            password: ''
        }
    ],
    errorScenarios: [
        {
            name: 'Invalid credentials',
            mockError: {
                response: {
                    data: {
                        detail: 'Invalid credentials'
                    }
                }
            },
            expectedMessage: /invalid credentials/i
        },
        {
            name: 'Network error',
            mockError: new Error('Network Error'),
            expectedMessage: /network error/i
        },
        {
            name: 'Server error',
            mockError: {
                response: {
                    status: 500,
                    data: {
                        detail: 'Internal server error'
                    }
                }
            },
            expectedMessage: /internal server error/i
        },
        {
            name: 'Account locked',
            mockError: {
                response: {
                    status: 423,
                    data: {
                        detail: 'Account is locked'
                    }
                }
            },
            expectedMessage: /account is locked/i
        }
    ]
};
const authTestUtils = {
    /**
   * Create a complete authentication test suite
   */ createAuthTestSuite: (component, props = {})=>{
        return {
            async testSuccessfulLogin () {
                authHelpers.setupAuthMocks();
                await authHelpers.completeLoginFlow(authScenarios.validCredentials[0]);
                await authHelpers.verifySuccessfulLogin(authScenarios.validCredentials[0], '/dashboard');
            },
            async testLoginError () {
                authHelpers.setupAuthErrorMocks(authScenarios.errorScenarios[0].mockError);
                await authHelpers.completeLoginFlow(authScenarios.invalidCredentials[0]);
                await authHelpers.verifyLoginError('Invalid credentials');
            },
            async testFormValidation () {
                const user = _userevent.default.setup();
                (0, _sharedsetup.renderWithProviders)(React.createElement(component, props));
                await user.click(_react.screen.getByRole('button', {
                    name: /^sign in$/i
                }));
                await authHelpers.verifyFormValidation();
            },
            async testTokenStorage () {
                authHelpers.setupAuthMocks();
                await authHelpers.completeLoginFlow(authScenarios.validCredentials[0]);
                const mockLocalStorage = _factories.testFactories.createLocalStorageMock();
                await (0, _react.waitFor)(()=>{
                    expect(mockLocalStorage.setItem).toHaveBeenCalledWith('access_token', 'mock-access-token');
                    expect(mockLocalStorage.setItem).toHaveBeenCalledWith('refresh_token', 'mock-refresh-token');
                });
            },
            async testAccessibility () {
                (0, _sharedsetup.renderWithProviders)(React.createElement(component, props));
                const emailInput = _react.screen.getByLabelText(/email/i);
                const passwordInput = _react.screen.getByLabelText(/password/i);
                const submitButton = _react.screen.getByRole('button', {
                    name: /^sign in$/i
                });
                expect(emailInput).toHaveAttribute('type', 'email');
                expect(passwordInput).toHaveAttribute('type', 'password');
                expect(submitButton).toHaveAttribute('type', 'submit');
            },
            async testPerformance () {
                const startTime = performance.now();
                (0, _sharedsetup.renderWithProviders)(React.createElement(component, props));
                const endTime = performance.now();
                expect(endTime - startTime).toBeLessThan(100);
            }
        };
    }
};

//# sourceMappingURL=data:application/json;base64,