{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/test-utils/test-helpers.ts"],"sourcesContent":["import { ProjectSetup } from \"../features/projects/types/index\";\nimport { fireEvent, act } from \"@testing-library/react\";\n\n/**\n * Creates a mock localStorage object for testing\n */\nexport const createLocalStorageMock = () => {\n  const storage: { [key: string]: string } = {};\n\n  const localStorageMock = {\n    getItem: jest.fn((key: string) => storage[key] || null),\n    setItem: jest.fn((key: string, value: string) => {\n      storage[key] = value;\n    }),\n    removeItem: jest.fn((key: string) => {\n      delete storage[key];\n    }),\n    clear: jest.fn(() => {\n      Object.keys(storage).forEach((key) => delete storage[key]);\n    }),\n  };\n\n  Object.defineProperty(window, \"localStorage\", {\n    value: localStorageMock,\n    writable: true,\n  });\n\n  return localStorageMock;\n};\n\n/**\n * Creates a mock Next.js router for testing\n */\nexport const createRouterMock = () => {\n  const mockPush = jest.fn();\n  const mockReplace = jest.fn();\n  const mockPrefetch = jest.fn();\n  const mockBack = jest.fn();\n  const mockForward = jest.fn();\n  const mockRefresh = jest.fn();\n\n  jest.mock(\"next/navigation\", () => ({\n    useRouter: () => ({\n      push: mockPush,\n      replace: mockReplace,\n      prefetch: mockPrefetch,\n      back: mockBack,\n      forward: mockForward,\n      refresh: mockRefresh,\n    }),\n  }));\n\n  return {\n    mockPush,\n    mockReplace,\n    mockPrefetch,\n    mockBack,\n    mockForward,\n    mockRefresh,\n  };\n};\n\n/**\n * Creates a default project setup object for testing\n */\nexport const createMockProjectSetup = (\n  overrides: Partial<ProjectSetup> = {},\n): ProjectSetup => ({\n  projectName: \"Test Project\",\n  purpose: \"school\" as const,\n  testLevel: \"midterm\" as const,\n  courseFiles: [],\n  testFiles: [],\n  importantDates: [],\n  uploadedFiles: [],\n  timeframe: \"semester\" as const,\n  goal: \"pass\" as const,\n  studyFrequency: \"weekly\" as const,\n  collaboration: \"solo\" as const,\n  ...overrides,\n});\n\n/**\n * Creates a test file for file upload testing\n */\nexport const createTestFile = (\n  name: string = \"test.pdf\",\n  content: string = \"test content\",\n  type: string = \"application/pdf\",\n): File => {\n  return new File([content], name, { type });\n};\n\n/**\n * Creates mock backend data structure\n */\nexport const createMockBackendData = (overrides: any = {}) => ({\n  id: 123,\n  original_text: \"Course content\",\n  metadata: { course_name: \"Test Course\" },\n  status: \"completed\",\n  ...overrides,\n});\n\n/**\n * Sets up common test environment cleanup\n */\nexport const setupTestCleanup = (mocks: any[] = []) => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    mocks.forEach((mock) => {\n      if (mock && typeof mock.mockClear === \"function\") {\n        mock.mockClear();\n      }\n    });\n  });\n};\n\n// Backwards compatible aliases for tests expecting different names\nexport const createAfterEach = () => () => {\n  // no-op placeholder to satisfy tests that call afterEach(createAfterEach())\n};\nexport const createBeforeEach = (_isTestMode?: boolean) => () => {\n  // no-op placeholder; specific suites use upload-test-helpers createUploadTestSetup\n};\n\n/**\n * Creates a mock fetch implementation for API testing\n */\nexport const createMockFetch = () => {\n  const mockFetch = jest.fn();\n  global.fetch = mockFetch as jest.MockedFunction<typeof fetch>;\n  return mockFetch;\n};\n\n/**\n * Helper to simulate file upload in tests\n */\nexport const simulateFileUpload = async (\n  fileInput: HTMLElement,\n  files: File | File[],\n) => {\n  const fileList = Array.isArray(files) ? files : [files];\n  await act(async () => {\n    fireEvent.change(fileInput, {\n      target: {\n        files: fileList,\n      },\n    });\n  });\n};\n\n/**\n * Helper to wait for async operations with act wrapper\n */\nexport const actAndWait = async (callback: () => void | Promise<void>) => {\n  const { act, waitFor } = await import(\"@testing-library/react\");\n\n  await act(async () => {\n    await callback();\n  });\n\n  return waitFor;\n};\n\n/**\n * Creates environment variable setup for tests\n */\nexport const setupTestEnvironment = (env: Record<string, string>) => {\n  const originalEnv = process.env;\n\n  beforeEach(() => {\n    process.env = {\n      ...originalEnv,\n      ...env,\n    };\n  });\n\n  afterEach(() => {\n    process.env = originalEnv;\n  });\n};\n\n/**\n * Creates a comprehensive test setup with all common mocks\n */\nexport const setupFullTestEnvironment = () => {\n  const localStorageMock = createLocalStorageMock();\n  const routerMocks = createRouterMock();\n  const mockFetch = createMockFetch();\n\n  setupTestCleanup([mockFetch]);\n\n  return {\n    localStorageMock,\n    routerMocks,\n    mockFetch,\n  };\n};\n\n// Environment helpers\nconst processEnvMock = {\n  NODE_ENV: \"test\",\n  NEXT_PUBLIC_TEST_MODE: \"false\",\n};\n\nObject.defineProperty(process, \"env\", {\n  get: () => processEnvMock,\n  set: (value) => {\n    Object.assign(processEnvMock, value);\n  },\n});\n\nexport const setTestEnvironment = (env: Partial<typeof processEnvMock>) => {\n  Object.assign(processEnvMock, env);\n};\n\nexport const resetTestEnvironment = () => {\n  Object.assign(processEnvMock, {\n    NODE_ENV: \"test\",\n    NEXT_PUBLIC_TEST_MODE: \"false\",\n  });\n};\n"],"names":["actAndWait","createAfterEach","createBeforeEach","createLocalStorageMock","createMockBackendData","createMockFetch","createMockProjectSetup","createRouterMock","createTestFile","resetTestEnvironment","setTestEnvironment","setupFullTestEnvironment","setupTestCleanup","setupTestEnvironment","simulateFileUpload","storage","localStorageMock","getItem","jest","fn","key","setItem","value","removeItem","clear","Object","keys","forEach","defineProperty","window","writable","mock","useRouter","push","mockPush","replace","mockReplace","prefetch","mockPrefetch","back","mockBack","forward","mockForward","refresh","mockRefresh","overrides","projectName","purpose","testLevel","courseFiles","testFiles","importantDates","uploadedFiles","timeframe","goal","studyFrequency","collaboration","name","content","type","File","id","original_text","metadata","course_name","status","mocks","beforeEach","clearAllMocks","mockClear","_isTestMode","mockFetch","global","fetch","fileInput","files","fileList","Array","isArray","act","fireEvent","change","target","callback","waitFor","env","originalEnv","process","afterEach","routerMocks","processEnvMock","NODE_ENV","NEXT_PUBLIC_TEST_MODE","get","set","assign"],"mappings":"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"}