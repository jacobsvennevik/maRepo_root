9bd0a17e54c5cae68451bdd1a043f60d
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    actAndWait: function() {
        return actAndWait;
    },
    createAfterEach: function() {
        return createAfterEach;
    },
    createBeforeEach: function() {
        return createBeforeEach;
    },
    createLocalStorageMock: function() {
        return createLocalStorageMock;
    },
    createMockBackendData: function() {
        return createMockBackendData;
    },
    createMockFetch: function() {
        return createMockFetch;
    },
    createMockProjectSetup: function() {
        return createMockProjectSetup;
    },
    createRouterMock: function() {
        return createRouterMock;
    },
    createTestFile: function() {
        return createTestFile;
    },
    resetTestEnvironment: function() {
        return resetTestEnvironment;
    },
    setTestEnvironment: function() {
        return setTestEnvironment;
    },
    setupFullTestEnvironment: function() {
        return setupFullTestEnvironment;
    },
    setupTestCleanup: function() {
        return setupTestCleanup;
    },
    setupTestEnvironment: function() {
        return setupTestEnvironment;
    },
    simulateFileUpload: function() {
        return simulateFileUpload;
    }
});
const _react = require("@testing-library/react");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const createLocalStorageMock = ()=>{
    const storage = {};
    const localStorageMock = {
        getItem: jest.fn((key)=>storage[key] || null),
        setItem: jest.fn((key, value)=>{
            storage[key] = value;
        }),
        removeItem: jest.fn((key)=>{
            delete storage[key];
        }),
        clear: jest.fn(()=>{
            Object.keys(storage).forEach((key)=>delete storage[key]);
        })
    };
    Object.defineProperty(window, "localStorage", {
        value: localStorageMock,
        writable: true
    });
    return localStorageMock;
};
const createRouterMock = ()=>{
    jest.mock("next/navigation", ()=>({
            useRouter: ()=>({
                    push: mockPush,
                    replace: mockReplace,
                    prefetch: mockPrefetch,
                    back: mockBack,
                    forward: mockForward,
                    refresh: mockRefresh
                })
        }));
    const mockPush = jest.fn();
    const mockReplace = jest.fn();
    const mockPrefetch = jest.fn();
    const mockBack = jest.fn();
    const mockForward = jest.fn();
    const mockRefresh = jest.fn();
    return {
        mockPush,
        mockReplace,
        mockPrefetch,
        mockBack,
        mockForward,
        mockRefresh
    };
};
const createMockProjectSetup = (overrides = {})=>({
        projectName: "Test Project",
        purpose: "school",
        testLevel: "midterm",
        courseFiles: [],
        testFiles: [],
        importantDates: [],
        uploadedFiles: [],
        timeframe: "semester",
        goal: "pass",
        studyFrequency: "weekly",
        collaboration: "solo",
        ...overrides
    });
const createTestFile = (name = "test.pdf", content = "test content", type = "application/pdf")=>{
    return new File([
        content
    ], name, {
        type
    });
};
const createMockBackendData = (overrides = {})=>({
        id: 123,
        original_text: "Course content",
        metadata: {
            course_name: "Test Course"
        },
        status: "completed",
        ...overrides
    });
const setupTestCleanup = (mocks = [])=>{
    beforeEach(()=>{
        jest.clearAllMocks();
        mocks.forEach((mock)=>{
            if (mock && typeof mock.mockClear === "function") {
                mock.mockClear();
            }
        });
    });
};
const createAfterEach = ()=>()=>{
    // no-op placeholder to satisfy tests that call afterEach(createAfterEach())
    };
const createBeforeEach = (_isTestMode)=>()=>{
    // no-op placeholder; specific suites use upload-test-helpers createUploadTestSetup
    };
const createMockFetch = ()=>{
    const mockFetch = jest.fn();
    global.fetch = mockFetch;
    return mockFetch;
};
const simulateFileUpload = async (fileInput, files)=>{
    const fileList = Array.isArray(files) ? files : [
        files
    ];
    await (0, _react.act)(async ()=>{
        _react.fireEvent.change(fileInput, {
            target: {
                files: fileList
            }
        });
    });
};
const actAndWait = async (callback)=>{
    const { act, waitFor } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("@testing-library/react")));
    await act(async ()=>{
        await callback();
    });
    return waitFor;
};
const setupTestEnvironment = (env)=>{
    const originalEnv = process.env;
    beforeEach(()=>{
        process.env = {
            ...originalEnv,
            ...env
        };
    });
    afterEach(()=>{
        process.env = originalEnv;
    });
};
const setupFullTestEnvironment = ()=>{
    const localStorageMock = createLocalStorageMock();
    const routerMocks = createRouterMock();
    const mockFetch = createMockFetch();
    setupTestCleanup([
        mockFetch
    ]);
    return {
        localStorageMock,
        routerMocks,
        mockFetch
    };
};
// Environment helpers
const processEnvMock = {
    NODE_ENV: "test",
    NEXT_PUBLIC_TEST_MODE: "false"
};
Object.defineProperty(process, "env", {
    get: ()=>processEnvMock,
    set: (value)=>{
        Object.assign(processEnvMock, value);
    }
});
const setTestEnvironment = (env)=>{
    Object.assign(processEnvMock, env);
};
const resetTestEnvironment = ()=>{
    Object.assign(processEnvMock, {
        NODE_ENV: "test",
        NEXT_PUBLIC_TEST_MODE: "false"
    });
};

//# sourceMappingURL=data:application/json;base64,