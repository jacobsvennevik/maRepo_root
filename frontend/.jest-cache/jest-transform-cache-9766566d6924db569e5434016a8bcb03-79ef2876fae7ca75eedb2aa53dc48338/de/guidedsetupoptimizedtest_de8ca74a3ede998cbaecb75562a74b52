39bbf5c969185d04e53686eb075ac54f
"use strict";
// Mock dependencies using centralized patterns
jest.mock("next/navigation", ()=>({
        useRouter: ()=>({
                push: jest.fn(),
                back: jest.fn(),
                forward: jest.fn(),
                refresh: jest.fn(),
                replace: jest.fn()
            })
    }));
jest.mock("next/dynamic", ()=>()=>{
        const DynamicComponent = ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: "Calendar"
            });
        return DynamicComponent;
    });
// Mock components using centralized component mocks
jest.mock('../guided-setup/components/KeyboardShortcuts', ()=>()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
            "data-testid": "keyboard-shortcuts"
        }));
jest.mock('../guided-setup/components/StepIndicator', ()=>({
        StepIndicator: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                role: "progressbar",
                "data-testid": "step-indicator"
            })
    }));
// Mock the features barrel with centralized component patterns
jest.mock('@/features/projects', ()=>({
        ProjectNameStep: ({ projectName, onProjectNameChange })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "project-name-step",
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                    value: projectName || "",
                    onChange: (e)=>onProjectNameChange(e.target.value),
                    "data-testid": "project-name-input"
                })
            }),
        EducationLevelStep: ({ testLevel, onTestLevelChange })=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                "data-testid": "education-level-step",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                        onClick: ()=>onTestLevelChange("high-school"),
                        "data-testid": "high-school-btn",
                        children: "High School"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                        onClick: ()=>onTestLevelChange("university"),
                        "data-testid": "university-btn",
                        children: "University"
                    })
                ]
            }),
        SyllabusUploadStep: ({ onUploadComplete, onNext })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "syllabus-upload-step",
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                    onClick: ()=>{
                        onUploadComplete("test-project", {}, "test.pdf");
                        onNext?.();
                    },
                    "data-testid": "upload-btn",
                    children: "Upload"
                })
            }),
        ExtractionResultsStep: ({ onConfirm })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "extraction-results-step",
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                    onClick: onConfirm,
                    "data-testid": "confirm-btn",
                    children: "Confirm"
                })
            }),
        CourseContentUploadStep: ({ onUploadComplete })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "course-content-upload-step",
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                    onClick: ()=>onUploadComplete("test-project", {}, "course.pdf"),
                    "data-testid": "course-upload-btn",
                    children: "Upload Course Content"
                })
            }),
        TestUploadStep: ({ onUploadComplete })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "test-upload-step",
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                    onClick: ()=>onUploadComplete("test-project", {}, "test.pdf"),
                    "data-testid": "test-upload-btn",
                    children: "Upload Tests"
                })
            }),
        ProjectSummaryStep: ({ onComplete })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "project-summary-step",
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                    onClick: onComplete,
                    "data-testid": "complete-btn",
                    children: "Complete"
                })
            })
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
require("@testing-library/jest-dom");
const _testutils = require("../../../../test-utils");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Setup test environment
const testEnv = (0, _testutils.setupFullTestEnvironment)({
    timeout: 10000,
    includeAPI: true,
    includeStorage: true,
    includeNavigation: true
});
const { apiMocks } = _testutils.standardMocks;
describe('GuidedSetup - Optimized', ()=>{
    beforeEach(()=>{
        testEnv.mocks.resetAll();
        // Setup default API responses
        apiMocks.setupMockResponses({
            'POST:/backend/api/projects/': {
                ok: true,
                status: 201,
                json: async ()=>({
                        id: 'project-123',
                        name: 'Test Project'
                    })
            }
        });
    });
    describe('Wizard Navigation', ()=>{
        it('should render initial step correctly', ()=>{
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "guided-setup"
            }));
            expect(_react1.screen.getByTestId('guided-setup')).toBeInTheDocument();
        });
        it('should handle step progression', async ()=>{
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "guided-setup"
            }));
            // Simulate step progression
            const stepIndicator = _react1.screen.getByTestId('step-indicator');
            expect(stepIndicator).toBeInTheDocument();
        });
    });
    describe('Project Name Step', ()=>{
        it('should handle project name input', async ()=>{
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "project-name-step"
            }));
            const projectNameInput = _react1.screen.getByTestId('project-name-input');
            expect(projectNameInput).toBeInTheDocument();
            _react1.fireEvent.change(projectNameInput, {
                target: {
                    value: 'My Test Project'
                }
            });
            expect(projectNameInput).toHaveValue('My Test Project');
        });
    });
    describe('Education Level Step', ()=>{
        it('should handle education level selection', async ()=>{
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "education-level-step"
            }));
            const highSchoolBtn = _react1.screen.getByTestId('high-school-btn');
            const universityBtn = _react1.screen.getByTestId('university-btn');
            expect(highSchoolBtn).toBeInTheDocument();
            expect(universityBtn).toBeInTheDocument();
            _react1.fireEvent.click(highSchoolBtn);
            _react1.fireEvent.click(universityBtn);
        });
    });
    describe('File Upload Steps', ()=>{
        it('should handle syllabus upload', async ()=>{
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "syllabus-upload-step"
            }));
            const uploadBtn = _react1.screen.getByTestId('upload-btn');
            expect(uploadBtn).toBeInTheDocument();
            _react1.fireEvent.click(uploadBtn);
        });
        it('should handle course content upload', async ()=>{
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "course-content-upload-step"
            }));
            const courseUploadBtn = _react1.screen.getByTestId('course-upload-btn');
            expect(courseUploadBtn).toBeInTheDocument();
            _react1.fireEvent.click(courseUploadBtn);
        });
        it('should handle test upload', async ()=>{
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "test-upload-step"
            }));
            const testUploadBtn = _react1.screen.getByTestId('test-upload-btn');
            expect(testUploadBtn).toBeInTheDocument();
            _react1.fireEvent.click(testUploadBtn);
        });
    });
    describe('Extraction Results Step', ()=>{
        it('should handle extraction confirmation', async ()=>{
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "extraction-results-step"
            }));
            const confirmBtn = _react1.screen.getByTestId('confirm-btn');
            expect(confirmBtn).toBeInTheDocument();
            _react1.fireEvent.click(confirmBtn);
        });
    });
    describe('Project Summary Step', ()=>{
        it('should handle project completion', async ()=>{
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "project-summary-step"
            }));
            const completeBtn = _react1.screen.getByTestId('complete-btn');
            expect(completeBtn).toBeInTheDocument();
            _react1.fireEvent.click(completeBtn);
        });
    });
    describe('Keyboard Shortcuts', ()=>{
        it('should render keyboard shortcuts component', ()=>{
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "keyboard-shortcuts"
            }));
            expect(_react1.screen.getByTestId('keyboard-shortcuts')).toBeInTheDocument();
        });
    });
    describe('API Integration', ()=>{
        it('should handle successful project creation', async ()=>{
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "guided-setup"
            }));
            // Simulate project creation API call
            const response = await apiMocks.mockFetch('/backend/api/projects/', {
                method: 'POST',
                body: JSON.stringify({
                    name: 'Test Project'
                })
            });
            expect(response.ok).toBe(true);
        });
        it('should handle API errors gracefully', async ()=>{
            // Mock API error
            apiMocks.mockFetch.mockResolvedValueOnce({
                ok: false,
                status: 500,
                json: async ()=>({
                        error: 'Internal server error'
                    })
            });
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "guided-setup"
            }));
            // Simulate API call that fails
            const response = await apiMocks.mockFetch('/backend/api/projects/', {
                method: 'POST',
                body: JSON.stringify({
                    name: 'Test Project'
                })
            });
            expect(response.ok).toBe(false);
        });
    });
    describe('Accessibility', ()=>{
        it('should have proper ARIA attributes', ()=>{
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "step-indicator"
            }));
            const stepIndicator = _react1.screen.getByTestId('step-indicator');
            expect(stepIndicator).toHaveAttribute('role', 'progressbar');
        });
        it('should support keyboard navigation', ()=>{
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "project-name-input"
            }));
            const input = _react1.screen.getByTestId('project-name-input');
            input.focus();
            expect(document.activeElement).toBe(input);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,