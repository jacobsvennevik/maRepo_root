f499f9d90788442245a4f343f3afe725
"use strict";
// Mock the axios instances
jest.mock('@/lib/axios', ()=>({
        axiosGeneration: {
            get: jest.fn(),
            post: jest.fn()
        },
        axiosApi: {
            get: jest.fn()
        }
    }));
// Mock the project context/provider
jest.mock('@/contexts/AuthContext', ()=>({
        useAuth: ()=>({
                user: {
                    id: '1',
                    email: 'test@example.com'
                },
                isAuthenticated: true
            })
    }));
// Mock router
jest.mock('next/navigation', ()=>({
        useParams: ()=>({
                projectId: '203062be-58d0-4f98-bbd4-33b4ce081276'
            }),
        useRouter: ()=>({
                push: jest.fn(),
                back: jest.fn()
            })
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _axios = require("../../../lib/axios");
const _page = /*#__PURE__*/ _interop_require_default(require("../../../app/projects/[projectId]/tests/page"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const mockAxiosGeneration = _axios.axiosGeneration;
describe('Quiz Center Error Handling', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    afterEach(()=>{
        jest.restoreAllMocks();
    });
    it('should handle network timeout errors gracefully', async ()=>{
        // Mock timeout error for diagnostic sessions
        const timeoutError = new Error('Network Error');
        timeoutError.name = 'AxiosError';
        timeoutError.code = 'ECONNABORTED';
        timeoutError.message = 'timeout of 30000ms exceeded';
        mockAxiosGeneration.get.mockRejectedValueOnce(timeoutError);
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
        // Should show loading state initially
        expect(_react1.screen.getByText(/loading/i) || _react1.screen.getByRole('progressbar')).toBeInTheDocument();
        // Should show error message after timeout
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText(/error/i) || _react1.screen.getByText(/failed/i) || _react1.screen.getByText(/try again/i)).toBeInTheDocument();
        }, {
            timeout: 5000
        });
        // Verify the correct API call was attempted
        expect(mockAxiosGeneration.get).toHaveBeenCalledWith('diagnostic-sessions/', expect.objectContaining({
            params: {
                project: '203062be-58d0-4f98-bbd4-33b4ce081276'
            }
        }));
    });
    it('should handle database connection errors (too many clients)', async ()=>{
        // Mock PostgreSQL connection error
        const dbError = new Error('Database connection failed');
        dbError.response = {
            status: 500,
            data: {
                detail: 'connection to server failed: FATAL: sorry, too many clients already'
            }
        };
        mockAxiosGeneration.get.mockRejectedValueOnce(dbError);
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
        // Should show appropriate error message
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText(/error/i) || _react1.screen.getByText(/connection/i) || _react1.screen.getByText(/server/i)).toBeInTheDocument();
        });
    });
    it('should recover when API calls succeed after initial failure', async ()=>{
        const mockSessions = [
            {
                id: '1',
                title: 'Test Quiz 1',
                created_at: '2025-09-19T07:00:00Z',
                status: 'completed'
            }
        ];
        // First call fails, second succeeds
        mockAxiosGeneration.get.mockRejectedValueOnce(new Error('Network timeout')).mockResolvedValueOnce({
            data: mockSessions
        });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
        // Should show error initially
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText(/error/i) || _react1.screen.getByText(/failed/i)).toBeInTheDocument();
        });
        // Simulate retry (component should have retry mechanism)
        // This could be triggered by a retry button or automatic retry
        await (0, _react1.act)(async ()=>{
            // If there's a retry button, click it
            const retryButton = _react1.screen.queryByText(/retry/i) || _react1.screen.queryByText(/try again/i);
            if (retryButton) {
                retryButton.click();
            }
        });
        // Should show sessions after successful retry
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText('Test Quiz 1') || _react1.screen.getByText(/quiz/i)).toBeInTheDocument();
        });
    });
    it('should handle empty quiz sessions gracefully', async ()=>{
        // Mock empty response
        mockAxiosGeneration.get.mockResolvedValueOnce({
            data: []
        });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
        // Should show empty state message
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText(/no quizzes/i) || _react1.screen.getByText(/generate your first quiz/i)).toBeInTheDocument();
        });
    });
    it('should handle quiz generation errors', async ()=>{
        // Mock successful sessions fetch but failed generation
        mockAxiosGeneration.get.mockResolvedValueOnce({
            data: []
        });
        const generationError = new Error('Generation failed');
        generationError.response = {
            status: 400,
            data: {
                detail: 'Insufficient project materials for quiz generation'
            }
        };
        mockAxiosGeneration.post.mockRejectedValueOnce(generationError);
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
        // Wait for component to load
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText(/generate/i) || _react1.screen.getByText(/create/i)).toBeInTheDocument();
        });
        // Simulate clicking generate quiz button
        const generateButton = _react1.screen.getByText(/auto-generate/i) || _react1.screen.getByText(/generate/i);
        if (generateButton) {
            await (0, _react1.act)(async ()=>{
                generateButton.click();
            });
            // Should show generation error
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText(/error/i) || _react1.screen.getByText(/failed/i) || _react1.screen.getByText(/insufficient/i)).toBeInTheDocument();
            });
        }
    });
    it('should handle concurrent API calls without duplicate requests', async ()=>{
        // Mock delay to simulate slow response
        const delayedPromise = new Promise((resolve)=>setTimeout(()=>resolve({
                    data: []
                }), 1000));
        mockAxiosGeneration.get.mockReturnValueOnce(delayedPromise);
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
        // Verify only one API call is made despite potential re-renders
        await (0, _react1.waitFor)(()=>{
            expect(mockAxiosGeneration.get).toHaveBeenCalledTimes(1);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,