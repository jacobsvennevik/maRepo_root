866a54ba4035378101656ec9cbb94f2e
"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "StylePicker", {
    enumerable: true,
    get: function() {
        return StylePicker;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _card = require("../../../components/ui/card");
const _button = require("../../../components/ui/button");
const _label = require("../../../components/ui/label");
const _checkbox = require("../../../components/ui/checkbox");
const _slider = require("../../../components/ui/slider");
const _badge = require("../../../components/ui/badge");
const _alert = require("../../../components/ui/alert");
const _lucidereact = require("lucide-react");
const _styleValidator = require("../utils/styleValidator");
const _previewGenerator = require("../utils/previewGenerator");
const _presetRegistry = require("../utils/presetRegistry");
const _styleAnalytics = require("../utils/styleAnalytics");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const PRESETS = {
    mcq_quiz: {
        name: 'MCQ Quiz',
        description: 'Multiple choice questions with immediate feedback',
        icon: _lucidereact.Target,
        config: {
            timing: {
                total_minutes: 15,
                per_item_seconds: 60
            },
            feedback: 'immediate',
            item_mix: {
                single_select: 0.9,
                cloze: 0.1,
                short_answer: 0,
                numeric: 0,
                multi_step: 0
            },
            difficulty: 'balanced',
            hints: false
        }
    },
    mixed_checkpoint: {
        name: 'Mixed Checkpoint',
        description: 'Combination of question types with deferred feedback',
        icon: _lucidereact.CheckCircle2,
        config: {
            timing: {
                total_minutes: 30,
                per_item_seconds: 90
            },
            feedback: 'on_submit',
            item_mix: {
                single_select: 0.6,
                cloze: 0,
                short_answer: 0.4,
                numeric: 0,
                multi_step: 0
            },
            difficulty: 'balanced',
            hints: true
        }
    },
    stem_problem_set: {
        name: 'STEM Problem Set',
        description: 'Numeric and multi-step problems with tiered hints',
        icon: _lucidereact.Settings,
        config: {
            timing: {
                total_minutes: 45,
                per_item_seconds: 300
            },
            feedback: 'tiered_hints',
            item_mix: {
                single_select: 0,
                cloze: 0,
                short_answer: 0,
                numeric: 0.7,
                multi_step: 0.3
            },
            difficulty: 'harder',
            hints: true
        }
    }
};
// Icon mapping for presets
const getIconComponent = (iconName)=>{
    const iconMap = {
        target: _lucidereact.Target,
        'check-circle': _lucidereact.CheckCircle2,
        settings: _lucidereact.Settings,
        clock: _lucidereact.Clock,
        message: _lucidereact.MessageSquare,
        lightbulb: _lucidereact.Lightbulb
    };
    return iconMap[iconName] || _lucidereact.Target;
};
function StylePicker({ value, onChange, onNext, onBack }) {
    const [showAdvanced, setShowAdvanced] = (0, _react.useState)(false);
    const [validationIssues, setValidationIssues] = (0, _react.useState)([]);
    const [previewItems, setPreviewItems] = (0, _react.useState)([]);
    const [previewBadges, setPreviewBadges] = (0, _react.useState)([]);
    const [showPreview, setShowPreview] = (0, _react.useState)(false);
    const presets = (0, _presetRegistry.getMVPPresets)();
    const [effectiveConfig, setEffectiveConfig] = (0, _react.useState)(()=>{
        if (value.test_style && presets[value.test_style]) {
            return {
                ...presets[value.test_style].config,
                ...value.style_config_override
            };
        }
        return value.style_config_override;
    });
    // Validate configuration whenever it changes
    (0, _react.useEffect)(()=>{
        const validation = (0, _styleValidator.validateConfig)(effectiveConfig);
        setValidationIssues(validation.issues);
        // Track validation events
        if (validation.issues.length > 0) {
            (0, _styleAnalytics.trackValidationTriggered)(value.test_style || 'custom', validation.issues.length, validation.issues.some((i)=>i.level === 'error'), validation.issues.some((i)=>i.level === 'warning'));
        }
    }, [
        effectiveConfig,
        value.test_style
    ]);
    // Generate preview when configuration changes
    (0, _react.useEffect)(()=>{
        if (showPreview) {
            const items = (0, _previewGenerator.generatePreviewItems)(effectiveConfig);
            const badges = (0, _previewGenerator.generatePreviewBadges)(effectiveConfig);
            setPreviewItems(items);
            setPreviewBadges(badges);
        }
    }, [
        effectiveConfig,
        showPreview
    ]);
    const handlePresetSelect = (presetId)=>{
        const preset = presets[presetId];
        if (!preset) return;
        // Ensure timing config has required properties and item_mix has correct structure
        const configWithRequiredTiming = {
            ...preset.config,
            timing: preset.config.timing ? {
                total_minutes: preset.config.timing.total_minutes ?? 30,
                per_item_seconds: preset.config.timing.per_item_seconds ?? 60
            } : undefined,
            item_mix: preset.config.item_mix ? {
                single_select: preset.config.item_mix.single_select ?? 0,
                cloze: preset.config.item_mix.cloze ?? 0,
                short_answer: preset.config.item_mix.short_answer ?? 0,
                numeric: preset.config.item_mix.numeric ?? 0,
                multi_step: preset.config.item_mix.multi_step ?? 0
            } : undefined
        };
        const newConfig = {
            test_style: presetId,
            style_config_override: configWithRequiredTiming
        };
        setEffectiveConfig(configWithRequiredTiming);
        onChange(newConfig);
        // Track preset selection
        (0, _styleAnalytics.trackStyleSelected)(presetId, preset.label, 'preset');
    };
    const handleOverrideChange = (key, newValue)=>{
        const oldValue = effectiveConfig[key];
        // Create base overrides with the new value
        // eslint-disable-next-line prefer-const
        let updatedOverrides = {
            ...effectiveConfig,
            [key]: newValue
        };
        // Ensure timing config has required properties if it's being updated
        if (key === 'timing' && newValue) {
            updatedOverrides.timing = {
                total_minutes: newValue.total_minutes ?? 30,
                per_item_seconds: newValue.per_item_seconds ?? 60
            };
        }
        // Ensure item_mix has correct structure if it's being updated
        if (key === 'item_mix' && newValue) {
            updatedOverrides.item_mix = {
                single_select: newValue.single_select ?? 0,
                cloze: newValue.cloze ?? 0,
                short_answer: newValue.short_answer ?? 0,
                numeric: newValue.numeric ?? 0,
                multi_step: newValue.multi_step ?? 0
            };
        }
        setEffectiveConfig(updatedOverrides);
        // Create a properly typed config for onChange that matches TestStyleConfig
        const configForOnChange = {
            ...updatedOverrides,
            // Ensure timing has required properties if it exists
            timing: updatedOverrides.timing ? {
                total_minutes: updatedOverrides.timing.total_minutes ?? 30,
                per_item_seconds: updatedOverrides.timing.per_item_seconds ?? 60
            } : undefined,
            // Ensure item_mix has correct structure if it exists
            item_mix: updatedOverrides.item_mix ? {
                single_select: updatedOverrides.item_mix.single_select ?? 0,
                cloze: updatedOverrides.item_mix.cloze ?? 0,
                short_answer: updatedOverrides.item_mix.short_answer ?? 0,
                numeric: updatedOverrides.item_mix.numeric ?? 0,
                multi_step: updatedOverrides.item_mix.multi_step ?? 0
            } : undefined
        };
        onChange({
            test_style: value.test_style,
            style_config_override: configForOnChange
        });
        // Track customization
        (0, _styleAnalytics.trackStyleCustomized)(value.test_style || 'custom', key, oldValue, newValue, key);
    };
    const handleApplyAllFixes = ()=>{
        const validation = (0, _styleValidator.validateConfig)(effectiveConfig);
        if (validation.fixes.length > 0) {
            const fixedConfig = (0, _styleValidator.applyFixes)(effectiveConfig, validation.fixes);
            setEffectiveConfig(fixedConfig);
            // Create a properly typed config for onChange that matches TestStyleConfig
            const configForOnChange = {
                ...fixedConfig,
                // Ensure timing has required properties if it exists
                timing: fixedConfig.timing ? {
                    total_minutes: fixedConfig.timing.total_minutes ?? 30,
                    per_item_seconds: fixedConfig.timing.per_item_seconds ?? 60
                } : undefined,
                // Ensure item_mix has correct structure if it exists
                item_mix: fixedConfig.item_mix ? {
                    single_select: fixedConfig.item_mix.single_select ?? 0,
                    cloze: fixedConfig.item_mix.cloze ?? 0,
                    short_answer: fixedConfig.item_mix.short_answer ?? 0,
                    numeric: fixedConfig.item_mix.numeric ?? 0,
                    multi_step: fixedConfig.item_mix.multi_step ?? 0
                } : undefined
            };
            onChange({
                test_style: value.test_style,
                style_config_override: configForOnChange
            });
            // Track autofix application
            (0, _styleAnalytics.trackAutofixApplied)(value.test_style || 'custom', validation.fixes.length, validation.fixes.map((f)=>f.path));
        }
    };
    const handlePreviewToggle = ()=>{
        setShowPreview(!showPreview);
        if (!showPreview) {
            (0, _styleAnalytics.trackPreviewOpened)(value.test_style || 'custom', 3);
        }
    };
    const renderValidationIssues = ()=>{
        if (validationIssues.length === 0) return null;
        const errors = validationIssues.filter((i)=>i.level === 'error');
        const warnings = validationIssues.filter((i)=>i.level === 'warning');
        const info = validationIssues.filter((i)=>i.level === 'info');
        return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
            className: "space-y-3",
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    className: "flex items-center justify-between",
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("h4", {
                            className: "font-medium text-sm",
                            children: "Validation Issues"
                        }),
                        validationIssues.some((i)=>i.fix) && /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                            size: "sm",
                            variant: "outline",
                            onClick: handleApplyAllFixes,
                            children: "Apply All Fixes"
                        })
                    ]
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    className: "space-y-2",
                    children: [
                        errors.map((issue, index)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)(_alert.Alert, {
                                variant: "destructive",
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.AlertTriangle, {
                                        className: "h-4 w-4"
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)(_alert.AlertDescription, {
                                        children: [
                                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("strong", {
                                                children: [
                                                    issue.path,
                                                    ":"
                                                ]
                                            }),
                                            " ",
                                            issue.message,
                                            issue.fix && /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                                                size: "sm",
                                                variant: "outline",
                                                className: "ml-2",
                                                onClick: ()=>{
                                                    const fixedConfig = (0, _styleValidator.applyFixes)(effectiveConfig, [
                                                        issue.fix
                                                    ]);
                                                    setEffectiveConfig(fixedConfig);
                                                    // Create a properly typed config for onChange that matches TestStyleConfig
                                                    const configForOnChange = {
                                                        ...fixedConfig,
                                                        // Ensure timing has required properties if it exists
                                                        timing: fixedConfig.timing ? {
                                                            total_minutes: fixedConfig.timing.total_minutes ?? 30,
                                                            per_item_seconds: fixedConfig.timing.per_item_seconds ?? 60
                                                        } : undefined,
                                                        // Ensure item_mix has correct structure if it exists
                                                        item_mix: fixedConfig.item_mix ? {
                                                            single_select: fixedConfig.item_mix.single_select ?? 0,
                                                            cloze: fixedConfig.item_mix.cloze ?? 0,
                                                            short_answer: fixedConfig.item_mix.short_answer ?? 0,
                                                            numeric: fixedConfig.item_mix.numeric ?? 0,
                                                            multi_step: fixedConfig.item_mix.multi_step ?? 0
                                                        } : undefined
                                                    };
                                                    onChange({
                                                        test_style: value.test_style,
                                                        style_config_override: configForOnChange
                                                    });
                                                },
                                                children: "Fix"
                                            })
                                        ]
                                    })
                                ]
                            }, index)),
                        warnings.map((issue, index)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)(_alert.Alert, {
                                variant: "default",
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.AlertTriangle, {
                                        className: "h-4 w-4"
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)(_alert.AlertDescription, {
                                        children: [
                                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("strong", {
                                                children: [
                                                    issue.path,
                                                    ":"
                                                ]
                                            }),
                                            " ",
                                            issue.message,
                                            issue.fix && /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                                                size: "sm",
                                                variant: "outline",
                                                className: "ml-2",
                                                onClick: ()=>{
                                                    const fixedConfig = (0, _styleValidator.applyFixes)(effectiveConfig, [
                                                        issue.fix
                                                    ]);
                                                    setEffectiveConfig(fixedConfig);
                                                    // Create a properly typed config for onChange that matches TestStyleConfig
                                                    const configForOnChange = {
                                                        ...fixedConfig,
                                                        // Ensure timing has required properties if it exists
                                                        timing: fixedConfig.timing ? {
                                                            total_minutes: fixedConfig.timing.total_minutes ?? 30,
                                                            per_item_seconds: fixedConfig.timing.per_item_seconds ?? 60
                                                        } : undefined,
                                                        // Ensure item_mix has correct structure if it exists
                                                        item_mix: fixedConfig.item_mix ? {
                                                            single_select: fixedConfig.item_mix.single_select ?? 0,
                                                            cloze: fixedConfig.item_mix.cloze ?? 0,
                                                            short_answer: fixedConfig.item_mix.short_answer ?? 0,
                                                            numeric: fixedConfig.item_mix.numeric ?? 0,
                                                            multi_step: fixedConfig.item_mix.multi_step ?? 0
                                                        } : undefined
                                                    };
                                                    onChange({
                                                        test_style: value.test_style,
                                                        style_config_override: configForOnChange
                                                    });
                                                },
                                                children: "Fix"
                                            })
                                        ]
                                    })
                                ]
                            }, index)),
                        info.map((issue, index)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)(_alert.Alert, {
                                variant: "default",
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Info, {
                                        className: "h-4 w-4"
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)(_alert.AlertDescription, {
                                        children: [
                                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("strong", {
                                                children: [
                                                    issue.path,
                                                    ":"
                                                ]
                                            }),
                                            " ",
                                            issue.message
                                        ]
                                    })
                                ]
                            }, index))
                    ]
                })
            ]
        });
    };
    const renderPreview = ()=>{
        return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
            className: "space-y-4",
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    className: "flex items-center justify-between",
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("h4", {
                            className: "font-medium text-sm",
                            children: "Preview Configuration"
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                            size: "sm",
                            variant: "outline",
                            onClick: handlePreviewToggle,
                            children: showPreview ? 'Hide Preview' : 'Show Preview'
                        })
                    ]
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    className: "grid grid-cols-2 gap-2 text-xs",
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                            className: "flex items-center gap-2",
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Clock, {
                                    className: "h-3 w-3"
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsxs)("span", {
                                    children: [
                                        "Timing: ",
                                        effectiveConfig.timing?.total_minutes || 15,
                                        "m total"
                                    ]
                                })
                            ]
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                            className: "flex items-center gap-2",
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.MessageSquare, {
                                    className: "h-3 w-3"
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsxs)("span", {
                                    children: [
                                        "Feedback: ",
                                        effectiveConfig.feedback || 'immediate'
                                    ]
                                })
                            ]
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                            className: "flex items-center gap-2",
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Target, {
                                    className: "h-3 w-3"
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsxs)("span", {
                                    children: [
                                        "Difficulty: ",
                                        effectiveConfig.difficulty || 'balanced'
                                    ]
                                })
                            ]
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                            className: "flex items-center gap-2",
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Lightbulb, {
                                    className: "h-3 w-3"
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsxs)("span", {
                                    children: [
                                        "Hints: ",
                                        effectiveConfig.hints ? 'Yes' : 'No'
                                    ]
                                })
                            ]
                        })
                    ]
                }),
                showPreview && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    className: "space-y-3",
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            className: "flex flex-wrap gap-1",
                            children: previewBadges.map((badge, index)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_badge.Badge, {
                                    variant: badge.variant,
                                    className: "text-xs",
                                    children: badge.label
                                }, index))
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                            className: "space-y-2",
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                    className: "text-xs font-medium",
                                    children: "Sample Items:"
                                }),
                                previewItems.map((item, index)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                        className: "p-2 bg-gray-50 rounded text-xs",
                                        children: [
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                                className: "font-medium",
                                                children: item.question
                                            }),
                                            item.options && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                className: "mt-1 text-gray-600",
                                                children: [
                                                    item.options.slice(0, 2).join(', '),
                                                    "..."
                                                ]
                                            })
                                        ]
                                    }, index))
                            ]
                        })
                    ]
                })
            ]
        });
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        className: "space-y-6",
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("h3", {
                        className: "text-lg font-semibold mb-2",
                        children: "Choose Test Style"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                        className: "text-sm text-gray-600 mb-4",
                        children: "Select a preset style or customize your test configuration"
                    })
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: "grid grid-cols-1 md:grid-cols-3 gap-4",
                children: Object.values(presets).map((preset)=>{
                    const Icon = getIconComponent(preset.icon);
                    const isSelected = value.test_style === preset.id;
                    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_card.Card, {
                        className: `cursor-pointer transition-all ${isSelected ? 'ring-2 ring-blue-500 bg-blue-50' : 'hover:shadow-md hover:bg-gray-50'}`,
                        onClick: ()=>handlePresetSelect(preset.id),
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.CardHeader, {
                                className: "pb-3",
                                children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                    className: "flex items-center gap-3",
                                    children: [
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)(Icon, {
                                            className: "h-6 w-6 text-blue-600"
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.CardTitle, {
                                            className: "text-base",
                                            children: preset.label
                                        })
                                    ]
                                })
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_card.CardContent, {
                                className: "pt-0",
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                                        className: "text-sm text-gray-600",
                                        children: preset.description
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                        className: "mt-2 flex flex-wrap gap-1",
                                        children: preset.tags.slice(0, 2).map((tag)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_badge.Badge, {
                                                variant: "outline",
                                                className: "text-xs",
                                                children: tag
                                            }, tag))
                                    }),
                                    isSelected && /*#__PURE__*/ (0, _jsxruntime.jsx)(_badge.Badge, {
                                        className: "mt-2",
                                        variant: "default",
                                        children: "Selected"
                                    })
                                ]
                            })
                        ]
                    }, preset.id);
                })
            }),
            renderValidationIssues(),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: "space-y-4",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "flex items-center justify-between",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("h4", {
                                className: "font-medium",
                                children: "Advanced Configuration"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_checkbox.Checkbox, {
                                checked: showAdvanced,
                                onCheckedChange: setShowAdvanced
                            })
                        ]
                    }),
                    showAdvanced && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "space-y-4 p-4 border rounded-lg",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                className: "space-y-3",
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_label.Label, {
                                        children: "Timing Configuration"
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                        className: "grid grid-cols-2 gap-4",
                                        children: [
                                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                children: [
                                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_label.Label, {
                                                        className: "text-sm",
                                                        children: "Total Time (minutes)"
                                                    }),
                                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_slider.Slider, {
                                                        value: [
                                                            effectiveConfig.timing?.total_minutes || 15
                                                        ],
                                                        onValueChange: ([value])=>handleOverrideChange('timing', {
                                                                ...effectiveConfig.timing,
                                                                total_minutes: value
                                                            }),
                                                        min: 5,
                                                        max: 120,
                                                        step: 5,
                                                        className: "mt-2"
                                                    }),
                                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                        className: "text-xs text-gray-500 mt-1",
                                                        children: [
                                                            effectiveConfig.timing?.total_minutes || 15,
                                                            " minutes"
                                                        ]
                                                    })
                                                ]
                                            }),
                                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                children: [
                                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_label.Label, {
                                                        className: "text-sm",
                                                        children: "Per Item Time (seconds)"
                                                    }),
                                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_slider.Slider, {
                                                        value: [
                                                            effectiveConfig.timing?.per_item_seconds || 60
                                                        ],
                                                        onValueChange: ([value])=>handleOverrideChange('timing', {
                                                                ...effectiveConfig.timing,
                                                                per_item_seconds: value
                                                            }),
                                                        min: 30,
                                                        max: 600,
                                                        step: 30,
                                                        className: "mt-2"
                                                    }),
                                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                        className: "text-xs text-gray-500 mt-1",
                                                        children: [
                                                            effectiveConfig.timing?.per_item_seconds || 60,
                                                            " seconds"
                                                        ]
                                                    })
                                                ]
                                            })
                                        ]
                                    })
                                ]
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_label.Label, {
                                        children: "Feedback Mode"
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("select", {
                                        value: effectiveConfig.feedback || 'immediate',
                                        onChange: (e)=>handleOverrideChange('feedback', e.target.value),
                                        className: "mt-2 w-full p-2 border rounded-md",
                                        children: [
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                                                value: "immediate",
                                                children: "Immediate"
                                            }),
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                                                value: "on_submit",
                                                children: "On Submit"
                                            }),
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                                                value: "end_only",
                                                children: "End Only"
                                            }),
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                                                value: "tiered_hints",
                                                children: "Tiered Hints"
                                            })
                                        ]
                                    })
                                ]
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_label.Label, {
                                        children: "Difficulty Level"
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("select", {
                                        value: effectiveConfig.difficulty || 'balanced',
                                        onChange: (e)=>handleOverrideChange('difficulty', e.target.value),
                                        className: "mt-2 w-full p-2 border rounded-md",
                                        children: [
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                                                value: "easier",
                                                children: "Easier"
                                            }),
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                                                value: "balanced",
                                                children: "Balanced"
                                            }),
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                                                value: "harder",
                                                children: "Harder"
                                            })
                                        ]
                                    })
                                ]
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                className: "flex items-center space-x-2",
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_checkbox.Checkbox, {
                                        checked: effectiveConfig.hints || false,
                                        onCheckedChange: (checked)=>handleOverrideChange('hints', checked)
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_label.Label, {
                                        children: "Enable Hints"
                                    })
                                ]
                            })
                        ]
                    })
                ]
            }),
            renderPreview(),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: "flex justify-between",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                        variant: "outline",
                        onClick: onBack,
                        children: "Back"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                        onClick: onNext,
                        children: "Next"
                    })
                ]
            })
        ]
    });
}

//# sourceMappingURL=data:application/json;base64,