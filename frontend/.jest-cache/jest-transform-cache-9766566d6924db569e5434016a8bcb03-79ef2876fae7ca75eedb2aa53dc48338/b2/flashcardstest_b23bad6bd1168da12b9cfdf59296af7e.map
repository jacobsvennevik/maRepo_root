{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/tests/api-integration/flashcards.test.ts"],"sourcesContent":["/**\n * API Integration Tests for Flashcards\n * These tests will identify and help fix API endpoint issues\n */\n\nimport { axiosApi, axiosGeneration } from '@/lib/axios';\njest.setTimeout(30000);\nimport { joinUrl } from '../utils/url';\n\n// Mock console.error to capture API errors\nconst originalConsoleError = console.error;\nlet apiErrors: any[] = [];\n\nbeforeEach(() => {\n  apiErrors = [];\n  console.error = jest.fn((...args: any[]) => {\n    const first = args[0];\n    const isInterestingString = typeof first === 'string' && (first.includes('API error') || first.includes('Server error'));\n    const hasAxiosFields = args.some((a: any) => a && typeof a === 'object' && (a.url || a.fullURL || a.method));\n    if (isInterestingString || hasAxiosFields) {\n      apiErrors.push(args);\n    }\n    return originalConsoleError(...args);\n  });\n});\n\nafterEach(() => {\n  console.error = originalConsoleError;\n});\n\ndescribe('Flashcard API Integration Tests', () => {\n  const testProjectId = 'test-project-123';\n  \n  describe('Flashcard Sets API', () => {\n    it('should test flashcard sets endpoint URL construction', async () => {\n      // Test the endpoint that was failing with double slashes\n      const endpoint = `projects/${testProjectId}/flashcard-sets/`;\n      \n      const fullURL = joinUrl((axiosApi.defaults as any).baseURL, endpoint);\n      expect(fullURL).toHaveNoDoubleSlash();\n      \n      try {\n        const response = await axiosApi.get(endpoint);\n        console.log('âœ… Success response:', response.status);\n      } catch (error: any) {\n        const errFull = joinUrl(error.config?.baseURL || '', error.config?.url || '');\n        expect(errFull).toHaveNoDoubleSlash();\n        const msg = String(error?.message || '');\n        expect(msg.toLowerCase()).toContain('network');\n      }\n      \n      expect(fullURL).toHaveNoDoubleSlash();\n    });\n\n    it('should test individual flashcard set retrieval', async () => {\n      const setId = 'test-set-456';\n      const endpoint = `projects/${testProjectId}/flashcard-sets/${setId}/`;\n      \n      const base = (axiosGeneration.defaults as any).baseURL;\n      const full = joinUrl(base, endpoint);\n      expect(full).toHaveNoDoubleSlash();\n      \n      try {\n        await axiosGeneration.get(endpoint);\n      } catch (error: any) {\n        const errFull = joinUrl(error.config?.baseURL || '', error.config?.url || '');\n        expect(errFull).toHaveNoDoubleSlash();\n        const msg = String(error?.message || '');\n        expect(msg.toLowerCase()).toContain('network');\n      }\n    });\n\n    it('should test flashcard creation endpoint', async () => {\n      const endpoint = `projects/${testProjectId}/flashcard-sets/`;\n      const testData = {\n        name: 'Test Flashcard Set',\n        description: 'A test set for API validation'\n      };\n      \n      const full = joinUrl((axiosApi.defaults as any).baseURL, endpoint);\n      expect(full).toHaveNoDoubleSlash();\n      \n      try {\n        await axiosApi.post(endpoint, testData);\n      } catch (error: any) {\n        const errFull = joinUrl(error.config?.baseURL || '', error.config?.url || '');\n        expect(errFull).toHaveNoDoubleSlash();\n        if (error.config?.method) {\n          expect(error.config.method).toBe('post');\n        }\n      }\n    });\n\n    it('should test flashcards due endpoint', async () => {\n      const endpoint = `projects/${testProjectId}/flashcards/due/?limit=10`;\n      \n      const full = joinUrl((axiosApi.defaults as any).baseURL, endpoint);\n      expect(full).toHaveNoDoubleSlash();\n      \n      try {\n        await axiosApi.get(endpoint);\n      } catch (error: any) {\n        const errFull = joinUrl(error.config?.baseURL || '', error.config?.url || '');\n        expect(errFull).toHaveNoDoubleSlash();\n        if (errFull) {\n          expect(errFull).toContain('limit=10');\n        }\n      }\n    });\n  });\n\n  describe('Individual Flashcard Operations', () => {\n    it('should test flashcard deletion endpoint', async () => {\n      const cardId = 'test-card-789';\n      const endpoint = `flashcards/${cardId}/`;\n      \n      const full = joinUrl((axiosApi.defaults as any).baseURL, endpoint);\n      expect(full).toHaveNoDoubleSlash();\n      \n      try {\n        await axiosApi.delete(endpoint);\n      } catch (error: any) {\n        if (error.config?.method) {\n          expect(error.config.method).toBe('delete');\n        }\n        if (error.config?.url) {\n          expect(error.config.url).toBe(endpoint);\n        }\n      }\n    });\n\n    it('should test flashcard review endpoint', async () => {\n      const cardId = 'test-card-789';\n      const endpoint = `flashcards/${cardId}/review/`;\n      const reviewData = { \n        difficulty: 'easy', \n        response_time: 5000 \n      };\n      \n      const full = joinUrl((axiosApi.defaults as any).baseURL, endpoint);\n      expect(full).toHaveNoDoubleSlash();\n      \n      try {\n        await axiosApi.post(endpoint, reviewData);\n      } catch (error: any) {\n        if (error.config?.method) {\n          expect(error.config.method).toBe('post');\n        }\n        if (error.config?.url) {\n          expect(error.config.url).toBe(endpoint);\n        }\n      }\n    });\n  });\n\n  describe('Error Pattern Detection', () => {\n    it('should identify common API error patterns', () => {\n      // Analyze error patterns\n      const doubleSlashErrors = apiErrors.filter(err => \n        err.some((arg: any) => \n          typeof arg === 'object' && \n          arg.url?.includes('//')\n        )\n      );\n      \n      const networkErrors = apiErrors.filter(err =>\n        err.some((arg: any) => \n          typeof arg === 'string' && \n          arg.includes('Network error')\n        )\n      );\n      \n      // In test environment, we expect network errors but no URL construction errors\n      expect(doubleSlashErrors.length).toBe(0);\n    });\n  });\n\n  describe('URL Construction Validation', () => {\n    it('should validate all flashcard endpoint URLs', () => {\n      const testEndpoints = [\n        `projects/${testProjectId}/flashcard-sets/`,\n        `projects/${testProjectId}/flashcard-sets/123/`,\n        `projects/${testProjectId}/flashcards/due/`,\n        `flashcards/456/`,\n        `flashcards/456/review/`,\n      ];\n      \n      testEndpoints.forEach(endpoint => {\n        // Check for leading slash (should not have one when using axiosApi)\n        expect(endpoint.startsWith('/')).toBe(false);\n        \n        // Check for double slashes within the endpoint\n        expect(endpoint.includes('//')).toBe(false);\n        \n        const fullURL = joinUrl((axiosApi.defaults as any).baseURL, endpoint);\n        // Verify no double slashes in full URL\n        expect(fullURL).toHaveNoDoubleSlash();\n      });\n    });\n  });\n});\n"],"names":["jest","setTimeout","originalConsoleError","console","error","apiErrors","beforeEach","fn","args","first","isInterestingString","includes","hasAxiosFields","some","a","url","fullURL","method","push","afterEach","describe","testProjectId","it","endpoint","joinUrl","axiosApi","defaults","baseURL","expect","toHaveNoDoubleSlash","response","get","log","status","errFull","config","msg","String","message","toLowerCase","toContain","setId","base","axiosGeneration","full","testData","name","description","post","toBe","cardId","delete","reviewData","difficulty","response_time","doubleSlashErrors","filter","err","arg","networkErrors","length","testEndpoints","forEach","startsWith"],"mappings":"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"}