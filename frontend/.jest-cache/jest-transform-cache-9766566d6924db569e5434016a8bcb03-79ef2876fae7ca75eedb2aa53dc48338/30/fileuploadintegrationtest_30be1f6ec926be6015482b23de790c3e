7423edaf1805df2d579343e4d4b7da5d
/**
 * Test-Driven Development: Frontend File Upload Integration Tests
 * 
 * These tests will initially FAIL (RED phase) and guide the implementation
 * of proper file upload and project creation functionality in the frontend.
 * 
 * Test Mode Considerations:
 * - Tests work with both real and mock data
 * - AI calls are mocked via MOCK_REGISTRY
 * - File operations and database operations are REAL
 * - Only AI/LLM calls are mocked as per TEST_MODE_EXPLANATION.md
 */ "use strict";
// Mock the API service
jest.mock('../../services/api', ()=>({
        createProject: mockProjects.create,
        uploadFileWithProgress: mockProjects.uploadFile,
        getProjects: mockProjects.getProjects
    }));
// Mock dependencies
jest.mock('next/navigation', ()=>({
        useRouter: ()=>({
                push: jest.fn(),
                back: jest.fn(),
                forward: jest.fn(),
                refresh: jest.fn(),
                replace: jest.fn()
            }),
        useParams: ()=>({
                projectId: 'test-project-123'
            })
    }));
jest.mock('next/dynamic', ()=>()=>{
        const DynamicComponent = ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: "Dynamic Component"
            });
        return DynamicComponent;
    });
// Mock API services
jest.mock('../../services/api', ()=>({
        createProject: jest.fn(),
        uploadFileWithProgress: jest.fn(),
        APIError: jest.fn().mockImplementation((message, status)=>{
            const error = new Error(message);
            error.status = status;
            return error;
        })
    }));
// Mock axiosApi for FileStorage component
jest.mock('@/lib/axios-api', ()=>({
        axiosApi: {
            get: jest.fn(),
            post: jest.fn()
        }
    }));
// Mock Next.js navigation
jest.mock('next/navigation', ()=>({
        useParams: jest.fn(()=>({
                projectId: 'test-project-123'
            })),
        useRouter: jest.fn(()=>({
                push: jest.fn(),
                replace: jest.fn(),
                back: jest.fn(),
                forward: jest.fn(),
                refresh: jest.fn(),
                prefetch: jest.fn()
            }))
    }));
// Mock file upload component
jest.mock('@/components/ui/file-upload', ()=>({
        FileUpload: ({ onUpload, onRemove, onError, error, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                "data-testid": "file-upload",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                        type: "file",
                        "data-testid": "file-input",
                        onChange: (e)=>{
                            if (e.target.files && e.target.files.length > 0) {
                                // Call onUpload with the files instead of onFileSelect
                                onUpload && onUpload(Array.from(e.target.files));
                            }
                        },
                        ...props
                    }),
                    error && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        "data-testid": "error-message",
                        children: error
                    })
                ]
            })
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
require("@testing-library/jest-dom");
const _testutils = require("../../../../test-utils");
const _sharedsetup = require("../../../../test-utils/setup/shared-setup");
const _api = require("../../services/api");
const _axiosapi = require("../../../../lib/axios-api");
const _fileuploadstep = require("../steps/file-upload-step");
const _filestorage = /*#__PURE__*/ _interop_require_default(require("../files/file-storage"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Setup test environment
const testEnv = (0, _sharedsetup.setupFullTestEnvironment)({
    timeout: 10000,
    includeAPI: true,
    includeStorage: true,
    includeNavigation: true
});
const { apiMocks } = _testutils.standardMocks;
// Create project-specific mocks
const mockProjects = {
    create: jest.fn(),
    uploadFile: jest.fn(),
    getProjects: jest.fn()
};
describe('File Upload Integration Tests', ()=>{
    const mockOnUploadComplete = jest.fn();
    beforeEach(()=>{
        jest.clearAllMocks();
        mockOnUploadComplete.mockClear();
        // Set test mode environment variables
        process.env.NODE_ENV = 'development';
        process.env.NEXT_PUBLIC_TEST_MODE = 'true';
    });
    describe('File Upload Step - Project Creation', ()=>{
        it('should create project and link files in test mode', async ()=>{
            // Mock API responses
            const mockProject = {
                id: 'test-project-123',
                name: 'Test Project',
                project_type: 'school',
                course_name: 'Test Course'
            };
            const mockUploadResponse = {
                success: true,
                file_id: 'file-123',
                filename: 'test.pdf'
            };
            // Setup mocks
            _api.createProject.mockResolvedValue(mockProject);
            _api.uploadFileWithProgress.mockResolvedValue(mockUploadResponse);
            // Render component
            (0, _sharedsetup.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_fileuploadstep.FileUploadStep, {
                onUploadComplete: mockOnUploadComplete
            }));
            // Check that the component renders correctly
            expect(_react1.screen.getByTestId('file-input')).toBeInTheDocument();
            // In test mode, the component should automatically create a project
            // This happens in the useEffect when isTestMode() returns true
            await (0, _react1.waitFor)(()=>{
                expect(_api.createProject).toHaveBeenCalledWith(expect.objectContaining({
                    name: 'Test Project',
                    project_type: 'school',
                    course_name: 'Test Course',
                    is_draft: true
                }));
            });
            // Should call onUploadComplete with the project ID
            await (0, _react1.waitFor)(()=>{
                expect(mockOnUploadComplete).toHaveBeenCalledWith('test-project-123');
            });
        });
        it('should handle file upload errors gracefully', async ()=>{
            // Mock API error
            _api.createProject.mockRejectedValue(new Error('API Error'));
            // Render component
            (0, _sharedsetup.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_fileuploadstep.FileUploadStep, {
                onUploadComplete: mockOnUploadComplete
            }));
            // Simulate file upload
            const file = new File([
                'test content'
            ], 'test.pdf', {
                type: 'application/pdf'
            });
            const fileInput = _react1.screen.getByTestId('file-input');
            _react1.fireEvent.change(fileInput, {
                target: {
                    files: [
                        file
                    ]
                }
            });
            // Wait for error handling
            await (0, _react1.waitFor)(()=>{
                expect(_api.createProject).toHaveBeenCalled();
                expect(mockOnUploadComplete).not.toHaveBeenCalled();
            });
            // Should show error message
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId('error-message')).toBeInTheDocument();
            });
        });
        it('should work with test mode enabled', async ()=>{
            // Mock test mode environment
            const originalEnv = process.env.NEXT_PUBLIC_TEST_MODE;
            process.env.NEXT_PUBLIC_TEST_MODE = 'true';
            const mockProject = {
                id: 'test-project-123',
                name: 'Test Project'
            };
            mockProjects.create.mockResolvedValue(mockProject);
            // Render component
            (0, _sharedsetup.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_fileuploadstep.FileUploadStep, {
                onUploadComplete: mockOnUploadComplete
            }));
            // In test mode, should automatically create project
            await (0, _react1.waitFor)(()=>{
                expect(_api.createProject).toHaveBeenCalledWith(expect.objectContaining({
                    name: 'Test Project',
                    project_type: 'school',
                    course_name: 'Test Course',
                    is_draft: true
                }));
                expect(mockOnUploadComplete).toHaveBeenCalledWith('test-project-123');
            });
            // Restore environment
            process.env.NEXT_PUBLIC_TEST_MODE = originalEnv;
        });
    });
    describe('File Storage Component - File Display', ()=>{
        it('should display uploaded files in Files section', async ()=>{
            // Mock API responses
            const mockProject = {
                id: 'test-project-123',
                name: 'Test Project',
                uploaded_files: [
                    {
                        id: 'file-1',
                        original_name: 'test.pdf',
                        file: '/uploads/test.pdf',
                        file_size: 1024,
                        uploaded_at: '2024-01-01T00:00:00Z',
                        processing_status: 'completed'
                    },
                    {
                        id: 'file-2',
                        original_name: 'document.docx',
                        file: '/uploads/document.docx',
                        file_size: 2048,
                        uploaded_at: '2024-01-02T00:00:00Z',
                        processing_status: 'pending'
                    }
                ]
            };
            // Mock API calls
            _axiosapi.axiosApi.get.mockResolvedValue({
                data: mockProject
            });
            // Render component
            (0, _sharedsetup.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_filestorage.default, {}));
            // Wait for files to load
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getAllByText('test.pdf')).toHaveLength(2); // Header and file list
                expect(_react1.screen.getAllByText('document.docx')).toHaveLength(2); // Header and file list
            });
            // Verify file details
            expect(_react1.screen.getAllByText('1 KB')).toHaveLength(2); // Header and file list
            expect(_react1.screen.getAllByText('2 KB')).toHaveLength(2); // Header and file list
        });
        it('should handle empty file list', async ()=>{
            // Mock empty project
            const mockProject = {
                id: 'test-project-123',
                name: 'Test Project',
                uploaded_files: []
            };
            _axiosapi.axiosApi.get.mockResolvedValue({
                data: mockProject
            });
            // Render component
            (0, _sharedsetup.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_filestorage.default, {}));
            // Wait for component to load
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText(/no files/i)).toBeInTheDocument();
            });
        });
        it('should handle file upload errors', async ()=>{
            // Mock API error
            _axiosapi.axiosApi.get.mockRejectedValue(new Error('API Error'));
            // Render component
            (0, _sharedsetup.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_filestorage.default, {}));
            // Wait for error handling
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getAllByText('Failed to load files')).toHaveLength(2); // Header and description
            });
        });
        it('should allow file upload to existing project', async ()=>{
            // Mock project with existing files
            const mockProject = {
                id: 'test-project-123',
                name: 'Test Project',
                uploaded_files: [
                    {
                        id: 'file-1',
                        original_name: 'existing.pdf',
                        file: '/uploads/existing.pdf',
                        file_size: 1024,
                        uploaded_at: '2024-01-01T00:00:00Z',
                        processing_status: 'completed'
                    }
                ]
            };
            const mockUploadResponse = {
                success: true,
                file_id: 'file-2',
                filename: 'new.pdf'
            };
            // Setup mocks
            _axiosapi.axiosApi.get.mockResolvedValue({
                data: mockProject
            });
            _api.uploadFileWithProgress.mockResolvedValue(mockUploadResponse);
            // Render component
            (0, _sharedsetup.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_filestorage.default, {}));
            // Wait for existing files to load
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText('existing.pdf')).toBeInTheDocument();
            });
            // Simulate new file upload
            const file = new File([
                'new content'
            ], 'new.pdf', {
                type: 'application/pdf'
            });
            const fileInput = _react1.screen.getByTestId('file-input');
            _react1.fireEvent.change(fileInput, {
                target: {
                    files: [
                        file
                    ]
                }
            });
            // Wait for upload to complete
            await (0, _react1.waitFor)(()=>{
                expect(mockProjects.uploadFile).toHaveBeenCalledWith('test-project-123', file);
            });
        });
    });
    describe('Complete Upload to Display Flow', ()=>{
        it('should complete full flow from upload to display', async ()=>{
            // Mock complete flow
            const mockProject = {
                id: 'test-project-123',
                name: 'Test Project',
                project_type: 'school',
                course_name: 'Test Course'
            };
            const mockUploadResponse = {
                success: true,
                file_id: 'file-123',
                filename: 'test.pdf'
            };
            const mockProjectWithFiles = {
                ...mockProject,
                uploaded_files: [
                    {
                        id: 'file-123',
                        original_name: 'test.pdf',
                        file_size: 1024,
                        uploaded_at: '2024-01-01T00:00:00Z',
                        processing_status: 'completed'
                    }
                ]
            };
            // Setup mocks
            mockProjects.create.mockResolvedValue(mockProject);
            mockProjects.uploadFile.mockResolvedValue(mockUploadResponse);
            mockProjects.getProjects.mockResolvedValue(mockProjectWithFiles);
            // Step 1: Upload file and create project
            (0, _sharedsetup.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_fileuploadstep.FileUploadStep, {
                onUploadComplete: mockOnUploadComplete
            }));
            const file = new File([
                'test content'
            ], 'test.pdf', {
                type: 'application/pdf'
            });
            const fileInput = _react1.screen.getByTestId('file-input');
            _react1.fireEvent.change(fileInput, {
                target: {
                    files: [
                        file
                    ]
                }
            });
            await (0, _react1.waitFor)(()=>{
                expect(mockOnUploadComplete).toHaveBeenCalledWith('test-project-123');
            });
            // Step 2: Navigate to Files section and verify display
            (0, _sharedsetup.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_filestorage.default, {}));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText('test.pdf')).toBeInTheDocument();
                expect(_react1.screen.getByText('1.0 KB')).toBeInTheDocument();
            });
        });
        it('should handle test mode with mock data', async ()=>{
            // Mock test mode environment
            const originalEnv = process.env.NEXT_PUBLIC_TEST_MODE;
            process.env.NEXT_PUBLIC_TEST_MODE = 'true';
            const mockProject = {
                id: 'test-project-123',
                name: 'Test Project'
            };
            const mockProjectWithFiles = {
                ...mockProject,
                uploaded_files: [
                    {
                        id: 'file-123',
                        original_name: 'mock.pdf',
                        file_size: 1024,
                        uploaded_at: '2024-01-01T00:00:00Z',
                        processing_status: 'completed'
                    }
                ]
            };
            // Setup mocks
            mockProjects.create.mockResolvedValue(mockProject);
            mockProjects.getProjects.mockResolvedValue(mockProjectWithFiles);
            // Test upload step in test mode
            (0, _sharedsetup.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_fileuploadstep.FileUploadStep, {
                onUploadComplete: mockOnUploadComplete
            }));
            await (0, _react1.waitFor)(()=>{
                expect(mockOnUploadComplete).toHaveBeenCalledWith('test-project-123');
            });
            // Test file display
            (0, _sharedsetup.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_filestorage.default, {}));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText('mock.pdf')).toBeInTheDocument();
            });
            // Restore environment
            process.env.NEXT_PUBLIC_TEST_MODE = originalEnv;
        });
    });
    describe('Error Handling and Edge Cases', ()=>{
        it('should handle network errors gracefully', async ()=>{
            // Mock network error
            mockProjects.create.mockRejectedValue(new Error('Network Error'));
            (0, _sharedsetup.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_fileuploadstep.FileUploadStep, {
                onUploadComplete: mockOnUploadComplete
            }));
            const file = new File([
                'test content'
            ], 'test.pdf', {
                type: 'application/pdf'
            });
            const fileInput = _react1.screen.getByTestId('file-input');
            _react1.fireEvent.change(fileInput, {
                target: {
                    files: [
                        file
                    ]
                }
            });
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText(/network error/i)).toBeInTheDocument();
            });
        });
        it('should handle invalid file types', async ()=>{
            (0, _sharedsetup.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_fileuploadstep.FileUploadStep, {
                onUploadComplete: mockOnUploadComplete
            }));
            // Try to upload invalid file type
            const file = new File([
                'test content'
            ], 'test.exe', {
                type: 'application/exe'
            });
            const fileInput = _react1.screen.getByTestId('file-input');
            _react1.fireEvent.change(fileInput, {
                target: {
                    files: [
                        file
                    ]
                }
            });
            // Should show validation error
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText(/invalid file type/i)).toBeInTheDocument();
            });
        });
        it('should handle large file uploads', async ()=>{
            const mockProject = {
                id: 'test-project-123',
                name: 'Test Project'
            };
            mockProjects.create.mockResolvedValue(mockProject);
            (0, _sharedsetup.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_fileuploadstep.FileUploadStep, {
                onUploadComplete: mockOnUploadComplete
            }));
            // Create large file (simulate)
            const largeFile = new File([
                'x'.repeat(10 * 1024 * 1024)
            ], 'large.pdf', {
                type: 'application/pdf'
            });
            const fileInput = _react1.screen.getByTestId('file-input');
            _react1.fireEvent.change(fileInput, {
                target: {
                    files: [
                        largeFile
                    ]
                }
            });
            // Should handle large file upload
            await (0, _react1.waitFor)(()=>{
                expect(_api.createProject).toHaveBeenCalled();
                expect(_api.uploadFileWithProgress).toHaveBeenCalledWith('test-project-123', largeFile, expect.any(Function));
            });
        });
    });
});

//# sourceMappingURL=data:application/json;base64,