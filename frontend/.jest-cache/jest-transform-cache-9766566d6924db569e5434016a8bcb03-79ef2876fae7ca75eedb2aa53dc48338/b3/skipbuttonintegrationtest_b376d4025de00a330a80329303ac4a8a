a4db6a754f0d3906fe016a6e5eb0c949
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
const _skipbutton = require("../shared/skip-button");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
describe('Skip Button Integration Tests', ()=>{
    describe('Skip Button Component Integration', ()=>{
        it('should render with custom text and handle click', ()=>{
            const mockOnSkip = jest.fn();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_skipbutton.SkipButton, {
                onSkip: mockOnSkip,
                text: "Skip - I don't have a syllabus"
            }));
            const skipButton = _react1.screen.getByTestId('skip-button');
            expect(skipButton).toBeInTheDocument();
            expect(skipButton).toHaveTextContent("Skip - I don't have a syllabus");
            _react1.fireEvent.click(skipButton);
            expect(mockOnSkip).toHaveBeenCalledTimes(1);
        });
        it('should be disabled when disabled prop is true', ()=>{
            const mockOnSkip = jest.fn();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_skipbutton.SkipButton, {
                onSkip: mockOnSkip,
                text: "Skip",
                disabled: true
            }));
            const skipButton = _react1.screen.getByTestId('skip-button');
            expect(skipButton).toBeDisabled();
            _react1.fireEvent.click(skipButton);
            expect(mockOnSkip).not.toHaveBeenCalled();
        });
        it('should have red styling classes', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_skipbutton.SkipButton, {
                onSkip: jest.fn(),
                text: "Skip"
            }));
            const skipButton = _react1.screen.getByTestId('skip-button');
            expect(skipButton).toHaveClass('text-red-600');
            expect(skipButton).toHaveClass('border-red-200');
        });
        it('should use default text when not provided', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_skipbutton.SkipButton, {
                onSkip: jest.fn()
            }));
            const skipButton = _react1.screen.getByTestId('skip-button');
            expect(skipButton).toHaveTextContent('Skip');
        });
        it('should accept custom className', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_skipbutton.SkipButton, {
                onSkip: jest.fn(),
                text: "Skip",
                className: "custom-class"
            }));
            const skipButton = _react1.screen.getByTestId('skip-button');
            expect(skipButton).toHaveClass('custom-class');
        });
    });
    describe('Skip Button in Navigation Context', ()=>{
        it('should render correctly in a navigation layout', ()=>{
            const mockOnSkip = jest.fn();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: "flex justify-between pt-4",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                        className: "px-4 py-2 text-sm border border-gray-300 rounded-lg",
                        children: "Previous"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "flex gap-2",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_skipbutton.SkipButton, {
                                onSkip: mockOnSkip,
                                text: "Skip - I don't have materials"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                                className: "px-4 py-2 text-sm bg-blue-600 text-white rounded-lg",
                                children: "Next"
                            })
                        ]
                    })
                ]
            }));
            const skipButton = _react1.screen.getByTestId('skip-button');
            const nextButton = _react1.screen.getByText('Next');
            expect(skipButton).toBeInTheDocument();
            expect(nextButton).toBeInTheDocument();
            expect(skipButton).toHaveTextContent("Skip - I don't have materials");
        });
    });
    describe('Skip Button Accessibility', ()=>{
        it('should be keyboard accessible', async ()=>{
            const mockOnSkip = jest.fn();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_skipbutton.SkipButton, {
                onSkip: mockOnSkip,
                text: "Skip"
            }));
            const skipButton = _react1.screen.getByTestId('skip-button');
            skipButton.focus();
            expect(skipButton).toHaveFocus();
            await _userevent.default.keyboard('{Enter}');
            expect(mockOnSkip).toHaveBeenCalledTimes(1);
        });
        it('should have proper ARIA attributes when disabled', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_skipbutton.SkipButton, {
                onSkip: jest.fn(),
                text: "Skip",
                disabled: true
            }));
            const skipButton = _react1.screen.getByTestId('skip-button');
            expect(skipButton).toHaveAttribute('disabled');
        });
    });
    describe('Skip Button Styling Variations', ()=>{
        it('should handle long text gracefully', ()=>{
            const longText = "Skip - I don't have any course materials to upload at this time because I haven't received them yet";
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_skipbutton.SkipButton, {
                onSkip: jest.fn(),
                text: longText
            }));
            const skipButton = _react1.screen.getByTestId('skip-button');
            expect(skipButton).toHaveTextContent(longText);
            expect(skipButton).toBeVisible();
        });
        it('should maintain styling with different text lengths', ()=>{
            const { rerender } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_skipbutton.SkipButton, {
                onSkip: jest.fn(),
                text: "Skip"
            }));
            let skipButton = _react1.screen.getByTestId('skip-button');
            expect(skipButton).toHaveClass('text-red-600');
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_skipbutton.SkipButton, {
                onSkip: jest.fn(),
                text: "Skip - Very long text that might wrap"
            }));
            skipButton = _react1.screen.getByTestId('skip-button');
            expect(skipButton).toHaveClass('text-red-600');
        });
    });
});

//# sourceMappingURL=data:application/json;base64,