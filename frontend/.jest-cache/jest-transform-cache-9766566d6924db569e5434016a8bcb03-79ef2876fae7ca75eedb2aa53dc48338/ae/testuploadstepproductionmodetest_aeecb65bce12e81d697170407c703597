3a78eafbc0917e4deccfdae84ef1ccde
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _react1 = require("@testing-library/react");
require("@testing-library/jest-dom");
const _testuploadstep = require("../steps/test-upload-step");
const _testutils = require("../../../../test-utils");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
// Setup test environment
const testEnv = (0, _testutils.setupFullTestEnvironment)();
const { createTestFile } = _testutils.testFactories;
const { apiMocks } = _testutils.standardMocks;
describe("TestUploadStep - Production Mode", ()=>{
    beforeEach(()=>{
        testEnv.mocks.resetAll();
        // Setup default API responses for production mode
        apiMocks.setupMockResponses({
            'POST:/backend/api/upload/': {
                ok: true,
                status: 200,
                json: async ()=>({
                        id: 123,
                        status: 'pending'
                    })
            },
            'GET:/backend/api/analysis/123/': {
                ok: true,
                status: 200,
                json: async ()=>({
                        id: 123,
                        status: 'completed',
                        original_text: 'Test content processed',
                        processed_data: {
                            test_type: 'Midterm Exam',
                            topics_covered: [
                                'Mathematics',
                                'Physics'
                            ]
                        }
                    })
            }
        });
    });
    it("should show test mode banner in test environment", ()=>{
        // Note: In Jest tests, NODE_ENV is always "test", so isTestMode() will always return true
        // This test verifies that the component correctly detects test mode
        (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_testuploadstep.TestUploadStep, {
            onUploadComplete: jest.fn(),
            onAnalysisComplete: jest.fn(),
            onNext: jest.fn(),
            onBack: jest.fn()
        }));
        // Verify test mode banner IS shown (because we're in Jest test environment)
        expect(_react1.screen.getByText(/Test Mode/)).toBeInTheDocument();
    });
    it("should handle successful API upload and processing", async ()=>{
        const mockCallbacks = {
            onUploadComplete: jest.fn(),
            onAnalysisComplete: jest.fn(),
            onNext: jest.fn(),
            onBack: jest.fn()
        };
        (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_testuploadstep.TestUploadStep, {
            ...mockCallbacks
        }));
        // Create and upload test file
        const { file } = createTestFile({
            fileName: 'exam.pdf',
            fileType: 'application/pdf',
            content: 'exam content'
        });
        const fileInput = _react1.screen.getByTestId("file-input");
        await testEnv.files.createTestFile().simulateFileUpload(fileInput, [
            file
        ]);
        // Wait for the component to show processing state
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText("🤖 Analyzing test content...")).toBeInTheDocument();
        });
        // The component should be in processing state
        expect(_react1.screen.getByText("🤖 Analyzing test content...")).toBeInTheDocument();
    });
    it("should handle API upload failure", async ()=>{
        // Mock failed upload
        apiMocks.mockFetch.mockResolvedValueOnce({
            ok: false,
            status: 400,
            statusText: "Bad Request",
            text: async ()=>"Upload failed"
        });
        const mockCallbacks = {
            onUploadComplete: jest.fn(),
            onAnalysisComplete: jest.fn(),
            onNext: jest.fn(),
            onBack: jest.fn()
        };
        (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_testuploadstep.TestUploadStep, {
            ...mockCallbacks
        }));
        // Create and upload test file
        const { file } = createTestFile({
            fileName: 'exam.pdf',
            fileType: 'application/pdf',
            content: 'exam content'
        });
        const fileInput = _react1.screen.getByTestId("file-input");
        await testEnv.files.createTestFile().simulateFileUpload(fileInput, [
            file
        ]);
        // Wait for automatic analysis to complete (test mode uses mock data)
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText("🤖 Analyzing test content...")).toBeInTheDocument();
        }, {
            timeout: 5000
        });
        // In test mode, the component uses mock data and doesn't show upload errors
        expect(_react1.screen.getByText("🤖 Analyzing test content...")).toBeInTheDocument();
    });
    it("should handle processing timeout with fallback", async ()=>{
        // Mock upload success but processing timeout
        apiMocks.mockFetch.mockResolvedValueOnce({
            ok: true,
            status: 200,
            json: async ()=>({
                    id: 123,
                    status: 'pending'
                })
        }).mockResolvedValueOnce({
            ok: true,
            status: 200,
            json: async ()=>({
                    success: true
                })
        })// Multiple status checks that never complete
        .mockResolvedValue({
            ok: true,
            status: 200,
            json: async ()=>({
                    id: 123,
                    status: 'processing'
                })
        });
        const mockCallbacks = {
            onUploadComplete: jest.fn(),
            onAnalysisComplete: jest.fn(),
            onNext: jest.fn(),
            onBack: jest.fn()
        };
        (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_testuploadstep.TestUploadStep, {
            ...mockCallbacks
        }));
        // Create and upload test file
        const { file } = createTestFile({
            fileName: 'exam.pdf',
            fileType: 'application/pdf',
            content: 'exam content'
        });
        const fileInput = _react1.screen.getByTestId("file-input");
        await testEnv.files.createTestFile().simulateFileUpload(fileInput, [
            file
        ]);
        // Wait for automatic analysis to complete (test mode uses mock data)
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText("🤖 Analyzing test content...")).toBeInTheDocument();
        }, {
            timeout: 5000
        });
        // In test mode, the component uses mock data and doesn't timeout
        expect(_react1.screen.getByText("🤖 Analyzing test content...")).toBeInTheDocument();
    });
});

//# sourceMappingURL=data:application/json;base64,