{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/features/quiz/components/QuizWizard/steps/EnhancedBasicConfigStep.tsx"],"sourcesContent":["/**\n * Enhanced Basic Configuration Step\n * \n * Improved version of BasicConfigStep with preset support,\n * smart defaults, and better UX for quiz configuration.\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { FormProvider } from 'react-hook-form';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { \n  DIFFICULTY_OPTIONS,\n  QUIZ_TYPE_OPTIONS,\n} from '../../../constants';\nimport { \n  getSuggestedTimeLimit,\n} from '../../../utils';\nimport { \n  QUIZ_PRESETS, \n  PRESET_CATEGORIES,\n  getRecommendedPresets,\n  getPresetById,\n  type QuizPreset,\n} from '../../../constants/presets';\nimport { \n  generateMetadata,\n  type SourceItem,\n} from '@/components/wizard/shared/titleGeneration';\nimport { \n  Sparkles,\n  Clock,\n  Target,\n  Settings,\n  Zap,\n  BookOpen,\n  Award,\n  ChevronRight,\n  Info,\n} from 'lucide-react';\n\n// ============================================================================\n// Types and Interfaces\n// ============================================================================\n\ninterface EnhancedBasicConfigStepProps {\n  form: any;\n  suggestedDifficulty?: string;\n  sources?: SourceItem[];\n  onPresetSelected?: (preset: QuizPreset) => void;\n  showPresets?: boolean;\n}\n\n// ============================================================================\n// Main Component\n// ============================================================================\n\nexport const EnhancedBasicConfigStep: React.FC<EnhancedBasicConfigStepProps> = ({\n  form,\n  suggestedDifficulty,\n  sources = [],\n  onPresetSelected,\n  showPresets = true,\n}) => {\n  const { register, watch, setValue, formState } = form;\n  \n  const [selectedPreset, setSelectedPreset] = useState<QuizPreset | null>(null);\n  const [showAdvancedOptions, setShowAdvancedOptions] = useState(false);\n  const [aiSuggestions, setAiSuggestions] = useState<any>(null);\n  \n  const currentValues = watch();\n  \n  // ============================================================================\n  // Effects\n  // ============================================================================\n  \n  // Generate AI suggestions when sources change\n  useEffect(() => {\n    if (sources.length > 0) {\n      const suggestions = generateMetadata({\n        contentType: 'quiz',\n        sources,\n        quizType: currentValues.quiz_type,\n        difficulty: currentValues.difficulty,\n      });\n      setAiSuggestions(suggestions);\n      \n      // Auto-populate if fields are empty\n      if (!currentValues.topic && suggestions.topic) {\n        setValue('topic', suggestions.topic);\n      }\n      if (!currentValues.title && suggestions.title) {\n        setValue('title', suggestions.title);\n      }\n      if (!currentValues.description && suggestions.description) {\n        setValue('description', suggestions.description);\n      }\n    }\n  }, [sources, currentValues.quiz_type, currentValues.difficulty]);\n  \n  // ============================================================================\n  // Event Handlers\n  // ============================================================================\n  \n  const handlePresetSelect = (preset: QuizPreset) => {\n    setSelectedPreset(preset);\n    \n    // Apply preset configuration\n    setValue('quiz_type', preset.config.quiz_type);\n    setValue('difficulty', preset.config.difficulty);\n    setValue('max_questions', preset.config.max_questions);\n    setValue('time_limit_sec', preset.config.time_limit_sec);\n    setValue('delivery_mode', preset.config.delivery_mode);\n    \n    // Apply features\n    Object.entries(preset.config.features).forEach(([key, value]) => {\n      setValue(key, value);\n    });\n    \n    onPresetSelected?.(preset);\n  };\n  \n  const handleUseAISuggestion = (field: string, value: string) => {\n    setValue(field, value);\n  };\n  \n  // ============================================================================\n  // Render Helpers\n  // ============================================================================\n  \n  const renderPresetCard = (preset: QuizPreset, isRecommended = false) => {\n    const isSelected = selectedPreset?.id === preset.id;\n    \n    return (\n      <Card \n        key={preset.id}\n        className={`cursor-pointer transition-all ${\n          isSelected \n            ? 'border-blue-500 bg-blue-50 ring-2 ring-blue-200' \n            : 'border-slate-200 hover:border-slate-300'\n        }`}\n        onClick={() => handlePresetSelect(preset)}\n      >\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-start justify-between\">\n            <div className=\"flex items-start gap-3\">\n              <div className=\"text-2xl\">{preset.icon}</div>\n              <div className=\"flex-1\">\n                <div className=\"flex items-center gap-2\">\n                  <h4 className=\"font-medium text-slate-900\">{preset.name}</h4>\n                  {isRecommended && (\n                    <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800\">\n                      <Sparkles className=\"h-3 w-3 mr-1\" />\n                      Recommended\n                    </Badge>\n                  )}\n                </div>\n                <p className=\"text-sm text-slate-600 mt-1\">{preset.description}</p>\n                <div className=\"flex items-center gap-4 mt-2 text-xs text-slate-500\">\n                  <span className=\"flex items-center gap-1\">\n                    <Clock className=\"h-3 w-3\" />\n                    {preset.estimatedTime}\n                  </span>\n                  <span className=\"flex items-center gap-1\">\n                    <Target className=\"h-3 w-3\" />\n                    {preset.config.max_questions} questions\n                  </span>\n                  <Badge variant=\"outline\" className=\"text-xs\">\n                    {preset.config.difficulty}\n                  </Badge>\n                </div>\n              </div>\n            </div>\n            {isSelected && (\n              <div className=\"text-blue-600\">\n                <ChevronRight className=\"h-5 w-5\" />\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  };\n  \n  const renderPresetCategories = () => {\n    const recommendedPresets = getRecommendedPresets(3);\n    \n    return (\n      <div className=\"space-y-6\">\n        {/* Recommended Presets */}\n        <div>\n          <h4 className=\"font-medium text-slate-900 mb-3\">Recommended for You</h4>\n          <div className=\"grid gap-3\">\n            {recommendedPresets.map(preset => renderPresetCard(preset, true))}\n          </div>\n        </div>\n        \n        {/* Category-based Presets */}\n        {PRESET_CATEGORIES.map(category => (\n          <div key={category.id}>\n            <div className=\"flex items-center gap-2 mb-3\">\n              <span className=\"text-lg\">{category.icon}</span>\n              <h4 className=\"font-medium text-slate-900\">{category.name}</h4>\n            </div>\n            <p className=\"text-sm text-slate-600 mb-3\">{category.description}</p>\n            <div className=\"grid gap-3\">\n              {category.presets.slice(0, 2).map(preset => renderPresetCard(preset))}\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  };\n  \n  const renderAISuggestions = () => {\n    if (!aiSuggestions) return null;\n    \n    return (\n      <Card className=\"border-blue-200 bg-blue-50\">\n        <CardHeader className=\"pb-3\">\n          <CardTitle className=\"flex items-center gap-2 text-base\">\n            <Sparkles className=\"h-4 w-4 text-blue-600\" />\n            AI Suggestions\n            <Badge variant=\"secondary\" className=\"bg-blue-100 text-blue-800\">\n              {Math.round(aiSuggestions.confidence * 100)}% confident\n            </Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-3\">\n          {/* Title Suggestion */}\n          {aiSuggestions.title && aiSuggestions.title !== currentValues.title && (\n            <div className=\"flex items-center justify-between p-2 bg-white rounded border\">\n              <div>\n                <Label className=\"text-xs text-slate-500\">Suggested Title</Label>\n                <p className=\"text-sm font-medium\">{aiSuggestions.title}</p>\n              </div>\n              <Button \n                size=\"sm\" \n                variant=\"outline\"\n                onClick={() => handleUseAISuggestion('title', aiSuggestions.title)}\n              >\n                Use\n              </Button>\n            </div>\n          )}\n          \n          {/* Topic Suggestion */}\n          {aiSuggestions.topic && aiSuggestions.topic !== currentValues.topic && (\n            <div className=\"flex items-center justify-between p-2 bg-white rounded border\">\n              <div>\n                <Label className=\"text-xs text-slate-500\">Suggested Topic</Label>\n                <p className=\"text-sm font-medium\">{aiSuggestions.topic}</p>\n              </div>\n              <Button \n                size=\"sm\" \n                variant=\"outline\"\n                onClick={() => handleUseAISuggestion('topic', aiSuggestions.topic)}\n              >\n                Use\n              </Button>\n            </div>\n          )}\n          \n          {/* Keywords */}\n          {aiSuggestions.keywords?.length > 0 && (\n            <div>\n              <Label className=\"text-xs text-slate-500\">Key Concepts Found</Label>\n              <div className=\"flex flex-wrap gap-1 mt-1\">\n                {aiSuggestions.keywords.map((keyword: string, index: number) => (\n                  <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                    {keyword}\n                  </Badge>\n                ))}\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    );\n  };\n  \n  // ============================================================================\n  // Main Render\n  // ============================================================================\n  \n  return (\n    <FormProvider {...form}>\n      <div className=\"space-y-6\">\n        <div className=\"text-center space-y-2\">\n          <h2 className=\"text-xl font-semibold text-slate-900\">Configure Your Quiz</h2>\n          <p className=\"text-sm text-slate-600\">\n            Choose a preset for quick setup or customize your quiz configuration\n          </p>\n        </div>\n\n        {/* Preset Selection */}\n        {showPresets && (\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"font-medium text-slate-900\">Quick Setup Presets</h3>\n              <Button \n                variant=\"ghost\" \n                size=\"sm\"\n                onClick={() => setShowAdvancedOptions(!showAdvancedOptions)}\n              >\n                <Settings className=\"h-4 w-4 mr-2\" />\n                {showAdvancedOptions ? 'Hide' : 'Show'} Custom Options\n              </Button>\n            </div>\n            \n            {renderPresetCategories()}\n            \n            {selectedPreset && (\n              <Alert>\n                <Info className=\"h-4 w-4\" />\n                <AlertDescription>\n                  Using preset: <strong>{selectedPreset.name}</strong>. \n                  You can still modify individual settings below.\n                </AlertDescription>\n              </Alert>\n            )}\n          </div>\n        )}\n\n        {/* AI Suggestions */}\n        {aiSuggestions && renderAISuggestions()}\n\n        {/* Basic Configuration Form */}\n        <div className={`space-y-4 ${!showAdvancedOptions && selectedPreset ? 'opacity-75' : ''}`}>\n          <div className=\"grid grid-cols-1 gap-4\">\n            <div>\n              <Label htmlFor=\"title\">Quiz Title *</Label>\n              <Input \n                id=\"title\" \n                {...register('title')}\n                placeholder=\"e.g., Week 3 Knowledge Check\"\n              />\n              {formState.errors.title && (\n                <p className=\"text-sm text-red-600 mt-1\">{formState.errors.title.message}</p>\n              )}\n            </div>\n\n            <div>\n              <Label htmlFor=\"topic\">Topic/Subject *</Label>\n              <Input \n                id=\"topic\" \n                {...register('topic')}\n                placeholder=\"e.g., Machine Learning Fundamentals\"\n              />\n              {formState.errors.topic && (\n                <p className=\"text-sm text-red-600 mt-1\">{formState.errors.topic.message}</p>\n              )}\n              {suggestedDifficulty && (\n                <p className=\"text-sm text-blue-600 mt-1\">\n                  💡 Suggested difficulty: {suggestedDifficulty}\n                </p>\n              )}\n            </div>\n\n            <div>\n              <Label htmlFor=\"description\">Description</Label>\n              <Textarea \n                id=\"description\" \n                {...register('description')}\n                placeholder=\"Optional description of the quiz content...\"\n                rows={3}\n              />\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"quiz_type\">Quiz Type</Label>\n                <Select \n                  value={watch('quiz_type')} \n                  onValueChange={(value) => setValue('quiz_type', value)}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select quiz type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {QUIZ_TYPE_OPTIONS.map((option: any) => (\n                      <SelectItem key={option.value} value={option.value}>\n                        <div>\n                          <div className=\"font-medium\">{option.label}</div>\n                          <div className=\"text-xs text-slate-500\">{option.description}</div>\n                        </div>\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label htmlFor=\"difficulty\">Difficulty Level</Label>\n                <Select \n                  value={watch('difficulty')} \n                  onValueChange={(value) => setValue('difficulty', value)}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select difficulty\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {DIFFICULTY_OPTIONS.map((option: any) => (\n                      <SelectItem key={option.value} value={option.value}>\n                        <div>\n                          <div className=\"font-medium\">{option.label}</div>\n                          <div className=\"text-xs text-slate-500\">{option.description}</div>\n                        </div>\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"max_questions\">Number of Questions</Label>\n                <Input \n                  id=\"max_questions\" \n                  type=\"number\"\n                  {...register('max_questions', { valueAsNumber: true })}\n                  placeholder=\"10\"\n                  min={1}\n                  max={50}\n                />\n                {formState.errors.max_questions && (\n                  <p className=\"text-sm text-red-600 mt-1\">{formState.errors.max_questions.message}</p>\n                )}\n                {watch('max_questions') && (\n                  <p className=\"text-sm text-blue-600 mt-1\">\n                    💡 Suggested: {Math.round((getSuggestedTimeLimit(watch('max_questions') || 10, watch('difficulty') || 'INTERMEDIATE')) / 60)} minutes\n                  </p>\n                )}\n              </div>\n\n              <div>\n                <Label htmlFor=\"time_limit_sec\">Time Limit (minutes)</Label>\n                <Input \n                  id=\"time_limit_sec\" \n                  type=\"number\"\n                  {...register('time_limit_sec', { valueAsNumber: true })}\n                  placeholder=\"20\"\n                  min={1}\n                  max={120}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Selected Preset Summary */}\n        {selectedPreset && (\n          <Card className=\"border-green-200 bg-green-50\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-lg\">{selectedPreset.icon}</span>\n                <div>\n                  <h4 className=\"font-medium text-green-900\">\n                    {selectedPreset.name} Selected\n                  </h4>\n                  <p className=\"text-sm text-green-700\">\n                    {selectedPreset.description} • {selectedPreset.estimatedTime}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </FormProvider>\n  );\n};\n\nexport default EnhancedBasicConfigStep;\n\n"],"names":["EnhancedBasicConfigStep","form","suggestedDifficulty","sources","onPresetSelected","showPresets","register","watch","setValue","formState","selectedPreset","setSelectedPreset","useState","showAdvancedOptions","setShowAdvancedOptions","aiSuggestions","setAiSuggestions","currentValues","useEffect","length","suggestions","generateMetadata","contentType","quizType","quiz_type","difficulty","topic","title","description","handlePresetSelect","preset","config","max_questions","time_limit_sec","delivery_mode","Object","entries","features","forEach","key","value","handleUseAISuggestion","field","renderPresetCard","isRecommended","isSelected","id","Card","className","onClick","CardContent","div","icon","h4","name","Badge","variant","Sparkles","p","span","Clock","estimatedTime","Target","ChevronRight","renderPresetCategories","recommendedPresets","getRecommendedPresets","map","PRESET_CATEGORIES","category","presets","slice","renderAISuggestions","CardHeader","CardTitle","Math","round","confidence","Label","Button","size","keywords","keyword","index","FormProvider","h2","h3","Settings","Alert","Info","AlertDescription","strong","htmlFor","Input","placeholder","errors","message","Textarea","rows","Select","onValueChange","SelectTrigger","SelectValue","SelectContent","QUIZ_TYPE_OPTIONS","option","SelectItem","label","DIFFICULTY_OPTIONS","type","valueAsNumber","min","max","getSuggestedTimeLimit"],"mappings":"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"}