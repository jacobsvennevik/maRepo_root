{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/features/projects/components/__tests__/test-upload-step.production-mode.test.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { screen, waitFor } from \"@testing-library/react\";\nimport \"@testing-library/jest-dom\";\nimport { TestUploadStep } from \"../steps/test-upload-step\";\n\n// Import new centralized utilities\nimport {\n  renderWithProviders,\n  setupFullTestEnvironment,\n  testFactories,\n  standardMocks\n} from \"../../../../../src/test-utils\";\n\n// Setup test environment\nconst testEnv = setupFullTestEnvironment();\nconst { createTestFile } = testFactories;\nconst { apiMocks } = standardMocks;\n\ndescribe(\"TestUploadStep - Production Mode\", () => {\n  beforeEach(() => {\n    testEnv.mocks.resetAll();\n    \n    // Setup default API responses for production mode\n    apiMocks.setupMockResponses({\n      'POST:/backend/api/upload/': {\n        ok: true,\n        status: 200,\n        json: async () => ({ id: 123, status: 'pending' })\n      },\n      'GET:/backend/api/analysis/123/': {\n        ok: true,\n        status: 200,\n        json: async () => ({\n          id: 123,\n          status: 'completed',\n          original_text: 'Test content processed',\n          processed_data: {\n            test_type: 'Midterm Exam',\n            topics_covered: ['Mathematics', 'Physics'],\n          },\n        })\n      }\n    });\n  });\n\n  it(\"should show test mode banner in test environment\", () => {\n    // Note: In Jest tests, NODE_ENV is always \"test\", so isTestMode() will always return true\n    // This test verifies that the component correctly detects test mode\n    \n    renderWithProviders(\n      <TestUploadStep\n        onUploadComplete={jest.fn()}\n        onAnalysisComplete={jest.fn()}\n        onNext={jest.fn()}\n        onBack={jest.fn()}\n      />\n    );\n\n    // Verify test mode banner IS shown (because we're in Jest test environment)\n    expect(screen.getByText(/Test Mode/)).toBeInTheDocument();\n  });\n\n  it(\"should handle successful API upload and processing\", async () => {\n    const mockCallbacks = {\n      onUploadComplete: jest.fn(),\n      onAnalysisComplete: jest.fn(),\n      onNext: jest.fn(),\n      onBack: jest.fn()\n    };\n\n    renderWithProviders(<TestUploadStep {...mockCallbacks} />);\n\n    // Create and upload test file\n    const { file } = createTestFile({\n      fileName: 'exam.pdf',\n      fileType: 'application/pdf',\n      content: 'exam content'\n    });\n\n    const fileInput = screen.getByTestId(\"file-input\");\n    await testEnv.files.createTestFile().simulateFileUpload(fileInput, [file]);\n\n    // Wait for the component to show processing state\n    await waitFor(() => {\n      expect(screen.getByText(\"🤖 Analyzing test content...\")).toBeInTheDocument();\n    });\n\n    // The component should be in processing state\n    expect(screen.getByText(\"🤖 Analyzing test content...\")).toBeInTheDocument();\n  });\n\n  it(\"should handle API upload failure\", async () => {\n    // Mock failed upload\n    apiMocks.mockFetch.mockResolvedValueOnce({\n      ok: false,\n      status: 400,\n      statusText: \"Bad Request\",\n      text: async () => \"Upload failed\",\n    });\n\n    const mockCallbacks = {\n      onUploadComplete: jest.fn(),\n      onAnalysisComplete: jest.fn(),\n      onNext: jest.fn(),\n      onBack: jest.fn()\n    };\n\n    renderWithProviders(<TestUploadStep {...mockCallbacks} />);\n\n    // Create and upload test file\n    const { file } = createTestFile({\n      fileName: 'exam.pdf',\n      fileType: 'application/pdf',\n      content: 'exam content'\n    });\n\n    const fileInput = screen.getByTestId(\"file-input\");\n    await testEnv.files.createTestFile().simulateFileUpload(fileInput, [file]);\n\n    // Wait for automatic analysis to complete (test mode uses mock data)\n    await waitFor(\n      () => {\n        expect(screen.getByText(\"🤖 Analyzing test content...\")).toBeInTheDocument();\n      },\n      { timeout: 5000 }\n    );\n\n    // In test mode, the component uses mock data and doesn't show upload errors\n    expect(screen.getByText(\"🤖 Analyzing test content...\")).toBeInTheDocument();\n  });\n\n  it(\"should handle processing timeout with fallback\", async () => {\n    // Mock upload success but processing timeout\n    apiMocks.mockFetch\n      .mockResolvedValueOnce({\n        ok: true,\n        status: 200,\n        json: async () => ({ id: 123, status: 'pending' })\n      })\n      .mockResolvedValueOnce({\n        ok: true,\n        status: 200,\n        json: async () => ({ success: true })\n      })\n      // Multiple status checks that never complete\n      .mockResolvedValue({\n        ok: true,\n        status: 200,\n        json: async () => ({ id: 123, status: 'processing' })\n      });\n\n    const mockCallbacks = {\n      onUploadComplete: jest.fn(),\n      onAnalysisComplete: jest.fn(),\n      onNext: jest.fn(),\n      onBack: jest.fn()\n    };\n\n    renderWithProviders(<TestUploadStep {...mockCallbacks} />);\n\n    // Create and upload test file\n    const { file } = createTestFile({\n      fileName: 'exam.pdf',\n      fileType: 'application/pdf',\n      content: 'exam content'\n    });\n\n    const fileInput = screen.getByTestId(\"file-input\");\n    await testEnv.files.createTestFile().simulateFileUpload(fileInput, [file]);\n\n    // Wait for automatic analysis to complete (test mode uses mock data)\n    await waitFor(\n      () => {\n        expect(screen.getByText(\"🤖 Analyzing test content...\")).toBeInTheDocument();\n      },\n      { timeout: 5000 }\n    );\n\n    // In test mode, the component uses mock data and doesn't timeout\n    expect(screen.getByText(\"🤖 Analyzing test content...\")).toBeInTheDocument();\n  });\n});\n"],"names":["testEnv","setupFullTestEnvironment","createTestFile","testFactories","apiMocks","standardMocks","describe","beforeEach","mocks","resetAll","setupMockResponses","ok","status","json","id","original_text","processed_data","test_type","topics_covered","it","renderWithProviders","TestUploadStep","onUploadComplete","jest","fn","onAnalysisComplete","onNext","onBack","expect","screen","getByText","toBeInTheDocument","mockCallbacks","file","fileName","fileType","content","fileInput","getByTestId","files","simulateFileUpload","waitFor","mockFetch","mockResolvedValueOnce","statusText","text","timeout","success","mockResolvedValue"],"mappings":"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"}