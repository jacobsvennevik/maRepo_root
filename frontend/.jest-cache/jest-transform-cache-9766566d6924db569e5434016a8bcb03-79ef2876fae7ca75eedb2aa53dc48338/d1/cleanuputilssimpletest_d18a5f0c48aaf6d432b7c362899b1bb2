fcb06771c50d041a1257537b0ead5f87
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _cleanuputils = require("../cleanup-utils");
// Mock localStorage
const localStorageMock = {
    getItem: jest.fn(),
    setItem: jest.fn(),
    removeItem: jest.fn(),
    clear: jest.fn(),
    key: jest.fn(),
    length: 0
};
Object.defineProperty(window, "localStorage", {
    value: localStorageMock,
    writable: true
});
// Mock window.showToast
const mockShowToast = jest.fn();
Object.defineProperty(window, "showToast", {
    value: mockShowToast,
    writable: true
});
// Mock fetch
global.fetch = jest.fn();
describe("cleanup-utils (simplified)", ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
        mockShowToast.mockClear();
        localStorageMock.getItem.mockClear();
        localStorageMock.setItem.mockClear();
        localStorageMock.removeItem.mockClear();
        localStorageMock.clear.mockClear();
        localStorageMock.key.mockClear();
        // Reset global state
        window.__cleanupInProgress = false;
        window.__cleanupQueue = [];
        window.__uploads = [];
    });
    describe("registerUpload", ()=>{
        it("should register AbortController for cleanup", ()=>{
            const mockController = {
                abort: jest.fn()
            };
            (0, _cleanuputils.registerUpload)(mockController);
            expect(window.__uploads).toContain(mockController);
        });
        it("should initialize uploads array if not exists", ()=>{
            delete window.__uploads;
            const mockController = {
                abort: jest.fn()
            };
            (0, _cleanuputils.registerUpload)(mockController);
            expect(window.__uploads).toEqual([
                mockController
            ]);
        });
    });
    describe("cleanupLocalStorage", ()=>{
        it("should remove project creation localStorage keys", ()=>{
            // Mock localStorage to have some keys
            localStorageMock.key.mockReturnValueOnce("project-setup-guided-setup").mockReturnValueOnce("draft_123").mockReturnValueOnce("other-key").mockReturnValue(null);
            (0, _cleanuputils.cleanupLocalStorage)();
            expect(localStorageMock.removeItem).toHaveBeenCalledWith("project-setup-guided-setup");
            expect(localStorageMock.removeItem).toHaveBeenCalledWith("draft_123");
            expect(localStorageMock.removeItem).not.toHaveBeenCalledWith("other-key");
        });
        it("should handle localStorage errors gracefully", ()=>{
            localStorageMock.removeItem.mockImplementation(()=>{
                throw new Error("localStorage error");
            });
            // Should not throw
            expect(()=>(0, _cleanuputils.cleanupLocalStorage)()).not.toThrow();
        });
        it("should handle storage quota exceeded", ()=>{
            localStorageMock.removeItem.mockImplementation(()=>{
                throw new Error("QuotaExceededError");
            });
            (0, _cleanuputils.cleanupLocalStorage)();
            expect(mockShowToast).toHaveBeenCalledWith("Storage limit reached. Please clear some data and try again.", "error");
        });
    });
    describe("cleanupOnAbandon", ()=>{
        it("should abort uploads and cleanup immediately", async ()=>{
            const mockController1 = {
                abort: jest.fn()
            };
            const mockController2 = {
                abort: jest.fn()
            };
            window.__uploads = [
                mockController1,
                mockController2
            ];
            // Mock localStorage
            localStorageMock.key.mockReturnValue(null);
            await (0, _cleanuputils.cleanupOnAbandon)("123");
            expect(mockController1.abort).toHaveBeenCalled();
            expect(mockController2.abort).toHaveBeenCalled();
            expect(localStorageMock.removeItem).toHaveBeenCalledWith("draft_123");
        });
        it("should handle localStorage errors in cleanupOnAbandon", async ()=>{
            localStorageMock.removeItem.mockImplementation(()=>{
                throw new Error("localStorage error");
            });
            // Should not throw
            await expect((0, _cleanuputils.cleanupOnAbandon)("123")).resolves.not.toThrow();
        });
    });
    describe("state tracking", ()=>{
        it("should track cleanup progress state", ()=>{
            expect((0, _cleanuputils.isCleanupInProgress)()).toBe(false);
            window.__cleanupInProgress = true;
            expect((0, _cleanuputils.isCleanupInProgress)()).toBe(true);
        });
        it("should track cleanup queue length", ()=>{
            expect((0, _cleanuputils.getCleanupQueueLength)()).toBe(0);
            window.__cleanupQueue = [
                1,
                2,
                3
            ];
            expect((0, _cleanuputils.getCleanupQueueLength)()).toBe(3);
        });
    });
    describe("localStorage quota checking", ()=>{
        it("should handle localStorage access errors", ()=>{
            localStorageMock.key.mockImplementation(()=>{
                throw new Error("Access denied");
            });
            // Should not throw
            expect(()=>(0, _cleanuputils.cleanupLocalStorage)()).not.toThrow();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,