{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/features/projects/hooks/__tests__/useStepNavigation.test.ts"],"sourcesContent":["import { renderHook, act } from \"@testing-library/react\";\nimport { useStepNavigation } from \"../useStepNavigation\";\nimport { SETUP_STEPS } from \"../../services/steps\";\nimport { createMockProjectSetup } from \"../../../../../test-utils/test-helpers\";\n\ndescribe(\"useStepNavigation\", () => {\n  const mockSetup = createMockProjectSetup();\n  const onBack = jest.fn();\n  const setShowSummary = jest.fn();\n\n  it(\"initializes with first step\", () => {\n    const { result } = renderHook(() =>\n      useStepNavigation(mockSetup, onBack, setShowSummary),\n    );\n\n    expect(result.current.currentStepIndex).toBe(0);\n    expect(result.current.currentStep).toEqual(SETUP_STEPS[0]);\n    expect(result.current.isFirstStep).toBe(true);\n    expect(result.current.isLastStep).toBe(false);\n  });\n\n  it(\"skips extraction results step when no extracted data is provided\", () => {\n    const { result } = renderHook(\n      () => useStepNavigation(mockSetup, onBack, setShowSummary, null), // No extracted data\n    );\n\n    // Navigate to uploadSyllabus step (step index 3)\n    for (let i = 0; i < 3; i++) {\n      act(() => {\n        result.current.handleNext();\n      });\n    }\n\n    expect(result.current.currentStep.id).toBe(\"uploadSyllabus\");\n\n    // Navigate to next step - should skip extractionResults and go to courseContentUpload\n    act(() => {\n      result.current.handleNext();\n    });\n\n    expect(result.current.currentStep.id).toBe(\"courseContentUpload\");\n  });\n\n  it(\"shows extraction results step when extracted data is available\", () => {\n    const mockExtractedData = { courseName: \"Test Course\", topics: [] };\n    const { result } = renderHook(() =>\n      useStepNavigation(mockSetup, onBack, setShowSummary, mockExtractedData),\n    );\n\n    // Navigate to uploadSyllabus step (step index 3)\n    for (let i = 0; i < 3; i++) {\n      act(() => {\n        result.current.handleNext();\n      });\n    }\n\n    expect(result.current.currentStep.id).toBe(\"uploadSyllabus\");\n\n    // Navigate to next step - should show extractionResults\n    act(() => {\n      result.current.handleNext();\n    });\n\n    expect(result.current.currentStep.id).toBe(\"extractionResults\");\n  });\n\n  it(\"handles backward navigation correctly when extraction results is skipped\", () => {\n    const { result } = renderHook(\n      () => useStepNavigation(mockSetup, onBack, setShowSummary, null), // No extracted data\n    );\n\n    // Navigate to courseContentUpload (skipping extractionResults)\n    for (let i = 0; i < 4; i++) {\n      act(() => {\n        result.current.handleNext();\n      });\n    }\n\n    expect(result.current.currentStep.id).toBe(\"courseContentUpload\");\n\n    // Navigate back - should skip extractionResults and go to uploadSyllabus\n    act(() => {\n      result.current.handleBack();\n    });\n\n    expect(result.current.currentStep.id).toBe(\"uploadSyllabus\");\n  });\n\n  it(\"calculates correct progress when steps are skipped\", () => {\n    const { result } = renderHook(\n      () => useStepNavigation(mockSetup, onBack, setShowSummary, null), // No extracted data\n    );\n\n    const totalStepsWithoutExtraction = SETUP_STEPS.length - 1; // Minus extractionResults\n\n    // Navigate through a few steps\n    act(() => {\n      result.current.handleNext(); // step 1\n    });\n\n    const expectedProgress = (1 / (totalStepsWithoutExtraction - 1)) * 100;\n    expect(result.current.progress).toBe(expectedProgress);\n  });\n\n  it(\"shouldShowStep returns false for extractionResults when no data\", () => {\n    const { result } = renderHook(() =>\n      useStepNavigation(mockSetup, onBack, setShowSummary, null),\n    );\n\n    expect(result.current.shouldShowStep(\"extractionResults\")).toBe(false);\n    expect(result.current.shouldShowStep(\"uploadSyllabus\")).toBe(true);\n    expect(result.current.shouldShowStep(\"learningPreferences\")).toBe(true);\n  });\n\n  it(\"shouldShowStep returns true for extractionResults when data is available\", () => {\n    const mockExtractedData = { courseName: \"Test Course\", topics: [] };\n    const { result } = renderHook(() =>\n      useStepNavigation(mockSetup, onBack, setShowSummary, mockExtractedData),\n    );\n\n    expect(result.current.shouldShowStep(\"extractionResults\")).toBe(true);\n  });\n\n  it(\"navigates to next step correctly\", () => {\n    const { result } = renderHook(() =>\n      useStepNavigation(mockSetup, onBack, setShowSummary),\n    );\n\n    act(() => {\n      result.current.handleNext();\n    });\n\n    expect(result.current.currentStepIndex).toBe(1);\n    expect(result.current.currentStep).toEqual(SETUP_STEPS[1]);\n    expect(result.current.isFirstStep).toBe(false);\n  });\n\n  it(\"navigates to previous step correctly\", () => {\n    const { result } = renderHook(() =>\n      useStepNavigation(mockSetup, onBack, setShowSummary),\n    );\n\n    // Go to step 2\n    act(() => {\n      result.current.handleNext();\n    });\n\n    // Go back to step 1\n    act(() => {\n      result.current.handlePrevious();\n    });\n\n    expect(result.current.currentStepIndex).toBe(0);\n    expect(result.current.currentStep).toEqual(SETUP_STEPS[0]);\n    expect(result.current.isFirstStep).toBe(true);\n  });\n\n  it(\"identifies last step correctly\", () => {\n    const { result } = renderHook(() =>\n      useStepNavigation(mockSetup, onBack, setShowSummary),\n    );\n\n    // Navigate to last step - wrap each handleNext in its own act()\n    for (let i = 0; i < SETUP_STEPS.length - 1; i++) {\n      act(() => {\n        result.current.handleNext();\n      });\n    }\n\n    expect(result.current.currentStepIndex).toBe(SETUP_STEPS.length - 1);\n    expect(result.current.isLastStep).toBe(true);\n  });\n\n  it(\"does not go beyond last step\", () => {\n    const { result } = renderHook(() =>\n      useStepNavigation(mockSetup, onBack, setShowSummary),\n    );\n\n    // Navigate past last step - wrap each handleNext in its own act()\n    for (let i = 0; i < SETUP_STEPS.length + 5; i++) {\n      act(() => {\n        result.current.handleNext();\n      });\n    }\n\n    expect(result.current.currentStepIndex).toBe(SETUP_STEPS.length - 1);\n    expect(result.current.isLastStep).toBe(true);\n  });\n\n  it(\"does not go before first step\", () => {\n    const { result } = renderHook(() =>\n      useStepNavigation(mockSetup, onBack, setShowSummary),\n    );\n\n    // Try to go before first step\n    act(() => {\n      result.current.handlePrevious();\n      result.current.handlePrevious();\n      result.current.handlePrevious();\n    });\n\n    expect(result.current.currentStepIndex).toBe(0);\n    expect(result.current.isFirstStep).toBe(true);\n  });\n\n  it(\"calculates progress correctly\", () => {\n    const mockExtractedData = { courseName: \"Test Course\", topics: [] };\n    const { result } = renderHook(\n      () =>\n        useStepNavigation(mockSetup, onBack, setShowSummary, mockExtractedData), // With extracted data for normal flow\n    );\n\n    expect(result.current.progress).toBe(0);\n\n    act(() => {\n      result.current.handleNext();\n    });\n\n    const expectedProgress = (1 / (SETUP_STEPS.length - 1)) * 100;\n    expect(result.current.progress).toBe(expectedProgress);\n  });\n\n  it(\"validates step transitions for uploadSyllabus to extractionResults\", () => {\n    const mockExtractedData = { courseName: \"Test Course\", topics: [] };\n    const { result } = renderHook(\n      () =>\n        useStepNavigation(mockSetup, onBack, setShowSummary, mockExtractedData), // With extracted data\n    );\n\n    // Navigate to uploadSyllabus step (step index 3)\n    for (let i = 0; i < 3; i++) {\n      act(() => {\n        result.current.handleNext();\n      });\n    }\n\n    expect(result.current.currentStep.id).toBe(\"uploadSyllabus\");\n\n    // Navigate to next step (should be extractionResults when data is available)\n    act(() => {\n      result.current.handleNext();\n    });\n\n    expect(result.current.currentStep.id).toBe(\"extractionResults\");\n  });\n\n  it(\"validates step transitions for extractionResults to learningPreferences\", () => {\n    const mockExtractedData = { courseName: \"Test Course\", topics: [] };\n    const { result } = renderHook(\n      () =>\n        useStepNavigation(mockSetup, onBack, setShowSummary, mockExtractedData), // With extracted data\n    );\n\n    // Navigate to extractionResults step (step index 4)\n    for (let i = 0; i < 4; i++) {\n      act(() => {\n        result.current.handleNext();\n      });\n    }\n\n    expect(result.current.currentStep.id).toBe(\"extractionResults\");\n\n    // Navigate to next step (should be learningPreferences)\n    act(() => {\n      result.current.handleNext();\n    });\n\n    expect(result.current.currentStep.id).toBe(\"courseContentUpload\");\n  });\n\n  it(\"has all expected steps in correct order\", () => {\n    const expectedStepIds = [\n      \"projectName\",\n      \"purpose\",\n      \"educationLevel\",\n      \"uploadSyllabus\",\n      \"extractionResults\",\n      \"courseContentUpload\",\n      \"testUpload\",\n      \"learningPreferences\",\n      \"timeframe\",\n      \"goal\",\n      \"studyFrequency\",\n      \"collaboration\",\n    ];\n\n    expect(SETUP_STEPS.map((step) => step.id)).toEqual(expectedStepIds);\n  });\n});\n"],"names":["describe","mockSetup","createMockProjectSetup","onBack","jest","fn","setShowSummary","it","result","renderHook","useStepNavigation","expect","current","currentStepIndex","toBe","currentStep","toEqual","SETUP_STEPS","isFirstStep","isLastStep","i","act","handleNext","id","mockExtractedData","courseName","topics","handleBack","totalStepsWithoutExtraction","length","expectedProgress","progress","shouldShowStep","handlePrevious","expectedStepIds","map","step"],"mappings":";;;;uBAAgC;mCACE;uBACN;6BACW;AAEvCA,SAAS,qBAAqB;IAC5B,MAAMC,YAAYC,IAAAA,mCAAsB;IACxC,MAAMC,SAASC,KAAKC,EAAE;IACtB,MAAMC,iBAAiBF,KAAKC,EAAE;IAE9BE,GAAG,+BAA+B;QAChC,MAAM,EAAEC,MAAM,EAAE,GAAGC,IAAAA,iBAAU,EAAC,IAC5BC,IAAAA,oCAAiB,EAACT,WAAWE,QAAQG;QAGvCK,OAAOH,OAAOI,OAAO,CAACC,gBAAgB,EAAEC,IAAI,CAAC;QAC7CH,OAAOH,OAAOI,OAAO,CAACG,WAAW,EAAEC,OAAO,CAACC,kBAAW,CAAC,EAAE;QACzDN,OAAOH,OAAOI,OAAO,CAACM,WAAW,EAAEJ,IAAI,CAAC;QACxCH,OAAOH,OAAOI,OAAO,CAACO,UAAU,EAAEL,IAAI,CAAC;IACzC;IAEAP,GAAG,oEAAoE;QACrE,MAAM,EAAEC,MAAM,EAAE,GAAGC,IAAAA,iBAAU,EAC3B,IAAMC,IAAAA,oCAAiB,EAACT,WAAWE,QAAQG,gBAAgB;QAG7D,iDAAiD;QACjD,IAAK,IAAIc,IAAI,GAAGA,IAAI,GAAGA,IAAK;YAC1BC,IAAAA,UAAG,EAAC;gBACFb,OAAOI,OAAO,CAACU,UAAU;YAC3B;QACF;QAEAX,OAAOH,OAAOI,OAAO,CAACG,WAAW,CAACQ,EAAE,EAAET,IAAI,CAAC;QAE3C,sFAAsF;QACtFO,IAAAA,UAAG,EAAC;YACFb,OAAOI,OAAO,CAACU,UAAU;QAC3B;QAEAX,OAAOH,OAAOI,OAAO,CAACG,WAAW,CAACQ,EAAE,EAAET,IAAI,CAAC;IAC7C;IAEAP,GAAG,kEAAkE;QACnE,MAAMiB,oBAAoB;YAAEC,YAAY;YAAeC,QAAQ,EAAE;QAAC;QAClE,MAAM,EAAElB,MAAM,EAAE,GAAGC,IAAAA,iBAAU,EAAC,IAC5BC,IAAAA,oCAAiB,EAACT,WAAWE,QAAQG,gBAAgBkB;QAGvD,iDAAiD;QACjD,IAAK,IAAIJ,IAAI,GAAGA,IAAI,GAAGA,IAAK;YAC1BC,IAAAA,UAAG,EAAC;gBACFb,OAAOI,OAAO,CAACU,UAAU;YAC3B;QACF;QAEAX,OAAOH,OAAOI,OAAO,CAACG,WAAW,CAACQ,EAAE,EAAET,IAAI,CAAC;QAE3C,wDAAwD;QACxDO,IAAAA,UAAG,EAAC;YACFb,OAAOI,OAAO,CAACU,UAAU;QAC3B;QAEAX,OAAOH,OAAOI,OAAO,CAACG,WAAW,CAACQ,EAAE,EAAET,IAAI,CAAC;IAC7C;IAEAP,GAAG,4EAA4E;QAC7E,MAAM,EAAEC,MAAM,EAAE,GAAGC,IAAAA,iBAAU,EAC3B,IAAMC,IAAAA,oCAAiB,EAACT,WAAWE,QAAQG,gBAAgB;QAG7D,+DAA+D;QAC/D,IAAK,IAAIc,IAAI,GAAGA,IAAI,GAAGA,IAAK;YAC1BC,IAAAA,UAAG,EAAC;gBACFb,OAAOI,OAAO,CAACU,UAAU;YAC3B;QACF;QAEAX,OAAOH,OAAOI,OAAO,CAACG,WAAW,CAACQ,EAAE,EAAET,IAAI,CAAC;QAE3C,yEAAyE;QACzEO,IAAAA,UAAG,EAAC;YACFb,OAAOI,OAAO,CAACe,UAAU;QAC3B;QAEAhB,OAAOH,OAAOI,OAAO,CAACG,WAAW,CAACQ,EAAE,EAAET,IAAI,CAAC;IAC7C;IAEAP,GAAG,sDAAsD;QACvD,MAAM,EAAEC,MAAM,EAAE,GAAGC,IAAAA,iBAAU,EAC3B,IAAMC,IAAAA,oCAAiB,EAACT,WAAWE,QAAQG,gBAAgB;QAG7D,MAAMsB,8BAA8BX,kBAAW,CAACY,MAAM,GAAG,GAAG,0BAA0B;QAEtF,+BAA+B;QAC/BR,IAAAA,UAAG,EAAC;YACFb,OAAOI,OAAO,CAACU,UAAU,IAAI,SAAS;QACxC;QAEA,MAAMQ,mBAAmB,AAAC,IAAKF,CAAAA,8BAA8B,CAAA,IAAM;QACnEjB,OAAOH,OAAOI,OAAO,CAACmB,QAAQ,EAAEjB,IAAI,CAACgB;IACvC;IAEAvB,GAAG,mEAAmE;QACpE,MAAM,EAAEC,MAAM,EAAE,GAAGC,IAAAA,iBAAU,EAAC,IAC5BC,IAAAA,oCAAiB,EAACT,WAAWE,QAAQG,gBAAgB;QAGvDK,OAAOH,OAAOI,OAAO,CAACoB,cAAc,CAAC,sBAAsBlB,IAAI,CAAC;QAChEH,OAAOH,OAAOI,OAAO,CAACoB,cAAc,CAAC,mBAAmBlB,IAAI,CAAC;QAC7DH,OAAOH,OAAOI,OAAO,CAACoB,cAAc,CAAC,wBAAwBlB,IAAI,CAAC;IACpE;IAEAP,GAAG,4EAA4E;QAC7E,MAAMiB,oBAAoB;YAAEC,YAAY;YAAeC,QAAQ,EAAE;QAAC;QAClE,MAAM,EAAElB,MAAM,EAAE,GAAGC,IAAAA,iBAAU,EAAC,IAC5BC,IAAAA,oCAAiB,EAACT,WAAWE,QAAQG,gBAAgBkB;QAGvDb,OAAOH,OAAOI,OAAO,CAACoB,cAAc,CAAC,sBAAsBlB,IAAI,CAAC;IAClE;IAEAP,GAAG,oCAAoC;QACrC,MAAM,EAAEC,MAAM,EAAE,GAAGC,IAAAA,iBAAU,EAAC,IAC5BC,IAAAA,oCAAiB,EAACT,WAAWE,QAAQG;QAGvCe,IAAAA,UAAG,EAAC;YACFb,OAAOI,OAAO,CAACU,UAAU;QAC3B;QAEAX,OAAOH,OAAOI,OAAO,CAACC,gBAAgB,EAAEC,IAAI,CAAC;QAC7CH,OAAOH,OAAOI,OAAO,CAACG,WAAW,EAAEC,OAAO,CAACC,kBAAW,CAAC,EAAE;QACzDN,OAAOH,OAAOI,OAAO,CAACM,WAAW,EAAEJ,IAAI,CAAC;IAC1C;IAEAP,GAAG,wCAAwC;QACzC,MAAM,EAAEC,MAAM,EAAE,GAAGC,IAAAA,iBAAU,EAAC,IAC5BC,IAAAA,oCAAiB,EAACT,WAAWE,QAAQG;QAGvC,eAAe;QACfe,IAAAA,UAAG,EAAC;YACFb,OAAOI,OAAO,CAACU,UAAU;QAC3B;QAEA,oBAAoB;QACpBD,IAAAA,UAAG,EAAC;YACFb,OAAOI,OAAO,CAACqB,cAAc;QAC/B;QAEAtB,OAAOH,OAAOI,OAAO,CAACC,gBAAgB,EAAEC,IAAI,CAAC;QAC7CH,OAAOH,OAAOI,OAAO,CAACG,WAAW,EAAEC,OAAO,CAACC,kBAAW,CAAC,EAAE;QACzDN,OAAOH,OAAOI,OAAO,CAACM,WAAW,EAAEJ,IAAI,CAAC;IAC1C;IAEAP,GAAG,kCAAkC;QACnC,MAAM,EAAEC,MAAM,EAAE,GAAGC,IAAAA,iBAAU,EAAC,IAC5BC,IAAAA,oCAAiB,EAACT,WAAWE,QAAQG;QAGvC,gEAAgE;QAChE,IAAK,IAAIc,IAAI,GAAGA,IAAIH,kBAAW,CAACY,MAAM,GAAG,GAAGT,IAAK;YAC/CC,IAAAA,UAAG,EAAC;gBACFb,OAAOI,OAAO,CAACU,UAAU;YAC3B;QACF;QAEAX,OAAOH,OAAOI,OAAO,CAACC,gBAAgB,EAAEC,IAAI,CAACG,kBAAW,CAACY,MAAM,GAAG;QAClElB,OAAOH,OAAOI,OAAO,CAACO,UAAU,EAAEL,IAAI,CAAC;IACzC;IAEAP,GAAG,gCAAgC;QACjC,MAAM,EAAEC,MAAM,EAAE,GAAGC,IAAAA,iBAAU,EAAC,IAC5BC,IAAAA,oCAAiB,EAACT,WAAWE,QAAQG;QAGvC,kEAAkE;QAClE,IAAK,IAAIc,IAAI,GAAGA,IAAIH,kBAAW,CAACY,MAAM,GAAG,GAAGT,IAAK;YAC/CC,IAAAA,UAAG,EAAC;gBACFb,OAAOI,OAAO,CAACU,UAAU;YAC3B;QACF;QAEAX,OAAOH,OAAOI,OAAO,CAACC,gBAAgB,EAAEC,IAAI,CAACG,kBAAW,CAACY,MAAM,GAAG;QAClElB,OAAOH,OAAOI,OAAO,CAACO,UAAU,EAAEL,IAAI,CAAC;IACzC;IAEAP,GAAG,iCAAiC;QAClC,MAAM,EAAEC,MAAM,EAAE,GAAGC,IAAAA,iBAAU,EAAC,IAC5BC,IAAAA,oCAAiB,EAACT,WAAWE,QAAQG;QAGvC,8BAA8B;QAC9Be,IAAAA,UAAG,EAAC;YACFb,OAAOI,OAAO,CAACqB,cAAc;YAC7BzB,OAAOI,OAAO,CAACqB,cAAc;YAC7BzB,OAAOI,OAAO,CAACqB,cAAc;QAC/B;QAEAtB,OAAOH,OAAOI,OAAO,CAACC,gBAAgB,EAAEC,IAAI,CAAC;QAC7CH,OAAOH,OAAOI,OAAO,CAACM,WAAW,EAAEJ,IAAI,CAAC;IAC1C;IAEAP,GAAG,iCAAiC;QAClC,MAAMiB,oBAAoB;YAAEC,YAAY;YAAeC,QAAQ,EAAE;QAAC;QAClE,MAAM,EAAElB,MAAM,EAAE,GAAGC,IAAAA,iBAAU,EAC3B,IACEC,IAAAA,oCAAiB,EAACT,WAAWE,QAAQG,gBAAgBkB;QAGzDb,OAAOH,OAAOI,OAAO,CAACmB,QAAQ,EAAEjB,IAAI,CAAC;QAErCO,IAAAA,UAAG,EAAC;YACFb,OAAOI,OAAO,CAACU,UAAU;QAC3B;QAEA,MAAMQ,mBAAmB,AAAC,IAAKb,CAAAA,kBAAW,CAACY,MAAM,GAAG,CAAA,IAAM;QAC1DlB,OAAOH,OAAOI,OAAO,CAACmB,QAAQ,EAAEjB,IAAI,CAACgB;IACvC;IAEAvB,GAAG,sEAAsE;QACvE,MAAMiB,oBAAoB;YAAEC,YAAY;YAAeC,QAAQ,EAAE;QAAC;QAClE,MAAM,EAAElB,MAAM,EAAE,GAAGC,IAAAA,iBAAU,EAC3B,IACEC,IAAAA,oCAAiB,EAACT,WAAWE,QAAQG,gBAAgBkB;QAGzD,iDAAiD;QACjD,IAAK,IAAIJ,IAAI,GAAGA,IAAI,GAAGA,IAAK;YAC1BC,IAAAA,UAAG,EAAC;gBACFb,OAAOI,OAAO,CAACU,UAAU;YAC3B;QACF;QAEAX,OAAOH,OAAOI,OAAO,CAACG,WAAW,CAACQ,EAAE,EAAET,IAAI,CAAC;QAE3C,6EAA6E;QAC7EO,IAAAA,UAAG,EAAC;YACFb,OAAOI,OAAO,CAACU,UAAU;QAC3B;QAEAX,OAAOH,OAAOI,OAAO,CAACG,WAAW,CAACQ,EAAE,EAAET,IAAI,CAAC;IAC7C;IAEAP,GAAG,2EAA2E;QAC5E,MAAMiB,oBAAoB;YAAEC,YAAY;YAAeC,QAAQ,EAAE;QAAC;QAClE,MAAM,EAAElB,MAAM,EAAE,GAAGC,IAAAA,iBAAU,EAC3B,IACEC,IAAAA,oCAAiB,EAACT,WAAWE,QAAQG,gBAAgBkB;QAGzD,oDAAoD;QACpD,IAAK,IAAIJ,IAAI,GAAGA,IAAI,GAAGA,IAAK;YAC1BC,IAAAA,UAAG,EAAC;gBACFb,OAAOI,OAAO,CAACU,UAAU;YAC3B;QACF;QAEAX,OAAOH,OAAOI,OAAO,CAACG,WAAW,CAACQ,EAAE,EAAET,IAAI,CAAC;QAE3C,wDAAwD;QACxDO,IAAAA,UAAG,EAAC;YACFb,OAAOI,OAAO,CAACU,UAAU;QAC3B;QAEAX,OAAOH,OAAOI,OAAO,CAACG,WAAW,CAACQ,EAAE,EAAET,IAAI,CAAC;IAC7C;IAEAP,GAAG,2CAA2C;QAC5C,MAAM2B,kBAAkB;YACtB;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;SACD;QAEDvB,OAAOM,kBAAW,CAACkB,GAAG,CAAC,CAACC,OAASA,KAAKb,EAAE,GAAGP,OAAO,CAACkB;IACrD;AACF"}