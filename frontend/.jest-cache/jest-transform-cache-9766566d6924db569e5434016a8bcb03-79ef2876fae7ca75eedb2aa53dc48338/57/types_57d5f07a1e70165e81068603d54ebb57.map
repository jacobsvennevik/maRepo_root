{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/features/quiz/types.ts"],"sourcesContent":["/**\n * Quiz Center TypeScript Interfaces\n * \n * Comprehensive type definitions following the established patterns\n * from Flashcards and Files features.\n */\n\n// ============================================================================\n// Backend API Types (matching backend models)\n// ============================================================================\n\nexport interface DiagnosticSession {\n  id: string;\n  project: string;\n  title: string;\n  topic?: string;\n  status: 'DRAFT' | 'ACTIVE' | 'COMPLETED' | 'ARCHIVED';\n  delivery_mode: 'IMMEDIATE' | 'DEFERRED';\n  max_questions: number;\n  time_limit_sec?: number;\n  created_at: string;\n  updated_at: string;\n  created_by: string;\n  seed?: number;\n}\n\nexport interface DiagnosticQuestion {\n  id: string;\n  session: string;\n  type: 'MCQ' | 'SHORT_ANSWER' | 'PRINCIPLE';\n  text: string;\n  choices?: string[];\n  correct_choice_index?: number;\n  acceptable_answers?: string[];\n  explanation: string;\n  difficulty: number;\n  bloom_level: 'Remember' | 'Understand' | 'Apply' | 'Analyze' | 'Evaluate' | 'Create';\n  concept_id: string;\n  tags?: string[];\n}\n\nexport interface DiagnosticResponse {\n  id: string;\n  session: string;\n  question: string;\n  user_answer: string;\n  is_correct: boolean;\n  time_taken_sec?: number;\n  submitted_at: string;\n}\n\nexport interface DiagnosticAnalytics {\n  id: string;\n  session: string;\n  total_questions: number;\n  correct_answers: number;\n  accuracy_percentage: number;\n  average_time_per_question: number;\n  total_time_taken: number;\n  completed_at: string;\n}\n\n// ============================================================================\n// Frontend Data Types (transformed for UI)\n// ============================================================================\n\nexport interface QuizSession {\n  id: string;\n  projectId: string;\n  title: string;\n  topic?: string;\n  status: QuizSessionStatus;\n  deliveryMode: 'IMMEDIATE' | 'DEFERRED';\n  maxQuestions: number;\n  timeLimitSec?: number;\n  createdAt: Date;\n  updatedAt: Date;\n  createdBy: string;\n  seed?: number;\n  \n  // Computed fields\n  questionCount?: number;\n  completionRate?: number;\n  averageScore?: number;\n  lastAccessed?: Date;\n}\n\nexport type QuizSessionStatus = 'draft' | 'active' | 'completed' | 'archived';\n\nexport interface QuizQuestion {\n  id: string;\n  sessionId: string;\n  type: QuizQuestionType;\n  text: string;\n  choices?: QuizChoice[];\n  correctChoiceIndex?: number;\n  acceptableAnswers?: string[];\n  explanation: string;\n  difficulty: number;\n  bloomLevel: BloomLevel;\n  conceptId: string;\n  tags?: string[];\n  \n  // UI state\n  userAnswer?: string;\n  isCorrect?: boolean;\n  timeTakenSec?: number;\n  isAnswered?: boolean;\n}\n\nexport type QuizQuestionType = 'multiple_choice' | 'short_answer' | 'principle';\nexport type BloomLevel = 'Remember' | 'Understand' | 'Apply' | 'Analyze' | 'Evaluate' | 'Create';\n\nexport interface QuizChoice {\n  id: string;\n  text: string;\n  isCorrect: boolean;\n}\n\nexport interface QuizResponse {\n  id: string;\n  sessionId: string;\n  questionId: string;\n  userAnswer: string;\n  isCorrect: boolean;\n  timeTakenSec?: number;\n  submittedAt: Date;\n}\n\nexport interface QuizAnalytics {\n  id: string;\n  sessionId: string;\n  totalQuestions: number;\n  correctAnswers: number;\n  accuracyPercentage: number;\n  averageTimePerQuestion: number;\n  totalTimeTaken: number;\n  completedAt: Date;\n  \n  // Additional computed fields\n  score: number;\n  grade: 'A' | 'B' | 'C' | 'D' | 'F';\n  timeEfficiency: 'fast' | 'normal' | 'slow';\n}\n\n// ============================================================================\n// API Request/Response Types\n// ============================================================================\n\nexport interface CreateQuizSessionRequest {\n  project: string;\n  topic?: string;\n  source_ids?: string[];\n  question_mix?: Record<string, number>;\n  difficulty: 'BEGINNER' | 'INTERMEDIATE' | 'ADVANCED' | 'EXPERT';\n  delivery_mode: 'IMMEDIATE' | 'DEFERRED';\n  max_questions: number;\n  time_limit_sec?: number;\n}\n\nexport interface UpdateQuizSessionRequest {\n  title?: string;\n  topic?: string;\n  status?: QuizSessionStatus;\n  delivery_mode?: 'IMMEDIATE' | 'DEFERRED';\n  time_limit_sec?: number;\n}\n\nexport interface StartQuizSessionResponse {\n  session_id: string;\n  questions: QuizQuestion[];\n  time_limit_sec?: number;\n  delivery_mode: string;\n}\n\nexport interface SubmitQuizAnswerRequest {\n  question_id: string;\n  user_answer: string;\n  time_taken_sec?: number;\n}\n\nexport interface SubmitQuizAnswerResponse {\n  is_correct: boolean;\n  explanation: string;\n  correct_answer?: string;\n  score?: number;\n}\n\nexport interface QuizSessionListResponse {\n  results: DiagnosticSession[];\n  count: number;\n  next?: string;\n  previous?: string;\n}\n\n// ============================================================================\n// State Management Types\n// ============================================================================\n\nexport interface QuizCenterState {\n  sessions: QuizSession[];\n  currentSession?: QuizSession;\n  currentQuestions?: QuizQuestion[];\n  analytics?: QuizAnalytics;\n  \n  // Loading states\n  loading: boolean;\n  loadingSessions: boolean;\n  loadingSession: boolean;\n  loadingQuestions: boolean;\n  submittingAnswer: boolean;\n  generatingQuiz: boolean;\n  \n  // Error states\n  error: string | null;\n  sessionError: string | null;\n  questionsError: string | null;\n  submissionError: string | null;\n  \n  // UI state\n  selectedSessionId?: string;\n  currentQuestionIndex: number;\n  sessionStarted: boolean;\n  sessionCompleted: boolean;\n  \n  // Stats\n  totalSessions: number;\n  completedSessions: number;\n  averageScore: number;\n  totalTimeSpent: number;\n}\n\nexport interface QuizSessionFilters {\n  status?: QuizSessionStatus[];\n  difficulty?: string[];\n  topic?: string[];\n  dateRange?: {\n    start: Date;\n    end: Date;\n  };\n}\n\nexport interface QuizSessionSort {\n  field: 'created_at' | 'title' | 'status' | 'completion_rate' | 'average_score';\n  direction: 'asc' | 'desc';\n}\n\n// ============================================================================\n// Component Props Types\n// ============================================================================\n\nexport interface QuizCenterProps {\n  projectId: string;\n}\n\nexport interface QuizSessionCardProps {\n  session: QuizSession;\n  onStart: (sessionId: string) => void;\n  onEdit: (sessionId: string) => void;\n  onDelete: (sessionId: string) => void;\n  onViewAnalytics: (sessionId: string) => void;\n}\n\nexport interface QuizQuestionCardProps {\n  question: QuizQuestion;\n  questionIndex: number;\n  totalQuestions: number;\n  onAnswer: (answer: string) => void;\n  onNext: () => void;\n  onPrevious: () => void;\n  timeLimitSec?: number;\n  showExplanation?: boolean;\n}\n\nexport interface QuizAnalyticsCardProps {\n  analytics: QuizAnalytics;\n  session: QuizSession;\n}\n\n// ============================================================================\n// Utility Types\n// ============================================================================\n\nexport interface QuizStats {\n  totalSessions: number;\n  completedSessions: number;\n  averageScore: number;\n  totalTimeSpent: number;\n  accuracyTrend: Array<{\n    date: string;\n    accuracy: number;\n  }>;\n  difficultyDistribution: Record<string, number>;\n  topicDistribution: Record<string, number>;\n}\n\nexport interface QuizRecommendations {\n  suggestedTopics: string[];\n  difficultyAdjustment: 'increase' | 'decrease' | 'maintain';\n  focusAreas: string[];\n  studyTips: string[];\n}\n\n// ============================================================================\n// Error Types\n// ============================================================================\n\nexport interface QuizError {\n  code: string;\n  message: string;\n  details?: any;\n  timestamp: Date;\n}\n\nexport type QuizErrorType = \n  | 'NETWORK_ERROR'\n  | 'VALIDATION_ERROR'\n  | 'AUTHENTICATION_ERROR'\n  | 'PERMISSION_ERROR'\n  | 'NOT_FOUND_ERROR'\n  | 'SERVER_ERROR'\n  | 'TIMEOUT_ERROR'\n  | 'UNKNOWN_ERROR';\n"],"names":[],"mappings":"AAAA;;;;;CAKC,GAED,+EAA+E;AAC/E,8CAA8C;AAC9C,+EAA+E"}