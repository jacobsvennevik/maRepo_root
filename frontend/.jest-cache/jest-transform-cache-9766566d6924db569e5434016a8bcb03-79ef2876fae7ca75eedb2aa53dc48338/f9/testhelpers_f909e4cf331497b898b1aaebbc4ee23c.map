{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/test-utils/test-helpers.ts"],"sourcesContent":["/**\n * Shared test utilities and helpers\n */\n\n// Mock localStorage implementation\nexport const createLocalStorageMock = () => {\n  const store: Record<string, string> = {};\n\n  return {\n    getItem: jest.fn((key: string) => store[key] ?? null),\n    setItem: jest.fn((key: string, value: string) => {\n      store[key] = value;\n    }),\n    removeItem: jest.fn((key: string) => {\n      delete store[key];\n    }),\n    clear: jest.fn(() => {\n      Object.keys(store).forEach(key => delete store[key]);\n    }),\n    length: Object.keys(store).length,\n    key: jest.fn((index: number) => Object.keys(store)[index] ?? null),\n  };\n};\n\n// Mock project setup for tests\nexport const createMockProjectSetup = () => ({\n  projectName: 'Test Project',\n  educationLevel: 'undergraduate',\n  courseData: {\n    courseName: 'Test Course',\n    topics: ['topic1', 'topic2'],\n  },\n  testData: {\n    testDate: '2024-12-31',\n    testType: 'final',\n  },\n  files: [],\n});\n\n// Mock file creation\nexport const createMockFile = (name: string, type: string = 'application/pdf', size: number = 1024) => {\n  return new File(['mock content'], name, { type });\n};\n\n// API response mocks\nexport const createMockApiResponse = <T>(data: T, status: number = 200) => ({\n  data,\n  status,\n  statusText: 'OK',\n  headers: {},\n  config: {},\n});\n\n// Form event helpers\nexport const createMockFormEvent = (value: string) => ({\n  target: { value },\n  preventDefault: jest.fn(),\n  currentTarget: { value },\n} as any);\n\n// Upload progress mock\nexport const createMockUploadProgress = (loaded: number, total: number) => ({\n  loaded,\n  total,\n  lengthComputable: true,\n  type: 'progress',\n});\n\nexport default {\n  createLocalStorageMock,\n  createMockProjectSetup,\n  createMockFile,\n  createMockApiResponse,\n  createMockFormEvent,\n  createMockUploadProgress,\n};\n"],"names":["createLocalStorageMock","createMockApiResponse","createMockFile","createMockFormEvent","createMockProjectSetup","createMockUploadProgress","store","getItem","jest","fn","key","setItem","value","removeItem","clear","Object","keys","forEach","length","index","projectName","educationLevel","courseData","courseName","topics","testData","testDate","testType","files","name","type","size","File","data","status","statusText","headers","config","target","preventDefault","currentTarget","loaded","total","lengthComputable"],"mappings":"AAAA;;CAEC,GAED,mCAAmC;;;;;;;;;;;;IACtBA,sBAAsB;eAAtBA;;IAwCAC,qBAAqB;eAArBA;;IALAC,cAAc;eAAdA;;IAcAC,mBAAmB;eAAnBA;;IA7BAC,sBAAsB;eAAtBA;;IAoCAC,wBAAwB;eAAxBA;;IAOb,OAOE;eAPF;;;AA/DO,MAAML,yBAAyB;IACpC,MAAMM,QAAgC,CAAC;IAEvC,OAAO;QACLC,SAASC,KAAKC,EAAE,CAAC,CAACC,MAAgBJ,KAAK,CAACI,IAAI,IAAI;QAChDC,SAASH,KAAKC,EAAE,CAAC,CAACC,KAAaE;YAC7BN,KAAK,CAACI,IAAI,GAAGE;QACf;QACAC,YAAYL,KAAKC,EAAE,CAAC,CAACC;YACnB,OAAOJ,KAAK,CAACI,IAAI;QACnB;QACAI,OAAON,KAAKC,EAAE,CAAC;YACbM,OAAOC,IAAI,CAACV,OAAOW,OAAO,CAACP,CAAAA,MAAO,OAAOJ,KAAK,CAACI,IAAI;QACrD;QACAQ,QAAQH,OAAOC,IAAI,CAACV,OAAOY,MAAM;QACjCR,KAAKF,KAAKC,EAAE,CAAC,CAACU,QAAkBJ,OAAOC,IAAI,CAACV,MAAM,CAACa,MAAM,IAAI;IAC/D;AACF;AAGO,MAAMf,yBAAyB,IAAO,CAAA;QAC3CgB,aAAa;QACbC,gBAAgB;QAChBC,YAAY;YACVC,YAAY;YACZC,QAAQ;gBAAC;gBAAU;aAAS;QAC9B;QACAC,UAAU;YACRC,UAAU;YACVC,UAAU;QACZ;QACAC,OAAO,EAAE;IACX,CAAA;AAGO,MAAM1B,iBAAiB,CAAC2B,MAAcC,OAAe,iBAAiB,EAAEC,OAAe,IAAI;IAChG,OAAO,IAAIC,KAAK;QAAC;KAAe,EAAEH,MAAM;QAAEC;IAAK;AACjD;AAGO,MAAM7B,wBAAwB,CAAIgC,MAASC,SAAiB,GAAG,GAAM,CAAA;QAC1ED;QACAC;QACAC,YAAY;QACZC,SAAS,CAAC;QACVC,QAAQ,CAAC;IACX,CAAA;AAGO,MAAMlC,sBAAsB,CAACS,QAAmB,CAAA;QACrD0B,QAAQ;YAAE1B;QAAM;QAChB2B,gBAAgB/B,KAAKC,EAAE;QACvB+B,eAAe;YAAE5B;QAAM;IACzB,CAAA;AAGO,MAAMP,2BAA2B,CAACoC,QAAgBC,QAAmB,CAAA;QAC1ED;QACAC;QACAC,kBAAkB;QAClBb,MAAM;IACR,CAAA;MAEA,WAAe;IACb9B;IACAI;IACAF;IACAD;IACAE;IACAE;AACF"}