{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/test-utils/e2e/flashcards-e2e.test.ts"],"sourcesContent":["/**\n * E2E Tests for Flashcards Error Handling\n * \n * These tests run against the real application and backend,\n * catching issues that unit tests with mocks miss.\n */\n\ndescribe('Flashcards E2E Error Handling', () => {\n  const projectId = '203062be-58d0-4f98-bbd4-33b4ce081276';\n\n  beforeEach(() => {\n    // Clear any previous network logs\n    if (typeof window !== 'undefined') {\n      (window as any).networkErrors = [];\n    }\n  });\n\n  it('should show error states when backend is unreachable', () => {\n    // This test documents what SHOULD happen when backend fails\n    // Run with: npm test -- --testNamePattern=\"backend is unreachable\"\n    \n    cy.visit(`/projects/${projectId}/flashcards`);\n    \n    // Mock network failure\n    cy.intercept('GET', '**/generation/api/projects/*/flashcard-sets/', {\n      forceNetworkError: true\n    }).as('flashcardSetsError');\n    \n    cy.intercept('GET', '**/api/projects/*', {\n      forceNetworkError: true  \n    }).as('projectError');\n\n    // Force a refresh to trigger the errors\n    cy.reload();\n\n    // Should show error UI (not blank page)\n    cy.contains(/error|failed|connection/i, { timeout: 10000 })\n      .should('be.visible');\n    \n    // Should have retry functionality\n    cy.contains(/try again|retry/i)\n      .should('be.visible');\n\n    // Verify the actual network calls were attempted\n    cy.wait('@flashcardSetsError');\n    cy.wait('@projectError');\n  });\n\n  it('should recover when backend comes back online', () => {\n    cy.visit(`/projects/${projectId}/flashcards`);\n    \n    // First, simulate failure\n    cy.intercept('GET', '**/generation/api/projects/*/flashcard-sets/', {\n      forceNetworkError: true\n    }).as('initialError');\n    \n    cy.reload();\n    cy.wait('@initialError');\n    \n    // Should show error\n    cy.contains(/error|failed/i, { timeout: 5000 });\n    \n    // Then simulate recovery\n    cy.intercept('GET', '**/generation/api/projects/*/flashcard-sets/', {\n      statusCode: 200,\n      body: []\n    }).as('recovery');\n    \n    // Click retry\n    cy.contains(/try again|retry/i).click();\n    cy.wait('@recovery');\n    \n    // Should show normal content\n    cy.contains(/flashcards|sets/i, { timeout: 5000 });\n  });\n});\n"],"names":["describe","projectId","beforeEach","window","networkErrors","it","cy","visit","intercept","forceNetworkError","as","reload","contains","timeout","should","wait","statusCode","body","click"],"mappings":"AAAA;;;;;CAKC;AAEDA,SAAS,iCAAiC;IACxC,MAAMC,YAAY;IAElBC,WAAW;QACT,kCAAkC;QAClC,IAAI,OAAOC,WAAW,aAAa;YAChCA,OAAeC,aAAa,GAAG,EAAE;QACpC;IACF;IAEAC,GAAG,wDAAwD;QACzD,4DAA4D;QAC5D,mEAAmE;QAEnEC,GAAGC,KAAK,CAAC,CAAC,UAAU,EAAEN,UAAU,WAAW,CAAC;QAE5C,uBAAuB;QACvBK,GAAGE,SAAS,CAAC,OAAO,gDAAgD;YAClEC,mBAAmB;QACrB,GAAGC,EAAE,CAAC;QAENJ,GAAGE,SAAS,CAAC,OAAO,qBAAqB;YACvCC,mBAAmB;QACrB,GAAGC,EAAE,CAAC;QAEN,wCAAwC;QACxCJ,GAAGK,MAAM;QAET,wCAAwC;QACxCL,GAAGM,QAAQ,CAAC,4BAA4B;YAAEC,SAAS;QAAM,GACtDC,MAAM,CAAC;QAEV,kCAAkC;QAClCR,GAAGM,QAAQ,CAAC,oBACTE,MAAM,CAAC;QAEV,iDAAiD;QACjDR,GAAGS,IAAI,CAAC;QACRT,GAAGS,IAAI,CAAC;IACV;IAEAV,GAAG,iDAAiD;QAClDC,GAAGC,KAAK,CAAC,CAAC,UAAU,EAAEN,UAAU,WAAW,CAAC;QAE5C,0BAA0B;QAC1BK,GAAGE,SAAS,CAAC,OAAO,gDAAgD;YAClEC,mBAAmB;QACrB,GAAGC,EAAE,CAAC;QAENJ,GAAGK,MAAM;QACTL,GAAGS,IAAI,CAAC;QAER,oBAAoB;QACpBT,GAAGM,QAAQ,CAAC,iBAAiB;YAAEC,SAAS;QAAK;QAE7C,yBAAyB;QACzBP,GAAGE,SAAS,CAAC,OAAO,gDAAgD;YAClEQ,YAAY;YACZC,MAAM,EAAE;QACV,GAAGP,EAAE,CAAC;QAEN,cAAc;QACdJ,GAAGM,QAAQ,CAAC,oBAAoBM,KAAK;QACrCZ,GAAGS,IAAI,CAAC;QAER,6BAA6B;QAC7BT,GAAGM,QAAQ,CAAC,oBAAoB;YAAEC,SAAS;QAAK;IAClD;AACF"}