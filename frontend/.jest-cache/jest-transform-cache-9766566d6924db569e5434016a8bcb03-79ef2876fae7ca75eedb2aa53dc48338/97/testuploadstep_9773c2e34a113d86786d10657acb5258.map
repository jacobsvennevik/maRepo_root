{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/features/projects/components/steps/test-upload-step.tsx"],"sourcesContent":["\n'use client';\n\nimport React, { useState, useCallback, useEffect } from 'react';\nimport { FileUpload } from '@/components/ui/file-upload';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { \n  API_BASE_URL, \n  isTestMode, \n  getAuthHeaders,\n  uploadFileToService, \n  startDocumentProcessing, \n  pollDocumentStatus,\n  validateFiles,\n  updateProgress,\n  clearProgress\n} from '../../services/upload-utils';\nimport { hybridUploadAndProcess, enhancedMockUpload } from '../../services/hybrid-test-utils';\nimport { MOCK_PROCESSED_TESTS } from '../../services/mock-data';\nimport { TestModeBanner, ErrorMessage } from '../shared/upload-ui';\nimport { HybridTestBanner } from '../shared/hybrid-test-banner';\n\ninterface ProcessedTest {\n  id: number;\n  original_text: string;\n  metadata: {\n    test_title: string;\n    course_title: string;\n    course_type: string;\n    assessment_method: string;\n    exam_date: string;\n    overall_points: string;\n    assessment_types: {\n      has_final_exam: boolean;\n      has_regular_quizzes: boolean;\n      has_essays: boolean;\n      has_projects: boolean;\n      has_lab_work: boolean;\n      has_group_work: boolean;\n      primary_assessment_method: string;\n    };\n    question_summary: {\n      total_questions: number;\n      question_type_breakdown: {\n        multiple_choice: number;\n        true_false: number;\n        matching: number;\n        short_answer: number;\n        essay: number;\n        calculation: number;\n        diagram: number;\n        other: number;\n      };\n      difficulty_breakdown: {\n        easy: number;\n        medium: number;\n        hard: number;\n      };\n      cognitive_focus: {\n        memorization: number;\n        understanding: number;\n        application: number;\n        analysis: number;\n        evaluation: number;\n        creation: number;\n      };\n    };\n    key_topics: string[];\n    topic_alignment: {\n      topics_covered_from_course: string[];\n      new_topics_in_test: string[];\n      coverage_percentage: number;\n    };\n    questions: Array<{\n      number: string;\n      text: string;\n      options: string[];\n      correct_answer: string;\n      question_type: string;\n      difficulty: string;\n      cognitive_level: string;\n      points: string;\n      topics: string[];\n      explanation: string;\n    }>;\n  };\n  status: 'pending' | 'processing' | 'completed' | 'error';\n}\n\ninterface TestUploadStepProps {\n  onUploadComplete: (data: ProcessedTest[], fileNames: string[], files?: File[]) => void;\n  onAnalysisComplete?: (data: ProcessedTest[]) => void;\n}\n\nexport function TestUploadStep({\n  onUploadComplete,\n  onAnalysisComplete\n}: TestUploadStepProps) {\n  const [files, setFiles] = useState<File[]>([]);\n  const [uploadProgress, setUploadProgress] = useState<Record<string, number>>({});\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n  const [showSuccess, setShowSuccess] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [storedResults, setStoredResults] = useState<{\n    data: ProcessedTest[];\n    fileNames: string[];\n  } | null>(null);\n\n  const handleFileUpload = useCallback(async (uploadedFiles: File[]) => {\n    setFiles(uploadedFiles);\n    setError(null);\n    setShowSuccess(false);\n    \n    // Auto-analyze files when they're uploaded\n    await handleAnalyze(uploadedFiles);\n  }, []);\n\n  const handleAnalyze = useCallback(async (filesToAnalyze: File[] = files) => {\n    if (filesToAnalyze.length === 0) return;\n\n    setIsAnalyzing(true);\n    setError(null);\n    setShowSuccess(false);\n\n    try {\n      const firstFile = filesToAnalyze[0];\n      console.log('🧪 HYBRID MODE: Processing', filesToAnalyze.length, 'test files through real backend with mock data');\n\n      // TEST MODE: Use enhanced mock with proper state updates\n      if (isTestMode()) {\n        console.log('🧪 TEST MODE: Analyzing', filesToAnalyze.length, 'test files with enhanced mock data');\n        \n        // Simulate upload progress for all files\n        for (const file of filesToAnalyze) {\n          setUploadProgress(prev => ({ ...prev, [file.name]: 100 }));\n        }\n        \n        // Use enhanced mock function that properly updates state\n        const results = await enhancedMockUpload(\n          filesToAnalyze,\n          'test_files',\n          (progress) => {\n            console.log('🧪 ENHANCED MOCK: Progress:', progress);\n          },\n          (uploadedFiles, processedData) => {\n            // 🔧 CRITICAL FIX: Update parent state with files and data\n            console.log('🧪 ENHANCED MOCK: Updating parent state with files:', uploadedFiles.length, 'data:', processedData.length);\n            \n            // Convert to ProcessedTest format\n            const processedTests: ProcessedTest[] = processedData.map(result => ({\n              id: result.id,\n              original_text: result.original_text,\n              metadata: result.processed_data || result.metadata,\n              status: result.status\n            }));\n            \n            // Call onUploadComplete with files to update parent state\n            onUploadComplete(\n              processedTests,\n              uploadedFiles.map(f => f.name),\n              uploadedFiles // 🔧 Pass the actual files to update parent state\n            );\n          }\n        );\n\n        const fileName = firstFile.name;\n        console.log('🧪 TEST MODE: Test extraction completed for:', fileName);\n        console.log('🧪 TEST MODE: Using enhanced mock test data');\n\n        setIsAnalyzing(false);\n        setShowSuccess(true);\n        setStoredResults({\n          data: results.map(result => ({\n            id: result.id,\n            original_text: result.original_text,\n            metadata: result.processed_data || result.metadata,\n            status: result.status\n          })),\n          fileNames: filesToAnalyze.map(f => f.name)\n        });\n\n        // Call analysis complete callback\n        if (onAnalysisComplete) {\n          onAnalysisComplete(results.map(result => ({\n            id: result.id,\n            original_text: result.original_text,\n            metadata: result.processed_data || result.metadata,\n            status: result.status\n          })));\n        }\n\n        return;\n      }\n\n      // PRODUCTION MODE: Use real backend processing\n      console.log('🚀 PRODUCTION MODE: Processing test files through real backend');\n      \n      const results = await hybridUploadAndProcess(\n        filesToAnalyze,\n        'test_files',\n        (progress) => {\n          console.log('🚀 PRODUCTION: Progress:', progress);\n        },\n        (uploadedFiles, processedData) => {\n          // Convert to ProcessedTest format\n          const processedTests: ProcessedTest[] = processedData.map(result => ({\n            id: result.id,\n            original_text: result.original_text,\n            metadata: result.processed_data || result.metadata,\n            status: result.status\n          }));\n          \n          // Update parent state with files and data\n          onUploadComplete(\n            processedTests,\n            uploadedFiles.map(f => f.name),\n            uploadedFiles\n          );\n        }\n      );\n\n      const fileName = firstFile.name;\n      console.log('🚀 PRODUCTION MODE: Test extraction completed for:', fileName);\n\n      setIsAnalyzing(false);\n      setShowSuccess(true);\n      setStoredResults({\n        data: results.map(result => ({\n          id: result.id,\n          original_text: result.original_text,\n          metadata: result.processed_data || result.metadata,\n          status: result.status\n        })),\n        fileNames: filesToAnalyze.map(f => f.name)\n      });\n\n      // Call analysis complete callback\n      if (onAnalysisComplete) {\n        onAnalysisComplete(results.map(result => ({\n          id: result.id,\n          original_text: result.original_text,\n          metadata: result.processed_data || result.metadata,\n          status: result.status\n        })));\n      }\n\n    } catch (err) {\n      console.error('Error analyzing test files:', err);\n      setError(err instanceof Error ? err.message : 'Failed to analyze files');\n      setIsAnalyzing(false);\n    }\n  }, [files, onUploadComplete, onAnalysisComplete]);\n\n  const handleRemoveFile = useCallback((fileName: string) => {\n    setFiles(prev => prev.filter(file => file.name !== fileName));\n    setUploadProgress(prev => {\n      const newProgress = { ...prev };\n      delete newProgress[fileName];\n      return newProgress;\n    });\n    setShowSuccess(false);\n    setStoredResults(null);\n  }, []);\n\n  // Auto-analyze when files change\n  useEffect(() => {\n    if (files.length > 0 && !isAnalyzing && !showSuccess) {\n      handleAnalyze();\n    }\n  }, [files, isAnalyzing, showSuccess, handleAnalyze]);\n\n  // Call onUploadComplete when stored results are available\n  useEffect(() => {\n    if (storedResults && files.length > 0) {\n      onUploadComplete(\n        storedResults.data,\n        storedResults.fileNames,\n        files // 🔧 Pass the actual files to update parent state\n      );\n    }\n  }, [storedResults, files, onUploadComplete]);\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"test-upload-step\">\n      {isTestMode() ? (\n        <HybridTestBanner \n          title=\"Test & Exam Analysis\"\n          description=\"Upload past tests and exams to see how the real AI processing pipeline works with reliable test data\"\n        />\n      ) : (\n        <TestModeBanner />\n      )}\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            📝 Test & Exam Upload\n            {isTestMode() && <Badge variant=\"secondary\">Test Mode</Badge>}\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <FileUpload\n            onUpload={handleFileUpload}\n            accept=\".pdf,.doc,.docx\"\n            maxSize={25 * 1024 * 1024} // 25MB\n            data-testid=\"file-input\"\n          />\n\n          {files.length > 0 && (\n            <div className=\"space-y-2\">\n              <h4 className=\"font-medium\">Uploaded Files:</h4>\n              {files.map((file) => (\n                <div key={file.name} className=\"flex items-center justify-between p-2 bg-gray-50 rounded\">\n                  <span className=\"text-sm\">{file.name}</span>\n                  <div className=\"flex items-center gap-2\">\n                    {uploadProgress[file.name] !== undefined && (\n                      <Progress value={uploadProgress[file.name]} className=\"w-20\" />\n                    )}\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => handleRemoveFile(file.name)}\n                      disabled={isAnalyzing}\n                    >\n                      Remove\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n\n          {isAnalyzing && (\n            <div className=\"text-center py-4\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-2\"></div>\n              <p className=\"text-sm text-gray-600\">\n                {isTestMode() ? '🧪 Simulating AI analysis...' : '🤖 Analyzing test content...'}\n              </p>\n            </div>\n          )}\n\n          {showSuccess && (\n            <div className=\"text-center py-4\">\n              <div className=\"text-green-600 text-2xl mb-2\">✅</div>\n              <p className=\"text-sm text-green-600 font-medium\">\n                Test analysis completed successfully!\n              </p>\n              <p className=\"text-xs text-gray-500 mt-1\">\n                {storedResults?.fileNames.length} file(s) processed\n              </p>\n            </div>\n          )}\n\n          {error && <ErrorMessage message={error} />}\n        </CardContent>\n      </Card>\n    </div>\n  );\n} "],"names":["TestUploadStep","onUploadComplete","onAnalysisComplete","files","setFiles","useState","uploadProgress","setUploadProgress","isAnalyzing","setIsAnalyzing","showSuccess","setShowSuccess","error","setError","storedResults","setStoredResults","handleFileUpload","useCallback","uploadedFiles","handleAnalyze","filesToAnalyze","length","firstFile","console","log","isTestMode","file","prev","name","results","enhancedMockUpload","progress","processedData","processedTests","map","result","id","original_text","metadata","processed_data","status","f","fileName","data","fileNames","hybridUploadAndProcess","err","Error","message","handleRemoveFile","filter","newProgress","useEffect","div","className","data-testid","HybridTestBanner","title","description","TestModeBanner","Card","CardHeader","CardTitle","Badge","variant","CardContent","FileUpload","onUpload","accept","maxSize","h4","span","undefined","Progress","value","Button","size","onClick","disabled","p","ErrorMessage"],"mappings":"AACA;;;;;+BAgGgBA;;;eAAAA;;;;+DA9FwC;4BAC7B;wBACJ;sBACkC;uBACnC;0BACG;6BAWlB;iCACoD;0BAEd;kCACZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0E1B,SAASA,eAAe,EAC7BC,gBAAgB,EAChBC,kBAAkB,EACE;IACpB,MAAM,CAACC,OAAOC,SAAS,GAAGC,IAAAA,eAAQ,EAAS,EAAE;IAC7C,MAAM,CAACC,gBAAgBC,kBAAkB,GAAGF,IAAAA,eAAQ,EAAyB,CAAC;IAC9E,MAAM,CAACG,aAAaC,eAAe,GAAGJ,IAAAA,eAAQ,EAAC;IAC/C,MAAM,CAACK,aAAaC,eAAe,GAAGN,IAAAA,eAAQ,EAAC;IAC/C,MAAM,CAACO,OAAOC,SAAS,GAAGR,IAAAA,eAAQ,EAAgB;IAClD,MAAM,CAACS,eAAeC,iBAAiB,GAAGV,IAAAA,eAAQ,EAGxC;IAEV,MAAMW,mBAAmBC,IAAAA,kBAAW,EAAC,OAAOC;QAC1Cd,SAASc;QACTL,SAAS;QACTF,eAAe;QAEf,2CAA2C;QAC3C,MAAMQ,cAAcD;IACtB,GAAG,EAAE;IAEL,MAAMC,gBAAgBF,IAAAA,kBAAW,EAAC,OAAOG,iBAAyBjB,KAAK;QACrE,IAAIiB,eAAeC,MAAM,KAAK,GAAG;QAEjCZ,eAAe;QACfI,SAAS;QACTF,eAAe;QAEf,IAAI;YACF,MAAMW,YAAYF,cAAc,CAAC,EAAE;YACnCG,QAAQC,GAAG,CAAC,8BAA8BJ,eAAeC,MAAM,EAAE;YAEjE,yDAAyD;YACzD,IAAII,IAAAA,uBAAU,KAAI;gBAChBF,QAAQC,GAAG,CAAC,2BAA2BJ,eAAeC,MAAM,EAAE;gBAE9D,yCAAyC;gBACzC,KAAK,MAAMK,QAAQN,eAAgB;oBACjCb,kBAAkBoB,CAAAA,OAAS,CAAA;4BAAE,GAAGA,IAAI;4BAAE,CAACD,KAAKE,IAAI,CAAC,EAAE;wBAAI,CAAA;gBACzD;gBAEA,yDAAyD;gBACzD,MAAMC,UAAU,MAAMC,IAAAA,mCAAkB,EACtCV,gBACA,cACA,CAACW;oBACCR,QAAQC,GAAG,CAAC,+BAA+BO;gBAC7C,GACA,CAACb,eAAec;oBACd,2DAA2D;oBAC3DT,QAAQC,GAAG,CAAC,uDAAuDN,cAAcG,MAAM,EAAE,SAASW,cAAcX,MAAM;oBAEtH,kCAAkC;oBAClC,MAAMY,iBAAkCD,cAAcE,GAAG,CAACC,CAAAA,SAAW,CAAA;4BACnEC,IAAID,OAAOC,EAAE;4BACbC,eAAeF,OAAOE,aAAa;4BACnCC,UAAUH,OAAOI,cAAc,IAAIJ,OAAOG,QAAQ;4BAClDE,QAAQL,OAAOK,MAAM;wBACvB,CAAA;oBAEA,0DAA0D;oBAC1DvC,iBACEgC,gBACAf,cAAcgB,GAAG,CAACO,CAAAA,IAAKA,EAAEb,IAAI,GAC7BV,cAAc,kDAAkD;;gBAEpE;gBAGF,MAAMwB,WAAWpB,UAAUM,IAAI;gBAC/BL,QAAQC,GAAG,CAAC,gDAAgDkB;gBAC5DnB,QAAQC,GAAG,CAAC;gBAEZf,eAAe;gBACfE,eAAe;gBACfI,iBAAiB;oBACf4B,MAAMd,QAAQK,GAAG,CAACC,CAAAA,SAAW,CAAA;4BAC3BC,IAAID,OAAOC,EAAE;4BACbC,eAAeF,OAAOE,aAAa;4BACnCC,UAAUH,OAAOI,cAAc,IAAIJ,OAAOG,QAAQ;4BAClDE,QAAQL,OAAOK,MAAM;wBACvB,CAAA;oBACAI,WAAWxB,eAAec,GAAG,CAACO,CAAAA,IAAKA,EAAEb,IAAI;gBAC3C;gBAEA,kCAAkC;gBAClC,IAAI1B,oBAAoB;oBACtBA,mBAAmB2B,QAAQK,GAAG,CAACC,CAAAA,SAAW,CAAA;4BACxCC,IAAID,OAAOC,EAAE;4BACbC,eAAeF,OAAOE,aAAa;4BACnCC,UAAUH,OAAOI,cAAc,IAAIJ,OAAOG,QAAQ;4BAClDE,QAAQL,OAAOK,MAAM;wBACvB,CAAA;gBACF;gBAEA;YACF;YAEA,+CAA+C;YAC/CjB,QAAQC,GAAG,CAAC;YAEZ,MAAMK,UAAU,MAAMgB,IAAAA,uCAAsB,EAC1CzB,gBACA,cACA,CAACW;gBACCR,QAAQC,GAAG,CAAC,4BAA4BO;YAC1C,GACA,CAACb,eAAec;gBACd,kCAAkC;gBAClC,MAAMC,iBAAkCD,cAAcE,GAAG,CAACC,CAAAA,SAAW,CAAA;wBACnEC,IAAID,OAAOC,EAAE;wBACbC,eAAeF,OAAOE,aAAa;wBACnCC,UAAUH,OAAOI,cAAc,IAAIJ,OAAOG,QAAQ;wBAClDE,QAAQL,OAAOK,MAAM;oBACvB,CAAA;gBAEA,0CAA0C;gBAC1CvC,iBACEgC,gBACAf,cAAcgB,GAAG,CAACO,CAAAA,IAAKA,EAAEb,IAAI,GAC7BV;YAEJ;YAGF,MAAMwB,WAAWpB,UAAUM,IAAI;YAC/BL,QAAQC,GAAG,CAAC,sDAAsDkB;YAElEjC,eAAe;YACfE,eAAe;YACfI,iBAAiB;gBACf4B,MAAMd,QAAQK,GAAG,CAACC,CAAAA,SAAW,CAAA;wBAC3BC,IAAID,OAAOC,EAAE;wBACbC,eAAeF,OAAOE,aAAa;wBACnCC,UAAUH,OAAOI,cAAc,IAAIJ,OAAOG,QAAQ;wBAClDE,QAAQL,OAAOK,MAAM;oBACvB,CAAA;gBACAI,WAAWxB,eAAec,GAAG,CAACO,CAAAA,IAAKA,EAAEb,IAAI;YAC3C;YAEA,kCAAkC;YAClC,IAAI1B,oBAAoB;gBACtBA,mBAAmB2B,QAAQK,GAAG,CAACC,CAAAA,SAAW,CAAA;wBACxCC,IAAID,OAAOC,EAAE;wBACbC,eAAeF,OAAOE,aAAa;wBACnCC,UAAUH,OAAOI,cAAc,IAAIJ,OAAOG,QAAQ;wBAClDE,QAAQL,OAAOK,MAAM;oBACvB,CAAA;YACF;QAEF,EAAE,OAAOM,KAAK;YACZvB,QAAQX,KAAK,CAAC,+BAA+BkC;YAC7CjC,SAASiC,eAAeC,QAAQD,IAAIE,OAAO,GAAG;YAC9CvC,eAAe;QACjB;IACF,GAAG;QAACN;QAAOF;QAAkBC;KAAmB;IAEhD,MAAM+C,mBAAmBhC,IAAAA,kBAAW,EAAC,CAACyB;QACpCtC,SAASuB,CAAAA,OAAQA,KAAKuB,MAAM,CAACxB,CAAAA,OAAQA,KAAKE,IAAI,KAAKc;QACnDnC,kBAAkBoB,CAAAA;YAChB,MAAMwB,cAAc;gBAAE,GAAGxB,IAAI;YAAC;YAC9B,OAAOwB,WAAW,CAACT,SAAS;YAC5B,OAAOS;QACT;QACAxC,eAAe;QACfI,iBAAiB;IACnB,GAAG,EAAE;IAEL,iCAAiC;IACjCqC,IAAAA,gBAAS,EAAC;QACR,IAAIjD,MAAMkB,MAAM,GAAG,KAAK,CAACb,eAAe,CAACE,aAAa;YACpDS;QACF;IACF,GAAG;QAAChB;QAAOK;QAAaE;QAAaS;KAAc;IAEnD,0DAA0D;IAC1DiC,IAAAA,gBAAS,EAAC;QACR,IAAItC,iBAAiBX,MAAMkB,MAAM,GAAG,GAAG;YACrCpB,iBACEa,cAAc6B,IAAI,EAClB7B,cAAc8B,SAAS,EACvBzC,MAAM,kDAAkD;;QAE5D;IACF,GAAG;QAACW;QAAeX;QAAOF;KAAiB;IAE3C,qBACE,sBAACoD;QAAIC,WAAU;QAAYC,eAAY;;YACpC9B,IAAAA,uBAAU,oBACT,qBAAC+B,kCAAgB;gBACfC,OAAM;gBACNC,aAAY;+BAGd,qBAACC,wBAAc;0BAGjB,sBAACC,UAAI;;kCACH,qBAACC,gBAAU;kCACT,cAAA,sBAACC,eAAS;4BAACR,WAAU;;gCAA0B;gCAE5C7B,IAAAA,uBAAU,qBAAM,qBAACsC,YAAK;oCAACC,SAAQ;8CAAY;;;;;kCAGhD,sBAACC,iBAAW;wBAACX,WAAU;;0CACrB,qBAACY,sBAAU;gCACTC,UAAUnD;gCACVoD,QAAO;gCACPC,SAAS,KAAK,OAAO;gCACrBd,eAAY;;4BAGbpD,MAAMkB,MAAM,GAAG,mBACd,sBAACgC;gCAAIC,WAAU;;kDACb,qBAACgB;wCAAGhB,WAAU;kDAAc;;oCAC3BnD,MAAM+B,GAAG,CAAC,CAACR,qBACV,sBAAC2B;4CAAoBC,WAAU;;8DAC7B,qBAACiB;oDAAKjB,WAAU;8DAAW5B,KAAKE,IAAI;;8DACpC,sBAACyB;oDAAIC,WAAU;;wDACZhD,cAAc,CAACoB,KAAKE,IAAI,CAAC,KAAK4C,2BAC7B,qBAACC,kBAAQ;4DAACC,OAAOpE,cAAc,CAACoB,KAAKE,IAAI,CAAC;4DAAE0B,WAAU;;sEAExD,qBAACqB,cAAM;4DACLX,SAAQ;4DACRY,MAAK;4DACLC,SAAS,IAAM5B,iBAAiBvB,KAAKE,IAAI;4DACzCkD,UAAUtE;sEACX;;;;;2CAXKkB,KAAKE,IAAI;;;4BAoBxBpB,6BACC,sBAAC6C;gCAAIC,WAAU;;kDACb,qBAACD;wCAAIC,WAAU;;kDACf,qBAACyB;wCAAEzB,WAAU;kDACV7B,IAAAA,uBAAU,MAAK,iCAAiC;;;;4BAKtDf,6BACC,sBAAC2C;gCAAIC,WAAU;;kDACb,qBAACD;wCAAIC,WAAU;kDAA+B;;kDAC9C,qBAACyB;wCAAEzB,WAAU;kDAAqC;;kDAGlD,sBAACyB;wCAAEzB,WAAU;;4CACVxC,eAAe8B,UAAUvB;4CAAO;;;;;4BAKtCT,uBAAS,qBAACoE,sBAAY;gCAAChC,SAASpC;;;;;;;;AAK3C"}