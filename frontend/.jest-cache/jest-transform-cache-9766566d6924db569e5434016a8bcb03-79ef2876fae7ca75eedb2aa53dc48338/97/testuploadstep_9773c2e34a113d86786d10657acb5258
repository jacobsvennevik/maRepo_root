9b8a9721f8696e3f917267f16d743c8a
'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "TestUploadStep", {
    enumerable: true,
    get: function() {
        return TestUploadStep;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _fileupload = require("../../../../components/ui/file-upload");
const _button = require("../../../../components/ui/button");
const _card = require("../../../../components/ui/card");
const _badge = require("../../../../components/ui/badge");
const _progress = require("../../../../components/ui/progress");
const _uploadutils = require("../../services/upload-utils");
const _hybridtestutils = require("../../services/hybrid-test-utils");
const _uploadui = require("../shared/upload-ui");
const _hybridtestbanner = require("../shared/hybrid-test-banner");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
function TestUploadStep({ onUploadComplete, onAnalysisComplete }) {
    const [files, setFiles] = (0, _react.useState)([]);
    const [uploadProgress, setUploadProgress] = (0, _react.useState)({});
    const [isAnalyzing, setIsAnalyzing] = (0, _react.useState)(false);
    const [showSuccess, setShowSuccess] = (0, _react.useState)(false);
    const [error, setError] = (0, _react.useState)(null);
    const [storedResults, setStoredResults] = (0, _react.useState)(null);
    const handleFileUpload = (0, _react.useCallback)(async (uploadedFiles)=>{
        setFiles(uploadedFiles);
        setError(null);
        setShowSuccess(false);
        // Auto-analyze files when they're uploaded
        await handleAnalyze(uploadedFiles);
    }, []);
    const handleAnalyze = (0, _react.useCallback)(async (filesToAnalyze = files)=>{
        if (filesToAnalyze.length === 0) return;
        setIsAnalyzing(true);
        setError(null);
        setShowSuccess(false);
        try {
            const firstFile = filesToAnalyze[0];
            console.log('ðŸ§ª HYBRID MODE: Processing', filesToAnalyze.length, 'test files through real backend with mock data');
            // TEST MODE: Use enhanced mock with proper state updates
            if ((0, _uploadutils.isTestMode)()) {
                console.log('ðŸ§ª TEST MODE: Analyzing', filesToAnalyze.length, 'test files with enhanced mock data');
                // Simulate upload progress for all files
                for (const file of filesToAnalyze){
                    setUploadProgress((prev)=>({
                            ...prev,
                            [file.name]: 100
                        }));
                }
                // Use enhanced mock function that properly updates state
                const results = await (0, _hybridtestutils.enhancedMockUpload)(filesToAnalyze, 'test_files', (progress)=>{
                    console.log('ðŸ§ª ENHANCED MOCK: Progress:', progress);
                }, (uploadedFiles, processedData)=>{
                    // ðŸ”§ CRITICAL FIX: Update parent state with files and data
                    console.log('ðŸ§ª ENHANCED MOCK: Updating parent state with files:', uploadedFiles.length, 'data:', processedData.length);
                    // Convert to ProcessedTest format
                    const processedTests = processedData.map((result)=>({
                            id: result.id,
                            original_text: result.original_text,
                            metadata: result.processed_data || result.metadata,
                            status: result.status
                        }));
                    // Call onUploadComplete with files to update parent state
                    onUploadComplete(processedTests, uploadedFiles.map((f)=>f.name), uploadedFiles // ðŸ”§ Pass the actual files to update parent state
                    );
                });
                const fileName = firstFile.name;
                console.log('ðŸ§ª TEST MODE: Test extraction completed for:', fileName);
                console.log('ðŸ§ª TEST MODE: Using enhanced mock test data');
                setIsAnalyzing(false);
                setShowSuccess(true);
                setStoredResults({
                    data: results.map((result)=>({
                            id: result.id,
                            original_text: result.original_text,
                            metadata: result.processed_data || result.metadata,
                            status: result.status
                        })),
                    fileNames: filesToAnalyze.map((f)=>f.name)
                });
                // Call analysis complete callback
                if (onAnalysisComplete) {
                    onAnalysisComplete(results.map((result)=>({
                            id: result.id,
                            original_text: result.original_text,
                            metadata: result.processed_data || result.metadata,
                            status: result.status
                        })));
                }
                return;
            }
            // PRODUCTION MODE: Use real backend processing
            console.log('ðŸš€ PRODUCTION MODE: Processing test files through real backend');
            const results = await (0, _hybridtestutils.hybridUploadAndProcess)(filesToAnalyze, 'test_files', (progress)=>{
                console.log('ðŸš€ PRODUCTION: Progress:', progress);
            }, (uploadedFiles, processedData)=>{
                // Convert to ProcessedTest format
                const processedTests = processedData.map((result)=>({
                        id: result.id,
                        original_text: result.original_text,
                        metadata: result.processed_data || result.metadata,
                        status: result.status
                    }));
                // Update parent state with files and data
                onUploadComplete(processedTests, uploadedFiles.map((f)=>f.name), uploadedFiles);
            });
            const fileName = firstFile.name;
            console.log('ðŸš€ PRODUCTION MODE: Test extraction completed for:', fileName);
            setIsAnalyzing(false);
            setShowSuccess(true);
            setStoredResults({
                data: results.map((result)=>({
                        id: result.id,
                        original_text: result.original_text,
                        metadata: result.processed_data || result.metadata,
                        status: result.status
                    })),
                fileNames: filesToAnalyze.map((f)=>f.name)
            });
            // Call analysis complete callback
            if (onAnalysisComplete) {
                onAnalysisComplete(results.map((result)=>({
                        id: result.id,
                        original_text: result.original_text,
                        metadata: result.processed_data || result.metadata,
                        status: result.status
                    })));
            }
        } catch (err) {
            console.error('Error analyzing test files:', err);
            setError(err instanceof Error ? err.message : 'Failed to analyze files');
            setIsAnalyzing(false);
        }
    }, [
        files,
        onUploadComplete,
        onAnalysisComplete
    ]);
    const handleRemoveFile = (0, _react.useCallback)((fileName)=>{
        setFiles((prev)=>prev.filter((file)=>file.name !== fileName));
        setUploadProgress((prev)=>{
            const newProgress = {
                ...prev
            };
            delete newProgress[fileName];
            return newProgress;
        });
        setShowSuccess(false);
        setStoredResults(null);
    }, []);
    // Auto-analyze when files change
    (0, _react.useEffect)(()=>{
        if (files.length > 0 && !isAnalyzing && !showSuccess) {
            handleAnalyze();
        }
    }, [
        files,
        isAnalyzing,
        showSuccess,
        handleAnalyze
    ]);
    // Call onUploadComplete when stored results are available
    (0, _react.useEffect)(()=>{
        if (storedResults && files.length > 0) {
            onUploadComplete(storedResults.data, storedResults.fileNames, files // ðŸ”§ Pass the actual files to update parent state
            );
        }
    }, [
        storedResults,
        files,
        onUploadComplete
    ]);
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        className: "space-y-6",
        "data-testid": "test-upload-step",
        children: [
            (0, _uploadutils.isTestMode)() ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_hybridtestbanner.HybridTestBanner, {
                title: "Test & Exam Analysis",
                description: "Upload past tests and exams to see how the real AI processing pipeline works with reliable test data"
            }) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_uploadui.TestModeBanner, {}),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_card.Card, {
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.CardHeader, {
                        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_card.CardTitle, {
                            className: "flex items-center gap-2",
                            children: [
                                "\uD83D\uDCDD Test & Exam Upload",
                                (0, _uploadutils.isTestMode)() && /*#__PURE__*/ (0, _jsxruntime.jsx)(_badge.Badge, {
                                    variant: "secondary",
                                    children: "Test Mode"
                                })
                            ]
                        })
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)(_card.CardContent, {
                        className: "space-y-4",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_fileupload.FileUpload, {
                                onUpload: handleFileUpload,
                                accept: ".pdf,.doc,.docx",
                                maxSize: 25 * 1024 * 1024,
                                "data-testid": "file-input"
                            }),
                            files.length > 0 && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                className: "space-y-2",
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("h4", {
                                        className: "font-medium",
                                        children: "Uploaded Files:"
                                    }),
                                    files.map((file)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                            className: "flex items-center justify-between p-2 bg-gray-50 rounded",
                                            children: [
                                                /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                                    className: "text-sm",
                                                    children: file.name
                                                }),
                                                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                    className: "flex items-center gap-2",
                                                    children: [
                                                        uploadProgress[file.name] !== undefined && /*#__PURE__*/ (0, _jsxruntime.jsx)(_progress.Progress, {
                                                            value: uploadProgress[file.name],
                                                            className: "w-20"
                                                        }),
                                                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                                                            variant: "outline",
                                                            size: "sm",
                                                            onClick: ()=>handleRemoveFile(file.name),
                                                            disabled: isAnalyzing,
                                                            children: "Remove"
                                                        })
                                                    ]
                                                })
                                            ]
                                        }, file.name))
                                ]
                            }),
                            isAnalyzing && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                className: "text-center py-4",
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                        className: "animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-2"
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                                        className: "text-sm text-gray-600",
                                        children: (0, _uploadutils.isTestMode)() ? 'ðŸ§ª Simulating AI analysis...' : 'ðŸ¤– Analyzing test content...'
                                    })
                                ]
                            }),
                            showSuccess && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                className: "text-center py-4",
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                        className: "text-green-600 text-2xl mb-2",
                                        children: "âœ…"
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                                        className: "text-sm text-green-600 font-medium",
                                        children: "Test analysis completed successfully!"
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("p", {
                                        className: "text-xs text-gray-500 mt-1",
                                        children: [
                                            storedResults?.fileNames.length,
                                            " file(s) processed"
                                        ]
                                    })
                                ]
                            }),
                            error && /*#__PURE__*/ (0, _jsxruntime.jsx)(_uploadui.ErrorMessage, {
                                message: error
                            })
                        ]
                    })
                ]
            })
        ]
    });
}

//# sourceMappingURL=data:application/json;base64,