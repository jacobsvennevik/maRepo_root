78ff22bfc0f602b423645a1720c7c5fc
/**
 * React hook for real-time study progress updates.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    useFileProcessing: function() {
        return useFileProcessing;
    },
    useProjectUpdates: function() {
        return useProjectUpdates;
    },
    useStudyProgress: function() {
        return useStudyProgress;
    }
});
const _react = require("react");
const _websocket = require("../lib/websocket");
const _websocketconnection = require("../lib/websocket-connection");
function useStudyProgress() {
    const [stats, setStats] = (0, _react.useState)(null);
    const [isConnected, setIsConnected] = (0, _react.useState)(false);
    const [lastUpdate, setLastUpdate] = (0, _react.useState)(null);
    // Update connection status
    (0, _react.useEffect)(()=>{
        const unsubscribe = _websocketconnection.connectionManager.subscribe((status)=>{
            setIsConnected(status.isConnected);
        });
        return unsubscribe;
    }, []);
    // Listen for study progress updates
    (0, _react.useEffect)(()=>{
        const handleProgressUpdate = (event)=>{
            const data = event.detail;
            setStats(data.progress_stats);
            setLastUpdate(new Date());
        };
        const handleInitialStats = (event)=>{
            setStats(event.detail);
            setLastUpdate(new Date());
        };
        window.addEventListener('study-progress-update', handleProgressUpdate);
        window.addEventListener('initial-study-stats', handleInitialStats);
        return ()=>{
            window.removeEventListener('study-progress-update', handleProgressUpdate);
            window.removeEventListener('initial-study-stats', handleInitialStats);
        };
    }, []);
    // Review flashcard function
    const reviewFlashcard = (0, _react.useCallback)((flashcardId, rating)=>{
        _websocket.webSocketService.reviewFlashcard(flashcardId, rating);
    }, []);
    // Get study progress function
    const getStudyProgress = (0, _react.useCallback)(()=>{
        _websocket.webSocketService.getStudyProgress();
    }, []);
    // Ping server function
    const ping = (0, _react.useCallback)(()=>{
        _websocket.webSocketService.ping();
    }, []);
    // Reconnect function
    const reconnect = (0, _react.useCallback)(()=>{
        _websocket.webSocketService.reconnect();
    }, []);
    return {
        stats,
        isConnected,
        lastUpdate,
        reviewFlashcard,
        getStudyProgress,
        ping,
        reconnect
    };
}
function useProjectUpdates() {
    const [projects, setProjects] = (0, _react.useState)([]);
    const [isConnected, setIsConnected] = (0, _react.useState)(false);
    // Update connection status
    (0, _react.useEffect)(()=>{
        const unsubscribe = _websocketconnection.connectionManager.subscribe((status)=>{
            setIsConnected(status.isConnected);
        });
        return unsubscribe;
    }, []);
    // Listen for project updates
    (0, _react.useEffect)(()=>{
        const handleProjectCreated = (event)=>{
            const newProject = event.detail;
            setProjects((prev)=>[
                    ...prev,
                    newProject
                ]);
        };
        const handleProjectUpdated = (event)=>{
            const updatedProject = event.detail;
            setProjects((prev)=>prev.map((project)=>project.id === updatedProject.id ? updatedProject : project));
        };
        window.addEventListener('project-created', handleProjectCreated);
        window.addEventListener('project-updated', handleProjectUpdated);
        return ()=>{
            window.removeEventListener('project-created', handleProjectCreated);
            window.removeEventListener('project-updated', handleProjectUpdated);
        };
    }, []);
    return {
        projects,
        isConnected
    };
}
function useFileProcessing() {
    const [processingFiles, setProcessingFiles] = (0, _react.useState)(new Map());
    const [isConnected, setIsConnected] = (0, _react.useState)(false);
    // Update connection status
    (0, _react.useEffect)(()=>{
        const unsubscribe = _websocketconnection.connectionManager.subscribe((status)=>{
            setIsConnected(status.isConnected);
        });
        return unsubscribe;
    }, []);
    // Listen for file processing updates
    (0, _react.useEffect)(()=>{
        const handleFileProcessingUpdate = (event)=>{
            const data = event.detail;
            setProcessingFiles((prev)=>{
                const newMap = new Map(prev);
                newMap.set(data.file_id, data);
                return newMap;
            });
        };
        window.addEventListener('file-processing-update', handleFileProcessingUpdate);
        return ()=>{
            window.removeEventListener('file-processing-update', handleFileProcessingUpdate);
        };
    }, []);
    return {
        processingFiles,
        isConnected
    };
}

//# sourceMappingURL=data:application/json;base64,