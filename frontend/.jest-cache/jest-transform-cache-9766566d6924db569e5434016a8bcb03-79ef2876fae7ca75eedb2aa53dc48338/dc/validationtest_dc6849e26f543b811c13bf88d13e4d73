47de643ebcac251bf953d978df6c0902
/**
 * File Upload Testing Patterns
 * 
 * Reusable patterns for testing file upload functionality, validation,
 * drag & drop, and progress tracking across different components.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    createDragDropTest: function() {
        return createDragDropTest;
    },
    createFileListTest: function() {
        return createFileListTest;
    },
    createFileUploadErrorTest: function() {
        return createFileUploadErrorTest;
    },
    createFileValidationTest: function() {
        return createFileValidationTest;
    },
    createUploadProgressTest: function() {
        return createUploadProgressTest;
    }
});
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
const _sharedsetup = require("../../setup/shared-setup");
const _factories = require("../../factories");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const createFileValidationTest = (config)=>{
    const validationScenarios = [
        {
            name: 'Valid PDF file',
            file: {
                name: 'valid.pdf',
                content: 'content',
                type: 'application/pdf'
            },
            shouldPass: true
        },
        {
            name: 'Valid DOCX file',
            file: {
                name: 'valid.docx',
                content: 'content',
                type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
            },
            shouldPass: true
        },
        {
            name: 'Valid PPTX file',
            file: {
                name: 'valid.pptx',
                content: 'content',
                type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation'
            },
            shouldPass: true
        },
        {
            name: 'Invalid TXT file',
            file: {
                name: 'invalid.txt',
                content: 'content',
                type: 'text/plain'
            },
            shouldPass: false,
            expectedError: 'is not a supported file type'
        },
        {
            name: 'Invalid JPG file',
            file: {
                name: 'invalid.jpg',
                content: 'content',
                type: 'image/jpeg'
            },
            shouldPass: false,
            expectedError: 'is not a supported file type'
        },
        {
            name: 'File too large',
            file: {
                name: 'large.pdf',
                content: 'x'.repeat(26 * 1024 * 1024),
                type: 'application/pdf'
            },
            shouldPass: false,
            expectedError: 'File is too large'
        }
    ];
    return {
        async testFileValidation () {
            const user = _userevent.default.setup();
            for (const scenario of validationScenarios){
                (0, _sharedsetup.renderWithProviders)(_react.default.createElement(config.component, config.props));
                const fileInput = _react1.screen.getByTestId('file-input');
                const testFile = _factories.testFactories.createTestFile(scenario.file.name, scenario.file.content, scenario.file.type);
                await (0, _react1.act)(async ()=>{
                    await user.upload(fileInput, testFile);
                });
                if (scenario.shouldPass) {
                    expect(_react1.screen.getByTestId(`file-item-${scenario.file.name}`)).toBeInTheDocument();
                    expect(_react1.screen.queryByTestId('error-message')).not.toBeInTheDocument();
                } else {
                    expect(_react1.screen.queryByTestId(`file-item-${scenario.file.name}`)).not.toBeInTheDocument();
                    if (scenario.expectedError) {
                        expect(_react1.screen.getByTestId('error-message')).toHaveTextContent(new RegExp(scenario.expectedError, 'i'));
                    }
                }
                // Clean up for next iteration
                jest.clearAllMocks();
            }
        },
        async testMultipleFileValidation () {
            const user = _userevent.default.setup();
            (0, _sharedsetup.renderWithProviders)(_react.default.createElement(config.component, config.props));
            const fileInput = _react1.screen.getByTestId('file-input');
            const validFile = _factories.testFactories.createTestFile('valid.pdf', 'content', 'application/pdf');
            const invalidFile = _factories.testFactories.createTestFile('invalid.txt', 'content', 'text/plain');
            await (0, _react1.act)(async ()=>{
                await user.upload(fileInput, [
                    validFile,
                    invalidFile
                ]);
            });
            // Only valid file should be accepted
            expect(_react1.screen.getByTestId('file-item-valid.pdf')).toBeInTheDocument();
            expect(_react1.screen.queryByTestId('file-item-invalid.txt')).not.toBeInTheDocument();
            // Error message should be shown
            expect(_react1.screen.getByTestId('error-message')).toHaveTextContent(/is not a supported file type/i);
        }
    };
};
const createDragDropTest = (config)=>{
    return {
        async testDragAndDrop () {
            const mockOnUpload = jest.fn();
            (0, _sharedsetup.renderWithProviders)(_react.default.createElement(config.component, {
                ...config.props,
                onUpload: mockOnUpload
            }));
            const dropzone = _react1.screen.getByText("Drag & drop files here").closest("div");
            expect(dropzone).toBeInTheDocument();
            const file = _factories.testFactories.createTestFile();
            const dataTransfer = {
                files: [
                    file
                ],
                items: [
                    {
                        kind: "file",
                        type: file.type,
                        getAsFile: ()=>file
                    }
                ],
                types: [
                    "Files"
                ]
            };
            if (dropzone) {
                _react1.fireEvent.dragOver(dropzone);
                _react1.fireEvent.drop(dropzone, {
                    dataTransfer
                });
            }
            await (0, _react1.waitFor)(()=>{
                expect(mockOnUpload).toHaveBeenCalledWith([
                    file
                ]);
            });
        },
        async testDragOverState () {
            (0, _sharedsetup.renderWithProviders)(_react.default.createElement(config.component, config.props));
            const dropzone = _react1.screen.getByText("Drag & drop files here").closest("div");
            if (dropzone) {
                _react1.fireEvent.dragOver(dropzone);
                expect(dropzone).toHaveClass('drag-over');
            }
        },
        async testDragLeaveState () {
            (0, _sharedsetup.renderWithProviders)(_react.default.createElement(config.component, config.props));
            const dropzone = _react1.screen.getByText("Drag & drop files here").closest("div");
            if (dropzone) {
                _react1.fireEvent.dragOver(dropzone);
                _react1.fireEvent.dragLeave(dropzone);
                expect(dropzone).not.toHaveClass('drag-over');
            }
        },
        async testMultipleFileDragDrop () {
            const mockOnUpload = jest.fn();
            (0, _sharedsetup.renderWithProviders)(_react.default.createElement(config.component, {
                ...config.props,
                onUpload: mockOnUpload
            }));
            const dropzone = _react1.screen.getByText("Drag & drop files here").closest("div");
            const files = [
                _factories.testFactories.createTestFile("test1.pdf"),
                _factories.testFactories.createTestFile("test2.pdf")
            ];
            const dataTransfer = {
                files: files,
                items: files.map((file)=>({
                        kind: "file",
                        type: file.type,
                        getAsFile: ()=>file
                    })),
                types: [
                    "Files"
                ]
            };
            if (dropzone) {
                _react1.fireEvent.dragOver(dropzone);
                _react1.fireEvent.drop(dropzone, {
                    dataTransfer
                });
            }
            await (0, _react1.waitFor)(()=>{
                expect(mockOnUpload).toHaveBeenCalledWith(files);
            });
        }
    };
};
const createUploadProgressTest = (config)=>{
    return {
        testProgressDisplay () {
            const files = [
                _factories.testFactories.createTestFile("test1.pdf")
            ];
            (0, _sharedsetup.renderWithProviders)(_react.default.createElement(config.component, {
                ...config.props,
                files: files,
                uploadProgress: {
                    "test1.pdf": 50
                }
            }));
            const progressBar = _react1.screen.getByLabelText(/upload progress for test1.pdf/i);
            expect(progressBar).toHaveAttribute("aria-valuenow", "50");
            expect(progressBar).toHaveAttribute("aria-valuemin", "0");
            expect(progressBar).toHaveAttribute("aria-valuemax", "100");
        },
        testMultipleFileProgress () {
            const files = [
                _factories.testFactories.createTestFile("test1.pdf"),
                _factories.testFactories.createTestFile("test2.pdf")
            ];
            (0, _sharedsetup.renderWithProviders)(_react.default.createElement(config.component, {
                ...config.props,
                files: files,
                uploadProgress: {
                    "test1.pdf": 25,
                    "test2.pdf": 75
                }
            }));
            const progress1 = _react1.screen.getByLabelText(/upload progress for test1.pdf/i);
            const progress2 = _react1.screen.getByLabelText(/upload progress for test2.pdf/i);
            expect(progress1).toHaveAttribute("aria-valuenow", "25");
            expect(progress2).toHaveAttribute("aria-valuenow", "75");
        },
        testCompletionState () {
            const files = [
                _factories.testFactories.createTestFile("test1.pdf")
            ];
            (0, _sharedsetup.renderWithProviders)(_react.default.createElement(config.component, {
                ...config.props,
                files: files,
                uploadProgress: {
                    "test1.pdf": 100
                }
            }));
            expect(_react1.screen.getByText(/upload complete/i)).toBeInTheDocument();
        }
    };
};
const createFileListTest = (config)=>{
    return {
        testFileListDisplay () {
            const files = [
                _factories.testFactories.createTestFile("test1.pdf"),
                _factories.testFactories.createTestFile("test2.pdf")
            ];
            (0, _sharedsetup.renderWithProviders)(_react.default.createElement(config.component, {
                ...config.props,
                files: files
            }));
            expect(_react1.screen.getByText("test1.pdf")).toBeInTheDocument();
            expect(_react1.screen.getByText("test2.pdf")).toBeInTheDocument();
        },
        async testFileRemoval () {
            const mockOnRemove = jest.fn();
            const files = [
                _factories.testFactories.createTestFile("test1.pdf"),
                _factories.testFactories.createTestFile("test2.pdf")
            ];
            (0, _sharedsetup.renderWithProviders)(_react.default.createElement(config.component, {
                ...config.props,
                files: files,
                onRemove: mockOnRemove
            }));
            const removeButtons = _react1.screen.getAllByLabelText(/remove file/i);
            _react1.fireEvent.click(removeButtons[0]);
            expect(mockOnRemove).toHaveBeenCalledWith(0);
        },
        testFileCountDisplay () {
            const files = [
                _factories.testFactories.createTestFile("test1.pdf"),
                _factories.testFactories.createTestFile("test2.pdf"),
                _factories.testFactories.createTestFile("test3.pdf")
            ];
            (0, _sharedsetup.renderWithProviders)(_react.default.createElement(config.component, {
                ...config.props,
                files: files
            }));
            expect(_react1.screen.getByText("3 files selected")).toBeInTheDocument();
        },
        testFileSizeDisplay () {
            const files = [
                _factories.testFactories.createTestFile("small.pdf", "small content"),
                _factories.testFactories.createTestFile("large.pdf", "x".repeat(1000))
            ];
            (0, _sharedsetup.renderWithProviders)(_react.default.createElement(config.component, {
                ...config.props,
                files: files
            }));
            expect(_react1.screen.getByText(/small\.pdf/)).toBeInTheDocument();
            expect(_react1.screen.getByText(/large\.pdf/)).toBeInTheDocument();
        }
    };
};
const createFileUploadErrorTest = (config)=>{
    return {
        async testUploadErrors () {
            const mockOnUploadError = jest.fn();
            (0, _sharedsetup.renderWithProviders)(_react.default.createElement(config.component, {
                ...config.props,
                onUploadError: mockOnUploadError
            }));
            const file = _factories.testFactories.createTestFile("test.pdf");
            const input = _react1.screen.getByTestId("file-input");
            Object.defineProperty(input, "files", {
                value: [
                    file
                ]
            });
            _react1.fireEvent.change(input);
            // Simulate upload error
            const mockUpload = jest.fn().mockRejectedValueOnce(new Error("Upload failed"));
            mockUpload.mockRejectedValueOnce(new Error("Upload failed"));
            await (0, _react1.waitFor)(()=>{
                expect(mockOnUploadError).toHaveBeenCalled();
            });
        },
        async testNetworkTimeout () {
            const user = _userevent.default.setup();
            // Mock network timeout
            const mockUpload = jest.fn().mockImplementation(()=>new Promise((_, reject)=>setTimeout(()=>reject(new Error('Network timeout')), 100)));
            (0, _sharedsetup.renderWithProviders)(_react.default.createElement(config.component, config.props));
            const fileInput = _react1.screen.getByTestId('file-input');
            const testFile = _factories.testFactories.createTestFile('test.pdf', 'content', 'application/pdf');
            await (0, _react1.act)(async ()=>{
                await user.upload(fileInput, testFile);
            });
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText(/network timeout/i)).toBeInTheDocument();
            }, {
                timeout: 5000
            });
        },
        async testRetryFunctionality () {
            const user = _userevent.default.setup();
            // First attempt fails
            const mockUpload = jest.fn().mockRejectedValueOnce(new Error('Upload failed'));
            (0, _sharedsetup.renderWithProviders)(_react.default.createElement(config.component, config.props));
            const fileInput = _react1.screen.getByTestId('file-input');
            const testFile = _factories.testFactories.createTestFile('test.pdf', 'content', 'application/pdf');
            await (0, _react1.act)(async ()=>{
                await user.upload(fileInput, testFile);
            });
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId('error-message')).toBeInTheDocument();
            });
            // Retry upload
            mockUpload.mockResolvedValueOnce({
                id: 'doc-123',
                status: 'completed'
            });
            const retryButton = _react1.screen.getByText(/retry/i);
            await (0, _react1.act)(async ()=>{
                await user.click(retryButton);
            });
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.queryByTestId('error-message')).not.toBeInTheDocument();
            });
        }
    };
};

//# sourceMappingURL=data:application/json;base64,