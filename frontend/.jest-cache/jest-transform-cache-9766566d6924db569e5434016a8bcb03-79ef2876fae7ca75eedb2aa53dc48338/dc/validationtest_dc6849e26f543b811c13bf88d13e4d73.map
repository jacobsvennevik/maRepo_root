{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/test-utils/patterns/file-upload/validation.test.ts"],"sourcesContent":["/**\n * File Upload Testing Patterns\n * \n * Reusable patterns for testing file upload functionality, validation,\n * drag & drop, and progress tracking across different components.\n */\n\nimport React from 'react';\nimport { screen, fireEvent, waitFor, act } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { renderWithProviders } from '../../setup/shared-setup';\nimport { testFactories } from '../../factories';\nimport { standardMocks } from '../../mocks';\n\n// ============================================================================\n// File Upload Test Patterns\n// ============================================================================\n\nexport interface FileUploadTestConfig {\n  component: React.ComponentType<any>;\n  props?: any;\n  mockResponses?: {\n    upload?: any;\n    progress?: any;\n    error?: any;\n  };\n}\n\nexport interface FileTestScenario {\n  name: string;\n  file: {\n    name: string;\n    content: string;\n    type: string;\n    size?: number;\n  };\n  shouldPass: boolean;\n  expectedError?: string;\n}\n\n// ============================================================================\n// File Validation Testing Pattern\n// ============================================================================\n\nexport const createFileValidationTest = (config: FileUploadTestConfig) => {\n  const validationScenarios: FileTestScenario[] = [\n    {\n      name: 'Valid PDF file',\n      file: { name: 'valid.pdf', content: 'content', type: 'application/pdf' },\n      shouldPass: true\n    },\n    {\n      name: 'Valid DOCX file',\n      file: { name: 'valid.docx', content: 'content', type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' },\n      shouldPass: true\n    },\n    {\n      name: 'Valid PPTX file',\n      file: { name: 'valid.pptx', content: 'content', type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation' },\n      shouldPass: true\n    },\n    {\n      name: 'Invalid TXT file',\n      file: { name: 'invalid.txt', content: 'content', type: 'text/plain' },\n      shouldPass: false,\n      expectedError: 'is not a supported file type'\n    },\n    {\n      name: 'Invalid JPG file',\n      file: { name: 'invalid.jpg', content: 'content', type: 'image/jpeg' },\n      shouldPass: false,\n      expectedError: 'is not a supported file type'\n    },\n    {\n      name: 'File too large',\n      file: { name: 'large.pdf', content: 'x'.repeat(26 * 1024 * 1024), type: 'application/pdf' },\n      shouldPass: false,\n      expectedError: 'File is too large'\n    }\n  ];\n\n  return {\n    async testFileValidation() {\n      const user = userEvent.setup();\n      \n      for (const scenario of validationScenarios) {\n        renderWithProviders(React.createElement(config.component, config.props));\n\n        const fileInput = screen.getByTestId('file-input');\n        const testFile = testFactories.createTestFile(\n          scenario.file.name, \n          scenario.file.content, \n          scenario.file.type\n        );\n        \n        await act(async () => {\n          await user.upload(fileInput, testFile);\n        });\n\n        if (scenario.shouldPass) {\n          expect(screen.getByTestId(`file-item-${scenario.file.name}`)).toBeInTheDocument();\n          expect(screen.queryByTestId('error-message')).not.toBeInTheDocument();\n        } else {\n          expect(screen.queryByTestId(`file-item-${scenario.file.name}`)).not.toBeInTheDocument();\n          if (scenario.expectedError) {\n            expect(screen.getByTestId('error-message')).toHaveTextContent(new RegExp(scenario.expectedError, 'i'));\n          }\n        }\n\n        // Clean up for next iteration\n        jest.clearAllMocks();\n      }\n    },\n\n    async testMultipleFileValidation() {\n      const user = userEvent.setup();\n      \n      renderWithProviders(React.createElement(config.component, config.props));\n\n      const fileInput = screen.getByTestId('file-input');\n      const validFile = testFactories.createTestFile('valid.pdf', 'content', 'application/pdf');\n      const invalidFile = testFactories.createTestFile('invalid.txt', 'content', 'text/plain');\n      \n      await act(async () => {\n        await user.upload(fileInput, [validFile, invalidFile]);\n      });\n\n      // Only valid file should be accepted\n      expect(screen.getByTestId('file-item-valid.pdf')).toBeInTheDocument();\n      expect(screen.queryByTestId('file-item-invalid.txt')).not.toBeInTheDocument();\n      \n      // Error message should be shown\n      expect(screen.getByTestId('error-message')).toHaveTextContent(/is not a supported file type/i);\n    }\n  };\n};\n\n// ============================================================================\n// Drag & Drop Testing Pattern\n// ============================================================================\n\nexport const createDragDropTest = (config: FileUploadTestConfig) => {\n  return {\n    async testDragAndDrop() {\n      const mockOnUpload = jest.fn();\n      renderWithProviders(React.createElement(config.component, { ...config.props, onUpload: mockOnUpload }));\n\n      const dropzone = screen.getByText(\"Drag & drop files here\").closest(\"div\");\n      expect(dropzone).toBeInTheDocument();\n\n      const file = testFactories.createTestFile();\n      const dataTransfer = {\n        files: [file],\n        items: [\n          {\n            kind: \"file\",\n            type: file.type,\n            getAsFile: () => file,\n          },\n        ],\n        types: [\"Files\"],\n      };\n\n      if (dropzone) {\n        fireEvent.dragOver(dropzone);\n        fireEvent.drop(dropzone, { dataTransfer });\n      }\n\n      await waitFor(() => {\n        expect(mockOnUpload).toHaveBeenCalledWith([file]);\n      });\n    },\n\n    async testDragOverState() {\n      renderWithProviders(React.createElement(config.component, config.props));\n\n      const dropzone = screen.getByText(\"Drag & drop files here\").closest(\"div\");\n      \n      if (dropzone) {\n        fireEvent.dragOver(dropzone);\n        expect(dropzone).toHaveClass('drag-over');\n      }\n    },\n\n    async testDragLeaveState() {\n      renderWithProviders(React.createElement(config.component, config.props));\n\n      const dropzone = screen.getByText(\"Drag & drop files here\").closest(\"div\");\n      \n      if (dropzone) {\n        fireEvent.dragOver(dropzone);\n        fireEvent.dragLeave(dropzone);\n        expect(dropzone).not.toHaveClass('drag-over');\n      }\n    },\n\n    async testMultipleFileDragDrop() {\n      const mockOnUpload = jest.fn();\n      renderWithProviders(React.createElement(config.component, { ...config.props, onUpload: mockOnUpload }));\n\n      const dropzone = screen.getByText(\"Drag & drop files here\").closest(\"div\");\n      const files = [\n        testFactories.createTestFile(\"test1.pdf\"),\n        testFactories.createTestFile(\"test2.pdf\")\n      ];\n      \n      const dataTransfer = {\n        files: files,\n        items: files.map(file => ({\n          kind: \"file\",\n          type: file.type,\n          getAsFile: () => file,\n        })),\n        types: [\"Files\"],\n      };\n\n      if (dropzone) {\n        fireEvent.dragOver(dropzone);\n        fireEvent.drop(dropzone, { dataTransfer });\n      }\n\n      await waitFor(() => {\n        expect(mockOnUpload).toHaveBeenCalledWith(files);\n      });\n    }\n  };\n};\n\n// ============================================================================\n// Upload Progress Testing Pattern\n// ============================================================================\n\nexport const createUploadProgressTest = (config: FileUploadTestConfig) => {\n  return {\n    testProgressDisplay() {\n      const files = [testFactories.createTestFile(\"test1.pdf\")];\n\n      renderWithProviders(\n        React.createElement(config.component, {\n          ...config.props,\n          files: files,\n          uploadProgress: { \"test1.pdf\": 50 }\n        })\n      );\n\n      const progressBar = screen.getByLabelText(/upload progress for test1.pdf/i);\n      expect(progressBar).toHaveAttribute(\"aria-valuenow\", \"50\");\n      expect(progressBar).toHaveAttribute(\"aria-valuemin\", \"0\");\n      expect(progressBar).toHaveAttribute(\"aria-valuemax\", \"100\");\n    },\n\n    testMultipleFileProgress() {\n      const files = [\n        testFactories.createTestFile(\"test1.pdf\"),\n        testFactories.createTestFile(\"test2.pdf\")\n      ];\n\n      renderWithProviders(\n        React.createElement(config.component, {\n          ...config.props,\n          files: files,\n          uploadProgress: { \n            \"test1.pdf\": 25, \n            \"test2.pdf\": 75 \n          }\n        })\n      );\n\n      const progress1 = screen.getByLabelText(/upload progress for test1.pdf/i);\n      const progress2 = screen.getByLabelText(/upload progress for test2.pdf/i);\n      \n      expect(progress1).toHaveAttribute(\"aria-valuenow\", \"25\");\n      expect(progress2).toHaveAttribute(\"aria-valuenow\", \"75\");\n    },\n\n    testCompletionState() {\n      const files = [testFactories.createTestFile(\"test1.pdf\")];\n\n      renderWithProviders(\n        React.createElement(config.component, {\n          ...config.props,\n          files: files,\n          uploadProgress: { \"test1.pdf\": 100 }\n        })\n      );\n\n      expect(screen.getByText(/upload complete/i)).toBeInTheDocument();\n    }\n  };\n};\n\n// ============================================================================\n// File List Management Testing Pattern\n// ============================================================================\n\nexport const createFileListTest = (config: FileUploadTestConfig) => {\n  return {\n    testFileListDisplay() {\n      const files = [\n        testFactories.createTestFile(\"test1.pdf\"),\n        testFactories.createTestFile(\"test2.pdf\")\n      ];\n\n      renderWithProviders(\n        React.createElement(config.component, {\n          ...config.props,\n          files: files\n        })\n      );\n\n      expect(screen.getByText(\"test1.pdf\")).toBeInTheDocument();\n      expect(screen.getByText(\"test2.pdf\")).toBeInTheDocument();\n    },\n\n    async testFileRemoval() {\n      const mockOnRemove = jest.fn();\n      const files = [\n        testFactories.createTestFile(\"test1.pdf\"),\n        testFactories.createTestFile(\"test2.pdf\")\n      ];\n\n      renderWithProviders(\n        React.createElement(config.component, {\n          ...config.props,\n          files: files,\n          onRemove: mockOnRemove\n        })\n      );\n\n      const removeButtons = screen.getAllByLabelText(/remove file/i);\n      fireEvent.click(removeButtons[0]);\n\n      expect(mockOnRemove).toHaveBeenCalledWith(0);\n    },\n\n    testFileCountDisplay() {\n      const files = [\n        testFactories.createTestFile(\"test1.pdf\"),\n        testFactories.createTestFile(\"test2.pdf\"),\n        testFactories.createTestFile(\"test3.pdf\")\n      ];\n\n      renderWithProviders(\n        React.createElement(config.component, {\n          ...config.props,\n          files: files\n        })\n      );\n\n      expect(screen.getByText(\"3 files selected\")).toBeInTheDocument();\n    },\n\n    testFileSizeDisplay() {\n      const files = [\n        testFactories.createTestFile(\"small.pdf\", \"small content\"),\n        testFactories.createTestFile(\"large.pdf\", \"x\".repeat(1000))\n      ];\n\n      renderWithProviders(\n        React.createElement(config.component, {\n          ...config.props,\n          files: files\n        })\n      );\n\n      expect(screen.getByText(/small\\.pdf/)).toBeInTheDocument();\n      expect(screen.getByText(/large\\.pdf/)).toBeInTheDocument();\n    }\n  };\n};\n\n// ============================================================================\n// Error Handling Testing Pattern\n// ============================================================================\n\nexport const createFileUploadErrorTest = (config: FileUploadTestConfig) => {\n  return {\n    async testUploadErrors() {\n      const mockOnUploadError = jest.fn();\n      renderWithProviders(\n        React.createElement(config.component, {\n          ...config.props,\n          onUploadError: mockOnUploadError\n        })\n      );\n\n      const file = testFactories.createTestFile(\"test.pdf\");\n      const input = screen.getByTestId(\"file-input\");\n\n      Object.defineProperty(input, \"files\", {\n        value: [file],\n      });\n\n      fireEvent.change(input);\n\n      // Simulate upload error\n      const mockUpload = jest.fn().mockRejectedValueOnce(new Error(\"Upload failed\"));\n      mockUpload.mockRejectedValueOnce(new Error(\"Upload failed\"));\n\n      await waitFor(() => {\n        expect(mockOnUploadError).toHaveBeenCalled();\n      });\n    },\n\n    async testNetworkTimeout() {\n      const user = userEvent.setup();\n      \n      // Mock network timeout\n      const mockUpload = jest.fn().mockImplementation(() => \n        new Promise((_, reject) => \n          setTimeout(() => reject(new Error('Network timeout')), 100)\n        )\n      );\n\n      renderWithProviders(React.createElement(config.component, config.props));\n\n      const fileInput = screen.getByTestId('file-input');\n      const testFile = testFactories.createTestFile('test.pdf', 'content', 'application/pdf');\n      \n      await act(async () => {\n        await user.upload(fileInput, testFile);\n      });\n\n      await waitFor(() => {\n        expect(screen.getByText(/network timeout/i)).toBeInTheDocument();\n      }, { timeout: 5000 });\n    },\n\n    async testRetryFunctionality() {\n      const user = userEvent.setup();\n      \n      // First attempt fails\n      const mockUpload = jest.fn().mockRejectedValueOnce(new Error('Upload failed'));\n      \n      renderWithProviders(React.createElement(config.component, config.props));\n\n      const fileInput = screen.getByTestId('file-input');\n      const testFile = testFactories.createTestFile('test.pdf', 'content', 'application/pdf');\n      \n      await act(async () => {\n        await user.upload(fileInput, testFile);\n      });\n\n      await waitFor(() => {\n        expect(screen.getByTestId('error-message')).toBeInTheDocument();\n      });\n\n      // Retry upload\n      mockUpload.mockResolvedValueOnce({ id: 'doc-123', status: 'completed' });\n\n      const retryButton = screen.getByText(/retry/i);\n      await act(async () => {\n        await user.click(retryButton);\n      });\n\n      await waitFor(() => {\n        expect(screen.queryByTestId('error-message')).not.toBeInTheDocument();\n      });\n    }\n  };\n};\n"],"names":["createDragDropTest","createFileListTest","createFileUploadErrorTest","createFileValidationTest","createUploadProgressTest","config","validationScenarios","name","file","content","type","shouldPass","expectedError","repeat","testFileValidation","user","userEvent","setup","scenario","renderWithProviders","React","createElement","component","props","fileInput","screen","getByTestId","testFile","testFactories","createTestFile","act","upload","expect","toBeInTheDocument","queryByTestId","not","toHaveTextContent","RegExp","jest","clearAllMocks","testMultipleFileValidation","validFile","invalidFile","testDragAndDrop","mockOnUpload","fn","onUpload","dropzone","getByText","closest","dataTransfer","files","items","kind","getAsFile","types","fireEvent","dragOver","drop","waitFor","toHaveBeenCalledWith","testDragOverState","toHaveClass","testDragLeaveState","dragLeave","testMultipleFileDragDrop","map","testProgressDisplay","uploadProgress","progressBar","getByLabelText","toHaveAttribute","testMultipleFileProgress","progress1","progress2","testCompletionState","testFileListDisplay","testFileRemoval","mockOnRemove","onRemove","removeButtons","getAllByLabelText","click","testFileCountDisplay","testFileSizeDisplay","testUploadErrors","mockOnUploadError","onUploadError","input","Object","defineProperty","value","change","mockUpload","mockRejectedValueOnce","Error","toHaveBeenCalled","testNetworkTimeout","mockImplementation","Promise","_","reject","setTimeout","timeout","testRetryFunctionality","mockResolvedValueOnce","id","status","retryButton"],"mappings":"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"}