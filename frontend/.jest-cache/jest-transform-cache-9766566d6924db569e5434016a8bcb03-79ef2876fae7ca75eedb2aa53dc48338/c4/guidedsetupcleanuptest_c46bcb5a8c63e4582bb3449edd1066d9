5678ffc4fb263f5623675ddae26a5249
"use strict";
// Mock the cleanup utilities
jest.mock('../../utils/cleanup-utils', ()=>({
        performComprehensiveCleanup: jest.fn().mockResolvedValue(undefined),
        cleanupOnAbandon: jest.fn().mockResolvedValue(undefined),
        isCleanupInProgress: jest.fn().mockReturnValue(false),
        getCleanupQueueLength: jest.fn().mockReturnValue(0),
        registerUpload: jest.fn(),
        cleanupLocalStorage: jest.fn().mockResolvedValue(undefined)
    }));
// Mock the auto-save hook
jest.mock('../../hooks/useAutoSave', ()=>({
        useAutoSave: ()=>({
                loadFromStorage: jest.fn().mockReturnValue(null),
                clearStorage: jest.fn(),
                saveToStorage: jest.fn()
            })
    }));
// Mock the project setup hook
jest.mock('../../hooks/useProjectSetup', ()=>({
        useProjectSetup: (initialSetup)=>({
                setup: initialSetup,
                setSetup: jest.fn(),
                hasUnsavedChanges: false,
                setHasUnsavedChanges: jest.fn(),
                handleOptionSelect: jest.fn(),
                handleEvaluationTypeToggle: jest.fn(),
                handleAddDate: jest.fn(),
                handleRemoveDate: jest.fn(),
                handleFileUpload: jest.fn(),
                handleCourseFileUpload: jest.fn(),
                handleTestFileUpload: jest.fn(),
                handleRemoveFile: jest.fn(),
                handleRemoveCourseFile: jest.fn(),
                handleRemoveTestFile: jest.fn(),
                handleApplyAIDates: jest.fn(),
                handleApplyAIRecommendations: jest.fn()
            })
    }));
// Mock the step navigation hook
jest.mock('../../hooks/useStepNavigation', ()=>({
        useStepNavigation: ()=>({
                currentStep: {
                    id: 'projectName',
                    title: 'Project Name',
                    description: 'Test',
                    icon: 'TestIcon'
                },
                handleNext: jest.fn(),
                handleBack: jest.fn(),
                setCurrentStep: jest.fn(),
                getCurrentStepIndex: jest.fn().mockReturnValue(1),
                getTotalSteps: jest.fn().mockReturnValue(10),
                progress: 10,
                currentStepData: {
                    id: 'projectName',
                    title: 'Project Name',
                    description: 'Test',
                    icon: 'TestIcon'
                },
                isLastStep: false,
                isFirstStep: true
            })
    }));
// Mock the step components
jest.mock('../steps', ()=>({
        ProjectNameStep: ({ onProjectNameChange })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "project-name-step",
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                    "data-testid": "project-name-input",
                    onChange: (e)=>onProjectNameChange(e.target.value),
                    placeholder: "Enter project name"
                })
            }),
        PurposeStep: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "purpose-step",
                children: "Purpose Step"
            }),
        EducationLevelStep: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "education-level-step",
                children: "Education Level Step"
            }),
        SyllabusUploadStep: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "syllabus-upload-step",
                children: "Syllabus Upload Step"
            }),
        ExtractionResultsStep: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "extraction-results-step",
                children: "Extraction Results Step"
            }),
        LearningPreferencesStep: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "learning-preferences-step",
                children: "Learning Preferences Step"
            }),
        CourseContentUploadStep: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "course-content-upload-step",
                children: "Course Content Upload Step"
            }),
        TestUploadStep: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "test-upload-step",
                children: "Test Upload Step"
            }),
        TimelineStep: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "timeline-step",
                children: "Timeline Step"
            }),
        GoalStep: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "goal-step",
                children: "Goal Step"
            }),
        StudyFrequencyStep: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "study-frequency-step",
                children: "Study Frequency Step"
            }),
        CollaborationStep: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "collaboration-step",
                children: "Collaboration Step"
            })
    }));
// Mock next/navigation
jest.mock('next/navigation', ()=>({
        useRouter: ()=>({
                push: jest.fn(),
                back: jest.fn(),
                forward: jest.fn(),
                refresh: jest.fn(),
                replace: jest.fn()
            })
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _react1 = require("@testing-library/react");
require("@testing-library/jest-dom");
const _guidedsetup = /*#__PURE__*/ _interop_require_default(require("../guided-setup"));
const _testhelpers = require("../../../../../test-utils/test-helpers");
const _uploadtesthelpers = require("../../../../../test-utils/upload-test-helpers");
const _cleanuputils = /*#__PURE__*/ _interop_require_wildcard(require("../../utils/cleanup-utils"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
// Setup test environment
const { mocks, createBeforeEach, createAfterEach } = (0, _uploadtesthelpers.createUploadTestSetup)();
const localStorageMock = (0, _testhelpers.createLocalStorageMock)();
describe('GuidedSetup Cleanup Integration', ()=>{
    const mockOnBack = jest.fn();
    beforeEach(()=>{
        Object.defineProperty(window, 'localStorage', {
            value: localStorageMock
        });
        jest.clearAllMocks();
        mockOnBack.mockClear();
    });
    describe('Component Unmount Cleanup', ()=>{
        it('should call clearStorage on component unmount', ()=>{
            const { unmount } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_guidedsetup.default, {
                onBack: mockOnBack
            }));
            // Unmount the component
            unmount();
            // Note: We can't directly test the useEffect cleanup, but we can verify
            // that the cleanup utilities are properly mocked and available
            expect(_cleanuputils.performComprehensiveCleanup).toBeDefined();
        });
    });
    describe('Navigation Cleanup', ()=>{
        it('should call cleanup when navigating back from first step', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_guidedsetup.default, {
                onBack: mockOnBack
            }));
            // Find and click the back button
            const backButton = _react1.screen.getByRole('button', {
                name: /back/i
            });
            await (0, _react1.act)(async ()=>{
                _react1.fireEvent.click(backButton);
            });
            // Should call onBack
            expect(mockOnBack).toHaveBeenCalled();
        });
        it('should handle cleanup during navigation', async ()=>{
            const mockCleanup = _cleanuputils.performComprehensiveCleanup;
            mockCleanup.mockResolvedValue(undefined);
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_guidedsetup.default, {
                onBack: mockOnBack
            }));
            // Simulate navigation that triggers cleanup
            const backButton = _react1.screen.getByRole('button', {
                name: /back/i
            });
            await (0, _react1.act)(async ()=>{
                _react1.fireEvent.click(backButton);
            });
            // Cleanup should be available for use
            expect(mockCleanup).toBeDefined();
        });
    });
    describe('State Cleanup', ()=>{
        it('should reset state when cleanup is triggered', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_guidedsetup.default, {
                onBack: mockOnBack
            }));
            // Enter some data
            const projectNameInput = _react1.screen.getByTestId('project-name-input');
            _react1.fireEvent.change(projectNameInput, {
                target: {
                    value: 'Test Project'
                }
            });
            // Verify data was entered
            expect(projectNameInput).toHaveValue('Test Project');
            // Note: In a real scenario, cleanup would reset this state
            // Here we're testing that the component can handle cleanup operations
            expect(_cleanuputils.cleanupOnAbandon).toBeDefined();
        });
    });
    describe('localStorage Cleanup', ()=>{
        it('should handle localStorage cleanup during component lifecycle', ()=>{
            // Setup localStorage with some data
            localStorageMock.setItem('project-setup-guided-setup', '{"data": "test"}');
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_guidedsetup.default, {
                onBack: mockOnBack
            }));
            // Verify component renders with localStorage data available
            expect(localStorageMock.getItem).toHaveBeenCalledWith('project-setup-guided-setup');
            // Cleanup utilities should be available
            expect(_cleanuputils.cleanupLocalStorage).toBeDefined();
        });
        it('should handle localStorage errors gracefully', ()=>{
            // Mock localStorage to throw error
            localStorageMock.removeItem = jest.fn().mockImplementation(()=>{
                throw new Error('localStorage error');
            });
            // Component should still render
            expect(()=>(0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_guidedsetup.default, {
                    onBack: mockOnBack
                }))).not.toThrow();
        });
    });
    describe('Race Condition Handling', ()=>{
        it('should handle concurrent cleanup operations', async ()=>{
            const mockIsCleanupInProgress = _cleanuputils.isCleanupInProgress;
            const mockGetCleanupQueueLength = _cleanuputils.getCleanupQueueLength;
            mockIsCleanupInProgress.mockReturnValue(false);
            mockGetCleanupQueueLength.mockReturnValue(0);
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_guidedsetup.default, {
                onBack: mockOnBack
            }));
            // Verify cleanup state tracking is available
            expect(mockIsCleanupInProgress()).toBe(false);
            expect(mockGetCleanupQueueLength()).toBe(0);
        });
        it('should handle cleanup in progress state', async ()=>{
            const mockIsCleanupInProgress = _cleanuputils.isCleanupInProgress;
            mockIsCleanupInProgress.mockReturnValue(true);
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_guidedsetup.default, {
                onBack: mockOnBack
            }));
            // Component should handle cleanup in progress state
            expect(mockIsCleanupInProgress()).toBe(true);
        });
    });
    describe('Error Handling', ()=>{
        it('should handle cleanup errors gracefully', async ()=>{
            const mockCleanup = _cleanuputils.performComprehensiveCleanup;
            mockCleanup.mockRejectedValue(new Error('Cleanup failed'));
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_guidedsetup.default, {
                onBack: mockOnBack
            }));
            // Component should still render even if cleanup fails
            expect(_react1.screen.getByTestId('project-name-step')).toBeInTheDocument();
        });
        it('should handle localStorage quota exceeded', ()=>{
            // Mock localStorage to simulate quota exceeded
            const originalGetItem = localStorageMock.getItem;
            localStorageMock.getItem = jest.fn().mockImplementation((key)=>{
                if (key === 'project-setup-guided-setup') {
                    return 'x'.repeat(5 * 1024 * 1024); // 5MB
                }
                return originalGetItem(key);
            });
            // Component should still render
            expect(()=>(0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_guidedsetup.default, {
                    onBack: mockOnBack
                }))).not.toThrow();
        });
    });
    describe('Upload Cleanup', ()=>{
        it('should handle upload cleanup during component lifecycle', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_guidedsetup.default, {
                onBack: mockOnBack
            }));
            // Verify upload cleanup utilities are available
            expect(_cleanuputils.registerUpload).toBeDefined();
        });
        it('should abort in-flight uploads during cleanup', async ()=>{
            const mockAbortController = {
                abort: jest.fn()
            };
            // Register an upload
            _cleanuputils.registerUpload(mockAbortController);
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_guidedsetup.default, {
                onBack: mockOnBack
            }));
            // Verify upload tracking is working
            expect(_cleanuputils.registerUpload).toHaveBeenCalledWith(mockAbortController);
        });
    });
    describe('Integration with Auto-Save', ()=>{
        it('should work with auto-save functionality', ()=>{
            // Setup localStorage with auto-save data
            localStorageMock.setItem('project-setup-guided-setup', JSON.stringify({
                data: {
                    projectName: 'Test Project'
                },
                timestamp: Date.now()
            }));
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_guidedsetup.default, {
                onBack: mockOnBack
            }));
            // Component should load with auto-save data
            expect(localStorageMock.getItem).toHaveBeenCalledWith('project-setup-guided-setup');
        });
        it('should clear auto-save data during cleanup', ()=>{
            // Setup localStorage with auto-save data
            localStorageMock.setItem('project-setup-guided-setup', '{"data": "test"}');
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_guidedsetup.default, {
                onBack: mockOnBack
            }));
            // Verify data exists
            expect(localStorageMock.getItem).toHaveBeenCalledWith('project-setup-guided-setup');
            // Cleanup utilities should be able to clear this data
            expect(_cleanuputils.cleanupLocalStorage).toBeDefined();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,