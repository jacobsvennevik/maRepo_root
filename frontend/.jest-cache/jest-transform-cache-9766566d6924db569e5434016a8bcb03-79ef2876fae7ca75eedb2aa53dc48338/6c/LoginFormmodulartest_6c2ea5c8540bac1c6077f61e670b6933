5e42461e7310ca7cd7180cf23c25098a
/**
 * LoginForm Modular Tests - Simplified Version
 * 
 * Working modular test suite using simplified patterns for
 * authentication functionality testing.
 */ "use strict";
// Mock authentication services
jest.mock('@/lib/axios-auth', ()=>({
        axiosAuth: {
            post: jest.fn()
        }
    }));
jest.mock('@/lib/axios-api', ()=>({
        axiosApi: {
            get: jest.fn(),
            post: jest.fn(),
            patch: jest.fn(),
            delete: jest.fn()
        }
    }));
jest.mock('next/navigation', ()=>({
        useRouter: ()=>_mocks.standardMocks.router
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
require("@testing-library/jest-dom");
const _LoginForm = require("../LoginForm");
const _sharedsetup = require("../../../../test-utils/setup/shared-setup");
const _mocks = require("../../../../test-utils/mocks");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
describe('LoginForm', ()=>{
    const { mockAxiosAuth, mockAxiosApi, mockRouter } = _mocks.standardMocks;
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    // ============================================================================
    // Rendering Tests
    // ============================================================================
    describe('Rendering', ()=>{
        it('renders login form with all required elements', ()=>{
            (0, _sharedsetup.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoginForm.LoginForm, {}));
            expect(_react1.screen.getByTestId('login-form')).toBeInTheDocument();
            expect(_react1.screen.getByLabelText(/email/i)).toBeInTheDocument();
            expect(_react1.screen.getByLabelText(/password/i)).toBeInTheDocument();
            expect(_react1.screen.getByRole('button', {
                name: /^sign in$/i
            })).toBeInTheDocument();
        });
        it('renders with proper accessibility attributes', ()=>{
            (0, _sharedsetup.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoginForm.LoginForm, {}));
            const form = _react1.screen.getByTestId('login-form');
            const emailInput = _react1.screen.getByLabelText(/email/i);
            const passwordInput = _react1.screen.getByLabelText(/password/i);
            expect(form).toBeInTheDocument();
            expect(emailInput).toHaveAttribute('type', 'email');
            expect(passwordInput).toHaveAttribute('type', 'password');
        });
    });
    // ============================================================================
    // Authentication Flow Tests
    // ============================================================================
    describe('Authentication Flow', ()=>{
        it('handles successful login', async ()=>{
            const user = _userevent.default.setup();
            // Mock successful responses
            mockAxiosAuth.post.mockResolvedValueOnce({
                data: {
                    access: 'mock-access-token',
                    refresh: 'mock-refresh-token'
                }
            });
            mockAxiosApi.get.mockResolvedValueOnce({
                data: {
                    id: 1,
                    email: 'test@example.com'
                }
            });
            (0, _sharedsetup.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoginForm.LoginForm, {}));
            // Fill and submit form
            await (0, _react1.act)(async ()=>{
                await user.type(_react1.screen.getByLabelText(/email/i), 'test@example.com');
                await user.type(_react1.screen.getByLabelText(/password/i), 'password123');
                await user.click(_react1.screen.getByRole('button', {
                    name: /^sign in$/i
                }));
            });
            // Verify authentication flow
            await (0, _react1.waitFor)(()=>{
                expect(mockAxiosAuth.post).toHaveBeenCalledWith('/token/', {
                    email: 'test@example.com',
                    password: 'password123'
                });
                expect(mockAxiosApi.get).toHaveBeenCalledWith('users/me/');
                expect(mockRouter.push).toHaveBeenCalledWith('/dashboard');
            }, {
                timeout: 5000
            });
        });
        it('handles login error', async ()=>{
            const user = _userevent.default.setup();
            // Mock failed login
            mockAxiosAuth.post.mockRejectedValueOnce({
                response: {
                    data: {
                        detail: 'Invalid credentials'
                    }
                }
            });
            (0, _sharedsetup.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoginForm.LoginForm, {}));
            // Fill and submit form
            await (0, _react1.act)(async ()=>{
                await user.type(_react1.screen.getByLabelText(/email/i), 'test@example.com');
                await user.type(_react1.screen.getByLabelText(/password/i), 'wrongpassword');
                await user.click(_react1.screen.getByRole('button', {
                    name: /^sign in$/i
                }));
            });
            // Wait for error message
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText(/invalid credentials/i)).toBeInTheDocument();
            }, {
                timeout: 3000
            });
        });
        it('validates required fields', async ()=>{
            const user = _userevent.default.setup();
            (0, _sharedsetup.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoginForm.LoginForm, {}));
            // Try to submit without filling fields
            await (0, _react1.act)(async ()=>{
                await user.click(_react1.screen.getByRole('button', {
                    name: /^sign in$/i
                }));
            });
            // Check for validation messages
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText(/please enter a valid email address/i)).toBeInTheDocument();
                expect(_react1.screen.getByText(/password must be at least 8 characters/i)).toBeInTheDocument();
            }, {
                timeout: 3000
            });
        });
    });
    // ============================================================================
    // Data-Driven Tests
    // ============================================================================
    describe('Data-Driven Authentication', ()=>{
        const validCredentials = [
            {
                email: 'test@example.com',
                password: 'password123'
            },
            {
                email: 'user@domain.org',
                password: 'securepass456'
            },
            {
                email: 'admin@company.com',
                password: 'adminpass789'
            }
        ];
        validCredentials.forEach((credentials, index)=>{
            it(`handles valid credentials ${index + 1}`, async ()=>{
                const user = _userevent.default.setup();
                // Mock successful responses
                mockAxiosAuth.post.mockResolvedValueOnce({
                    data: {
                        access: 'mock-access-token',
                        refresh: 'mock-refresh-token'
                    }
                });
                mockAxiosApi.get.mockResolvedValueOnce({
                    data: {
                        id: 1,
                        email: credentials.email
                    }
                });
                (0, _sharedsetup.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoginForm.LoginForm, {}));
                // Fill and submit form
                await (0, _react1.act)(async ()=>{
                    await user.type(_react1.screen.getByLabelText(/email/i), credentials.email);
                    await user.type(_react1.screen.getByLabelText(/password/i), credentials.password);
                    await user.click(_react1.screen.getByRole('button', {
                        name: /^sign in$/i
                    }));
                });
                // Verify authentication flow
                await (0, _react1.waitFor)(()=>{
                    expect(mockAxiosAuth.post).toHaveBeenCalledWith('/token/', {
                        email: credentials.email,
                        password: credentials.password
                    });
                    expect(mockAxiosApi.get).toHaveBeenCalledWith('users/me/');
                    expect(mockRouter.push).toHaveBeenCalledWith('/dashboard');
                }, {
                    timeout: 5000
                });
            });
        });
    });
    // ============================================================================
    // Accessibility Tests
    // ============================================================================
    describe('Accessibility', ()=>{
        it('has proper ARIA labels and roles', ()=>{
            (0, _sharedsetup.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoginForm.LoginForm, {}));
            const form = _react1.screen.getByTestId('login-form');
            const emailInput = _react1.screen.getByLabelText(/email/i);
            const passwordInput = _react1.screen.getByLabelText(/password/i);
            const submitButton = _react1.screen.getByRole('button', {
                name: /^sign in$/i
            });
            expect(form).toBeInTheDocument();
            expect(emailInput).toHaveAttribute('type', 'email');
            expect(passwordInput).toHaveAttribute('type', 'password');
            expect(submitButton).toHaveAttribute('type', 'submit');
        });
        it('supports keyboard navigation', async ()=>{
            const user = _userevent.default.setup();
            (0, _sharedsetup.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoginForm.LoginForm, {}));
            // Tab through form elements
            await user.tab();
            expect(_react1.screen.getByLabelText(/email/i)).toHaveFocus();
            await user.tab();
            expect(_react1.screen.getByLabelText(/password/i)).toHaveFocus();
            await user.tab();
            expect(_react1.screen.getByRole('button', {
                name: /^sign in$/i
            })).toHaveFocus();
        });
    });
    // ============================================================================
    // Performance Tests
    // ============================================================================
    describe('Performance', ()=>{
        it('renders within acceptable time', ()=>{
            const startTime = performance.now();
            (0, _sharedsetup.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoginForm.LoginForm, {}));
            const endTime = performance.now();
            expect(endTime - startTime).toBeLessThan(100); // Should render in < 100ms
        });
        it('handles login efficiently', async ()=>{
            const user = _userevent.default.setup();
            mockAxiosAuth.post.mockResolvedValueOnce({
                data: {
                    access: 'token',
                    refresh: 'refresh'
                }
            });
            mockAxiosApi.get.mockResolvedValueOnce({
                data: {
                    id: 1,
                    email: 'test@example.com'
                }
            });
            (0, _sharedsetup.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoginForm.LoginForm, {}));
            const startTime = performance.now();
            await (0, _react1.act)(async ()=>{
                await user.type(_react1.screen.getByLabelText(/email/i), 'test@example.com');
                await user.type(_react1.screen.getByLabelText(/password/i), 'password123');
                await user.click(_react1.screen.getByRole('button', {
                    name: /^sign in$/i
                }));
            });
            await (0, _react1.waitFor)(()=>{
                expect(mockAxiosAuth.post).toHaveBeenCalled();
            });
            const endTime = performance.now();
            expect(endTime - startTime).toBeLessThan(2000); // Should complete in < 2s
        });
    });
});

//# sourceMappingURL=data:application/json;base64,