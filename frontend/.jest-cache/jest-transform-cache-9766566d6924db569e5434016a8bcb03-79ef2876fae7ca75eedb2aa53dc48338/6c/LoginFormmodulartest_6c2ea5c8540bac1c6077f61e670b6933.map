{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/app/(auth)/components/__tests__/LoginForm-modular.test.tsx"],"sourcesContent":["/**\n * LoginForm Modular Tests - Simplified Version\n * \n * Working modular test suite using simplified patterns for\n * authentication functionality testing.\n */\n\nimport React from 'react';\nimport { screen, fireEvent, waitFor, act } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport '@testing-library/jest-dom';\n\nimport { LoginForm } from '../LoginForm';\nimport { renderWithProviders } from '../../../../test-utils/setup/shared-setup';\nimport { standardMocks } from '../../../../test-utils/mocks';\n\n// Mock authentication services\njest.mock('@/lib/axios-auth', () => ({\n  axiosAuth: { post: jest.fn() },\n}));\n\njest.mock('@/lib/axios-api', () => ({\n  axiosApi: { get: jest.fn(), post: jest.fn(), patch: jest.fn(), delete: jest.fn() },\n}));\n\njest.mock('next/navigation', () => ({\n  useRouter: () => standardMocks.router,\n}));\n\ndescribe('LoginForm', () => {\n  const { mockAxiosAuth, mockAxiosApi, mockRouter } = standardMocks;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  // ============================================================================\n  // Rendering Tests\n  // ============================================================================\n\n  describe('Rendering', () => {\n    it('renders login form with all required elements', () => {\n      renderWithProviders(<LoginForm />);\n      \n      expect(screen.getByTestId('login-form')).toBeInTheDocument();\n      expect(screen.getByLabelText(/email/i)).toBeInTheDocument();\n      expect(screen.getByLabelText(/password/i)).toBeInTheDocument();\n      expect(screen.getByRole('button', { name: /^sign in$/i })).toBeInTheDocument();\n    });\n\n    it('renders with proper accessibility attributes', () => {\n      renderWithProviders(<LoginForm />);\n      \n      const form = screen.getByTestId('login-form');\n      const emailInput = screen.getByLabelText(/email/i);\n      const passwordInput = screen.getByLabelText(/password/i);\n      \n      expect(form).toBeInTheDocument();\n      expect(emailInput).toHaveAttribute('type', 'email');\n      expect(passwordInput).toHaveAttribute('type', 'password');\n    });\n  });\n\n  // ============================================================================\n  // Authentication Flow Tests\n  // ============================================================================\n\n  describe('Authentication Flow', () => {\n    it('handles successful login', async () => {\n      const user = userEvent.setup();\n      \n      // Mock successful responses\n      mockAxiosAuth.post.mockResolvedValueOnce({\n        data: {\n          access: 'mock-access-token',\n          refresh: 'mock-refresh-token',\n        },\n      });\n      \n      mockAxiosApi.get.mockResolvedValueOnce({\n        data: { id: 1, email: 'test@example.com' }\n      });\n\n      renderWithProviders(<LoginForm />);\n\n      // Fill and submit form\n      await act(async () => {\n        await user.type(screen.getByLabelText(/email/i), 'test@example.com');\n        await user.type(screen.getByLabelText(/password/i), 'password123');\n        await user.click(screen.getByRole('button', { name: /^sign in$/i }));\n      });\n\n      // Verify authentication flow\n      await waitFor(() => {\n        expect(mockAxiosAuth.post).toHaveBeenCalledWith('/token/', {\n          email: 'test@example.com',\n          password: 'password123',\n        });\n        expect(mockAxiosApi.get).toHaveBeenCalledWith('users/me/');\n        expect(mockRouter.push).toHaveBeenCalledWith('/dashboard');\n      }, { timeout: 5000 });\n    });\n\n    it('handles login error', async () => {\n      const user = userEvent.setup();\n      \n      // Mock failed login\n      mockAxiosAuth.post.mockRejectedValueOnce({\n        response: {\n          data: {\n            detail: 'Invalid credentials'\n          }\n        }\n      });\n\n      renderWithProviders(<LoginForm />);\n\n      // Fill and submit form\n      await act(async () => {\n        await user.type(screen.getByLabelText(/email/i), 'test@example.com');\n        await user.type(screen.getByLabelText(/password/i), 'wrongpassword');\n        await user.click(screen.getByRole('button', { name: /^sign in$/i }));\n      });\n\n      // Wait for error message\n      await waitFor(() => {\n        expect(screen.getByText(/invalid credentials/i)).toBeInTheDocument();\n      }, { timeout: 3000 });\n    });\n\n    it('validates required fields', async () => {\n      const user = userEvent.setup();\n      \n      renderWithProviders(<LoginForm />);\n\n      // Try to submit without filling fields\n      await act(async () => {\n        await user.click(screen.getByRole('button', { name: /^sign in$/i }));\n      });\n\n      // Check for validation messages\n      await waitFor(() => {\n        expect(screen.getByText(/please enter a valid email address/i)).toBeInTheDocument();\n        expect(screen.getByText(/password must be at least 8 characters/i)).toBeInTheDocument();\n      }, { timeout: 3000 });\n    });\n  });\n\n  // ============================================================================\n  // Data-Driven Tests\n  // ============================================================================\n\n  describe('Data-Driven Authentication', () => {\n    const validCredentials = [\n      { email: 'test@example.com', password: 'password123' },\n      { email: 'user@domain.org', password: 'securepass456' },\n      { email: 'admin@company.com', password: 'adminpass789' }\n    ];\n\n    validCredentials.forEach((credentials, index) => {\n      it(`handles valid credentials ${index + 1}`, async () => {\n        const user = userEvent.setup();\n        \n        // Mock successful responses\n        mockAxiosAuth.post.mockResolvedValueOnce({\n          data: {\n            access: 'mock-access-token',\n            refresh: 'mock-refresh-token',\n          },\n        });\n        \n        mockAxiosApi.get.mockResolvedValueOnce({\n          data: { id: 1, email: credentials.email }\n        });\n\n        renderWithProviders(<LoginForm />);\n\n        // Fill and submit form\n        await act(async () => {\n          await user.type(screen.getByLabelText(/email/i), credentials.email);\n          await user.type(screen.getByLabelText(/password/i), credentials.password);\n          await user.click(screen.getByRole('button', { name: /^sign in$/i }));\n        });\n\n        // Verify authentication flow\n        await waitFor(() => {\n          expect(mockAxiosAuth.post).toHaveBeenCalledWith('/token/', {\n            email: credentials.email,\n            password: credentials.password,\n          });\n          expect(mockAxiosApi.get).toHaveBeenCalledWith('users/me/');\n          expect(mockRouter.push).toHaveBeenCalledWith('/dashboard');\n        }, { timeout: 5000 });\n      });\n    });\n  });\n\n  // ============================================================================\n  // Accessibility Tests\n  // ============================================================================\n\n  describe('Accessibility', () => {\n    it('has proper ARIA labels and roles', () => {\n      renderWithProviders(<LoginForm />);\n      \n      const form = screen.getByTestId('login-form');\n      const emailInput = screen.getByLabelText(/email/i);\n      const passwordInput = screen.getByLabelText(/password/i);\n      const submitButton = screen.getByRole('button', { name: /^sign in$/i });\n      \n      expect(form).toBeInTheDocument();\n      expect(emailInput).toHaveAttribute('type', 'email');\n      expect(passwordInput).toHaveAttribute('type', 'password');\n      expect(submitButton).toHaveAttribute('type', 'submit');\n    });\n\n    it('supports keyboard navigation', async () => {\n      const user = userEvent.setup();\n      \n      renderWithProviders(<LoginForm />);\n\n      // Tab through form elements\n      await user.tab();\n      expect(screen.getByLabelText(/email/i)).toHaveFocus();\n      \n      await user.tab();\n      expect(screen.getByLabelText(/password/i)).toHaveFocus();\n      \n      await user.tab();\n      expect(screen.getByRole('button', { name: /^sign in$/i })).toHaveFocus();\n    });\n  });\n\n  // ============================================================================\n  // Performance Tests\n  // ============================================================================\n\n  describe('Performance', () => {\n    it('renders within acceptable time', () => {\n      const startTime = performance.now();\n      renderWithProviders(<LoginForm />);\n      const endTime = performance.now();\n      \n      expect(endTime - startTime).toBeLessThan(100); // Should render in < 100ms\n    });\n\n    it('handles login efficiently', async () => {\n      const user = userEvent.setup();\n      \n      mockAxiosAuth.post.mockResolvedValueOnce({\n        data: { access: 'token', refresh: 'refresh' }\n      });\n      mockAxiosApi.get.mockResolvedValueOnce({\n        data: { id: 1, email: 'test@example.com' }\n      });\n\n      renderWithProviders(<LoginForm />);\n\n      const startTime = performance.now();\n      \n      await act(async () => {\n        await user.type(screen.getByLabelText(/email/i), 'test@example.com');\n        await user.type(screen.getByLabelText(/password/i), 'password123');\n        await user.click(screen.getByRole('button', { name: /^sign in$/i }));\n      });\n\n      await waitFor(() => {\n        expect(mockAxiosAuth.post).toHaveBeenCalled();\n      });\n\n      const endTime = performance.now();\n      expect(endTime - startTime).toBeLessThan(2000); // Should complete in < 2s\n    });\n  });\n});"],"names":["jest","mock","axiosAuth","post","fn","axiosApi","get","patch","delete","useRouter","standardMocks","router","describe","mockAxiosAuth","mockAxiosApi","mockRouter","beforeEach","clearAllMocks","it","renderWithProviders","LoginForm","expect","screen","getByTestId","toBeInTheDocument","getByLabelText","getByRole","name","form","emailInput","passwordInput","toHaveAttribute","user","userEvent","setup","mockResolvedValueOnce","data","access","refresh","id","email","act","type","click","waitFor","toHaveBeenCalledWith","password","push","timeout","mockRejectedValueOnce","response","detail","getByText","validCredentials","forEach","credentials","index","submitButton","tab","toHaveFocus","startTime","performance","now","endTime","toBeLessThan","toHaveBeenCalled"],"mappings":"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"}