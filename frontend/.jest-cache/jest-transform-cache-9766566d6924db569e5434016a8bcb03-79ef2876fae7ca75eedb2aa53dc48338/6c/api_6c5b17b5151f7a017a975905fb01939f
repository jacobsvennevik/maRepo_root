d0cc6494317c9254462275bd44bbd1d6
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    APIError: function() {
        return APIError;
    },
    cleanupAbandonedDrafts: function() {
        return cleanupAbandonedDrafts;
    },
    createProject: function() {
        return createProject;
    },
    finalizeProject: function() {
        return finalizeProject;
    },
    getProjects: function() {
        return getProjects;
    },
    uploadFile: function() {
        return uploadFile;
    },
    uploadFileWithProgress: function() {
        return uploadFileWithProgress;
    },
    uploadSyllabus: function() {
        return uploadSyllabus;
    }
});
const _axios = /*#__PURE__*/ _interop_require_default(require("axios"));
const _axios1 = require("../../../lib/axios");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || "http://localhost:8000";
// Test mode - set to true to bypass API calls and use mock data
const TEST_MODE = process.env.NODE_ENV === "development" && process.env.NEXT_PUBLIC_TEST_MODE !== "false";
const createProject = async (projectData)=>{
    try {
        const response = await _axios1.axiosApi.post("projects/", projectData, {
            headers: {
                "Idempotency-Key": crypto.randomUUID()
            }
        });
        return response.data;
    } catch (error) {
        if (_axios.default.isAxiosError(error) && error.response) {
            console.error("Project creation error:", {
                status: error.response.status,
                data: error.response.data,
                headers: error.response.headers
            });
            throw new APIError(error.response.status, error.response.data.detail || error.response.data.message || "Failed to create project");
        }
        throw new Error("Failed to create project");
    }
};
const uploadFileWithProgress = async (projectId, file, onProgress)=>{
    try {
        const formData = new FormData();
        formData.append("file", file);
        formData.append("project_id", projectId);
        const response = await _axios1.axiosApi.post(`/projects/${projectId}/upload_file/`, formData, {
            headers: {
                "Content-Type": "multipart/form-data"
            },
            onUploadProgress: (progressEvent)=>{
                if (progressEvent.total) {
                    const percentCompleted = Math.round(progressEvent.loaded * 100 / progressEvent.total);
                    onProgress(percentCompleted);
                }
            }
        });
        return response.data;
    } catch (error) {
        if (_axios.default.isAxiosError(error) && error.response) {
            console.error("File upload error:", {
                status: error.response.status,
                data: error.response.data,
                headers: error.response.headers
            });
            throw new APIError(error.response.status, error.response.data.detail || error.response.data.message || "Failed to upload file");
        }
        throw new Error("Failed to upload file");
    }
};
async function uploadSyllabus(projectId, file) {
    const formData = new FormData();
    formData.append("file", file);
    try {
        const response = await _axios1.axiosApi.post(`/projects/${projectId}/upload_file/`, formData, {
            headers: {
                "Content-Type": "multipart/form-data"
            }
        });
        return response.data;
    } catch (error) {
        if (_axios.default.isAxiosError(error) && error.response) {
            console.error("Syllabus upload error:", {
                status: error.response.status,
                data: error.response.data,
                headers: error.response.headers
            });
            throw new APIError(error.response.status, error.response.data.detail || error.response.data.message || "Failed to upload syllabus");
        }
        throw new Error("Failed to upload syllabus");
    }
}
async function uploadFile(file, uploadType) {
    const formData = new FormData();
    formData.append("file", file);
    // Map frontend upload types to backend endpoints
    const uploadTypeMap = {
        'course-files': 'course-files',
        'test-files': 'test-files',
        'learning-materials': 'learning-materials',
        'syllabus': 'course-files',
        'tests': 'test-files',
        'content': 'learning-materials' // Map content to learning-materials
    };
    const backendUploadType = uploadTypeMap[uploadType] || uploadType;
    try {
        const response = await _axios1.axiosApi.post(`/upload/${backendUploadType}/`, formData, {
            headers: {
                "Content-Type": "multipart/form-data"
            }
        });
        return response.data;
    } catch (error) {
        if (_axios.default.isAxiosError(error) && error.response) {
            console.error("File upload error:", {
                status: error.response.status,
                data: error.response.data,
                headers: error.response.headers
            });
            throw new APIError(error.response.status, error.response.data.detail || error.response.data.message || "Failed to upload file");
        }
        throw new Error("Failed to upload file");
    }
}
const getProjects = async ()=>{
    try {
        console.log('ðŸ”¥ TESTING: Back to axios with dev-guards disabled');
        const response = await _axios1.axiosApi.get("projects");
        // Import the mapping function
        const { mapApiResponseToProjectV2 } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("./utils")));
        // Transform API response to ProjectV2 format
        const projects = Array.isArray(response.data) ? response.data.map(mapApiResponseToProjectV2) : [
            response.data
        ].map(mapApiResponseToProjectV2);
        return projects;
    } catch (error) {
        if (_axios.default.isAxiosError(error) && error.response) {
            throw new APIError(error.response.status, error.response.data.detail || error.response.data.message || "Failed to fetch projects");
        }
        throw new Error("Failed to fetch projects");
    }
};
const finalizeProject = async (projectId)=>{
    try {
        const response = await _axios1.axiosApi.patch(`projects/${projectId}/`, {
            is_draft: false
        });
        return response.data;
    } catch (error) {
        if (_axios.default.isAxiosError(error) && error.response) {
            throw new APIError(error.response.status, error.response.data.detail || error.response.data.message || "Failed to finalize project");
        }
        throw new Error("Failed to finalize project");
    }
};
const cleanupAbandonedDrafts = async (hours = 24)=>{
    try {
        const response = await _axios1.axiosApi.post("projects/cleanup_drafts/", {
            hours
        });
        return response.data;
    } catch (error) {
        if (_axios.default.isAxiosError(error) && error.response) {
            throw new APIError(error.response.status, error.response.data.error || error.response.data.message || "Failed to cleanup abandoned drafts");
        }
        throw new Error("Failed to cleanup abandoned drafts");
    }
};
class APIError extends Error {
    constructor(statusCode, message){
        super(message), this.statusCode = statusCode;
        this.name = "APIError";
    }
}

//# sourceMappingURL=data:application/json;base64,