b8265bcaffd0048436a26ce4c28767a2
/**
 * Quiz Feature Utilities
 * 
 * Shared utility functions for the quiz feature to improve code reuse
 * and maintainability.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    calculateAccuracy: function() {
        return calculateAccuracy;
    },
    calculateAverageScore: function() {
        return calculateAverageScore;
    },
    calculateGrade: function() {
        return calculateGrade;
    },
    calculateTimeEfficiency: function() {
        return calculateTimeEfficiency;
    },
    deriveTitleFromSource: function() {
        return deriveTitleFromSource;
    },
    formatDuration: function() {
        return formatDuration;
    },
    formatFileSize: function() {
        return formatFileSize;
    },
    formatPercentage: function() {
        return formatPercentage;
    },
    formatTimeAgo: function() {
        return formatTimeAgo;
    },
    formatTimeLimit: function() {
        return formatTimeLimit;
    },
    generateQuizId: function() {
        return generateQuizId;
    },
    getBloomLevelDescription: function() {
        return getBloomLevelDescription;
    },
    getDifficultyColor: function() {
        return getDifficultyColor;
    },
    getDifficultySuggestions: function() {
        return getDifficultySuggestions;
    },
    getFileExtension: function() {
        return getFileExtension;
    },
    getFileIcon: function() {
        return getFileIcon;
    },
    getQuestionMixTotal: function() {
        return getQuestionMixTotal;
    },
    getStatusColor: function() {
        return getStatusColor;
    },
    getSuggestedQuestionMix: function() {
        return getSuggestedQuestionMix;
    },
    getSuggestedTimeLimit: function() {
        return getSuggestedTimeLimit;
    },
    getTimeRemaining: function() {
        return getTimeRemaining;
    },
    isTestModeActive: function() {
        return isTestModeActive;
    },
    isValidFileType: function() {
        return isValidFileType;
    },
    loadFromLocalStorage: function() {
        return loadFromLocalStorage;
    },
    parseTimeLimit: function() {
        return parseTimeLimit;
    },
    removeFromLocalStorage: function() {
        return removeFromLocalStorage;
    },
    sanitizeFileName: function() {
        return sanitizeFileName;
    },
    saveToLocalStorage: function() {
        return saveToLocalStorage;
    },
    validateQuestionCount: function() {
        return validateQuestionCount;
    },
    validateQuestionMix: function() {
        return validateQuestionMix;
    },
    validateQuizTitle: function() {
        return validateQuizTitle;
    },
    validateQuizTopic: function() {
        return validateQuizTopic;
    },
    validateTimeLimit: function() {
        return validateTimeLimit;
    }
});
const _constants = require("../constants");
const getFileIcon = (fileName, fileType)=>{
    const extension = fileType || fileName.split('.').pop()?.toLowerCase();
    const iconMap = {
        pdf: 'text-red-500',
        docx: 'text-blue-500',
        doc: 'text-blue-500',
        txt: 'text-gray-500',
        jpg: 'text-green-500',
        jpeg: 'text-green-500',
        png: 'text-green-500',
        tsx: 'text-purple-500',
        ts: 'text-purple-500',
        js: 'text-purple-500',
        jsx: 'text-purple-500',
        html: 'text-orange-500',
        css: 'text-orange-500'
    };
    return iconMap[extension || ''] || 'text-gray-500';
};
const formatFileSize = (bytes)=>{
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = [
        'Bytes',
        'KB',
        'MB',
        'GB'
    ];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
};
const formatTimeAgo = (dateString)=>{
    const date = new Date(dateString);
    const now = new Date();
    const diffInSeconds = Math.floor((now.getTime() - date.getTime()) / 1000);
    if (diffInSeconds < 60) return 'Just now';
    if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)}m ago`;
    if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)}h ago`;
    return `${Math.floor(diffInSeconds / 86400)}d ago`;
};
const isValidFileType = (file, allowedTypes)=>{
    const fileExtension = file.name.split('.').pop()?.toLowerCase();
    return allowedTypes.includes(fileExtension || '');
};
const getFileExtension = (fileName)=>{
    return fileName.split('.').pop()?.toLowerCase() || '';
};
const getDifficultySuggestions = (topic)=>{
    const topicLower = topic.toLowerCase();
    if (topicLower.includes('basic') || topicLower.includes('intro') || topicLower.includes('fundamental')) {
        return _constants.DIFFICULTY_LEVELS.BEGINNER;
    }
    if (topicLower.includes('advanced') || topicLower.includes('expert') || topicLower.includes('research')) {
        return _constants.DIFFICULTY_LEVELS.ADVANCED;
    }
    if (topicLower.includes('master') || topicLower.includes('phd') || topicLower.includes('doctoral')) {
        return _constants.DIFFICULTY_LEVELS.EXPERT;
    }
    return _constants.DIFFICULTY_LEVELS.INTERMEDIATE;
};
const getSuggestedTimeLimit = (maxQuestions, difficulty)=>{
    const baseTimePerQuestion = _constants.TIME_PER_QUESTION[difficulty] || 90;
    return maxQuestions * baseTimePerQuestion;
};
const getSuggestedQuestionMix = (maxQuestions, difficulty)=>{
    const ratio = _constants.QUESTION_MIX_RATIOS[difficulty] || _constants.QUESTION_MIX_RATIOS[_constants.DIFFICULTY_LEVELS.INTERMEDIATE];
    return {
        MCQ: Math.round(maxQuestions * ratio.MCQ),
        SHORT_ANSWER: Math.round(maxQuestions * ratio.SHORT_ANSWER),
        PRINCIPLE: Math.round(maxQuestions * ratio.PRINCIPLE)
    };
};
const getQuestionMixTotal = (questionMix)=>{
    if (!questionMix) return 0;
    return (questionMix.MCQ || 0) + (questionMix.SHORT_ANSWER || 0) + (questionMix.PRINCIPLE || 0);
};
const validateQuestionMix = (questionMix, maxQuestions)=>{
    if (!questionMix) return true;
    return getQuestionMixTotal(questionMix) === maxQuestions;
};
const calculateGrade = (score)=>{
    if (score >= _constants.GRADE_THRESHOLDS.A) return 'A';
    if (score >= _constants.GRADE_THRESHOLDS.B) return 'B';
    if (score >= _constants.GRADE_THRESHOLDS.C) return 'C';
    if (score >= _constants.GRADE_THRESHOLDS.D) return 'D';
    return 'F';
};
const calculateTimeEfficiency = (avgTimePerQuestion)=>{
    if (avgTimePerQuestion <= _constants.TIME_EFFICIENCY_THRESHOLDS.FAST) return 'fast';
    if (avgTimePerQuestion <= _constants.TIME_EFFICIENCY_THRESHOLDS.NORMAL) return 'normal';
    return 'slow';
};
const calculateAccuracy = (correctAnswers, totalQuestions)=>{
    if (totalQuestions === 0) return 0;
    return Math.round(correctAnswers / totalQuestions * 100);
};
const calculateAverageScore = (scores)=>{
    if (scores.length === 0) return 0;
    return Math.round(scores.reduce((sum, score)=>sum + score, 0) / scores.length);
};
const formatDuration = (seconds)=>{
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor(seconds % 3600 / 60);
    const secs = seconds % 60;
    if (hours > 0) {
        return `${hours}h ${minutes}m ${secs}s`;
    } else if (minutes > 0) {
        return `${minutes}m ${secs}s`;
    } else {
        return `${secs}s`;
    }
};
const formatTimeLimit = (seconds)=>{
    const minutes = Math.round(seconds / 60);
    return `${minutes} min`;
};
const parseTimeLimit = (minutes)=>{
    return minutes * 60;
};
const getTimeRemaining = (startTime, timeLimitSec)=>{
    const elapsed = Math.floor((Date.now() - startTime.getTime()) / 1000);
    return Math.max(0, timeLimitSec - elapsed);
};
const validateQuizTitle = (title)=>{
    const errors = [];
    if (!title || title.trim().length === 0) {
        errors.push('Title is required');
    } else if (title.length > 100) {
        errors.push('Title must be less than 100 characters');
    }
    return errors;
};
const validateQuizTopic = (topic)=>{
    const errors = [];
    if (!topic || topic.trim().length === 0) {
        errors.push('Topic is required');
    } else if (topic.length > 200) {
        errors.push('Topic must be less than 200 characters');
    }
    return errors;
};
const validateQuestionCount = (count)=>{
    const errors = [];
    if (count < 1) {
        errors.push('Must have at least 1 question');
    } else if (count > 50) {
        errors.push('Cannot have more than 50 questions');
    }
    return errors;
};
const validateTimeLimit = (seconds)=>{
    const errors = [];
    if (seconds < 60) {
        errors.push('Time limit must be at least 60 seconds');
    } else if (seconds > 7200) {
        errors.push('Time limit cannot exceed 2 hours');
    }
    return errors;
};
const getStatusColor = (status)=>{
    const colorMap = {
        draft: 'gray',
        active: 'blue',
        completed: 'green',
        archived: 'orange'
    };
    return colorMap[status] || 'gray';
};
const getDifficultyColor = (difficulty)=>{
    if (difficulty <= 2) return 'green';
    if (difficulty <= 3) return 'yellow';
    if (difficulty <= 4) return 'orange';
    return 'red';
};
const getBloomLevelDescription = (level)=>{
    const descriptions = {
        Remember: 'Recall facts and basic concepts',
        Understand: 'Explain ideas or concepts',
        Apply: 'Use information in new situations',
        Analyze: 'Draw connections among ideas',
        Evaluate: 'Justify decisions or courses of action',
        Create: 'Produce new or original work'
    };
    return descriptions[level] || 'Unknown level';
};
const formatPercentage = (value, decimals = 1)=>{
    return `${value.toFixed(decimals)}%`;
};
const isTestModeActive = ()=>{
    // Check if running in test environment
    if (process.env.NODE_ENV === "test") {
        return true;
    }
    // Check for explicit test mode flag in development
    if (process.env.NODE_ENV === "development" && process.env.NEXT_PUBLIC_TEST_MODE === "true") {
        return true;
    }
    // Check for localhost and test mode
    if (typeof window !== "undefined" && window.location.hostname === "localhost" && process.env.NEXT_PUBLIC_TEST_MODE === "true") {
        return true;
    }
    return false;
};
const deriveTitleFromSource = (method, uploadedFiles, selectedFiles)=>{
    if (method === 'files') {
        if (uploadedFiles.length > 0) {
            const base = uploadedFiles[0].name.replace(/\.[^.]+$/, '');
            return `${base} Quiz`;
        }
        const picked = selectedFiles.find((f)=>f.id);
        if (picked) {
            const base = picked.name.replace(/\.[^.]+$/, '');
            return `${base} Quiz`;
        }
    }
    return '';
};
const generateQuizId = ()=>{
    return `quiz_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
};
const sanitizeFileName = (fileName)=>{
    return fileName.replace(/[^a-zA-Z0-9.-]/g, '_');
};
const saveToLocalStorage = (key, data)=>{
    try {
        localStorage.setItem(key, JSON.stringify(data));
    } catch (error) {
        console.warn('Failed to save to localStorage:', error);
    }
};
const loadFromLocalStorage = (key, defaultValue)=>{
    try {
        const item = localStorage.getItem(key);
        return item ? JSON.parse(item) : defaultValue;
    } catch (error) {
        console.warn('Failed to load from localStorage:', error);
        return defaultValue;
    }
};
const removeFromLocalStorage = (key)=>{
    try {
        localStorage.removeItem(key);
    } catch (error) {
        console.warn('Failed to remove from localStorage:', error);
    }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9qYWNvYmhvcm5zdmVubmV2aWsvRG9jdW1lbnRzL0dpdEh1Yi9tYVJlcG9fcm9vdC9mcm9udGVuZC9zcmMvZmVhdHVyZXMvcXVpei91dGlscy9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFF1aXogRmVhdHVyZSBVdGlsaXRpZXNcbiAqIFxuICogU2hhcmVkIHV0aWxpdHkgZnVuY3Rpb25zIGZvciB0aGUgcXVpeiBmZWF0dXJlIHRvIGltcHJvdmUgY29kZSByZXVzZVxuICogYW5kIG1haW50YWluYWJpbGl0eS5cbiAqL1xuXG5pbXBvcnQgeyBESUZGSUNVTFRZX0xFVkVMUywgVElNRV9QRVJfUVVFU1RJT04sIFFVRVNUSU9OX01JWF9SQVRJT1MsIEdSQURFX1RIUkVTSE9MRFMsIFRJTUVfRUZGSUNJRU5DWV9USFJFU0hPTERTIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gRmlsZSBIYW5kbGluZyBVdGlsaXRpZXNcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuZXhwb3J0IGNvbnN0IGdldEZpbGVJY29uID0gKGZpbGVOYW1lOiBzdHJpbmcsIGZpbGVUeXBlPzogc3RyaW5nKSA9PiB7XG4gIGNvbnN0IGV4dGVuc2lvbiA9IGZpbGVUeXBlIHx8IGZpbGVOYW1lLnNwbGl0KCcuJykucG9wKCk/LnRvTG93ZXJDYXNlKCk7XG4gIFxuICBjb25zdCBpY29uTWFwOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0ge1xuICAgIHBkZjogJ3RleHQtcmVkLTUwMCcsXG4gICAgZG9jeDogJ3RleHQtYmx1ZS01MDAnLFxuICAgIGRvYzogJ3RleHQtYmx1ZS01MDAnLFxuICAgIHR4dDogJ3RleHQtZ3JheS01MDAnLFxuICAgIGpwZzogJ3RleHQtZ3JlZW4tNTAwJyxcbiAgICBqcGVnOiAndGV4dC1ncmVlbi01MDAnLFxuICAgIHBuZzogJ3RleHQtZ3JlZW4tNTAwJyxcbiAgICB0c3g6ICd0ZXh0LXB1cnBsZS01MDAnLFxuICAgIHRzOiAndGV4dC1wdXJwbGUtNTAwJyxcbiAgICBqczogJ3RleHQtcHVycGxlLTUwMCcsXG4gICAganN4OiAndGV4dC1wdXJwbGUtNTAwJyxcbiAgICBodG1sOiAndGV4dC1vcmFuZ2UtNTAwJyxcbiAgICBjc3M6ICd0ZXh0LW9yYW5nZS01MDAnLFxuICB9O1xuICBcbiAgcmV0dXJuIGljb25NYXBbZXh0ZW5zaW9uIHx8ICcnXSB8fCAndGV4dC1ncmF5LTUwMCc7XG59O1xuXG5leHBvcnQgY29uc3QgZm9ybWF0RmlsZVNpemUgPSAoYnl0ZXM6IG51bWJlcik6IHN0cmluZyA9PiB7XG4gIGlmIChieXRlcyA9PT0gMCkgcmV0dXJuICcwIEJ5dGVzJztcbiAgY29uc3QgayA9IDEwMjQ7XG4gIGNvbnN0IHNpemVzID0gWydCeXRlcycsICdLQicsICdNQicsICdHQiddO1xuICBjb25zdCBpID0gTWF0aC5mbG9vcihNYXRoLmxvZyhieXRlcykgLyBNYXRoLmxvZyhrKSk7XG4gIHJldHVybiBwYXJzZUZsb2F0KChieXRlcyAvIE1hdGgucG93KGssIGkpKS50b0ZpeGVkKDIpKSArICcgJyArIHNpemVzW2ldO1xufTtcblxuZXhwb3J0IGNvbnN0IGZvcm1hdFRpbWVBZ28gPSAoZGF0ZVN0cmluZzogc3RyaW5nKTogc3RyaW5nID0+IHtcbiAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKGRhdGVTdHJpbmcpO1xuICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xuICBjb25zdCBkaWZmSW5TZWNvbmRzID0gTWF0aC5mbG9vcigobm93LmdldFRpbWUoKSAtIGRhdGUuZ2V0VGltZSgpKSAvIDEwMDApO1xuICBcbiAgaWYgKGRpZmZJblNlY29uZHMgPCA2MCkgcmV0dXJuICdKdXN0IG5vdyc7XG4gIGlmIChkaWZmSW5TZWNvbmRzIDwgMzYwMCkgcmV0dXJuIGAke01hdGguZmxvb3IoZGlmZkluU2Vjb25kcyAvIDYwKX1tIGFnb2A7XG4gIGlmIChkaWZmSW5TZWNvbmRzIDwgODY0MDApIHJldHVybiBgJHtNYXRoLmZsb29yKGRpZmZJblNlY29uZHMgLyAzNjAwKX1oIGFnb2A7XG4gIHJldHVybiBgJHtNYXRoLmZsb29yKGRpZmZJblNlY29uZHMgLyA4NjQwMCl9ZCBhZ29gO1xufTtcblxuZXhwb3J0IGNvbnN0IGlzVmFsaWRGaWxlVHlwZSA9IChmaWxlOiBGaWxlLCBhbGxvd2VkVHlwZXM6IHN0cmluZ1tdKTogYm9vbGVhbiA9PiB7XG4gIGNvbnN0IGZpbGVFeHRlbnNpb24gPSBmaWxlLm5hbWUuc3BsaXQoJy4nKS5wb3AoKT8udG9Mb3dlckNhc2UoKTtcbiAgcmV0dXJuIGFsbG93ZWRUeXBlcy5pbmNsdWRlcyhmaWxlRXh0ZW5zaW9uIHx8ICcnKTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRGaWxlRXh0ZW5zaW9uID0gKGZpbGVOYW1lOiBzdHJpbmcpOiBzdHJpbmcgPT4ge1xuICByZXR1cm4gZmlsZU5hbWUuc3BsaXQoJy4nKS5wb3AoKT8udG9Mb3dlckNhc2UoKSB8fCAnJztcbn07XG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIFF1aXogQ29uZmlndXJhdGlvbiBVdGlsaXRpZXNcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuZXhwb3J0IGNvbnN0IGdldERpZmZpY3VsdHlTdWdnZXN0aW9ucyA9ICh0b3BpYzogc3RyaW5nKTogc3RyaW5nID0+IHtcbiAgY29uc3QgdG9waWNMb3dlciA9IHRvcGljLnRvTG93ZXJDYXNlKCk7XG4gIFxuICBpZiAodG9waWNMb3dlci5pbmNsdWRlcygnYmFzaWMnKSB8fCB0b3BpY0xvd2VyLmluY2x1ZGVzKCdpbnRybycpIHx8IHRvcGljTG93ZXIuaW5jbHVkZXMoJ2Z1bmRhbWVudGFsJykpIHtcbiAgICByZXR1cm4gRElGRklDVUxUWV9MRVZFTFMuQkVHSU5ORVI7XG4gIH1cbiAgXG4gIGlmICh0b3BpY0xvd2VyLmluY2x1ZGVzKCdhZHZhbmNlZCcpIHx8IHRvcGljTG93ZXIuaW5jbHVkZXMoJ2V4cGVydCcpIHx8IHRvcGljTG93ZXIuaW5jbHVkZXMoJ3Jlc2VhcmNoJykpIHtcbiAgICByZXR1cm4gRElGRklDVUxUWV9MRVZFTFMuQURWQU5DRUQ7XG4gIH1cbiAgXG4gIGlmICh0b3BpY0xvd2VyLmluY2x1ZGVzKCdtYXN0ZXInKSB8fCB0b3BpY0xvd2VyLmluY2x1ZGVzKCdwaGQnKSB8fCB0b3BpY0xvd2VyLmluY2x1ZGVzKCdkb2N0b3JhbCcpKSB7XG4gICAgcmV0dXJuIERJRkZJQ1VMVFlfTEVWRUxTLkVYUEVSVDtcbiAgfVxuICBcbiAgcmV0dXJuIERJRkZJQ1VMVFlfTEVWRUxTLklOVEVSTUVESUFURTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRTdWdnZXN0ZWRUaW1lTGltaXQgPSAobWF4UXVlc3Rpb25zOiBudW1iZXIsIGRpZmZpY3VsdHk6IHN0cmluZyk6IG51bWJlciA9PiB7XG4gIGNvbnN0IGJhc2VUaW1lUGVyUXVlc3Rpb24gPSBUSU1FX1BFUl9RVUVTVElPTltkaWZmaWN1bHR5IGFzIGtleW9mIHR5cGVvZiBUSU1FX1BFUl9RVUVTVElPTl0gfHwgOTA7XG4gIHJldHVybiBtYXhRdWVzdGlvbnMgKiBiYXNlVGltZVBlclF1ZXN0aW9uO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldFN1Z2dlc3RlZFF1ZXN0aW9uTWl4ID0gKG1heFF1ZXN0aW9uczogbnVtYmVyLCBkaWZmaWN1bHR5OiBzdHJpbmcpID0+IHtcbiAgY29uc3QgcmF0aW8gPSBRVUVTVElPTl9NSVhfUkFUSU9TW2RpZmZpY3VsdHkgYXMga2V5b2YgdHlwZW9mIFFVRVNUSU9OX01JWF9SQVRJT1NdIHx8IFFVRVNUSU9OX01JWF9SQVRJT1NbRElGRklDVUxUWV9MRVZFTFMuSU5URVJNRURJQVRFXTtcbiAgXG4gIHJldHVybiB7XG4gICAgTUNROiBNYXRoLnJvdW5kKG1heFF1ZXN0aW9ucyAqIHJhdGlvLk1DUSksXG4gICAgU0hPUlRfQU5TV0VSOiBNYXRoLnJvdW5kKG1heFF1ZXN0aW9ucyAqIHJhdGlvLlNIT1JUX0FOU1dFUiksXG4gICAgUFJJTkNJUExFOiBNYXRoLnJvdW5kKG1heFF1ZXN0aW9ucyAqIHJhdGlvLlBSSU5DSVBMRSksXG4gIH07XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0UXVlc3Rpb25NaXhUb3RhbCA9IChxdWVzdGlvbk1peDogYW55KTogbnVtYmVyID0+IHtcbiAgaWYgKCFxdWVzdGlvbk1peCkgcmV0dXJuIDA7XG4gIHJldHVybiAocXVlc3Rpb25NaXguTUNRIHx8IDApICsgKHF1ZXN0aW9uTWl4LlNIT1JUX0FOU1dFUiB8fCAwKSArIChxdWVzdGlvbk1peC5QUklOQ0lQTEUgfHwgMCk7XG59O1xuXG5leHBvcnQgY29uc3QgdmFsaWRhdGVRdWVzdGlvbk1peCA9IChxdWVzdGlvbk1peDogYW55LCBtYXhRdWVzdGlvbnM6IG51bWJlcik6IGJvb2xlYW4gPT4ge1xuICBpZiAoIXF1ZXN0aW9uTWl4KSByZXR1cm4gdHJ1ZTtcbiAgcmV0dXJuIGdldFF1ZXN0aW9uTWl4VG90YWwocXVlc3Rpb25NaXgpID09PSBtYXhRdWVzdGlvbnM7XG59O1xuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBTY29yaW5nIGFuZCBBbmFseXRpY3MgVXRpbGl0aWVzXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbmV4cG9ydCBjb25zdCBjYWxjdWxhdGVHcmFkZSA9IChzY29yZTogbnVtYmVyKTogJ0EnIHwgJ0InIHwgJ0MnIHwgJ0QnIHwgJ0YnID0+IHtcbiAgaWYgKHNjb3JlID49IEdSQURFX1RIUkVTSE9MRFMuQSkgcmV0dXJuICdBJztcbiAgaWYgKHNjb3JlID49IEdSQURFX1RIUkVTSE9MRFMuQikgcmV0dXJuICdCJztcbiAgaWYgKHNjb3JlID49IEdSQURFX1RIUkVTSE9MRFMuQykgcmV0dXJuICdDJztcbiAgaWYgKHNjb3JlID49IEdSQURFX1RIUkVTSE9MRFMuRCkgcmV0dXJuICdEJztcbiAgcmV0dXJuICdGJztcbn07XG5cbmV4cG9ydCBjb25zdCBjYWxjdWxhdGVUaW1lRWZmaWNpZW5jeSA9IChhdmdUaW1lUGVyUXVlc3Rpb246IG51bWJlcik6ICdmYXN0JyB8ICdub3JtYWwnIHwgJ3Nsb3cnID0+IHtcbiAgaWYgKGF2Z1RpbWVQZXJRdWVzdGlvbiA8PSBUSU1FX0VGRklDSUVOQ1lfVEhSRVNIT0xEUy5GQVNUKSByZXR1cm4gJ2Zhc3QnO1xuICBpZiAoYXZnVGltZVBlclF1ZXN0aW9uIDw9IFRJTUVfRUZGSUNJRU5DWV9USFJFU0hPTERTLk5PUk1BTCkgcmV0dXJuICdub3JtYWwnO1xuICByZXR1cm4gJ3Nsb3cnO1xufTtcblxuZXhwb3J0IGNvbnN0IGNhbGN1bGF0ZUFjY3VyYWN5ID0gKGNvcnJlY3RBbnN3ZXJzOiBudW1iZXIsIHRvdGFsUXVlc3Rpb25zOiBudW1iZXIpOiBudW1iZXIgPT4ge1xuICBpZiAodG90YWxRdWVzdGlvbnMgPT09IDApIHJldHVybiAwO1xuICByZXR1cm4gTWF0aC5yb3VuZCgoY29ycmVjdEFuc3dlcnMgLyB0b3RhbFF1ZXN0aW9ucykgKiAxMDApO1xufTtcblxuZXhwb3J0IGNvbnN0IGNhbGN1bGF0ZUF2ZXJhZ2VTY29yZSA9IChzY29yZXM6IG51bWJlcltdKTogbnVtYmVyID0+IHtcbiAgaWYgKHNjb3Jlcy5sZW5ndGggPT09IDApIHJldHVybiAwO1xuICByZXR1cm4gTWF0aC5yb3VuZChzY29yZXMucmVkdWNlKChzdW0sIHNjb3JlKSA9PiBzdW0gKyBzY29yZSwgMCkgLyBzY29yZXMubGVuZ3RoKTtcbn07XG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIFRpbWUgYW5kIER1cmF0aW9uIFV0aWxpdGllc1xuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5leHBvcnQgY29uc3QgZm9ybWF0RHVyYXRpb24gPSAoc2Vjb25kczogbnVtYmVyKTogc3RyaW5nID0+IHtcbiAgY29uc3QgaG91cnMgPSBNYXRoLmZsb29yKHNlY29uZHMgLyAzNjAwKTtcbiAgY29uc3QgbWludXRlcyA9IE1hdGguZmxvb3IoKHNlY29uZHMgJSAzNjAwKSAvIDYwKTtcbiAgY29uc3Qgc2VjcyA9IHNlY29uZHMgJSA2MDtcbiAgXG4gIGlmIChob3VycyA+IDApIHtcbiAgICByZXR1cm4gYCR7aG91cnN9aCAke21pbnV0ZXN9bSAke3NlY3N9c2A7XG4gIH0gZWxzZSBpZiAobWludXRlcyA+IDApIHtcbiAgICByZXR1cm4gYCR7bWludXRlc31tICR7c2Vjc31zYDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYCR7c2Vjc31zYDtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IGZvcm1hdFRpbWVMaW1pdCA9IChzZWNvbmRzOiBudW1iZXIpOiBzdHJpbmcgPT4ge1xuICBjb25zdCBtaW51dGVzID0gTWF0aC5yb3VuZChzZWNvbmRzIC8gNjApO1xuICByZXR1cm4gYCR7bWludXRlc30gbWluYDtcbn07XG5cbmV4cG9ydCBjb25zdCBwYXJzZVRpbWVMaW1pdCA9IChtaW51dGVzOiBudW1iZXIpOiBudW1iZXIgPT4ge1xuICByZXR1cm4gbWludXRlcyAqIDYwO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldFRpbWVSZW1haW5pbmcgPSAoc3RhcnRUaW1lOiBEYXRlLCB0aW1lTGltaXRTZWM6IG51bWJlcik6IG51bWJlciA9PiB7XG4gIGNvbnN0IGVsYXBzZWQgPSBNYXRoLmZsb29yKChEYXRlLm5vdygpIC0gc3RhcnRUaW1lLmdldFRpbWUoKSkgLyAxMDAwKTtcbiAgcmV0dXJuIE1hdGgubWF4KDAsIHRpbWVMaW1pdFNlYyAtIGVsYXBzZWQpO1xufTtcblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gVmFsaWRhdGlvbiBVdGlsaXRpZXNcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuZXhwb3J0IGNvbnN0IHZhbGlkYXRlUXVpelRpdGxlID0gKHRpdGxlOiBzdHJpbmcpOiBzdHJpbmdbXSA9PiB7XG4gIGNvbnN0IGVycm9yczogc3RyaW5nW10gPSBbXTtcbiAgXG4gIGlmICghdGl0bGUgfHwgdGl0bGUudHJpbSgpLmxlbmd0aCA9PT0gMCkge1xuICAgIGVycm9ycy5wdXNoKCdUaXRsZSBpcyByZXF1aXJlZCcpO1xuICB9IGVsc2UgaWYgKHRpdGxlLmxlbmd0aCA+IDEwMCkge1xuICAgIGVycm9ycy5wdXNoKCdUaXRsZSBtdXN0IGJlIGxlc3MgdGhhbiAxMDAgY2hhcmFjdGVycycpO1xuICB9XG4gIFxuICByZXR1cm4gZXJyb3JzO1xufTtcblxuZXhwb3J0IGNvbnN0IHZhbGlkYXRlUXVpelRvcGljID0gKHRvcGljOiBzdHJpbmcpOiBzdHJpbmdbXSA9PiB7XG4gIGNvbnN0IGVycm9yczogc3RyaW5nW10gPSBbXTtcbiAgXG4gIGlmICghdG9waWMgfHwgdG9waWMudHJpbSgpLmxlbmd0aCA9PT0gMCkge1xuICAgIGVycm9ycy5wdXNoKCdUb3BpYyBpcyByZXF1aXJlZCcpO1xuICB9IGVsc2UgaWYgKHRvcGljLmxlbmd0aCA+IDIwMCkge1xuICAgIGVycm9ycy5wdXNoKCdUb3BpYyBtdXN0IGJlIGxlc3MgdGhhbiAyMDAgY2hhcmFjdGVycycpO1xuICB9XG4gIFxuICByZXR1cm4gZXJyb3JzO1xufTtcblxuZXhwb3J0IGNvbnN0IHZhbGlkYXRlUXVlc3Rpb25Db3VudCA9IChjb3VudDogbnVtYmVyKTogc3RyaW5nW10gPT4ge1xuICBjb25zdCBlcnJvcnM6IHN0cmluZ1tdID0gW107XG4gIFxuICBpZiAoY291bnQgPCAxKSB7XG4gICAgZXJyb3JzLnB1c2goJ011c3QgaGF2ZSBhdCBsZWFzdCAxIHF1ZXN0aW9uJyk7XG4gIH0gZWxzZSBpZiAoY291bnQgPiA1MCkge1xuICAgIGVycm9ycy5wdXNoKCdDYW5ub3QgaGF2ZSBtb3JlIHRoYW4gNTAgcXVlc3Rpb25zJyk7XG4gIH1cbiAgXG4gIHJldHVybiBlcnJvcnM7XG59O1xuXG5leHBvcnQgY29uc3QgdmFsaWRhdGVUaW1lTGltaXQgPSAoc2Vjb25kczogbnVtYmVyKTogc3RyaW5nW10gPT4ge1xuICBjb25zdCBlcnJvcnM6IHN0cmluZ1tdID0gW107XG4gIFxuICBpZiAoc2Vjb25kcyA8IDYwKSB7XG4gICAgZXJyb3JzLnB1c2goJ1RpbWUgbGltaXQgbXVzdCBiZSBhdCBsZWFzdCA2MCBzZWNvbmRzJyk7XG4gIH0gZWxzZSBpZiAoc2Vjb25kcyA+IDcyMDApIHtcbiAgICBlcnJvcnMucHVzaCgnVGltZSBsaW1pdCBjYW5ub3QgZXhjZWVkIDIgaG91cnMnKTtcbiAgfVxuICBcbiAgcmV0dXJuIGVycm9ycztcbn07XG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIFVJIFV0aWxpdGllc1xuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5leHBvcnQgY29uc3QgZ2V0U3RhdHVzQ29sb3IgPSAoc3RhdHVzOiBzdHJpbmcpOiBzdHJpbmcgPT4ge1xuICBjb25zdCBjb2xvck1hcDogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHtcbiAgICBkcmFmdDogJ2dyYXknLFxuICAgIGFjdGl2ZTogJ2JsdWUnLFxuICAgIGNvbXBsZXRlZDogJ2dyZWVuJyxcbiAgICBhcmNoaXZlZDogJ29yYW5nZScsXG4gIH07XG4gIFxuICByZXR1cm4gY29sb3JNYXBbc3RhdHVzXSB8fCAnZ3JheSc7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0RGlmZmljdWx0eUNvbG9yID0gKGRpZmZpY3VsdHk6IG51bWJlcik6IHN0cmluZyA9PiB7XG4gIGlmIChkaWZmaWN1bHR5IDw9IDIpIHJldHVybiAnZ3JlZW4nO1xuICBpZiAoZGlmZmljdWx0eSA8PSAzKSByZXR1cm4gJ3llbGxvdyc7XG4gIGlmIChkaWZmaWN1bHR5IDw9IDQpIHJldHVybiAnb3JhbmdlJztcbiAgcmV0dXJuICdyZWQnO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldEJsb29tTGV2ZWxEZXNjcmlwdGlvbiA9IChsZXZlbDogc3RyaW5nKTogc3RyaW5nID0+IHtcbiAgY29uc3QgZGVzY3JpcHRpb25zOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0ge1xuICAgIFJlbWVtYmVyOiAnUmVjYWxsIGZhY3RzIGFuZCBiYXNpYyBjb25jZXB0cycsXG4gICAgVW5kZXJzdGFuZDogJ0V4cGxhaW4gaWRlYXMgb3IgY29uY2VwdHMnLFxuICAgIEFwcGx5OiAnVXNlIGluZm9ybWF0aW9uIGluIG5ldyBzaXR1YXRpb25zJyxcbiAgICBBbmFseXplOiAnRHJhdyBjb25uZWN0aW9ucyBhbW9uZyBpZGVhcycsXG4gICAgRXZhbHVhdGU6ICdKdXN0aWZ5IGRlY2lzaW9ucyBvciBjb3Vyc2VzIG9mIGFjdGlvbicsXG4gICAgQ3JlYXRlOiAnUHJvZHVjZSBuZXcgb3Igb3JpZ2luYWwgd29yaycsXG4gIH07XG4gIFxuICByZXR1cm4gZGVzY3JpcHRpb25zW2xldmVsXSB8fCAnVW5rbm93biBsZXZlbCc7XG59O1xuXG5leHBvcnQgY29uc3QgZm9ybWF0UGVyY2VudGFnZSA9ICh2YWx1ZTogbnVtYmVyLCBkZWNpbWFsczogbnVtYmVyID0gMSk6IHN0cmluZyA9PiB7XG4gIHJldHVybiBgJHt2YWx1ZS50b0ZpeGVkKGRlY2ltYWxzKX0lYDtcbn07XG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIFRlc3QgTW9kZSBVdGlsaXRpZXNcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuZXhwb3J0IGNvbnN0IGlzVGVzdE1vZGVBY3RpdmUgPSAoKTogYm9vbGVhbiA9PiB7XG4gIC8vIENoZWNrIGlmIHJ1bm5pbmcgaW4gdGVzdCBlbnZpcm9ubWVudFxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwidGVzdFwiKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvLyBDaGVjayBmb3IgZXhwbGljaXQgdGVzdCBtb2RlIGZsYWcgaW4gZGV2ZWxvcG1lbnRcbiAgaWYgKFxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcImRldmVsb3BtZW50XCIgJiZcbiAgICBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19URVNUX01PREUgPT09IFwidHJ1ZVwiXG4gICkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLy8gQ2hlY2sgZm9yIGxvY2FsaG9zdCBhbmQgdGVzdCBtb2RlXG4gIGlmIChcbiAgICB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lID09PSBcImxvY2FsaG9zdFwiICYmXG4gICAgcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfVEVTVF9NT0RFID09PSBcInRydWVcIlxuICApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn07XG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIERhdGEgVHJhbnNmb3JtYXRpb24gVXRpbGl0aWVzXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbmV4cG9ydCBjb25zdCBkZXJpdmVUaXRsZUZyb21Tb3VyY2UgPSAobWV0aG9kOiBzdHJpbmcsIHVwbG9hZGVkRmlsZXM6IEZpbGVbXSwgc2VsZWN0ZWRGaWxlczogYW55W10pOiBzdHJpbmcgPT4ge1xuICBpZiAobWV0aG9kID09PSAnZmlsZXMnKSB7XG4gICAgaWYgKHVwbG9hZGVkRmlsZXMubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3QgYmFzZSA9IHVwbG9hZGVkRmlsZXNbMF0ubmFtZS5yZXBsYWNlKC9cXC5bXi5dKyQvLCAnJyk7XG4gICAgICByZXR1cm4gYCR7YmFzZX0gUXVpemA7XG4gICAgfVxuICAgIGNvbnN0IHBpY2tlZCA9IHNlbGVjdGVkRmlsZXMuZmluZChmID0+IGYuaWQpO1xuICAgIGlmIChwaWNrZWQpIHtcbiAgICAgIGNvbnN0IGJhc2UgPSBwaWNrZWQubmFtZS5yZXBsYWNlKC9cXC5bXi5dKyQvLCAnJyk7XG4gICAgICByZXR1cm4gYCR7YmFzZX0gUXVpemA7XG4gICAgfVxuICB9XG4gIHJldHVybiAnJztcbn07XG5cbmV4cG9ydCBjb25zdCBnZW5lcmF0ZVF1aXpJZCA9ICgpOiBzdHJpbmcgPT4ge1xuICByZXR1cm4gYHF1aXpfJHtEYXRlLm5vdygpfV8ke01hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCA5KX1gO1xufTtcblxuZXhwb3J0IGNvbnN0IHNhbml0aXplRmlsZU5hbWUgPSAoZmlsZU5hbWU6IHN0cmluZyk6IHN0cmluZyA9PiB7XG4gIHJldHVybiBmaWxlTmFtZS5yZXBsYWNlKC9bXmEtekEtWjAtOS4tXS9nLCAnXycpO1xufTtcblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gTG9jYWwgU3RvcmFnZSBVdGlsaXRpZXNcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuZXhwb3J0IGNvbnN0IHNhdmVUb0xvY2FsU3RvcmFnZSA9IChrZXk6IHN0cmluZywgZGF0YTogYW55KTogdm9pZCA9PiB7XG4gIHRyeSB7XG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5LCBKU09OLnN0cmluZ2lmeShkYXRhKSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS53YXJuKCdGYWlsZWQgdG8gc2F2ZSB0byBsb2NhbFN0b3JhZ2U6JywgZXJyb3IpO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgbG9hZEZyb21Mb2NhbFN0b3JhZ2UgPSA8VD4oa2V5OiBzdHJpbmcsIGRlZmF1bHRWYWx1ZTogVCk6IFQgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IGl0ZW0gPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShrZXkpO1xuICAgIHJldHVybiBpdGVtID8gSlNPTi5wYXJzZShpdGVtKSA6IGRlZmF1bHRWYWx1ZTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLndhcm4oJ0ZhaWxlZCB0byBsb2FkIGZyb20gbG9jYWxTdG9yYWdlOicsIGVycm9yKTtcbiAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgcmVtb3ZlRnJvbUxvY2FsU3RvcmFnZSA9IChrZXk6IHN0cmluZyk6IHZvaWQgPT4ge1xuICB0cnkge1xuICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKGtleSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS53YXJuKCdGYWlsZWQgdG8gcmVtb3ZlIGZyb20gbG9jYWxTdG9yYWdlOicsIGVycm9yKTtcbiAgfVxufTtcbiJdLCJuYW1lcyI6WyJjYWxjdWxhdGVBY2N1cmFjeSIsImNhbGN1bGF0ZUF2ZXJhZ2VTY29yZSIsImNhbGN1bGF0ZUdyYWRlIiwiY2FsY3VsYXRlVGltZUVmZmljaWVuY3kiLCJkZXJpdmVUaXRsZUZyb21Tb3VyY2UiLCJmb3JtYXREdXJhdGlvbiIsImZvcm1hdEZpbGVTaXplIiwiZm9ybWF0UGVyY2VudGFnZSIsImZvcm1hdFRpbWVBZ28iLCJmb3JtYXRUaW1lTGltaXQiLCJnZW5lcmF0ZVF1aXpJZCIsImdldEJsb29tTGV2ZWxEZXNjcmlwdGlvbiIsImdldERpZmZpY3VsdHlDb2xvciIsImdldERpZmZpY3VsdHlTdWdnZXN0aW9ucyIsImdldEZpbGVFeHRlbnNpb24iLCJnZXRGaWxlSWNvbiIsImdldFF1ZXN0aW9uTWl4VG90YWwiLCJnZXRTdGF0dXNDb2xvciIsImdldFN1Z2dlc3RlZFF1ZXN0aW9uTWl4IiwiZ2V0U3VnZ2VzdGVkVGltZUxpbWl0IiwiZ2V0VGltZVJlbWFpbmluZyIsImlzVGVzdE1vZGVBY3RpdmUiLCJpc1ZhbGlkRmlsZVR5cGUiLCJsb2FkRnJvbUxvY2FsU3RvcmFnZSIsInBhcnNlVGltZUxpbWl0IiwicmVtb3ZlRnJvbUxvY2FsU3RvcmFnZSIsInNhbml0aXplRmlsZU5hbWUiLCJzYXZlVG9Mb2NhbFN0b3JhZ2UiLCJ2YWxpZGF0ZVF1ZXN0aW9uQ291bnQiLCJ2YWxpZGF0ZVF1ZXN0aW9uTWl4IiwidmFsaWRhdGVRdWl6VGl0bGUiLCJ2YWxpZGF0ZVF1aXpUb3BpYyIsInZhbGlkYXRlVGltZUxpbWl0IiwiZmlsZU5hbWUiLCJmaWxlVHlwZSIsImV4dGVuc2lvbiIsInNwbGl0IiwicG9wIiwidG9Mb3dlckNhc2UiLCJpY29uTWFwIiwicGRmIiwiZG9jeCIsImRvYyIsInR4dCIsImpwZyIsImpwZWciLCJwbmciLCJ0c3giLCJ0cyIsImpzIiwianN4IiwiaHRtbCIsImNzcyIsImJ5dGVzIiwiayIsInNpemVzIiwiaSIsIk1hdGgiLCJmbG9vciIsImxvZyIsInBhcnNlRmxvYXQiLCJwb3ciLCJ0b0ZpeGVkIiwiZGF0ZVN0cmluZyIsImRhdGUiLCJEYXRlIiwibm93IiwiZGlmZkluU2Vjb25kcyIsImdldFRpbWUiLCJmaWxlIiwiYWxsb3dlZFR5cGVzIiwiZmlsZUV4dGVuc2lvbiIsIm5hbWUiLCJpbmNsdWRlcyIsInRvcGljIiwidG9waWNMb3dlciIsIkRJRkZJQ1VMVFlfTEVWRUxTIiwiQkVHSU5ORVIiLCJBRFZBTkNFRCIsIkVYUEVSVCIsIklOVEVSTUVESUFURSIsIm1heFF1ZXN0aW9ucyIsImRpZmZpY3VsdHkiLCJiYXNlVGltZVBlclF1ZXN0aW9uIiwiVElNRV9QRVJfUVVFU1RJT04iLCJyYXRpbyIsIlFVRVNUSU9OX01JWF9SQVRJT1MiLCJNQ1EiLCJyb3VuZCIsIlNIT1JUX0FOU1dFUiIsIlBSSU5DSVBMRSIsInF1ZXN0aW9uTWl4Iiwic2NvcmUiLCJHUkFERV9USFJFU0hPTERTIiwiQSIsIkIiLCJDIiwiRCIsImF2Z1RpbWVQZXJRdWVzdGlvbiIsIlRJTUVfRUZGSUNJRU5DWV9USFJFU0hPTERTIiwiRkFTVCIsIk5PUk1BTCIsImNvcnJlY3RBbnN3ZXJzIiwidG90YWxRdWVzdGlvbnMiLCJzY29yZXMiLCJsZW5ndGgiLCJyZWR1Y2UiLCJzdW0iLCJzZWNvbmRzIiwiaG91cnMiLCJtaW51dGVzIiwic2VjcyIsInN0YXJ0VGltZSIsInRpbWVMaW1pdFNlYyIsImVsYXBzZWQiLCJtYXgiLCJ0aXRsZSIsImVycm9ycyIsInRyaW0iLCJwdXNoIiwiY291bnQiLCJzdGF0dXMiLCJjb2xvck1hcCIsImRyYWZ0IiwiYWN0aXZlIiwiY29tcGxldGVkIiwiYXJjaGl2ZWQiLCJsZXZlbCIsImRlc2NyaXB0aW9ucyIsIlJlbWVtYmVyIiwiVW5kZXJzdGFuZCIsIkFwcGx5IiwiQW5hbHl6ZSIsIkV2YWx1YXRlIiwiQ3JlYXRlIiwidmFsdWUiLCJkZWNpbWFscyIsInByb2Nlc3MiLCJlbnYiLCJOT0RFX0VOViIsIk5FWFRfUFVCTElDX1RFU1RfTU9ERSIsIndpbmRvdyIsImxvY2F0aW9uIiwiaG9zdG5hbWUiLCJtZXRob2QiLCJ1cGxvYWRlZEZpbGVzIiwic2VsZWN0ZWRGaWxlcyIsImJhc2UiLCJyZXBsYWNlIiwicGlja2VkIiwiZmluZCIsImYiLCJpZCIsInJhbmRvbSIsInRvU3RyaW5nIiwic3Vic3RyIiwia2V5IiwiZGF0YSIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJKU09OIiwic3RyaW5naWZ5IiwiZXJyb3IiLCJjb25zb2xlIiwid2FybiIsImRlZmF1bHRWYWx1ZSIsIml0ZW0iLCJnZXRJdGVtIiwicGFyc2UiLCJyZW1vdmVJdGVtIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Q0FLQzs7Ozs7Ozs7Ozs7SUEySFlBLGlCQUFpQjtlQUFqQkE7O0lBS0FDLHFCQUFxQjtlQUFyQkE7O0lBbkJBQyxjQUFjO2VBQWRBOztJQVFBQyx1QkFBdUI7ZUFBdkJBOztJQTZLQUMscUJBQXFCO2VBQXJCQTs7SUF6SkFDLGNBQWM7ZUFBZEE7O0lBM0dBQyxjQUFjO2VBQWRBOztJQThOQUMsZ0JBQWdCO2VBQWhCQTs7SUF0TkFDLGFBQWE7ZUFBYkE7O0lBaUhBQyxlQUFlO2VBQWZBOztJQTBKQUMsY0FBYztlQUFkQTs7SUFsRUFDLHdCQUF3QjtlQUF4QkE7O0lBUEFDLGtCQUFrQjtlQUFsQkE7O0lBMUtBQyx3QkFBd0I7ZUFBeEJBOztJQVJBQyxnQkFBZ0I7ZUFBaEJBOztJQTlDQUMsV0FBVztlQUFYQTs7SUF1RkFDLG1CQUFtQjtlQUFuQkE7O0lBOEhBQyxjQUFjO2VBQWRBOztJQXhJQUMsdUJBQXVCO2VBQXZCQTs7SUFMQUMscUJBQXFCO2VBQXJCQTs7SUFnRkFDLGdCQUFnQjtlQUFoQkE7O0lBb0dBQyxnQkFBZ0I7ZUFBaEJBOztJQW5OQUMsZUFBZTtlQUFmQTs7SUFvUkFDLG9CQUFvQjtlQUFwQkE7O0lBektBQyxjQUFjO2VBQWRBOztJQW1M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