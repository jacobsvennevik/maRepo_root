f95160e4d1d36307db92ba4c1e964054
/**
 * Authentication Testing Patterns
 * 
 * Reusable patterns for testing authentication flows, token handling,
 * and error scenarios across different components.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    createAuthAccessibilityTest: function() {
        return createAuthAccessibilityTest;
    },
    createAuthPerformanceTest: function() {
        return createAuthPerformanceTest;
    },
    createErrorScenarioTest: function() {
        return createErrorScenarioTest;
    },
    createLoginFlowTest: function() {
        return createLoginFlowTest;
    },
    createTokenHandlingTest: function() {
        return createTokenHandlingTest;
    }
});
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
const _sharedsetup = require("../../setup/shared-setup");
const _factories = require("../../factories");
const _mocks = require("../../mocks");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const createLoginFlowTest = (config)=>{
    const { mockAxiosAuth, mockAxiosApi, mockRouter } = _mocks.standardMocks;
    const mockLocalStorage = _factories.testFactories.createLocalStorageMock();
    return {
        async testSuccessfulLogin (scenario) {
            const user = _userevent.default.setup();
            // Mock successful responses
            mockAxiosAuth.post.mockResolvedValueOnce({
                data: {
                    access: 'mock-access-token',
                    refresh: 'mock-refresh-token'
                }
            });
            mockAxiosApi.get.mockResolvedValueOnce({
                data: {
                    id: 1,
                    email: scenario.credentials.email
                }
            });
            (0, _sharedsetup.renderWithProviders)(_react.default.createElement(config.component, config.props));
            // Fill and submit form
            await (0, _react1.act)(async ()=>{
                await user.type(_react1.screen.getByLabelText(/email/i), scenario.credentials.email);
                await user.type(_react1.screen.getByLabelText(/password/i), scenario.credentials.password);
                await user.click(_react1.screen.getByRole('button', {
                    name: /^sign in$/i
                }));
            });
            // Verify authentication flow
            await (0, _react1.waitFor)(()=>{
                expect(mockAxiosAuth.post).toHaveBeenCalledWith('/token/', {
                    email: scenario.credentials.email,
                    password: scenario.credentials.password
                });
                expect(mockAxiosApi.get).toHaveBeenCalledWith('users/me/');
                if (scenario.expectedNavigation) {
                    expect(mockRouter.push).toHaveBeenCalledWith(scenario.expectedNavigation);
                }
            }, {
                timeout: 5000
            });
        },
        async testLoginError (scenario) {
            const user = _userevent.default.setup();
            // Mock failed login
            mockAxiosAuth.post.mockRejectedValueOnce({
                response: {
                    data: {
                        detail: scenario.expectedMessage || 'Invalid credentials'
                    }
                }
            });
            (0, _sharedsetup.renderWithProviders)(_react.default.createElement(config.component, config.props));
            // Fill and submit form
            await (0, _react1.act)(async ()=>{
                await user.type(_react1.screen.getByLabelText(/email/i), scenario.credentials.email);
                await user.type(_react1.screen.getByLabelText(/password/i), scenario.credentials.password);
                await user.click(_react1.screen.getByRole('button', {
                    name: /^sign in$/i
                }));
            });
            // Wait for error message
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText(new RegExp(scenario.expectedMessage || 'invalid credentials', 'i'))).toBeInTheDocument();
            }, {
                timeout: 3000
            });
        },
        async testFormValidation () {
            const user = _userevent.default.setup();
            (0, _sharedsetup.renderWithProviders)(_react.default.createElement(config.component, config.props));
            // Try to submit without filling fields
            await (0, _react1.act)(async ()=>{
                await user.click(_react1.screen.getByRole('button', {
                    name: /^sign in$/i
                }));
            });
            // Check for validation messages
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText(/please enter a valid email address/i)).toBeInTheDocument();
                expect(_react1.screen.getByText(/password must be at least 8 characters/i)).toBeInTheDocument();
            }, {
                timeout: 3000
            });
        }
    };
};
const createTokenHandlingTest = (config)=>{
    const { mockAxiosAuth, mockAxiosApi } = _mocks.standardMocks;
    const mockLocalStorage = _factories.testFactories.createLocalStorageMock();
    return {
        async testTokenStorage () {
            const user = _userevent.default.setup();
            mockAxiosAuth.post.mockResolvedValueOnce({
                data: {
                    access: 'test-access-token',
                    refresh: 'test-refresh-token'
                }
            });
            mockAxiosApi.get.mockResolvedValueOnce({
                data: {
                    id: 1,
                    email: 'test@example.com'
                }
            });
            (0, _sharedsetup.renderWithProviders)(_react.default.createElement(config.component, config.props));
            await (0, _react1.act)(async ()=>{
                await user.type(_react1.screen.getByLabelText(/email/i), 'test@example.com');
                await user.type(_react1.screen.getByLabelText(/password/i), 'password123');
                await user.click(_react1.screen.getByRole('button', {
                    name: /^sign in$/i
                }));
            });
            await (0, _react1.waitFor)(()=>{
                expect(mockLocalStorage.setItem).toHaveBeenCalledWith('access_token', 'test-access-token');
                expect(mockLocalStorage.setItem).toHaveBeenCalledWith('refresh_token', 'test-refresh-token');
            });
        },
        async testTokenRefresh () {
            // Mock token refresh scenario
            mockAxiosAuth.post.mockResolvedValueOnce({
                data: {
                    access: 'new-access-token',
                    refresh: 'new-refresh-token'
                }
            });
        // Test token refresh logic
        // This would be component-specific implementation
        }
    };
};
const createErrorScenarioTest = (config)=>{
    const { mockAxiosAuth } = _mocks.standardMocks;
    const errorScenarios = [
        {
            name: 'Invalid credentials',
            mockError: {
                response: {
                    data: {
                        detail: 'Invalid credentials'
                    }
                }
            },
            expectedMessage: /invalid credentials/i
        },
        {
            name: 'Network error',
            mockError: new Error('Network Error'),
            expectedMessage: /network error/i
        },
        {
            name: 'Server error',
            mockError: {
                response: {
                    status: 500,
                    data: {
                        detail: 'Internal server error'
                    }
                }
            },
            expectedMessage: /internal server error/i
        },
        {
            name: 'Account locked',
            mockError: {
                response: {
                    status: 423,
                    data: {
                        detail: 'Account is locked'
                    }
                }
            },
            expectedMessage: /account is locked/i
        }
    ];
    return {
        async testErrorScenarios () {
            const user = _userevent.default.setup();
            for (const scenario of errorScenarios){
                mockAxiosAuth.post.mockRejectedValueOnce(scenario.mockError);
                (0, _sharedsetup.renderWithProviders)(_react.default.createElement(config.component, config.props));
                await (0, _react1.act)(async ()=>{
                    await user.type(_react1.screen.getByLabelText(/email/i), 'test@example.com');
                    await user.type(_react1.screen.getByLabelText(/password/i), 'wrongpassword');
                    await user.click(_react1.screen.getByRole('button', {
                        name: /^sign in$/i
                    }));
                });
                await (0, _react1.waitFor)(()=>{
                    expect(_react1.screen.getByText(scenario.expectedMessage)).toBeInTheDocument();
                }, {
                    timeout: 3000
                });
                // Clean up for next iteration
                jest.clearAllMocks();
            }
        }
    };
};
const createAuthAccessibilityTest = (config)=>{
    return {
        testKeyboardNavigation () {
            (0, _sharedsetup.renderWithProviders)(_react.default.createElement(config.component, config.props));
            // Test tab navigation
            const emailInput = _react1.screen.getByLabelText(/email/i);
            const passwordInput = _react1.screen.getByLabelText(/password/i);
            const submitButton = _react1.screen.getByRole('button', {
                name: /^sign in$/i
            });
            expect(emailInput).toHaveAttribute('type', 'email');
            expect(passwordInput).toHaveAttribute('type', 'password');
            expect(submitButton).toHaveAttribute('type', 'submit');
        },
        testScreenReaderSupport () {
            (0, _sharedsetup.renderWithProviders)(_react.default.createElement(config.component, config.props));
            // Check for proper ARIA labels
            const form = _react1.screen.getByTestId('login-form');
            expect(form).toBeInTheDocument();
        }
    };
};
const createAuthPerformanceTest = (config)=>{
    return {
        testRenderPerformance () {
            const startTime = performance.now();
            (0, _sharedsetup.renderWithProviders)(_react.default.createElement(config.component, config.props));
            const endTime = performance.now();
            expect(endTime - startTime).toBeLessThan(100); // Should render in < 100ms
        },
        async testLoginPerformance () {
            const user = _userevent.default.setup();
            const { mockAxiosAuth, mockAxiosApi } = _mocks.standardMocks;
            mockAxiosAuth.post.mockResolvedValueOnce({
                data: {
                    access: 'token',
                    refresh: 'refresh'
                }
            });
            mockAxiosApi.get.mockResolvedValueOnce({
                data: {
                    id: 1,
                    email: 'test@example.com'
                }
            });
            (0, _sharedsetup.renderWithProviders)(_react.default.createElement(config.component, config.props));
            const startTime = performance.now();
            await (0, _react1.act)(async ()=>{
                await user.type(_react1.screen.getByLabelText(/email/i), 'test@example.com');
                await user.type(_react1.screen.getByLabelText(/password/i), 'password123');
                await user.click(_react1.screen.getByRole('button', {
                    name: /^sign in$/i
                }));
            });
            await (0, _react1.waitFor)(()=>{
                expect(mockAxiosAuth.post).toHaveBeenCalled();
            });
            const endTime = performance.now();
            expect(endTime - startTime).toBeLessThan(2000); // Should complete in < 2s
        }
    };
};

//# sourceMappingURL=data:application/json;base64,