{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/test-utils/patterns/auth/login-flow.test.ts"],"sourcesContent":["/**\n * Authentication Testing Patterns\n * \n * Reusable patterns for testing authentication flows, token handling,\n * and error scenarios across different components.\n */\n\nimport React from 'react';\nimport { screen, fireEvent, waitFor, act } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { renderWithProviders } from '../../setup/shared-setup';\nimport { testFactories } from '../../factories';\nimport { standardMocks } from '../../mocks';\n\n// ============================================================================\n// Authentication Test Patterns\n// ============================================================================\n\nexport interface AuthTestConfig {\n  component: React.ComponentType<any>;\n  props?: any;\n  mockResponses?: {\n    login?: any;\n    profile?: any;\n    error?: any;\n  };\n}\n\nexport interface AuthTestScenario {\n  name: string;\n  credentials: { email: string; password: string };\n  expectedResult: 'success' | 'error';\n  expectedMessage?: string;\n  expectedNavigation?: string;\n}\n\n// ============================================================================\n// Login Flow Testing Pattern\n// ============================================================================\n\nexport const createLoginFlowTest = (config: AuthTestConfig) => {\n  const { mockAxiosAuth, mockAxiosApi, mockRouter } = standardMocks;\n  const mockLocalStorage = testFactories.createLocalStorageMock();\n\n  return {\n    async testSuccessfulLogin(scenario: AuthTestScenario) {\n      const user = userEvent.setup();\n      \n      // Mock successful responses\n      mockAxiosAuth.post.mockResolvedValueOnce({\n        data: {\n          access: 'mock-access-token',\n          refresh: 'mock-refresh-token',\n        },\n      });\n      \n      mockAxiosApi.get.mockResolvedValueOnce({\n        data: { id: 1, email: scenario.credentials.email }\n      });\n\n      renderWithProviders(React.createElement(config.component, config.props));\n\n      // Fill and submit form\n      await act(async () => {\n        await user.type(screen.getByLabelText(/email/i), scenario.credentials.email);\n        await user.type(screen.getByLabelText(/password/i), scenario.credentials.password);\n        await user.click(screen.getByRole('button', { name: /^sign in$/i }));\n      });\n\n      // Verify authentication flow\n      await waitFor(() => {\n        expect(mockAxiosAuth.post).toHaveBeenCalledWith('/token/', {\n          email: scenario.credentials.email,\n          password: scenario.credentials.password,\n        });\n        expect(mockAxiosApi.get).toHaveBeenCalledWith('users/me/');\n        if (scenario.expectedNavigation) {\n          expect(mockRouter.push).toHaveBeenCalledWith(scenario.expectedNavigation);\n        }\n      }, { timeout: 5000 });\n    },\n\n    async testLoginError(scenario: AuthTestScenario) {\n      const user = userEvent.setup();\n      \n      // Mock failed login\n      mockAxiosAuth.post.mockRejectedValueOnce({\n        response: {\n          data: {\n            detail: scenario.expectedMessage || 'Invalid credentials'\n          }\n        }\n      });\n\n      renderWithProviders(React.createElement(config.component, config.props));\n\n      // Fill and submit form\n      await act(async () => {\n        await user.type(screen.getByLabelText(/email/i), scenario.credentials.email);\n        await user.type(screen.getByLabelText(/password/i), scenario.credentials.password);\n        await user.click(screen.getByRole('button', { name: /^sign in$/i }));\n      });\n\n      // Wait for error message\n      await waitFor(() => {\n        expect(screen.getByText(new RegExp(scenario.expectedMessage || 'invalid credentials', 'i'))).toBeInTheDocument();\n      }, { timeout: 3000 });\n    },\n\n    async testFormValidation() {\n      const user = userEvent.setup();\n      \n      renderWithProviders(React.createElement(config.component, config.props));\n\n      // Try to submit without filling fields\n      await act(async () => {\n        await user.click(screen.getByRole('button', { name: /^sign in$/i }));\n      });\n\n      // Check for validation messages\n      await waitFor(() => {\n        expect(screen.getByText(/please enter a valid email address/i)).toBeInTheDocument();\n        expect(screen.getByText(/password must be at least 8 characters/i)).toBeInTheDocument();\n      }, { timeout: 3000 });\n    }\n  };\n};\n\n// ============================================================================\n// Token Handling Testing Pattern\n// ============================================================================\n\nexport const createTokenHandlingTest = (config: AuthTestConfig) => {\n  const { mockAxiosAuth, mockAxiosApi } = standardMocks;\n  const mockLocalStorage = testFactories.createLocalStorageMock();\n\n  return {\n    async testTokenStorage() {\n      const user = userEvent.setup();\n      \n      mockAxiosAuth.post.mockResolvedValueOnce({\n        data: {\n          access: 'test-access-token',\n          refresh: 'test-refresh-token',\n        },\n      });\n      \n      mockAxiosApi.get.mockResolvedValueOnce({\n        data: { id: 1, email: 'test@example.com' }\n      });\n\n      renderWithProviders(React.createElement(config.component, config.props));\n\n      await act(async () => {\n        await user.type(screen.getByLabelText(/email/i), 'test@example.com');\n        await user.type(screen.getByLabelText(/password/i), 'password123');\n        await user.click(screen.getByRole('button', { name: /^sign in$/i }));\n      });\n\n      await waitFor(() => {\n        expect(mockLocalStorage.setItem).toHaveBeenCalledWith('access_token', 'test-access-token');\n        expect(mockLocalStorage.setItem).toHaveBeenCalledWith('refresh_token', 'test-refresh-token');\n      });\n    },\n\n    async testTokenRefresh() {\n      // Mock token refresh scenario\n      mockAxiosAuth.post.mockResolvedValueOnce({\n        data: {\n          access: 'new-access-token',\n          refresh: 'new-refresh-token',\n        },\n      });\n\n      // Test token refresh logic\n      // This would be component-specific implementation\n    }\n  };\n};\n\n// ============================================================================\n// Error Scenario Testing Pattern\n// ============================================================================\n\nexport const createErrorScenarioTest = (config: AuthTestConfig) => {\n  const { mockAxiosAuth } = standardMocks;\n\n  const errorScenarios = [\n    {\n      name: 'Invalid credentials',\n      mockError: {\n        response: { data: { detail: 'Invalid credentials' } }\n      },\n      expectedMessage: /invalid credentials/i\n    },\n    {\n      name: 'Network error',\n      mockError: new Error('Network Error'),\n      expectedMessage: /network error/i\n    },\n    {\n      name: 'Server error',\n      mockError: {\n        response: { \n          status: 500,\n          data: { detail: 'Internal server error' }\n        }\n      },\n      expectedMessage: /internal server error/i\n    },\n    {\n      name: 'Account locked',\n      mockError: {\n        response: { \n          status: 423,\n          data: { detail: 'Account is locked' }\n        }\n      },\n      expectedMessage: /account is locked/i\n    }\n  ];\n\n  return {\n    async testErrorScenarios() {\n      const user = userEvent.setup();\n      \n      for (const scenario of errorScenarios) {\n        mockAxiosAuth.post.mockRejectedValueOnce(scenario.mockError);\n\n        renderWithProviders(React.createElement(config.component, config.props));\n\n        await act(async () => {\n          await user.type(screen.getByLabelText(/email/i), 'test@example.com');\n          await user.type(screen.getByLabelText(/password/i), 'wrongpassword');\n          await user.click(screen.getByRole('button', { name: /^sign in$/i }));\n        });\n\n        await waitFor(() => {\n          expect(screen.getByText(scenario.expectedMessage)).toBeInTheDocument();\n        }, { timeout: 3000 });\n\n        // Clean up for next iteration\n        jest.clearAllMocks();\n      }\n    }\n  };\n};\n\n// ============================================================================\n// Accessibility Testing Pattern\n// ============================================================================\n\nexport const createAuthAccessibilityTest = (config: AuthTestConfig) => {\n  return {\n    testKeyboardNavigation() {\n      renderWithProviders(React.createElement(config.component, config.props));\n      \n      // Test tab navigation\n      const emailInput = screen.getByLabelText(/email/i);\n      const passwordInput = screen.getByLabelText(/password/i);\n      const submitButton = screen.getByRole('button', { name: /^sign in$/i });\n      \n      expect(emailInput).toHaveAttribute('type', 'email');\n      expect(passwordInput).toHaveAttribute('type', 'password');\n      expect(submitButton).toHaveAttribute('type', 'submit');\n    },\n\n    testScreenReaderSupport() {\n      renderWithProviders(React.createElement(config.component, config.props));\n      \n      // Check for proper ARIA labels\n      const form = screen.getByTestId('login-form');\n      expect(form).toBeInTheDocument();\n    }\n  };\n};\n\n// ============================================================================\n// Performance Testing Pattern\n// ============================================================================\n\nexport const createAuthPerformanceTest = (config: AuthTestConfig) => {\n  return {\n    testRenderPerformance() {\n      const startTime = performance.now();\n      renderWithProviders(React.createElement(config.component, config.props));\n      const endTime = performance.now();\n      \n      expect(endTime - startTime).toBeLessThan(100); // Should render in < 100ms\n    },\n\n    async testLoginPerformance() {\n      const user = userEvent.setup();\n      const { mockAxiosAuth, mockAxiosApi } = standardMocks;\n      \n      mockAxiosAuth.post.mockResolvedValueOnce({\n        data: { access: 'token', refresh: 'refresh' }\n      });\n      mockAxiosApi.get.mockResolvedValueOnce({\n        data: { id: 1, email: 'test@example.com' }\n      });\n\n      renderWithProviders(React.createElement(config.component, config.props));\n\n      const startTime = performance.now();\n      \n      await act(async () => {\n        await user.type(screen.getByLabelText(/email/i), 'test@example.com');\n        await user.type(screen.getByLabelText(/password/i), 'password123');\n        await user.click(screen.getByRole('button', { name: /^sign in$/i }));\n      });\n\n      await waitFor(() => {\n        expect(mockAxiosAuth.post).toHaveBeenCalled();\n      });\n\n      const endTime = performance.now();\n      expect(endTime - startTime).toBeLessThan(2000); // Should complete in < 2s\n    }\n  };\n};\n"],"names":["createAuthAccessibilityTest","createAuthPerformanceTest","createErrorScenarioTest","createLoginFlowTest","createTokenHandlingTest","config","mockAxiosAuth","mockAxiosApi","mockRouter","standardMocks","mockLocalStorage","testFactories","createLocalStorageMock","testSuccessfulLogin","scenario","user","userEvent","setup","post","mockResolvedValueOnce","data","access","refresh","get","id","email","credentials","renderWithProviders","React","createElement","component","props","act","type","screen","getByLabelText","password","click","getByRole","name","waitFor","expect","toHaveBeenCalledWith","expectedNavigation","push","timeout","testLoginError","mockRejectedValueOnce","response","detail","expectedMessage","getByText","RegExp","toBeInTheDocument","testFormValidation","testTokenStorage","setItem","testTokenRefresh","errorScenarios","mockError","Error","status","testErrorScenarios","jest","clearAllMocks","testKeyboardNavigation","emailInput","passwordInput","submitButton","toHaveAttribute","testScreenReaderSupport","form","getByTestId","testRenderPerformance","startTime","performance","now","endTime","toBeLessThan","testLoginPerformance","toHaveBeenCalled"],"mappings":"AAAA;;;;;CAKC;;;;;;;;;;;IAuPYA,2BAA2B;eAA3BA;;IA6BAC,yBAAyB;eAAzBA;;IAjGAC,uBAAuB;eAAvBA;;IAhJAC,mBAAmB;eAAnBA;;IA4FAC,uBAAuB;eAAvBA;;;8DA7HK;wBAC8B;kEAC1B;6BACc;2BACN;uBACA;;;;;;AA4BvB,MAAMD,sBAAsB,CAACE;IAClC,MAAM,EAAEC,aAAa,EAAEC,YAAY,EAAEC,UAAU,EAAE,GAAGC,oBAAa;IACjE,MAAMC,mBAAmBC,wBAAa,CAACC,sBAAsB;IAE7D,OAAO;QACL,MAAMC,qBAAoBC,QAA0B;YAClD,MAAMC,OAAOC,kBAAS,CAACC,KAAK;YAE5B,4BAA4B;YAC5BX,cAAcY,IAAI,CAACC,qBAAqB,CAAC;gBACvCC,MAAM;oBACJC,QAAQ;oBACRC,SAAS;gBACX;YACF;YAEAf,aAAagB,GAAG,CAACJ,qBAAqB,CAAC;gBACrCC,MAAM;oBAAEI,IAAI;oBAAGC,OAAOX,SAASY,WAAW,CAACD,KAAK;gBAAC;YACnD;YAEAE,IAAAA,gCAAmB,EAACC,cAAK,CAACC,aAAa,CAACxB,OAAOyB,SAAS,EAAEzB,OAAO0B,KAAK;YAEtE,uBAAuB;YACvB,MAAMC,IAAAA,WAAG,EAAC;gBACR,MAAMjB,KAAKkB,IAAI,CAACC,cAAM,CAACC,cAAc,CAAC,WAAWrB,SAASY,WAAW,CAACD,KAAK;gBAC3E,MAAMV,KAAKkB,IAAI,CAACC,cAAM,CAACC,cAAc,CAAC,cAAcrB,SAASY,WAAW,CAACU,QAAQ;gBACjF,MAAMrB,KAAKsB,KAAK,CAACH,cAAM,CAACI,SAAS,CAAC,UAAU;oBAAEC,MAAM;gBAAa;YACnE;YAEA,6BAA6B;YAC7B,MAAMC,IAAAA,eAAO,EAAC;gBACZC,OAAOnC,cAAcY,IAAI,EAAEwB,oBAAoB,CAAC,WAAW;oBACzDjB,OAAOX,SAASY,WAAW,CAACD,KAAK;oBACjCW,UAAUtB,SAASY,WAAW,CAACU,QAAQ;gBACzC;gBACAK,OAAOlC,aAAagB,GAAG,EAAEmB,oBAAoB,CAAC;gBAC9C,IAAI5B,SAAS6B,kBAAkB,EAAE;oBAC/BF,OAAOjC,WAAWoC,IAAI,EAAEF,oBAAoB,CAAC5B,SAAS6B,kBAAkB;gBAC1E;YACF,GAAG;gBAAEE,SAAS;YAAK;QACrB;QAEA,MAAMC,gBAAehC,QAA0B;YAC7C,MAAMC,OAAOC,kBAAS,CAACC,KAAK;YAE5B,oBAAoB;YACpBX,cAAcY,IAAI,CAAC6B,qBAAqB,CAAC;gBACvCC,UAAU;oBACR5B,MAAM;wBACJ6B,QAAQnC,SAASoC,eAAe,IAAI;oBACtC;gBACF;YACF;YAEAvB,IAAAA,gCAAmB,EAACC,cAAK,CAACC,aAAa,CAACxB,OAAOyB,SAAS,EAAEzB,OAAO0B,KAAK;YAEtE,uBAAuB;YACvB,MAAMC,IAAAA,WAAG,EAAC;gBACR,MAAMjB,KAAKkB,IAAI,CAACC,cAAM,CAACC,cAAc,CAAC,WAAWrB,SAASY,WAAW,CAACD,KAAK;gBAC3E,MAAMV,KAAKkB,IAAI,CAACC,cAAM,CAACC,cAAc,CAAC,cAAcrB,SAASY,WAAW,CAACU,QAAQ;gBACjF,MAAMrB,KAAKsB,KAAK,CAACH,cAAM,CAACI,SAAS,CAAC,UAAU;oBAAEC,MAAM;gBAAa;YACnE;YAEA,yBAAyB;YACzB,MAAMC,IAAAA,eAAO,EAAC;gBACZC,OAAOP,cAAM,CAACiB,SAAS,CAAC,IAAIC,OAAOtC,SAASoC,eAAe,IAAI,uBAAuB,OAAOG,iBAAiB;YAChH,GAAG;gBAAER,SAAS;YAAK;QACrB;QAEA,MAAMS;YACJ,MAAMvC,OAAOC,kBAAS,CAACC,KAAK;YAE5BU,IAAAA,gCAAmB,EAACC,cAAK,CAACC,aAAa,CAACxB,OAAOyB,SAAS,EAAEzB,OAAO0B,KAAK;YAEtE,uCAAuC;YACvC,MAAMC,IAAAA,WAAG,EAAC;gBACR,MAAMjB,KAAKsB,KAAK,CAACH,cAAM,CAACI,SAAS,CAAC,UAAU;oBAAEC,MAAM;gBAAa;YACnE;YAEA,gCAAgC;YAChC,MAAMC,IAAAA,eAAO,EAAC;gBACZC,OAAOP,cAAM,CAACiB,SAAS,CAAC,wCAAwCE,iBAAiB;gBACjFZ,OAAOP,cAAM,CAACiB,SAAS,CAAC,4CAA4CE,iBAAiB;YACvF,GAAG;gBAAER,SAAS;YAAK;QACrB;IACF;AACF;AAMO,MAAMzC,0BAA0B,CAACC;IACtC,MAAM,EAAEC,aAAa,EAAEC,YAAY,EAAE,GAAGE,oBAAa;IACrD,MAAMC,mBAAmBC,wBAAa,CAACC,sBAAsB;IAE7D,OAAO;QACL,MAAM2C;YACJ,MAAMxC,OAAOC,kBAAS,CAACC,KAAK;YAE5BX,cAAcY,IAAI,CAACC,qBAAqB,CAAC;gBACvCC,MAAM;oBACJC,QAAQ;oBACRC,SAAS;gBACX;YACF;YAEAf,aAAagB,GAAG,CAACJ,qBAAqB,CAAC;gBACrCC,MAAM;oBAAEI,IAAI;oBAAGC,OAAO;gBAAmB;YAC3C;YAEAE,IAAAA,gCAAmB,EAACC,cAAK,CAACC,aAAa,CAACxB,OAAOyB,SAAS,EAAEzB,OAAO0B,KAAK;YAEtE,MAAMC,IAAAA,WAAG,EAAC;gBACR,MAAMjB,KAAKkB,IAAI,CAACC,cAAM,CAACC,cAAc,CAAC,WAAW;gBACjD,MAAMpB,KAAKkB,IAAI,CAACC,cAAM,CAACC,cAAc,CAAC,cAAc;gBACpD,MAAMpB,KAAKsB,KAAK,CAACH,cAAM,CAACI,SAAS,CAAC,UAAU;oBAAEC,MAAM;gBAAa;YACnE;YAEA,MAAMC,IAAAA,eAAO,EAAC;gBACZC,OAAO/B,iBAAiB8C,OAAO,EAAEd,oBAAoB,CAAC,gBAAgB;gBACtED,OAAO/B,iBAAiB8C,OAAO,EAAEd,oBAAoB,CAAC,iBAAiB;YACzE;QACF;QAEA,MAAMe;YACJ,8BAA8B;YAC9BnD,cAAcY,IAAI,CAACC,qBAAqB,CAAC;gBACvCC,MAAM;oBACJC,QAAQ;oBACRC,SAAS;gBACX;YACF;QAEA,2BAA2B;QAC3B,kDAAkD;QACpD;IACF;AACF;AAMO,MAAMpB,0BAA0B,CAACG;IACtC,MAAM,EAAEC,aAAa,EAAE,GAAGG,oBAAa;IAEvC,MAAMiD,iBAAiB;QACrB;YACEnB,MAAM;YACNoB,WAAW;gBACTX,UAAU;oBAAE5B,MAAM;wBAAE6B,QAAQ;oBAAsB;gBAAE;YACtD;YACAC,iBAAiB;QACnB;QACA;YACEX,MAAM;YACNoB,WAAW,IAAIC,MAAM;YACrBV,iBAAiB;QACnB;QACA;YACEX,MAAM;YACNoB,WAAW;gBACTX,UAAU;oBACRa,QAAQ;oBACRzC,MAAM;wBAAE6B,QAAQ;oBAAwB;gBAC1C;YACF;YACAC,iBAAiB;QACnB;QACA;YACEX,MAAM;YACNoB,WAAW;gBACTX,UAAU;oBACRa,QAAQ;oBACRzC,MAAM;wBAAE6B,QAAQ;oBAAoB;gBACtC;YACF;YACAC,iBAAiB;QACnB;KACD;IAED,OAAO;QACL,MAAMY;YACJ,MAAM/C,OAAOC,kBAAS,CAACC,KAAK;YAE5B,KAAK,MAAMH,YAAY4C,eAAgB;gBACrCpD,cAAcY,IAAI,CAAC6B,qBAAqB,CAACjC,SAAS6C,SAAS;gBAE3DhC,IAAAA,gCAAmB,EAACC,cAAK,CAACC,aAAa,CAACxB,OAAOyB,SAAS,EAAEzB,OAAO0B,KAAK;gBAEtE,MAAMC,IAAAA,WAAG,EAAC;oBACR,MAAMjB,KAAKkB,IAAI,CAACC,cAAM,CAACC,cAAc,CAAC,WAAW;oBACjD,MAAMpB,KAAKkB,IAAI,CAACC,cAAM,CAACC,cAAc,CAAC,cAAc;oBACpD,MAAMpB,KAAKsB,KAAK,CAACH,cAAM,CAACI,SAAS,CAAC,UAAU;wBAAEC,MAAM;oBAAa;gBACnE;gBAEA,MAAMC,IAAAA,eAAO,EAAC;oBACZC,OAAOP,cAAM,CAACiB,SAAS,CAACrC,SAASoC,eAAe,GAAGG,iBAAiB;gBACtE,GAAG;oBAAER,SAAS;gBAAK;gBAEnB,8BAA8B;gBAC9BkB,KAAKC,aAAa;YACpB;QACF;IACF;AACF;AAMO,MAAMhE,8BAA8B,CAACK;IAC1C,OAAO;QACL4D;YACEtC,IAAAA,gCAAmB,EAACC,cAAK,CAACC,aAAa,CAACxB,OAAOyB,SAAS,EAAEzB,OAAO0B,KAAK;YAEtE,sBAAsB;YACtB,MAAMmC,aAAahC,cAAM,CAACC,cAAc,CAAC;YACzC,MAAMgC,gBAAgBjC,cAAM,CAACC,cAAc,CAAC;YAC5C,MAAMiC,eAAelC,cAAM,CAACI,SAAS,CAAC,UAAU;gBAAEC,MAAM;YAAa;YAErEE,OAAOyB,YAAYG,eAAe,CAAC,QAAQ;YAC3C5B,OAAO0B,eAAeE,eAAe,CAAC,QAAQ;YAC9C5B,OAAO2B,cAAcC,eAAe,CAAC,QAAQ;QAC/C;QAEAC;YACE3C,IAAAA,gCAAmB,EAACC,cAAK,CAACC,aAAa,CAACxB,OAAOyB,SAAS,EAAEzB,OAAO0B,KAAK;YAEtE,+BAA+B;YAC/B,MAAMwC,OAAOrC,cAAM,CAACsC,WAAW,CAAC;YAChC/B,OAAO8B,MAAMlB,iBAAiB;QAChC;IACF;AACF;AAMO,MAAMpD,4BAA4B,CAACI;IACxC,OAAO;QACLoE;YACE,MAAMC,YAAYC,YAAYC,GAAG;YACjCjD,IAAAA,gCAAmB,EAACC,cAAK,CAACC,aAAa,CAACxB,OAAOyB,SAAS,EAAEzB,OAAO0B,KAAK;YACtE,MAAM8C,UAAUF,YAAYC,GAAG;YAE/BnC,OAAOoC,UAAUH,WAAWI,YAAY,CAAC,MAAM,2BAA2B;QAC5E;QAEA,MAAMC;YACJ,MAAMhE,OAAOC,kBAAS,CAACC,KAAK;YAC5B,MAAM,EAAEX,aAAa,EAAEC,YAAY,EAAE,GAAGE,oBAAa;YAErDH,cAAcY,IAAI,CAACC,qBAAqB,CAAC;gBACvCC,MAAM;oBAAEC,QAAQ;oBAASC,SAAS;gBAAU;YAC9C;YACAf,aAAagB,GAAG,CAACJ,qBAAqB,CAAC;gBACrCC,MAAM;oBAAEI,IAAI;oBAAGC,OAAO;gBAAmB;YAC3C;YAEAE,IAAAA,gCAAmB,EAACC,cAAK,CAACC,aAAa,CAACxB,OAAOyB,SAAS,EAAEzB,OAAO0B,KAAK;YAEtE,MAAM2C,YAAYC,YAAYC,GAAG;YAEjC,MAAM5C,IAAAA,WAAG,EAAC;gBACR,MAAMjB,KAAKkB,IAAI,CAACC,cAAM,CAACC,cAAc,CAAC,WAAW;gBACjD,MAAMpB,KAAKkB,IAAI,CAACC,cAAM,CAACC,cAAc,CAAC,cAAc;gBACpD,MAAMpB,KAAKsB,KAAK,CAACH,cAAM,CAACI,SAAS,CAAC,UAAU;oBAAEC,MAAM;gBAAa;YACnE;YAEA,MAAMC,IAAAA,eAAO,EAAC;gBACZC,OAAOnC,cAAcY,IAAI,EAAE8D,gBAAgB;YAC7C;YAEA,MAAMH,UAAUF,YAAYC,GAAG;YAC/BnC,OAAOoC,UAAUH,WAAWI,YAAY,CAAC,OAAO,0BAA0B;QAC5E;IACF;AACF"}