8451fa31740bc9923dd4897f93da5ec4
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    cleanupBackendDrafts: function() {
        return cleanupBackendDrafts;
    },
    cleanupLocalStorage: function() {
        return cleanupLocalStorage;
    },
    cleanupOnAbandon: function() {
        return cleanupOnAbandon;
    },
    getCleanupQueueLength: function() {
        return getCleanupQueueLength;
    },
    isCleanupInProgress: function() {
        return isCleanupInProgress;
    },
    performComprehensiveCleanup: function() {
        return performComprehensiveCleanup;
    },
    registerUpload: function() {
        return registerUpload;
    }
});
const _api = require("./api");
/**
 * Cleanup utility functions to prevent memory leaks and localStorage accumulation
 */ // Track active cleanup operations to prevent race conditions
let cleanupInProgress = false;
const cleanupQueue = [];
/**
 * Execute cleanup operations sequentially to prevent race conditions
 */ const executeCleanupSafely = async (cleanupFn)=>{
    if (cleanupInProgress) {
        // Queue the cleanup operation
        return new Promise((resolve, reject)=>{
            cleanupQueue.push(async ()=>{
                try {
                    await cleanupFn();
                    resolve();
                } catch (error) {
                    reject(error);
                }
            });
        });
    }
    cleanupInProgress = true;
    try {
        await cleanupFn();
        // Process queued operations
        while(cleanupQueue.length > 0){
            const nextCleanup = cleanupQueue.shift();
            if (nextCleanup) {
                await nextCleanup();
            }
        }
    } finally{
        cleanupInProgress = false;
    }
};
/**
 * Check localStorage quota and warn if approaching limits
 */ const checkLocalStorageQuota = ()=>{
    try {
        // Estimate current usage
        let totalSize = 0;
        for(let i = 0; i < localStorage.length; i++){
            const key = localStorage.key(i);
            if (key) {
                const value = localStorage.getItem(key);
                if (value) {
                    totalSize += key.length + value.length;
                }
            }
        }
        // Most browsers have ~5MB limit, use 4MB as safe threshold
        const maxSize = 4 * 1024 * 1024; // 4MB
        const usagePercent = totalSize / maxSize * 100;
        return {
            canWrite: totalSize < maxSize,
            usagePercent
        };
    } catch (error) {
        console.warn("Failed to check localStorage quota:", error);
        return {
            canWrite: true,
            usagePercent: 0
        };
    }
};
/**
 * Abort in-flight uploads to prevent memory leaks
 */ const abortInFlightUploads = ()=>{
    // Store abort controllers for active uploads
    const activeUploads = window.__activeUploads || window.__uploads || [];
    activeUploads.forEach((controller)=>{
        try {
            controller.abort();
        } catch (error) {
            console.warn("Failed to abort upload:", error);
        }
    });
    // Clear the array
    window.__activeUploads = [];
    window.__uploads = [];
};
const registerUpload = (controller)=>{
    if (!window.__activeUploads) {
        window.__activeUploads = [];
    }
    if (!window.__uploads) {
        window.__uploads = [];
    }
    window.__activeUploads.push(controller);
    window.__uploads.push(controller);
};
const cleanupLocalStorage = ()=>{
    return new Promise((resolve)=>{
        // Use setTimeout to make this non-blocking
        setTimeout(()=>{
            try {
                const keysToRemove = [
                    "project-setup-guided-setup",
                    "self-study-guided-setup"
                ];
                keysToRemove.forEach((key)=>{
                    localStorage.removeItem(key);
                });
                console.log("🧹 Cleaned up localStorage");
            } catch (error) {
                console.warn("Failed to cleanup localStorage:", error);
                // Surface error via toast if available
                if (typeof window.showToast === 'function') {
                    window.showToast("Storage limit reached. Please clear some data and try again.", "error");
                }
            } finally{
                resolve();
            }
        }, 0);
    });
};
const cleanupBackendDrafts = async (hours = 24)=>{
    try {
        const result = await (0, _api.cleanupAbandonedDrafts)(hours);
        console.log("🧹 Backend cleanup result:", result);
        return result;
    } catch (error) {
        console.warn("Failed to cleanup backend drafts:", error);
        return null;
    }
};
const performComprehensiveCleanup = async ()=>{
    console.log("🧹 Starting non-blocking cleanup...");
    return executeCleanupSafely(async ()=>{
        // Abort in-flight uploads
        abortInFlightUploads();
        // Clean up localStorage immediately (non-blocking)
        await cleanupLocalStorage();
        // Clean up backend drafts in background
        setTimeout(()=>{
            cleanupBackendDrafts().catch((error)=>{
                console.warn("Background cleanup failed:", error);
            });
        }, 100);
        console.log("🧹 Cleanup initiated");
    });
};
const cleanupOnAbandon = ()=>{
    console.log("🧹 Cleaning up abandoned project data...");
    // Abort in-flight uploads immediately
    abortInFlightUploads();
    // Clean up localStorage immediately
    const localStorageCleanup = cleanupLocalStorage().catch((error)=>{
        console.warn("localStorage cleanup failed:", error);
    });
    // Schedule backend cleanup for next tick to avoid blocking UI
    setTimeout(()=>{
        cleanupBackendDrafts().catch((error)=>{
            console.warn("Background cleanup failed:", error);
        });
    }, 0);
    return localStorageCleanup;
};
const isCleanupInProgress = ()=>cleanupInProgress;
const getCleanupQueueLength = ()=>cleanupQueue.length;

//# sourceMappingURL=data:application/json;base64,