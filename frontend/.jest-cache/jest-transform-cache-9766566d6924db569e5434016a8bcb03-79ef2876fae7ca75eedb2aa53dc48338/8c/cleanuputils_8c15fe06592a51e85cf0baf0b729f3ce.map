{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/features/projects/services/cleanup-utils.ts"],"sourcesContent":["import { cleanupAbandonedDrafts } from \"../services/api\";\n\n/**\n * Cleanup utility functions to prevent memory leaks and localStorage accumulation\n */\n\n// Track active cleanup operations to prevent race conditions\nlet cleanupInProgress = false;\nconst cleanupQueue: (() => Promise<void>)[] = [];\n\n/**\n * Execute cleanup operations sequentially to prevent race conditions\n */\nconst executeCleanupSafely = async (cleanupFn: () => Promise<void>) => {\n  if (cleanupInProgress) {\n    // Queue the cleanup operation\n    return new Promise<void>((resolve, reject) => {\n      cleanupQueue.push(async () => {\n        try {\n          await cleanupFn();\n          resolve();\n        } catch (error) {\n          reject(error);\n        }\n      });\n    });\n  }\n\n  cleanupInProgress = true;\n\n  try {\n    await cleanupFn();\n\n    // Process queued operations\n    while (cleanupQueue.length > 0) {\n      const nextCleanup = cleanupQueue.shift();\n      if (nextCleanup) {\n        await nextCleanup();\n      }\n    }\n  } finally {\n    cleanupInProgress = false;\n  }\n};\n\n/**\n * Check localStorage quota and warn if approaching limits\n */\nconst checkLocalStorageQuota = (): {\n  canWrite: boolean;\n  usagePercent: number;\n} => {\n  try {\n    // Estimate current usage\n    let totalSize = 0;\n    for (let i = 0; i < localStorage.length; i++) {\n      const key = localStorage.key(i);\n      if (key) {\n        const value = localStorage.getItem(key);\n        if (value) {\n          totalSize += key.length + value.length;\n        }\n      }\n    }\n\n    // Most browsers have ~5MB limit, use 4MB as safe threshold\n    const maxSize = 4 * 1024 * 1024; // 4MB\n    const usagePercent = (totalSize / maxSize) * 100;\n\n    return {\n      canWrite: totalSize < maxSize,\n      usagePercent,\n    };\n  } catch (error) {\n    console.warn(\"Failed to check localStorage quota:\", error);\n    return { canWrite: true, usagePercent: 0 };\n  }\n};\n\n/**\n * Abort in-flight uploads to prevent memory leaks\n */\nconst abortInFlightUploads = () => {\n  // Store abort controllers for active uploads\n  const activeUploads = (window as any).__activeUploads || (window as any).__uploads || [];\n\n  activeUploads.forEach((controller: AbortController) => {\n    try {\n      controller.abort();\n    } catch (error) {\n      console.warn(\"Failed to abort upload:\", error);\n    }\n  });\n\n  // Clear the array\n  (window as any).__activeUploads = [];\n  (window as any).__uploads = [];\n};\n\n/**\n * Register an upload for cleanup\n */\nexport const registerUpload = (controller: AbortController) => {\n  if (!(window as any).__activeUploads) {\n    (window as any).__activeUploads = [];\n  }\n  if (!(window as any).__uploads) {\n    (window as any).__uploads = [];\n  }\n  (window as any).__activeUploads.push(controller);\n  (window as any).__uploads.push(controller);\n};\n\n/**\n * Clean up localStorage without blocking operations\n */\nexport const cleanupLocalStorage = () => {\n  return new Promise<void>((resolve) => {\n    // Use setTimeout to make this non-blocking\n    setTimeout(() => {\n      try {\n        const keysToRemove = [\n          \"project-setup-guided-setup\",\n          \"self-study-guided-setup\",\n        ];\n\n        keysToRemove.forEach((key) => {\n          localStorage.removeItem(key);\n        });\n\n        console.log(\"🧹 Cleaned up localStorage\");\n      } catch (error) {\n        console.warn(\"Failed to cleanup localStorage:\", error);\n        // Surface error via toast if available\n        if (typeof (window as any).showToast === 'function') {\n          (window as any).showToast(\n            \"Storage limit reached. Please clear some data and try again.\",\n            \"error\"\n          );\n        }\n      } finally {\n        resolve();\n      }\n    }, 0);\n  });\n};\n\n/**\n * Clean up abandoned draft projects in the background\n */\nexport const cleanupBackendDrafts = async (hours: number = 24) => {\n  try {\n    const result = await cleanupAbandonedDrafts(hours);\n    console.log(\"🧹 Backend cleanup result:\", result);\n    return result;\n  } catch (error) {\n    console.warn(\"Failed to cleanup backend drafts:\", error);\n    return null;\n  }\n};\n\n/**\n * Non-blocking comprehensive cleanup\n */\nexport const performComprehensiveCleanup = async () => {\n  console.log(\"🧹 Starting non-blocking cleanup...\");\n\n  return executeCleanupSafely(async () => {\n    // Abort in-flight uploads\n    abortInFlightUploads();\n\n    // Clean up localStorage immediately (non-blocking)\n    await cleanupLocalStorage();\n\n    // Clean up backend drafts in background\n    setTimeout(() => {\n      cleanupBackendDrafts().catch((error) => {\n        console.warn(\"Background cleanup failed:\", error);\n      });\n    }, 100);\n\n    console.log(\"🧹 Cleanup initiated\");\n  });\n};\n\n/**\n * Cleanup function specifically for when users abandon projects\n */\nexport const cleanupOnAbandon = (): Promise<void> => {\n  console.log(\"🧹 Cleaning up abandoned project data...\");\n\n  // Abort in-flight uploads immediately\n  abortInFlightUploads();\n\n  // Clean up localStorage immediately\n  const localStorageCleanup = cleanupLocalStorage().catch((error) => {\n    console.warn(\"localStorage cleanup failed:\", error);\n  });\n\n  // Schedule backend cleanup for next tick to avoid blocking UI\n  setTimeout(() => {\n    cleanupBackendDrafts().catch((error) => {\n      console.warn(\"Background cleanup failed:\", error);\n    });\n  }, 0);\n\n  return localStorageCleanup;\n};\n\n/**\n * Check if cleanup is currently in progress\n */\nexport const isCleanupInProgress = () => cleanupInProgress;\n\n/**\n * Get cleanup queue length\n */\nexport const getCleanupQueueLength = () => cleanupQueue.length;\n"],"names":["cleanupBackendDrafts","cleanupLocalStorage","cleanupOnAbandon","getCleanupQueueLength","isCleanupInProgress","performComprehensiveCleanup","registerUpload","cleanupInProgress","cleanupQueue","executeCleanupSafely","cleanupFn","Promise","resolve","reject","push","error","length","nextCleanup","shift","checkLocalStorageQuota","totalSize","i","localStorage","key","value","getItem","maxSize","usagePercent","canWrite","console","warn","abortInFlightUploads","activeUploads","window","__activeUploads","__uploads","forEach","controller","abort","setTimeout","keysToRemove","removeItem","log","showToast","hours","result","cleanupAbandonedDrafts","catch","localStorageCleanup"],"mappings":"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"}