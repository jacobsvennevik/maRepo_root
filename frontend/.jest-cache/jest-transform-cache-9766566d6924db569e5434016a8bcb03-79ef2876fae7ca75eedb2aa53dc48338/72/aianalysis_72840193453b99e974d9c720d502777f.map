{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/features/projects/services/ai-analysis.ts"],"sourcesContent":["// Simulated AI analysis for uploaded files\n// In a real implementation, this would call an AI service\n\nexport interface DetectedTopic {\n  id: string;\n  label: string;\n  confidence: number;\n}\n\nexport interface DetectedDate {\n  id: string;\n  date: string;\n  description: string;\n  type: string;\n}\n\nexport interface DetectedTestType {\n  id: string;\n  type: string;\n  confidence: number;\n}\n\nexport interface AIAnalysisResult {\n  topics: DetectedTopic[];\n  dates: DetectedDate[];\n  testTypes: DetectedTestType[];\n}\n\n// Sample data for different file types\nconst sampleTopics = [\n  { label: \"Calculus\", confidence: 95 },\n  { label: \"Linear Algebra\", confidence: 88 },\n  { label: \"Statistics\", confidence: 92 },\n  { label: \"Physics\", confidence: 87 },\n  { label: \"Chemistry\", confidence: 85 },\n  { label: \"Biology\", confidence: 90 },\n  { label: \"Literature\", confidence: 93 },\n  { label: \"History\", confidence: 89 },\n  { label: \"Economics\", confidence: 86 },\n  { label: \"Computer Science\", confidence: 94 },\n  { label: \"Psychology\", confidence: 91 },\n  { label: \"Philosophy\", confidence: 84 },\n];\n\nconst sampleDates = [\n  { date: \"2024-12-15\", description: \"Final Exam\", type: \"exam\" },\n  { date: \"2024-11-20\", description: \"Midterm\", type: \"exam\" },\n  { date: \"2024-10-15\", description: \"Project Due\", type: \"assignment\" },\n  { date: \"2024-09-30\", description: \"Quiz\", type: \"quiz\" },\n  { date: \"2024-12-10\", description: \"Presentation\", type: \"presentation\" },\n  { date: \"2024-11-05\", description: \"Lab Report\", type: \"assignment\" },\n];\n\nconst sampleTestTypes = [\n  { type: \"Multiple Choice\", confidence: 96 },\n  { type: \"Essay\", confidence: 89 },\n  { type: \"Problem Solving\", confidence: 92 },\n  { type: \"Lab Practical\", confidence: 87 },\n  { type: \"Oral Exam\", confidence: 85 },\n  { type: \"Take-Home\", confidence: 90 },\n];\n\nexport async function analyzeUploadedFiles(\n  files: File[],\n): Promise<AIAnalysisResult> {\n  // Simulate API delay\n  await new Promise((resolve) =>\n    setTimeout(resolve, 2000 + Math.random() * 1000),\n  );\n\n  const result: AIAnalysisResult = {\n    topics: [],\n    dates: [],\n    testTypes: [],\n  };\n\n  // Analyze each file\n  files.forEach((file, fileIndex) => {\n    const fileName = file.name.toLowerCase();\n\n    // Extract topics based on file content/name\n    if (\n      fileName.includes(\"math\") ||\n      fileName.includes(\"calculus\") ||\n      fileName.includes(\"algebra\")\n    ) {\n      result.topics.push({\n        id: `topic-${fileIndex}-1`,\n        label: \"Calculus\",\n        confidence: 85 + Math.floor(Math.random() * 15),\n      });\n      result.topics.push({\n        id: `topic-${fileIndex}-2`,\n        label: \"Linear Algebra\",\n        confidence: 80 + Math.floor(Math.random() * 15),\n      });\n    }\n\n    if (fileName.includes(\"physics\") || fileName.includes(\"mechanics\")) {\n      result.topics.push({\n        id: `topic-${fileIndex}-3`,\n        label: \"Physics\",\n        confidence: 85 + Math.floor(Math.random() * 15),\n      });\n    }\n\n    if (fileName.includes(\"chemistry\") || fileName.includes(\"organic\")) {\n      result.topics.push({\n        id: `topic-${fileIndex}-4`,\n        label: \"Chemistry\",\n        confidence: 85 + Math.floor(Math.random() * 15),\n      });\n    }\n\n    if (\n      fileName.includes(\"biology\") ||\n      fileName.includes(\"cell\") ||\n      fileName.includes(\"genetics\")\n    ) {\n      result.topics.push({\n        id: `topic-${fileIndex}-5`,\n        label: \"Biology\",\n        confidence: 85 + Math.floor(Math.random() * 15),\n      });\n    }\n\n    if (\n      fileName.includes(\"literature\") ||\n      fileName.includes(\"english\") ||\n      fileName.includes(\"poetry\")\n    ) {\n      result.topics.push({\n        id: `topic-${fileIndex}-6`,\n        label: \"Literature\",\n        confidence: 85 + Math.floor(Math.random() * 15),\n      });\n    }\n\n    if (\n      fileName.includes(\"history\") ||\n      fileName.includes(\"ancient\") ||\n      fileName.includes(\"modern\")\n    ) {\n      result.topics.push({\n        id: `topic-${fileIndex}-7`,\n        label: \"History\",\n        confidence: 85 + Math.floor(Math.random() * 15),\n      });\n    }\n\n    if (\n      fileName.includes(\"economics\") ||\n      fileName.includes(\"micro\") ||\n      fileName.includes(\"macro\")\n    ) {\n      result.topics.push({\n        id: `topic-${fileIndex}-8`,\n        label: \"Economics\",\n        confidence: 85 + Math.floor(Math.random() * 15),\n      });\n    }\n\n    if (\n      fileName.includes(\"computer\") ||\n      fileName.includes(\"programming\") ||\n      fileName.includes(\"code\")\n    ) {\n      result.topics.push({\n        id: `topic-${fileIndex}-9`,\n        label: \"Computer Science\",\n        confidence: 85 + Math.floor(Math.random() * 15),\n      });\n    }\n\n    if (\n      fileName.includes(\"psychology\") ||\n      fileName.includes(\"behavior\") ||\n      fileName.includes(\"cognitive\")\n    ) {\n      result.topics.push({\n        id: `topic-${fileIndex}-10`,\n        label: \"Psychology\",\n        confidence: 85 + Math.floor(Math.random() * 15),\n      });\n    }\n\n    if (\n      fileName.includes(\"philosophy\") ||\n      fileName.includes(\"ethics\") ||\n      fileName.includes(\"logic\")\n    ) {\n      result.topics.push({\n        id: `topic-${fileIndex}-11`,\n        label: \"Philosophy\",\n        confidence: 85 + Math.floor(Math.random() * 15),\n      });\n    }\n\n    // Extract dates based on file content/name\n    if (fileName.includes(\"final\") || fileName.includes(\"exam\")) {\n      result.dates.push({\n        id: `date-${fileIndex}-1`,\n        date: \"2024-12-15\",\n        description: \"Final Exam\",\n        type: \"exam\",\n      });\n    }\n\n    if (fileName.includes(\"midterm\") || fileName.includes(\"mid\")) {\n      result.dates.push({\n        id: `date-${fileIndex}-2`,\n        date: \"2024-11-20\",\n        description: \"Midterm\",\n        type: \"exam\",\n      });\n    }\n\n    if (fileName.includes(\"project\") || fileName.includes(\"assignment\")) {\n      result.dates.push({\n        id: `date-${fileIndex}-3`,\n        date: \"2024-10-15\",\n        description: \"Project Due\",\n        type: \"assignment\",\n      });\n    }\n\n    if (fileName.includes(\"quiz\") || fileName.includes(\"test\")) {\n      result.dates.push({\n        id: `date-${fileIndex}-4`,\n        date: \"2024-09-30\",\n        description: \"Quiz\",\n        type: \"quiz\",\n      });\n    }\n\n    if (fileName.includes(\"presentation\") || fileName.includes(\"present\")) {\n      result.dates.push({\n        id: `date-${fileIndex}-5`,\n        date: \"2024-12-10\",\n        description: \"Presentation\",\n        type: \"presentation\",\n      });\n    }\n\n    if (fileName.includes(\"lab\") || fileName.includes(\"practical\")) {\n      result.dates.push({\n        id: `date-${fileIndex}-6`,\n        date: \"2024-11-05\",\n        description: \"Lab Report\",\n        type: \"assignment\",\n      });\n    }\n\n    // Extract test types based on file content/name\n    if (\n      fileName.includes(\"multiple\") ||\n      fileName.includes(\"choice\") ||\n      fileName.includes(\"mcq\")\n    ) {\n      result.testTypes.push({\n        id: `test-${fileIndex}-1`,\n        type: \"Multiple Choice\",\n        confidence: 90 + Math.floor(Math.random() * 10),\n      });\n    }\n\n    if (\n      fileName.includes(\"essay\") ||\n      fileName.includes(\"writing\") ||\n      fileName.includes(\"paper\")\n    ) {\n      result.testTypes.push({\n        id: `test-${fileIndex}-2`,\n        type: \"Essay\",\n        confidence: 85 + Math.floor(Math.random() * 10),\n      });\n    }\n\n    if (\n      fileName.includes(\"problem\") ||\n      fileName.includes(\"solve\") ||\n      fileName.includes(\"calculation\")\n    ) {\n      result.testTypes.push({\n        id: `test-${fileIndex}-3`,\n        type: \"Problem Solving\",\n        confidence: 88 + Math.floor(Math.random() * 10),\n      });\n    }\n\n    if (\n      fileName.includes(\"lab\") ||\n      fileName.includes(\"practical\") ||\n      fileName.includes(\"experiment\")\n    ) {\n      result.testTypes.push({\n        id: `test-${fileIndex}-4`,\n        type: \"Lab Practical\",\n        confidence: 85 + Math.floor(Math.random() * 10),\n      });\n    }\n\n    if (\n      fileName.includes(\"oral\") ||\n      fileName.includes(\"speaking\") ||\n      fileName.includes(\"interview\")\n    ) {\n      result.testTypes.push({\n        id: `test-${fileIndex}-5`,\n        type: \"Oral Exam\",\n        confidence: 80 + Math.floor(Math.random() * 10),\n      });\n    }\n\n    if (\n      fileName.includes(\"take\") ||\n      fileName.includes(\"home\") ||\n      fileName.includes(\"open\")\n    ) {\n      result.testTypes.push({\n        id: `test-${fileIndex}-6`,\n        type: \"Take-Home\",\n        confidence: 85 + Math.floor(Math.random() * 10),\n      });\n    }\n  });\n\n  // Remove duplicates and limit results\n  result.topics = result.topics\n    .filter(\n      (topic, index, self) =>\n        index === self.findIndex((t) => t.label === topic.label),\n    )\n    .slice(0, 5);\n\n  result.dates = result.dates\n    .filter(\n      (date, index, self) =>\n        index === self.findIndex((d) => d.description === date.description),\n    )\n    .slice(0, 4);\n\n  result.testTypes = result.testTypes\n    .filter(\n      (type, index, self) =>\n        index === self.findIndex((t) => t.type === type.type),\n    )\n    .slice(0, 3);\n\n  return result;\n}\n"],"names":["analyzeUploadedFiles","sampleTopics","label","confidence","sampleDates","date","description","type","sampleTestTypes","files","Promise","resolve","setTimeout","Math","random","result","topics","dates","testTypes","forEach","file","fileIndex","fileName","name","toLowerCase","includes","push","id","floor","filter","topic","index","self","findIndex","t","slice","d"],"mappings":"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"}