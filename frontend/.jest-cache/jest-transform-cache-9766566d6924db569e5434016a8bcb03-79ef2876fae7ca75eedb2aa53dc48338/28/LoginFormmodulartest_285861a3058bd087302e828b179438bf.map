{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/app/(auth)/components/__tests__/LoginForm-modular.test.tsx"],"sourcesContent":["/**\n * LoginForm Modular Tests - Simplified Version\n * \n * Working modular test suite using simplified patterns for\n * authentication functionality testing.\n */\n\nimport React from 'react';\nimport { screen, fireEvent, waitFor, act, render } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport '@testing-library/jest-dom';\n\nimport { LoginForm } from '../LoginForm';\n\n// Mock authentication services\njest.mock('@/lib/axios-auth', () => ({\n  axiosAuth: { post: jest.fn() },\n}));\n\njest.mock('@/lib/axios-api', () => ({\n  axiosApi: { get: jest.fn(), post: jest.fn(), patch: jest.fn(), delete: jest.fn() },\n}));\n\njest.mock('next/navigation', () => ({\n  useRouter: () => ({\n    push: jest.fn(),\n    replace: jest.fn(),\n    back: jest.fn(),\n    forward: jest.fn(),\n    refresh: jest.fn(),\n  }),\n}));\n\n// Pull mocked instances\nconst { axiosAuth } = jest.requireMock('@/lib/axios-auth') as { axiosAuth: { post: jest.Mock } };\nconst { axiosApi } = jest.requireMock('@/lib/axios-api') as { axiosApi: { get: jest.Mock } };\n\n// Simple render function for testing\nconst renderWithProviders = (component: React.ReactElement) => render(component);\n\ndescribe('LoginForm', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('Rendering', () => {\n    it('renders login form with all required elements', () => {\n      renderWithProviders(<LoginForm />);\n      expect(screen.getByTestId('login-form')).toBeInTheDocument();\n      expect(screen.getByLabelText(/email/i)).toBeInTheDocument();\n      expect(screen.getByLabelText(/password/i)).toBeInTheDocument();\n      expect(screen.getByRole('button', { name: /^sign in$/i })).toBeInTheDocument();\n    });\n\n    it('renders with proper accessibility attributes', () => {\n      renderWithProviders(<LoginForm />);\n      const form = screen.getByTestId('login-form');\n      const emailInput = screen.getByLabelText(/email/i);\n      const passwordInput = screen.getByLabelText(/password/i);\n      expect(form).toBeInTheDocument();\n      expect(emailInput).toHaveAttribute('type', 'email');\n      expect(passwordInput).toHaveAttribute('type', 'password');\n    });\n  });\n\n  describe('Authentication Flow', () => {\n    it('handles successful login', async () => {\n      const user = userEvent.setup();\n      axiosAuth.post.mockResolvedValueOnce({\n        data: { access: 'mock-access-token', refresh: 'mock-refresh-token' },\n      });\n      axiosApi.get.mockResolvedValueOnce({ data: { id: 1, email: 'test@example.com' } });\n\n      renderWithProviders(<LoginForm />);\n\n      await act(async () => {\n        await user.type(screen.getByLabelText(/email/i), 'test@example.com');\n        await user.type(screen.getByLabelText(/password/i), 'password123');\n        await user.click(screen.getByRole('button', { name: /^sign in$/i }));\n      });\n\n      await waitFor(() => {\n        expect(axiosAuth.post).toHaveBeenCalledWith('/token/', {\n          email: 'test@example.com',\n          password: 'password123',\n        });\n        expect(axiosApi.get).toHaveBeenCalledWith('users/me/');\n      }, { timeout: 5000 });\n    });\n\n    it('handles login error', async () => {\n      const user = userEvent.setup();\n      axiosAuth.post.mockRejectedValueOnce({\n        response: { data: { detail: 'Invalid credentials' } },\n      });\n\n      renderWithProviders(<LoginForm />);\n\n      await act(async () => {\n        await user.type(screen.getByLabelText(/email/i), 'test@example.com');\n        await user.type(screen.getByLabelText(/password/i), 'wrongpassword');\n        await user.click(screen.getByRole('button', { name: /^sign in$/i }));\n      });\n\n      await waitFor(() => {\n        expect(screen.getByText(/invalid credentials/i)).toBeInTheDocument();\n      }, { timeout: 3000 });\n    });\n\n    it('validates required fields', async () => {\n      const user = userEvent.setup();\n      renderWithProviders(<LoginForm />);\n      await act(async () => {\n        await user.click(screen.getByRole('button', { name: /^sign in$/i }));\n      });\n      await waitFor(() => {\n        expect(screen.getByText(/please enter a valid email address/i)).toBeInTheDocument();\n        expect(screen.getByText(/password must be at least 8 characters/i)).toBeInTheDocument();\n      }, { timeout: 3000 });\n    });\n  });\n\n  describe('Data-Driven Authentication', () => {\n    const validCredentials = [\n      { email: 'test@example.com', password: 'password123' },\n      { email: 'user@domain.org', password: 'securepass456' },\n      { email: 'admin@company.com', password: 'adminpass789' },\n    ];\n\n    validCredentials.forEach((credentials, index) => {\n      it(`handles valid credentials ${index + 1}`, async () => {\n        const user = userEvent.setup();\n        axiosAuth.post.mockResolvedValueOnce({\n          data: { access: 'mock-access-token', refresh: 'mock-refresh-token' },\n        });\n        axiosApi.get.mockResolvedValueOnce({ data: { id: 1, email: credentials.email } });\n\n        renderWithProviders(<LoginForm />);\n\n        await act(async () => {\n          await user.type(screen.getByLabelText(/email/i), credentials.email);\n          await user.type(screen.getByLabelText(/password/i), credentials.password);\n          await user.click(screen.getByRole('button', { name: /^sign in$/i }));\n        });\n\n        await waitFor(() => {\n          expect(axiosAuth.post).toHaveBeenCalledWith('/token/', {\n            email: credentials.email,\n            password: credentials.password,\n          });\n          expect(axiosApi.get).toHaveBeenCalledWith('users/me/');\n        }, { timeout: 5000 });\n      });\n    });\n  });\n\n  describe('Accessibility', () => {\n    it('has proper ARIA labels and roles', () => {\n      renderWithProviders(<LoginForm />);\n      const form = screen.getByTestId('login-form');\n      const emailInput = screen.getByLabelText(/email/i);\n      const passwordInput = screen.getByLabelText(/password/i);\n      const submitButton = screen.getByRole('button', { name: /^sign in$/i });\n      expect(form).toBeInTheDocument();\n      expect(emailInput).toHaveAttribute('type', 'email');\n      expect(passwordInput).toHaveAttribute('type', 'password');\n      expect(submitButton).toHaveAttribute('type', 'submit');\n    });\n\n    it('supports keyboard navigation', async () => {\n      const user = userEvent.setup();\n      renderWithProviders(<LoginForm />);\n      await user.tab();\n      expect(screen.getByLabelText(/email/i)).toHaveFocus();\n      await user.tab();\n      expect(screen.getByLabelText(/password/i)).toHaveFocus();\n      await user.tab();\n      expect(screen.getByRole('button', { name: /^sign in$/i })).toHaveFocus();\n    });\n  });\n\n  describe('Performance', () => {\n    it('renders within acceptable time', () => {\n      const startTime = performance.now();\n      renderWithProviders(<LoginForm />);\n      const endTime = performance.now();\n      expect(endTime - startTime).toBeLessThan(100);\n    });\n\n    it('handles login efficiently', async () => {\n      const user = userEvent.setup();\n      axiosAuth.post.mockResolvedValueOnce({ data: { access: 'token', refresh: 'refresh' } });\n      axiosApi.get.mockResolvedValueOnce({ data: { id: 1, email: 'test@example.com' } });\n\n      renderWithProviders(<LoginForm />);\n\n      const startTime = performance.now();\n      await act(async () => {\n        await user.type(screen.getByLabelText(/email/i), 'test@example.com');\n        await user.type(screen.getByLabelText(/password/i), 'password123');\n        await user.click(screen.getByRole('button', { name: /^sign in$/i }));\n      });\n\n      await waitFor(() => {\n        expect(axiosAuth.post).toHaveBeenCalled();\n      });\n\n      const endTime = performance.now();\n      expect(endTime - startTime).toBeLessThan(2000);\n    });\n  });\n});"],"names":["jest","mock","axiosAuth","post","fn","axiosApi","get","patch","delete","useRouter","push","replace","back","forward","refresh","requireMock","renderWithProviders","component","render","describe","beforeEach","clearAllMocks","it","LoginForm","expect","screen","getByTestId","toBeInTheDocument","getByLabelText","getByRole","name","form","emailInput","passwordInput","toHaveAttribute","user","userEvent","setup","mockResolvedValueOnce","data","access","id","email","act","type","click","waitFor","toHaveBeenCalledWith","password","timeout","mockRejectedValueOnce","response","detail","getByText","validCredentials","forEach","credentials","index","submitButton","tab","toHaveFocus","startTime","performance","now","endTime","toBeLessThan","toHaveBeenCalled"],"mappings":"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"}