{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/app/(auth)/components/__tests__/LoginForm-modular.test.tsx"],"sourcesContent":["/**\n * LoginForm Modular Tests\n * \n * Modular test suite using reusable patterns and helpers for\n * authentication functionality testing.\n */\n\nimport React from 'react';\nimport { screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport '@testing-library/jest-dom';\n\nimport { LoginForm } from '../LoginForm';\nimport { \n  renderWithProviders, \n  authHelpers, \n  authScenarios, \n  authTestUtils,\n  standardMocks \n} from '../../../../test-utils';\n\n// Mock authentication services\njest.mock('@/lib/axios-auth', () => ({\n  axiosAuth: { post: jest.fn() },\n}));\n\njest.mock('@/lib/axios-api', () => ({\n  axiosApi: { get: jest.fn(), post: jest.fn(), patch: jest.fn(), delete: jest.fn() },\n}));\n\njest.mock('next/navigation', () => ({\n  useRouter: () => standardMocks.router,\n}));\n\ndescribe('LoginForm', () => {\n  const { mockAxiosAuth, mockAxiosApi, mockRouter } = standardMocks;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  // ============================================================================\n  // Rendering Tests\n  // ============================================================================\n\n  describe('Rendering', () => {\n    it('renders login form with all required elements', () => {\n      renderWithProviders(<LoginForm />);\n      \n      expect(screen.getByTestId('login-form')).toBeInTheDocument();\n      expect(screen.getByLabelText(/email/i)).toBeInTheDocument();\n      expect(screen.getByLabelText(/password/i)).toBeInTheDocument();\n      expect(screen.getByRole('button', { name: /^sign in$/i })).toBeInTheDocument();\n    });\n\n    it('renders with proper accessibility attributes', () => {\n      renderWithProviders(<LoginForm />);\n      \n      const form = screen.getByTestId('login-form');\n      const emailInput = screen.getByLabelText(/email/i);\n      const passwordInput = screen.getByLabelText(/password/i);\n      \n      expect(form).toBeInTheDocument();\n      expect(emailInput).toHaveAttribute('type', 'email');\n      expect(passwordInput).toHaveAttribute('type', 'password');\n    });\n  });\n\n  // ============================================================================\n  // Authentication Flow Tests (Using Patterns)\n  // ============================================================================\n\n  describe('Authentication Flow', () => {\n    it('handles successful login', async () => {\n      authHelpers.setupAuthMocks();\n      await authHelpers.completeLoginFlow(authScenarios.validCredentials[0]);\n      await authHelpers.verifySuccessfulLogin(authScenarios.validCredentials[0], '/dashboard');\n    });\n\n    it('handles login error', async () => {\n      authHelpers.setupAuthErrorMocks(authScenarios.errorScenarios[0].mockError);\n      await authHelpers.completeLoginFlow(authScenarios.invalidCredentials[0]);\n      await authHelpers.verifyLoginError('Invalid credentials');\n    });\n\n    it('validates required fields', async () => {\n      const user = userEvent.setup();\n      renderWithProviders(<LoginForm />);\n\n      await user.click(screen.getByRole('button', { name: /^sign in$/i }));\n      await authHelpers.verifyFormValidation();\n    });\n  });\n\n  // ============================================================================\n  // Data-Driven Tests\n  // ============================================================================\n\n  describe('Data-Driven Authentication', () => {\n    it('handles multiple valid credentials', async () => {\n      await authHelpers.testAuthScenarios(\n        authScenarios.validCredentials.map(creds => ({\n          name: `Login with ${creds.email}`,\n          credentials: creds,\n          expectedResult: 'success' as const,\n          expectedNavigation: '/dashboard'\n        }))\n      );\n    });\n\n    it('handles multiple error scenarios', async () => {\n      await authHelpers.testAuthScenarios(\n        authScenarios.errorScenarios.map(scenario => ({\n          name: scenario.name,\n          credentials: authScenarios.invalidCredentials[0],\n          mockError: scenario.mockError,\n          expectedResult: 'error' as const,\n          expectedMessage: scenario.expectedMessage.source\n        }))\n      );\n    });\n  });\n\n  // ============================================================================\n  // Complete Test Suite (Using Test Utils)\n  // ============================================================================\n\n  describe('Complete Authentication Suite', () => {\n    const authSuite = authTestUtils.createAuthTestSuite(LoginForm);\n\n    it('successful login flow', async () => {\n      await authSuite.testSuccessfulLogin();\n    });\n\n    it('login error handling', async () => {\n      await authSuite.testLoginError();\n    });\n\n    it('form validation', async () => {\n      await authSuite.testFormValidation();\n    });\n\n    it('token storage', async () => {\n      await authSuite.testTokenStorage();\n    });\n\n    it('accessibility', async () => {\n      await authSuite.testAccessibility();\n    });\n\n    it('performance', async () => {\n      await authSuite.testPerformance();\n    });\n  });\n});\n"],"names":["jest","mock","axiosAuth","post","fn","axiosApi","get","patch","delete","useRouter","standardMocks","router","describe","mockAxiosAuth","mockAxiosApi","mockRouter","beforeEach","clearAllMocks","it","renderWithProviders","LoginForm","expect","screen","getByTestId","toBeInTheDocument","getByLabelText","getByRole","name","form","emailInput","passwordInput","toHaveAttribute","authHelpers","setupAuthMocks","completeLoginFlow","authScenarios","validCredentials","verifySuccessfulLogin","setupAuthErrorMocks","errorScenarios","mockError","invalidCredentials","verifyLoginError","user","userEvent","setup","click","verifyFormValidation","testAuthScenarios","map","creds","email","credentials","expectedResult","expectedNavigation","scenario","expectedMessage","source","authSuite","authTestUtils","createAuthTestSuite","testSuccessfulLogin","testLoginError","testFormValidation","testTokenStorage","testAccessibility","testPerformance"],"mappings":"AAAA;;;;;CAKC;AAgBD,+BAA+B;AAC/BA,KAAKC,IAAI,CAAC,oBAAoB,IAAO,CAAA;QACnCC,WAAW;YAAEC,MAAMH,KAAKI,EAAE;QAAG;IAC/B,CAAA;AAEAJ,KAAKC,IAAI,CAAC,mBAAmB,IAAO,CAAA;QAClCI,UAAU;YAAEC,KAAKN,KAAKI,EAAE;YAAID,MAAMH,KAAKI,EAAE;YAAIG,OAAOP,KAAKI,EAAE;YAAII,QAAQR,KAAKI,EAAE;QAAG;IACnF,CAAA;AAEAJ,KAAKC,IAAI,CAAC,mBAAmB,IAAO,CAAA;QAClCQ,WAAW,IAAMC,wBAAa,CAACC,MAAM;IACvC,CAAA;;;;;8DAzBkB;wBACK;kEACD;QACf;2BAEmB;2BAOnB;;;;;;AAePC,SAAS,aAAa;IACpB,MAAM,EAAEC,aAAa,EAAEC,YAAY,EAAEC,UAAU,EAAE,GAAGL,wBAAa;IAEjEM,WAAW;QACThB,KAAKiB,aAAa;IACpB;IAEA,+EAA+E;IAC/E,kBAAkB;IAClB,+EAA+E;IAE/EL,SAAS,aAAa;QACpBM,GAAG,iDAAiD;YAClDC,IAAAA,8BAAmB,gBAAC,qBAACC,oBAAS;YAE9BC,OAAOC,cAAM,CAACC,WAAW,CAAC,eAAeC,iBAAiB;YAC1DH,OAAOC,cAAM,CAACG,cAAc,CAAC,WAAWD,iBAAiB;YACzDH,OAAOC,cAAM,CAACG,cAAc,CAAC,cAAcD,iBAAiB;YAC5DH,OAAOC,cAAM,CAACI,SAAS,CAAC,UAAU;gBAAEC,MAAM;YAAa,IAAIH,iBAAiB;QAC9E;QAEAN,GAAG,gDAAgD;YACjDC,IAAAA,8BAAmB,gBAAC,qBAACC,oBAAS;YAE9B,MAAMQ,OAAON,cAAM,CAACC,WAAW,CAAC;YAChC,MAAMM,aAAaP,cAAM,CAACG,cAAc,CAAC;YACzC,MAAMK,gBAAgBR,cAAM,CAACG,cAAc,CAAC;YAE5CJ,OAAOO,MAAMJ,iBAAiB;YAC9BH,OAAOQ,YAAYE,eAAe,CAAC,QAAQ;YAC3CV,OAAOS,eAAeC,eAAe,CAAC,QAAQ;QAChD;IACF;IAEA,+EAA+E;IAC/E,6CAA6C;IAC7C,+EAA+E;IAE/EnB,SAAS,uBAAuB;QAC9BM,GAAG,4BAA4B;YAC7Bc,sBAAW,CAACC,cAAc;YAC1B,MAAMD,sBAAW,CAACE,iBAAiB,CAACC,wBAAa,CAACC,gBAAgB,CAAC,EAAE;YACrE,MAAMJ,sBAAW,CAACK,qBAAqB,CAACF,wBAAa,CAACC,gBAAgB,CAAC,EAAE,EAAE;QAC7E;QAEAlB,GAAG,uBAAuB;YACxBc,sBAAW,CAACM,mBAAmB,CAACH,wBAAa,CAACI,cAAc,CAAC,EAAE,CAACC,SAAS;YACzE,MAAMR,sBAAW,CAACE,iBAAiB,CAACC,wBAAa,CAACM,kBAAkB,CAAC,EAAE;YACvE,MAAMT,sBAAW,CAACU,gBAAgB,CAAC;QACrC;QAEAxB,GAAG,6BAA6B;YAC9B,MAAMyB,OAAOC,kBAAS,CAACC,KAAK;YAC5B1B,IAAAA,8BAAmB,gBAAC,qBAACC,oBAAS;YAE9B,MAAMuB,KAAKG,KAAK,CAACxB,cAAM,CAACI,SAAS,CAAC,UAAU;gBAAEC,MAAM;YAAa;YACjE,MAAMK,sBAAW,CAACe,oBAAoB;QACxC;IACF;IAEA,+EAA+E;IAC/E,oBAAoB;IACpB,+EAA+E;IAE/EnC,SAAS,8BAA8B;QACrCM,GAAG,sCAAsC;YACvC,MAAMc,sBAAW,CAACgB,iBAAiB,CACjCb,wBAAa,CAACC,gBAAgB,CAACa,GAAG,CAACC,CAAAA,QAAU,CAAA;oBAC3CvB,MAAM,CAAC,WAAW,EAAEuB,MAAMC,KAAK,EAAE;oBACjCC,aAAaF;oBACbG,gBAAgB;oBAChBC,oBAAoB;gBACtB,CAAA;QAEJ;QAEApC,GAAG,oCAAoC;YACrC,MAAMc,sBAAW,CAACgB,iBAAiB,CACjCb,wBAAa,CAACI,cAAc,CAACU,GAAG,CAACM,CAAAA,WAAa,CAAA;oBAC5C5B,MAAM4B,SAAS5B,IAAI;oBACnByB,aAAajB,wBAAa,CAACM,kBAAkB,CAAC,EAAE;oBAChDD,WAAWe,SAASf,SAAS;oBAC7Ba,gBAAgB;oBAChBG,iBAAiBD,SAASC,eAAe,CAACC,MAAM;gBAClD,CAAA;QAEJ;IACF;IAEA,+EAA+E;IAC/E,yCAAyC;IACzC,+EAA+E;IAE/E7C,SAAS,iCAAiC;QACxC,MAAM8C,YAAYC,wBAAa,CAACC,mBAAmB,CAACxC,oBAAS;QAE7DF,GAAG,yBAAyB;YAC1B,MAAMwC,UAAUG,mBAAmB;QACrC;QAEA3C,GAAG,wBAAwB;YACzB,MAAMwC,UAAUI,cAAc;QAChC;QAEA5C,GAAG,mBAAmB;YACpB,MAAMwC,UAAUK,kBAAkB;QACpC;QAEA7C,GAAG,iBAAiB;YAClB,MAAMwC,UAAUM,gBAAgB;QAClC;QAEA9C,GAAG,iBAAiB;YAClB,MAAMwC,UAAUO,iBAAiB;QACnC;QAEA/C,GAAG,eAAe;YAChB,MAAMwC,UAAUQ,eAAe;QACjC;IACF;AACF"}