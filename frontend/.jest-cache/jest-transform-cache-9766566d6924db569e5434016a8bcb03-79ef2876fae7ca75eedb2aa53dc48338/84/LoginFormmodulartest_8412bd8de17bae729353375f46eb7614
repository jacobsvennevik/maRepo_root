7b8796910050e513e798baff1c272250
/**
 * LoginForm Modular Tests
 * 
 * Modular test suite using reusable patterns and helpers for
 * authentication functionality testing.
 */ "use strict";
// Mock authentication services
jest.mock('@/lib/axios-auth', ()=>({
        axiosAuth: {
            post: jest.fn()
        }
    }));
jest.mock('@/lib/axios-api', ()=>({
        axiosApi: {
            get: jest.fn(),
            post: jest.fn(),
            patch: jest.fn(),
            delete: jest.fn()
        }
    }));
jest.mock('next/navigation', ()=>({
        useRouter: ()=>_testutils.standardMocks.router
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
require("@testing-library/jest-dom");
const _LoginForm = require("../LoginForm");
const _testutils = require("../../../../test-utils");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
describe('LoginForm', ()=>{
    const { mockAxiosAuth, mockAxiosApi, mockRouter } = _testutils.standardMocks;
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    // ============================================================================
    // Rendering Tests
    // ============================================================================
    describe('Rendering', ()=>{
        it('renders login form with all required elements', ()=>{
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoginForm.LoginForm, {}));
            expect(_react1.screen.getByTestId('login-form')).toBeInTheDocument();
            expect(_react1.screen.getByLabelText(/email/i)).toBeInTheDocument();
            expect(_react1.screen.getByLabelText(/password/i)).toBeInTheDocument();
            expect(_react1.screen.getByRole('button', {
                name: /^sign in$/i
            })).toBeInTheDocument();
        });
        it('renders with proper accessibility attributes', ()=>{
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoginForm.LoginForm, {}));
            const form = _react1.screen.getByTestId('login-form');
            const emailInput = _react1.screen.getByLabelText(/email/i);
            const passwordInput = _react1.screen.getByLabelText(/password/i);
            expect(form).toBeInTheDocument();
            expect(emailInput).toHaveAttribute('type', 'email');
            expect(passwordInput).toHaveAttribute('type', 'password');
        });
    });
    // ============================================================================
    // Authentication Flow Tests (Using Patterns)
    // ============================================================================
    describe('Authentication Flow', ()=>{
        it('handles successful login', async ()=>{
            _testutils.authHelpers.setupAuthMocks();
            await _testutils.authHelpers.completeLoginFlow(_testutils.authScenarios.validCredentials[0]);
            await _testutils.authHelpers.verifySuccessfulLogin(_testutils.authScenarios.validCredentials[0], '/dashboard');
        });
        it('handles login error', async ()=>{
            _testutils.authHelpers.setupAuthErrorMocks(_testutils.authScenarios.errorScenarios[0].mockError);
            await _testutils.authHelpers.completeLoginFlow(_testutils.authScenarios.invalidCredentials[0]);
            await _testutils.authHelpers.verifyLoginError('Invalid credentials');
        });
        it('validates required fields', async ()=>{
            const user = _userevent.default.setup();
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoginForm.LoginForm, {}));
            await user.click(_react1.screen.getByRole('button', {
                name: /^sign in$/i
            }));
            await _testutils.authHelpers.verifyFormValidation();
        });
    });
    // ============================================================================
    // Data-Driven Tests
    // ============================================================================
    describe('Data-Driven Authentication', ()=>{
        it('handles multiple valid credentials', async ()=>{
            await _testutils.authHelpers.testAuthScenarios(_testutils.authScenarios.validCredentials.map((creds)=>({
                    name: `Login with ${creds.email}`,
                    credentials: creds,
                    expectedResult: 'success',
                    expectedNavigation: '/dashboard'
                })));
        });
        it('handles multiple error scenarios', async ()=>{
            await _testutils.authHelpers.testAuthScenarios(_testutils.authScenarios.errorScenarios.map((scenario)=>({
                    name: scenario.name,
                    credentials: _testutils.authScenarios.invalidCredentials[0],
                    mockError: scenario.mockError,
                    expectedResult: 'error',
                    expectedMessage: scenario.expectedMessage.source
                })));
        });
    });
    // ============================================================================
    // Complete Test Suite (Using Test Utils)
    // ============================================================================
    describe('Complete Authentication Suite', ()=>{
        const authSuite = _testutils.authTestUtils.createAuthTestSuite(_LoginForm.LoginForm);
        it('successful login flow', async ()=>{
            await authSuite.testSuccessfulLogin();
        });
        it('login error handling', async ()=>{
            await authSuite.testLoginError();
        });
        it('form validation', async ()=>{
            await authSuite.testFormValidation();
        });
        it('token storage', async ()=>{
            await authSuite.testTokenStorage();
        });
        it('accessibility', async ()=>{
            await authSuite.testAccessibility();
        });
        it('performance', async ()=>{
            await authSuite.testPerformance();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,