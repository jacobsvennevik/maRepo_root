{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/features/quiz/schemas/quizCreation.ts"],"sourcesContent":["/**\n * Quiz Creation Schema\n * \n * Comprehensive Zod schema for quiz creation following the established\n * patterns from the flashcard wizard.\n */\n\nimport { z } from 'zod';\n\n// ============================================================================\n// Core Quiz Configuration Schema\n// ============================================================================\n\nexport const QuizCreationSchema = z.object({\n  // Basic Information\n  title: z.string()\n    .min(1, 'Title is required')\n    .max(100, 'Title must be less than 100 characters')\n    .optional(),\n  \n  description: z.string()\n    .max(500, 'Description must be less than 500 characters')\n    .optional(),\n  \n  topic: z.string()\n    .min(1, 'Topic is required')\n    .max(200, 'Topic must be less than 200 characters')\n    .optional(),\n\n  // Quiz Configuration\n  quiz_type: z.enum(['formative', 'summative', 'diagnostic', 'mastery'])\n    .default('formative'),\n  \n  difficulty: z.enum(['BEGINNER', 'INTERMEDIATE', 'ADVANCED', 'EXPERT'])\n    .default('INTERMEDIATE'),\n  \n  delivery_mode: z.enum(['IMMEDIATE', 'DEFERRED'])\n    .default('IMMEDIATE'),\n  \n  max_questions: z.number()\n    .min(1, 'Must have at least 1 question')\n    .max(50, 'Cannot have more than 50 questions')\n    .default(10),\n  \n  time_limit_sec: z.number()\n    .min(60, 'Time limit must be at least 60 seconds')\n    .max(7200, 'Time limit cannot exceed 2 hours')\n    .optional(),\n\n  // Question Mix Configuration\n  question_mix: z.object({\n    MCQ: z.number().min(0).max(50).default(0),\n    SHORT_ANSWER: z.number().min(0).max(50).default(0),\n    PRINCIPLE: z.number().min(0).max(50).default(0),\n  }).refine(\n    (mix) => mix.MCQ + mix.SHORT_ANSWER + mix.PRINCIPLE > 0,\n    'At least one question type must be selected'\n  ).optional(),\n\n  // Source Configuration\n  source_type: z.enum(['auto', 'files', 'manual'])\n    .default('auto'),\n  \n  source_ids: z.array(z.string()).optional(),\n  \n  uploaded_files: z.array(z.instanceof(File)).optional(),\n  \n  selected_existing_file_ids: z.array(z.union([z.string(), z.number()])).optional(),\n\n  // Advanced Configuration\n  language: z.string().default('en'),\n  \n  scheduled_for: z.date().optional(),\n  \n  due_at: z.date().optional(),\n  \n  // Test Style Configuration (following diagnostic pattern)\n  test_style: z.string().nullable().optional(),\n  \n  style_config_override: z.record(z.any()).optional(),\n\n  // Validation and Constraints\n  allow_retakes: z.boolean().default(true),\n  \n  show_hints: z.boolean().default(false),\n  \n  randomize_questions: z.boolean().default(true),\n  \n  randomize_choices: z.boolean().default(true),\n  \n  // Analytics and Tracking\n  track_analytics: z.boolean().default(true),\n  \n  require_explanation: z.boolean().default(true),\n}).refine(\n  (data) => {\n    // Ensure question mix matches max_questions if provided\n    if (data.question_mix && data.max_questions) {\n      const totalMix = data.question_mix.MCQ + data.question_mix.SHORT_ANSWER + data.question_mix.PRINCIPLE;\n      return totalMix === data.max_questions;\n    }\n    return true;\n  },\n  'Question mix must match the total number of questions'\n).refine(\n  (data) => {\n    // Ensure due_at is after scheduled_for if both provided\n    if (data.scheduled_for && data.due_at) {\n      return data.due_at > data.scheduled_for;\n    }\n    return true;\n  },\n  'Due date must be after scheduled date'\n);\n\n// ============================================================================\n// Step-specific Schemas\n// ============================================================================\n\nexport const QuizMethodSchema = z.object({\n  method: z.enum(['auto', 'files', 'manual']),\n});\n\nexport const QuizBasicConfigSchema = z.object({\n  title: z.string().min(1, 'Title is required').max(100),\n  topic: z.string().min(1, 'Topic is required').max(200),\n  description: z.string().max(500).optional(),\n  difficulty: z.enum(['BEGINNER', 'INTERMEDIATE', 'ADVANCED', 'EXPERT']),\n  max_questions: z.number().min(1).max(50),\n  time_limit_sec: z.number().min(60).max(7200).optional(),\n});\n\nexport const QuizSourceConfigSchema = z.object({\n  source_type: z.enum(['auto', 'files', 'manual']),\n  source_ids: z.array(z.string()).optional(),\n  uploaded_files: z.array(z.instanceof(File)).optional(),\n  selected_existing_file_ids: z.array(z.union([z.string(), z.number()])).optional(),\n}).refine(\n  (data) => {\n    if (data.source_type === 'files') {\n      return (data.source_ids && data.source_ids.length > 0) || \n             (data.uploaded_files && data.uploaded_files.length > 0) ||\n             (data.selected_existing_file_ids && data.selected_existing_file_ids.length > 0);\n    }\n    return true;\n  },\n  'File source requires at least one file to be selected or uploaded'\n);\n\nexport const QuizAdvancedConfigSchema = z.object({\n  delivery_mode: z.enum(['IMMEDIATE', 'DEFERRED']),\n  question_mix: z.object({\n    MCQ: z.number().min(0).max(50),\n    SHORT_ANSWER: z.number().min(0).max(50),\n    PRINCIPLE: z.number().min(0).max(50),\n  }).refine(\n    (mix) => mix.MCQ + mix.SHORT_ANSWER + mix.PRINCIPLE > 0,\n    'At least one question type must be selected'\n  ),\n  language: z.string().default('en'),\n  scheduled_for: z.date().optional(),\n  due_at: z.date().optional(),\n  test_style: z.string().nullable().optional(),\n  style_config_override: z.record(z.any()).optional(),\n  allow_retakes: z.boolean().default(true),\n  show_hints: z.boolean().default(false),\n  randomize_questions: z.boolean().default(true),\n  randomize_choices: z.boolean().default(true),\n  track_analytics: z.boolean().default(true),\n  require_explanation: z.boolean().default(true),\n});\n\n// ============================================================================\n// Type Definitions\n// ============================================================================\n\nexport type QuizCreationForm = z.infer<typeof QuizCreationSchema>;\nexport type QuizMethodForm = z.infer<typeof QuizMethodSchema>;\nexport type QuizBasicConfigForm = z.infer<typeof QuizBasicConfigSchema>;\nexport type QuizSourceConfigForm = z.infer<typeof QuizSourceConfigSchema>;\nexport type QuizAdvancedConfigForm = z.infer<typeof QuizAdvancedConfigSchema>;\n\n// ============================================================================\n// Default Values\n// ============================================================================\n\nexport const DEFAULT_QUIZ_FORM_CONFIG: Partial<QuizCreationForm> = {\n  difficulty: 'INTERMEDIATE',\n  delivery_mode: 'IMMEDIATE',\n  max_questions: 10,\n  time_limit_sec: 900, // 15 minutes\n  language: 'en',\n  source_type: 'auto',\n  allow_retakes: true,\n  show_hints: false,\n  randomize_questions: true,\n  randomize_choices: true,\n  track_analytics: true,\n  require_explanation: true,\n  question_mix: {\n    MCQ: 4,\n    SHORT_ANSWER: 4,\n    PRINCIPLE: 2,\n  },\n};\n\n// ============================================================================\n// Validation Helpers\n// ============================================================================\n\nexport const validateQuizConfig = (config: Partial<QuizCreationForm>): { valid: boolean; errors: string[] } => {\n  try {\n    QuizCreationSchema.parse(config);\n    return { valid: true, errors: [] };\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return {\n        valid: false,\n        errors: error.errors.map(err => `${err.path.join('.')}: ${err.message}`)\n      };\n    }\n    return { valid: false, errors: ['Unknown validation error'] };\n  }\n};\n\nexport const getQuizQuestionMixTotal = (mix: QuizCreationForm['question_mix']): number => {\n  if (!mix) return 0;\n  return mix.MCQ + mix.SHORT_ANSWER + mix.PRINCIPLE;\n};\n\nexport const validateQuizQuestionMix = (mix: QuizCreationForm['question_mix'], maxQuestions: number): boolean => {\n  if (!mix) return true;\n  return getQuizQuestionMixTotal(mix) === maxQuestions;\n};\n\n// ============================================================================\n// Smart Defaults and Suggestions\n// ============================================================================\n\nexport const getQuizDifficultySuggestions = (topic: string): QuizCreationForm['difficulty'] => {\n  const topicLower = topic.toLowerCase();\n  \n  if (topicLower.includes('basic') || topicLower.includes('intro') || topicLower.includes('fundamental')) {\n    return 'BEGINNER';\n  }\n  \n  if (topicLower.includes('advanced') || topicLower.includes('expert') || topicLower.includes('research')) {\n    return 'ADVANCED';\n  }\n  \n  if (topicLower.includes('master') || topicLower.includes('phd') || topicLower.includes('doctoral')) {\n    return 'EXPERT';\n  }\n  \n  return 'INTERMEDIATE';\n};\n\nexport const getQuizSuggestedTimeLimit = (maxQuestions: number, difficulty: QuizCreationForm['difficulty']): number => {\n  const baseTimePerQuestion = {\n    'BEGINNER': 60,    // 1 minute per question\n    'INTERMEDIATE': 90, // 1.5 minutes per question\n    'ADVANCED': 120,   // 2 minutes per question\n    'EXPERT': 150,     // 2.5 minutes per question\n  };\n  \n  return maxQuestions * baseTimePerQuestion[difficulty];\n};\n\nexport const getQuizSuggestedQuestionMix = (maxQuestions: number, difficulty: QuizCreationForm['difficulty']) => {\n  const ratios = {\n    'BEGINNER': { MCQ: 0.6, SHORT_ANSWER: 0.3, PRINCIPLE: 0.1 },\n    'INTERMEDIATE': { MCQ: 0.4, SHORT_ANSWER: 0.4, PRINCIPLE: 0.2 },\n    'ADVANCED': { MCQ: 0.3, SHORT_ANSWER: 0.4, PRINCIPLE: 0.3 },\n    'EXPERT': { MCQ: 0.2, SHORT_ANSWER: 0.3, PRINCIPLE: 0.5 },\n  };\n  \n  const ratio = ratios[difficulty];\n  \n  return {\n    MCQ: Math.round(maxQuestions * ratio.MCQ),\n    SHORT_ANSWER: Math.round(maxQuestions * ratio.SHORT_ANSWER),\n    PRINCIPLE: Math.round(maxQuestions * ratio.PRINCIPLE),\n  };\n};\n\n// ============================================================================\n// Form Field Configuration\n// ============================================================================\n\nexport const QUIZ_DIFFICULTY_OPTIONS = [\n  { value: 'BEGINNER', label: 'Beginner', description: 'Basic concepts and recall' },\n  { value: 'INTERMEDIATE', label: 'Intermediate', description: 'Application and understanding' },\n  { value: 'ADVANCED', label: 'Advanced', description: 'Analysis and synthesis' },\n  { value: 'EXPERT', label: 'Expert', description: 'Evaluation and creation' },\n] as const;\n\nexport const QUIZ_DELIVERY_MODE_OPTIONS = [\n  { value: 'IMMEDIATE', label: 'Immediate Feedback', description: 'Show results after each question' },\n  { value: 'DEFERRED', label: 'Deferred Feedback', description: 'Show results after completing the quiz' },\n] as const;\n\nexport const QUIZ_LANGUAGE_OPTIONS = [\n  { value: 'en', label: 'English' },\n  { value: 'es', label: 'Spanish' },\n  { value: 'fr', label: 'French' },\n  { value: 'de', label: 'German' },\n  { value: 'pt', label: 'Portuguese' },\n  { value: 'it', label: 'Italian' },\n] as const;\n"],"names":["DEFAULT_QUIZ_FORM_CONFIG","QUIZ_DELIVERY_MODE_OPTIONS","QUIZ_DIFFICULTY_OPTIONS","QUIZ_LANGUAGE_OPTIONS","QuizAdvancedConfigSchema","QuizBasicConfigSchema","QuizCreationSchema","QuizMethodSchema","QuizSourceConfigSchema","getQuizDifficultySuggestions","getQuizQuestionMixTotal","getQuizSuggestedQuestionMix","getQuizSuggestedTimeLimit","validateQuizConfig","validateQuizQuestionMix","z","object","title","string","min","max","optional","description","topic","quiz_type","enum","default","difficulty","delivery_mode","max_questions","number","time_limit_sec","question_mix","MCQ","SHORT_ANSWER","PRINCIPLE","refine","mix","source_type","source_ids","array","uploaded_files","instanceof","File","selected_existing_file_ids","union","language","scheduled_for","date","due_at","test_style","nullable","style_config_override","record","any","allow_retakes","boolean","show_hints","randomize_questions","randomize_choices","track_analytics","require_explanation","data","totalMix","method","length","config","parse","valid","errors","error","ZodError","map","err","path","join","message","maxQuestions","topicLower","toLowerCase","includes","baseTimePerQuestion","ratios","ratio","Math","round","value","label"],"mappings":"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"}