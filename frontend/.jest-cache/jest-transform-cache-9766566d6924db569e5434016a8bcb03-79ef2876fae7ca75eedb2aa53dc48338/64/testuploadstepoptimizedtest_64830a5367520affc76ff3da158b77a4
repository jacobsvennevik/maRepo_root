a2ea4fdf882c5273bf5f74099b5b6c97
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _react1 = require("@testing-library/react");
require("@testing-library/jest-dom");
const _testuploadstep = require("../steps/test-upload-step");
const _testutils = require("../../../../test-utils");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
// Setup test environment using new utilities
const testEnv = (0, _testutils.setupFullTestEnvironment)({
    timeout: 10000,
    includeAPI: true,
    includeStorage: true,
    includeNavigation: true
});
// Extract utilities for easier access
const { createTestFile } = _testutils.testFactories;
const { apiMocks } = _testutils.standardMocks;
// Helper function to simulate file upload
const simulateFileUpload = async (fileInput, files)=>{
    await (0, _react1.act)(async ()=>{
        _react1.fireEvent.change(fileInput, {
            target: {
                files
            }
        });
    });
};
describe("TestUploadStep - Optimized", ()=>{
    // Use centralized setup
    beforeEach(()=>{
        // Reset all mocks
        testEnv.mocks.resetAll();
        // Setup default API responses
        apiMocks.setupMockResponses({
            'POST:/backend/api/upload/': {
                ok: true,
                status: 200,
                json: async ()=>({
                        id: 123,
                        status: 'pending'
                    })
            }
        });
    });
    describe("Test Mode", ()=>{
        it("should render test mode banner and handle mock analysis", async ()=>{
            const mockCallbacks = {
                onUploadComplete: jest.fn(),
                onAnalysisComplete: jest.fn(),
                onNext: jest.fn(),
                onBack: jest.fn()
            };
            // Use new render function
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_testuploadstep.TestUploadStep, {
                onUploadComplete: mockCallbacks.onUploadComplete,
                onAnalysisComplete: mockCallbacks.onAnalysisComplete,
                onNext: mockCallbacks.onNext,
                onBack: mockCallbacks.onBack
            }));
            // Verify test mode banner is shown
            expect(_react1.screen.getByText(/Test Mode/)).toBeInTheDocument();
            expect(_react1.screen.getByText(/Mock data provides reliable test content/)).toBeInTheDocument();
            // Verify component renders correctly
            expect(_react1.screen.getByText(/Upload past tests and exams/)).toBeInTheDocument();
            expect(_react1.screen.getByTestId("accepted-types")).toHaveTextContent(".pdf,.doc,.docx");
        });
        it("should handle single test file upload using factory", async ()=>{
            const mockCallbacks = {
                onUploadComplete: jest.fn(),
                onAnalysisComplete: jest.fn(),
                onNext: jest.fn(),
                onBack: jest.fn()
            };
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_testuploadstep.TestUploadStep, {
                onUploadComplete: mockCallbacks.onUploadComplete,
                onAnalysisComplete: mockCallbacks.onAnalysisComplete,
                onNext: mockCallbacks.onNext,
                onBack: mockCallbacks.onBack
            }));
            // Use factory to create test file
            const { file } = createTestFile({
                fileName: 'midterm_exam.pdf',
                fileType: 'application/pdf',
                content: 'test content'
            });
            // Upload test file
            const fileInput = _react1.screen.getByTestId("file-input");
            await simulateFileUpload(fileInput, [
                file
            ]);
            // Verify file is listed
            expect(_react1.screen.getByText("midterm_exam.pdf")).toBeInTheDocument();
            expect(_react1.screen.getByText("ðŸ§ª Simulating AI analysis...")).toBeInTheDocument();
            // Wait for completion
            await (0, _react1.waitFor)(()=>{
                expect(mockCallbacks.onUploadComplete).toHaveBeenCalledWith(expect.arrayContaining([
                    expect.objectContaining({
                        id: expect.any(Number),
                        original_text: expect.stringContaining("Language Technology Quiz"),
                        metadata: expect.objectContaining({
                            course_title: "Natural Language Interaction",
                            test_title: "Quizes Lang Tech"
                        }),
                        status: "completed"
                    })
                ]), expect.any(Array), expect.any(Array));
            }, {
                timeout: 5000
            });
        });
    });
    describe("File Validation - Parameterized Tests", ()=>{
        // Use factory to create test cases
        const fileTestCases = [
            {
                name: 'valid.pdf',
                type: 'application/pdf',
                size: 1024 * 1024,
                valid: true,
                description: 'Valid PDF file'
            },
            {
                name: 'invalid.txt',
                type: 'text/plain',
                size: 1024,
                valid: false,
                description: 'Invalid file type'
            },
            {
                name: 'oversized.pdf',
                type: 'application/pdf',
                size: 16 * 1024 * 1024,
                valid: false,
                description: 'File too large'
            }
        ];
        // Parameterized test using factory data
        describe.each(fileTestCases)('File Validation', ({ name, type, size, valid, description })=>{
            it(`should ${valid ? 'accept' : 'reject'} ${description}`, async ()=>{
                const mockCallbacks = {
                    onUploadComplete: jest.fn(),
                    onAnalysisComplete: jest.fn(),
                    onNext: jest.fn(),
                    onBack: jest.fn()
                };
                (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_testuploadstep.TestUploadStep, {
                    onUploadComplete: mockCallbacks.onUploadComplete,
                    onAnalysisComplete: mockCallbacks.onAnalysisComplete,
                    onNext: mockCallbacks.onNext,
                    onBack: mockCallbacks.onBack
                }));
                // Create test file using factory
                const { file } = createTestFile({
                    fileName: name,
                    fileType: type,
                    fileSize: size
                });
                const fileInput = _react1.screen.getByTestId("file-input");
                await simulateFileUpload(fileInput, [
                    file
                ]);
                if (valid) {
                    // Should accept valid files
                    expect(_react1.screen.getByText(name)).toBeInTheDocument();
                    expect(_react1.screen.queryByText(/Invalid file type/)).not.toBeInTheDocument();
                    expect(_react1.screen.queryByText(/File is too large/)).not.toBeInTheDocument();
                } else {
                    // Note: In test mode, all files are processed regardless of validation
                    // This test verifies the file is displayed
                    expect(_react1.screen.getByText(name)).toBeInTheDocument();
                }
            });
        });
    });
    describe("API Error Handling", ()=>{
        it("should handle network errors gracefully", async ()=>{
            // Use centralized API mock
            apiMocks.mockNetworkError();
            const mockCallbacks = {
                onUploadComplete: jest.fn(),
                onAnalysisComplete: jest.fn(),
                onNext: jest.fn(),
                onBack: jest.fn()
            };
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_testuploadstep.TestUploadStep, {
                onUploadComplete: mockCallbacks.onUploadComplete,
                onAnalysisComplete: mockCallbacks.onAnalysisComplete,
                onNext: mockCallbacks.onNext,
                onBack: mockCallbacks.onBack
            }));
            const { file } = createTestFile({
                fileName: 'test.pdf'
            });
            const fileInput = _react1.screen.getByTestId("file-input");
            await simulateFileUpload(fileInput, [
                file
            ]);
            // In test mode, component uses mock data and doesn't show network errors
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText("ðŸ¤– Analyzing test content...")).toBeInTheDocument();
            }, {
                timeout: 5000
            });
        });
        it("should handle API timeout", async ()=>{
            // Use centralized timeout mock
            apiMocks.mockTimeout(100);
            const mockCallbacks = {
                onUploadComplete: jest.fn(),
                onAnalysisComplete: jest.fn(),
                onNext: jest.fn(),
                onBack: jest.fn()
            };
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_testuploadstep.TestUploadStep, {
                onUploadComplete: mockCallbacks.onUploadComplete,
                onAnalysisComplete: mockCallbacks.onAnalysisComplete,
                onNext: mockCallbacks.onNext,
                onBack: mockCallbacks.onBack
            }));
            const { file } = createTestFile({
                fileName: 'test.pdf'
            });
            const fileInput = _react1.screen.getByTestId("file-input");
            await simulateFileUpload(fileInput, [
                file
            ]);
            // Component should handle timeout gracefully
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText("ðŸ¤– Analyzing test content...")).toBeInTheDocument();
            }, {
                timeout: 5000
            });
        });
    });
});

//# sourceMappingURL=data:application/json;base64,