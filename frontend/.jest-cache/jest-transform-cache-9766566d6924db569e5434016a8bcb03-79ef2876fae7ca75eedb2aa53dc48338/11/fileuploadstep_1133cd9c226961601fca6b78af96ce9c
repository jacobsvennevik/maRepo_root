4b15ee9e957b1d5c27b9c4300c5b831b
'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "FileUploadStep", {
    enumerable: true,
    get: function() {
        return FileUploadStep;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _fileupload = require("../../../../components/ui/file-upload");
const _api = require("../../services/api");
const _mockdata = require("../../services/mock-data");
const _shared = require("./shared");
function FileUploadStep({ onUploadComplete }) {
    const [state, actions] = (0, _shared.useFileUpload)();
    /**
   * Enable a quick workflow while developing or running frontend tests.
   * When NEXT_PUBLIC_TEST_MODE="true" (and NODE_ENV is development) the step
   * automatically creates a mock project using the shared `createProject` helper
   * and immediately invokes `onUploadComplete` â€“ no manual file-selection or
   * network requests required.
   */ (0, _react.useEffect)(()=>{
        if (!(0, _mockdata.isTestMode)()) return;
        (async ()=>{
            try {
                const mockProjectData = {
                    name: 'Test Project',
                    project_type: 'school',
                    course_name: 'Test Course',
                    is_draft: true
                };
                console.log('ðŸ§ª TEST MODE: Creating mock project automatically');
                const newProject = await (0, _api.createProject)(mockProjectData);
                console.log('ðŸ§ª TEST MODE: Mock project ready â†’ skipping file upload');
                // Immediately signal completion so the wizard can advance
                onUploadComplete(newProject.id);
            } catch (err) {
                console.error('ðŸ§ª TEST MODE: Failed to bootstrap mock project', err);
            }
        })();
    // we only want to run this once on mount in test mode
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);
    const handleUpload = async (newFiles)=>{
        actions.handleUpload(newFiles);
        actions.setError(null);
        if (newFiles.length === 0) return;
        try {
            // 1. Create a draft project
            const fileName = newFiles[0].name;
            const projectName = fileName.replace(/\.[^/.]+$/, ''); // Remove file extension
            const projectData = {
                name: projectName,
                project_type: 'school',
                course_name: projectName,
                is_draft: true
            };
            console.log('Creating project with data:', projectData);
            const newProject = await (0, _api.createProject)(projectData);
            console.log('Project created:', newProject);
            // 2. Upload each file with progress tracking
            for (const file of newFiles){
                try {
                    console.log('Uploading file:', file.name);
                    await (0, _api.uploadFileWithProgress)(newProject.id, file, (progress)=>{
                        // Update progress through the hook
                        const newProgress = {
                            ...state.uploadProgress,
                            [file.name]: progress
                        };
                    // Note: This would need to be handled differently in a real implementation
                    // For now, we'll use the existing pattern
                    });
                    console.log('File upload complete:', file.name);
                } catch (error) {
                    console.error('File upload error:', error);
                    const errorMessage = (0, _shared.handleUploadError)(error, null);
                    actions.setError(errorMessage);
                    return;
                }
            }
            // 3. Notify parent component that the upload is done
            onUploadComplete(newProject.id);
        } catch (error) {
            console.error("Upload failed:", error);
            const errorMessage = (0, _shared.handleUploadError)(error, null);
            actions.setError(errorMessage);
        }
        return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
            className: "space-y-6",
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_fileupload.FileUpload, {
                onUpload: handleUpload,
                onRemove: actions.handleRemove,
                accept: ".pdf",
                maxFiles: 1,
                maxSize: 10 * 1024 * 1024,
                required: true,
                title: "Upload your course syllabus",
                description: "Upload your syllabus and we'll automatically extract course details, deadlines, and topics to set up your project.",
                buttonText: "Browse for syllabus",
                files: state.files,
                uploadProgress: state.uploadProgress,
                error: state.error || undefined
            })
        });
    };
}

//# sourceMappingURL=data:application/json;base64,