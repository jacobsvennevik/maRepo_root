840ba0e4872324ddf0af381e0e221073
'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useProjectSetup", {
    enumerable: true,
    get: function() {
        return useProjectSetup;
    }
});
const _react = require("react");
const useProjectSetup = (initialSetup)=>{
    const [setup, setSetup] = (0, _react.useState)(initialSetup);
    const [hasUnsavedChanges, setHasUnsavedChanges] = (0, _react.useState)(false);
    const handleOptionSelect = (field, value)=>{
        setSetup((prev)=>({
                ...prev,
                [field]: value
            }));
        setHasUnsavedChanges(true);
    };
    const handleAddDate = (newDate)=>{
        if (newDate.date && newDate.description) {
            setSetup((prev)=>({
                    ...prev,
                    importantDates: [
                        ...prev.importantDates,
                        {
                            ...newDate
                        }
                    ]
                }));
            setHasUnsavedChanges(true);
            return true;
        }
        return false;
    };
    const handleRemoveDate = (index)=>{
        setSetup((prev)=>({
                ...prev,
                importantDates: prev.importantDates.filter((_, i)=>i !== index)
            }));
        setHasUnsavedChanges(true);
    };
    const handleFileUpload = (files)=>{
        setSetup((prev)=>({
                ...prev,
                uploadedFiles: [
                    ...prev.uploadedFiles || [],
                    ...files
                ]
            }));
        setHasUnsavedChanges(true);
    };
    const handleCourseFileUpload = (files)=>{
        setSetup((prev)=>({
                ...prev,
                courseFiles: [
                    ...prev.courseFiles || [],
                    ...files
                ]
            }));
        setHasUnsavedChanges(true);
    };
    const handleTestFileUpload = (files)=>{
        setSetup((prev)=>({
                ...prev,
                testFiles: [
                    ...prev.testFiles || [],
                    ...files
                ]
            }));
        setHasUnsavedChanges(true);
    };
    const handleRemoveFile = (index)=>{
        setSetup((prev)=>({
                ...prev,
                uploadedFiles: (prev.uploadedFiles || []).filter((_, i)=>i !== index)
            }));
        setHasUnsavedChanges(true);
    };
    const handleRemoveCourseFile = (index)=>{
        setSetup((prev)=>({
                ...prev,
                courseFiles: (prev.courseFiles || []).filter((_, i)=>i !== index)
            }));
        setHasUnsavedChanges(true);
    };
    const handleRemoveTestFile = (index)=>{
        setSetup((prev)=>({
                ...prev,
                testFiles: prev.testFiles.filter((_, i)=>i !== index)
            }));
        setHasUnsavedChanges(true);
    };
    const handleApplyAITopics = (topics)=>{
        const currentDesc = setup.assignmentDescription || "";
        const topicsText = topics.join(", ");
        const newDesc = currentDesc ? `${currentDesc}\n\nDetected topics: ${topicsText}` : `Detected topics: ${topicsText}`;
        setSetup((prev)=>({
                ...prev,
                assignmentDescription: newDesc
            }));
        setHasUnsavedChanges(true);
    };
    const handleApplyAIDates = (dates)=>{
        const convertedDates = dates.map((date)=>({
                date: date.date,
                description: date.description,
                type: date.type
            }));
        setSetup((prev)=>({
                ...prev,
                importantDates: [
                    ...prev.importantDates,
                    ...convertedDates
                ]
            }));
        setHasUnsavedChanges(true);
    };
    const handleApplyAITestTypes = (types)=>{
        const convertedTypes = types.map((type)=>{
            switch(type.toLowerCase()){
                case "multiple choice":
                    return "exams";
                case "essay":
                    return "essays";
                case "problem solving":
                    return "exams";
                case "lab practical":
                    return "labs";
                case "oral exam":
                    return "presentations";
                case "take-home":
                    return "projects";
                default:
                    return "exams";
            }
        }).filter((type, index, self)=>self.indexOf(type) === index);
        // Note: evaluationTypes is not part of ProjectSetup interface
        // This function is kept for compatibility but doesn't modify setup
        setHasUnsavedChanges(true);
    };
    const handleApplyAIRecommendations = (recommendations)=>{
        setSetup((prev)=>{
            const newSetup = {
                ...prev
            };
            let hasChanged = false;
            recommendations.forEach((rec)=>{
                switch(rec.type){
                    case "schedule":
                        if (!newSetup.studyFrequency) {
                            newSetup.studyFrequency = "daily";
                            hasChanged = true;
                        }
                        break;
                    case "material":
                        const materialNote = `\n\nStudy Materials: ${rec.description}`;
                        newSetup.assignmentDescription = (newSetup.assignmentDescription || "") + materialNote;
                        hasChanged = true;
                        break;
                    case "strategy":
                        const strategyNote = `\n\nTest Strategy: ${rec.description}`;
                        newSetup.goal = (newSetup.goal || "") + strategyNote;
                        hasChanged = true;
                        break;
                    case "timeline":
                        if (!newSetup.timeframe) {
                            newSetup.timeframe = "3-months";
                            hasChanged = true;
                        }
                        break;
                }
            });
            if (hasChanged) {
                setHasUnsavedChanges(true);
            }
            return newSetup;
        });
    };
    return {
        setup,
        setSetup,
        hasUnsavedChanges,
        setHasUnsavedChanges,
        handleOptionSelect,
        handleAddDate,
        handleRemoveDate,
        handleFileUpload,
        handleCourseFileUpload,
        handleTestFileUpload,
        handleRemoveFile,
        handleRemoveCourseFile,
        handleRemoveTestFile,
        handleApplyAITopics,
        handleApplyAIDates,
        handleApplyAITestTypes,
        handleApplyAIRecommendations
    };
};

//# sourceMappingURL=data:application/json;base64,