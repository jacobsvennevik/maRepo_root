{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/features/diagnostics/components/CreateFlashcardSetWizard.tsx"],"sourcesContent":["\"use client\";\n\nimport React from 'react';\nimport { DialogDescription } from '@/components/ui/dialog';\nimport { WizardShell } from '@/components/wizard/WizardShell';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport FlashcardReviewStep from './FlashcardReviewStep';\nimport { postGenerateFlashcards } from '@/lib/api/flashcards';\nimport { FlashcardDeckSchema, type FlashcardDeckForm } from './schemas/flashcardDeck';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { axiosGeneration, axiosApi } from '@/lib/axios';\n// Test mode detection - check dynamically to respond to environment variable changes during tests\nconst isTestMode = (): boolean => {\n  // Check if running in test environment\n  if (process.env.NODE_ENV === \"test\") {\n    return true;\n  }\n\n  // Check for explicit test mode flag in development\n  if (\n    process.env.NODE_ENV === \"development\" &&\n    process.env.NEXT_PUBLIC_TEST_MODE === \"true\"\n  ) {\n    return true;\n  }\n\n  // Check for localhost and test mode\n  if (\n    typeof window !== \"undefined\" &&\n    window.location.hostname === \"localhost\" &&\n    process.env.NEXT_PUBLIC_TEST_MODE === \"true\"\n  ) {\n    return true;\n  }\n\n  return false;\n};\n\nimport { useRouter } from 'next/navigation';\nimport { CheckCircle2, FileText, Upload, PencilLine, MoreVertical, Clock, File, Image, Code, FolderOpen, X, Brain, Sparkles, Loader2, RefreshCw } from 'lucide-react';\nimport type { AssessmentSet, CreateAssessmentSetForm, AssessmentKind } from '@/features/diagnostics/types/assessment';\n\ninterface CreateFlashcardSetWizardProps {\n  projectId: string;\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  onCreated?: (set: AssessmentSet) => void;\n}\n\ntype StartMethod = 'files' | 'manual';\n\ninterface ProjectFile {\n  id: string | number;\n  name: string;\n  file_type?: string;\n  uploaded_at?: string;\n  file_size?: number;\n}\n\ninterface Flashcard {\n  question: string;\n  answer: string;\n  concept_id: string;\n  difficulty: 'medium' | 'hard' | 'expert';\n  bloom_level: 'apply' | 'analyze' | 'evaluate' | 'create';\n  card_type: 'definition' | 'application' | 'analysis' | 'synthesis' | 'evaluation' | 'problem_solving' | 'comparison' | 'critique' | 'cloze' | 'scenario';\n  theme: string;\n  related_concepts: string[];\n  hints: string[];\n  examples: string[];\n  common_misconceptions: string[];\n  learning_objective: string;\n}\n\ninterface FlashcardDeck {\n  deck_metadata: {\n    description: string;\n    learning_objectives: string[];\n    themes: string[];\n  };\n  flashcards: Flashcard[];\n  flashcardSetId?: string | number | null;\n}\n\nexport function CreateFlashcardSetWizard({ projectId, open, onOpenChange, onCreated }: CreateFlashcardSetWizardProps) {\n  const router = useRouter();\n\n  const [step, setStep] = React.useState<number>(1);\n  const [totalSteps, setTotalSteps] = React.useState<number>(5);\n  const [method, setMethod] = React.useState<StartMethod | null>(null);\n  const [projectFiles, setProjectFiles] = React.useState<ProjectFile[]>([]);\n  const [uploadedFiles, setUploadedFiles] = React.useState<File[]>([]);\n  const [selectedExistingFileIds, setSelectedExistingFileIds] = React.useState<Array<string | number>>([]);\n  const [existingSearch, setExistingSearch] = React.useState<string>('');\n  const [isGenerating, setIsGenerating] = React.useState<boolean>(false);\n  const [generatedDeck, setGeneratedDeck] = React.useState<FlashcardDeck | null>(null);\n  const form = useForm<FlashcardDeckForm>({\n    resolver: zodResolver(FlashcardDeckSchema),\n    defaultValues: {\n      title: '',\n      description: '',\n      difficulty: 'medium',\n      language: 'en',\n    },\n  });\n  const [suggestedTitle, setSuggestedTitle] = React.useState<string>('');\n  const [suggestedDescription, setSuggestedDescription] = React.useState<string>('');\n  const [isSubmitting, setIsSubmitting] = React.useState<boolean>(false);\n  const [isLoadingFiles, setIsLoadingFiles] = React.useState<boolean>(false);\n\n  // Debug logging for current state\n  console.log('ÔøΩÔøΩ DEBUG: CreateFlashcardSetWizard render state:', {\n    open,\n    step,\n    method,\n    projectId,\n    projectFiles: projectFiles.length,\n    uploadedFiles: uploadedFiles.length,\n    selectedExistingFileIds: selectedExistingFileIds.length\n  });\n\n  // Additional debug logging for file display\n  React.useEffect(() => {\n    console.log('üîç DEBUG: projectFiles state changed:', {\n      count: projectFiles.length,\n      files: projectFiles.map(f => ({ id: f.id, name: f.name, type: f.file_type }))\n    });\n  }, [projectFiles]);\n\n  React.useEffect(() => {\n    if (!open) {\n      // reset when closing\n      setStep(1);\n      setIsSubmitting(false);\n      setMethod(null);\n      setUploadedFiles([]);\n      setSelectedExistingFileIds([]);\n      setGeneratedDeck(null);\n      form.reset({ title: '', description: '', difficulty: 'medium', language: 'en' });\n    }\n  }, [open]);\n\n  // Load files whenever the wizard is open and we have a projectId\n  const loadFiles = async () => {\n    console.log('üîç DEBUG: loadFiles called with:', { projectId, open, step, method });\n    \n    setIsLoadingFiles(true);\n    \n    try {\n      // Check if we're in test mode and if we should skip API call\n      const testMode = isTestMode();\n      \n      // In test mode, check if we have authentication\n      let hasAuth = false;\n      if (typeof window !== \"undefined\" && window.localStorage) {\n        const token = localStorage.getItem(\"access_token\");\n        hasAuth = !!token;\n      }\n      \n      console.log('üîç DEBUG: Test mode:', testMode, 'Has auth:', hasAuth);\n      \n      // If we're in test mode and don't have auth, skip API call and use fallback\n      if (testMode && !hasAuth) {\n        console.log('üîç DEBUG: Test mode without auth - using fallback files directly');\n        const fallbackFiles: ProjectFile[] = [\n          {\n            id: 'demo_1',\n            name: 'Course Syllabus.pdf',\n            file_type: 'pdf',\n            uploaded_at: '2025-01-15T10:30:00Z',\n            file_size: 2048576\n          },\n          {\n            id: 'demo_2',\n            name: 'Lecture Notes.docx',\n            file_type: 'docx',\n            uploaded_at: '2025-01-16T14:20:00Z',\n            file_size: 1536000\n          },\n          {\n            id: 'demo_3',\n            name: 'Assignment Guidelines.pdf',\n            file_type: 'pdf',\n            uploaded_at: '2025-01-17T09:15:00Z',\n            file_size: 3145728\n          }\n        ];\n        setProjectFiles(fallbackFiles);\n        return;\n      }\n      \n      // Try to load real project files from API\n      const apiUrl = `/projects/${projectId}/`;\n      console.log('üîç DEBUG: Fetching from URL:', apiUrl);\n      \n      const response = await axiosApi.get(apiUrl, {\n        headers: {\n          'X-Test-Mode': testMode ? 'true' : 'false',\n        }\n      });\n\n      console.log('üîç DEBUG: Response status:', response.status);\n      console.log('üîç DEBUG: Response data:', response.data);\n      \n      const project = response.data;\n      console.log('üîç DEBUG: Project data received:', project);\n      \n      // Extract uploaded files from project response\n      const files = project.uploaded_files || [];\n      console.log('üîç DEBUG: Extracted files array:', files);\n      \n      // Transform the response to match our ProjectFile interface\n      const projectFiles: ProjectFile[] = files.map((file: any) => {\n        const transformedFile = {\n          id: file.id,\n          name: file.original_name || file.file?.split('/').pop() || 'Unknown file',\n          file_type: file.content_type?.split('/')[1] || file.file?.split('.').pop()?.toLowerCase() || 'unknown',\n          uploaded_at: file.uploaded_at,\n          file_size: file.file_size || file.file?.size || 0\n        };\n        return transformedFile;\n      });\n      \n      console.log('üîç DEBUG: Final projectFiles array:', projectFiles);\n      setProjectFiles(projectFiles);\n      \n    } catch (error) {\n      console.error('üîç DEBUG: Error fetching project files:', error);\n      \n      // In test mode, provide fallback mock files if API fails\n      if (isTestMode()) {\n        console.log('üîç DEBUG: API failed in test mode, using fallback mock files');\n        const fallbackFiles: ProjectFile[] = [\n          {\n            id: 'fallback_1',\n            name: 'Uploaded Course Material.pdf',\n            file_type: 'pdf',\n            uploaded_at: '2025-01-15T10:30:00Z',\n            file_size: 2048576\n          },\n          {\n            id: 'fallback_2',\n            name: 'Study Notes.docx',\n            file_type: 'docx',\n            uploaded_at: '2025-01-16T14:20:00Z',\n            file_size: 1536000\n          }\n        ];\n        setProjectFiles(fallbackFiles);\n      } else {\n        // In production mode, fallback to empty state\n        setProjectFiles([]);\n      }\n    } finally {\n      setIsLoadingFiles(false);\n    }\n  };\n\n  React.useEffect(() => {\n    // Load files whenever the wizard is open and we have a projectId\n    if (open && projectId) {\n      console.log('üîç DEBUG: loadFiles condition met, calling loadFiles()');\n      loadFiles();\n    } else {\n      console.log('üîç DEBUG: loadFiles condition NOT met:', { open, projectId });\n    }\n  }, [open, step, method, projectId]);\n\n  // Additional effect to ensure files are loaded when component mounts\n  React.useEffect(() => {\n    console.log('üîç DEBUG: Component mounted/updated:', { open, projectId, step, method });\n    if (open && projectId) {\n      console.log('üîç DEBUG: Component ready, loading files...');\n      // Small delay to ensure everything is initialized\n      setTimeout(() => {\n        if (open && projectId) {\n          console.log('üîç DEBUG: Delayed file loading...');\n          loadFiles();\n        }\n      }, 100);\n    }\n  }, [open, projectId]);\n\n  const canContinueFromStep1 = Boolean(method);\n  const canContinueFromStep2 = method === 'files' ? (uploadedFiles.length > 0 || selectedExistingFileIds.length > 0) : true;\n  const canContinueFromStep3 = form.getValues('title')?.trim().length > 0;\n\n  const deriveTitleFromSource = () => {\n    if (method === 'files') {\n      if (uploadedFiles.length > 0) {\n        const base = uploadedFiles[0].name.replace(/\\.[^.]+$/, '');\n        return base;\n      }\n      const picked = projectFiles.find(f => selectedExistingFileIds.includes(f.id));\n      if (picked) {\n        return picked.name.replace(/\\.[^.]+$/, '');\n      }\n    }\n    return '';\n  };\n\n  // Auto-populate title when files are selected\n  React.useEffect(() => {\n    const currentTitle = form.getValues('title');\n    if (!currentTitle?.trim() && method === 'files') {\n      const suggestedTitle = deriveTitleFromSource();\n      if (suggestedTitle) {\n        form.setValue('title', suggestedTitle);\n        console.log('üîç DEBUG: Auto-populated title from files:', suggestedTitle);\n      }\n    }\n  }, [uploadedFiles, selectedExistingFileIds, method, form]);\n\n  const goNext = () => {\n    if (step < totalSteps) {\n      setStep(step + 1);\n    }\n  };\n\n  const goBack = () => {\n    if (step > 1) {\n      setStep(step - 1);\n    }\n  };\n\n  const getFileIcon = (fileName: string, fileType?: string) => {\n    if (fileType === 'pdf') return <File className=\"h-3 w-3 text-red-500\" />;\n    if (fileType === 'docx' || fileType === 'doc') return <FileText className=\"h-3 w-3 text-blue-500\" />;\n    if (fileType === 'jpg' || fileType === 'jpeg' || fileType === 'png') return <Image className=\"h-3 w-3 text-green-500\" />;\n    if (fileType === 'tsx' || fileType === 'ts' || fileType === 'js' || fileType === 'jsx') return <Code className=\"h-3 w-3 text-purple-500\" />;\n    if (fileType === 'html' || fileType === 'css') return <Code className=\"h-3 w-3 text-orange-500\" />;\n    return <File className=\"h-3 w-3 text-gray-500\" />;\n  };\n\n  const getFileIconBg = (fileName: string, fileType?: string) => {\n    if (fileType === 'pdf') return 'bg-red-100';\n    if (fileType === 'docx' || fileType === 'doc') return 'bg-blue-100';\n    if (fileType === 'jpg' || fileType === 'jpeg' || fileType === 'png') return 'bg-green-100';\n    if (fileType === 'tsx' || fileType === 'ts' || fileType === 'js' || fileType === 'jsx') return 'bg-purple-100';\n    if (fileType === 'html' || fileType === 'css') return 'bg-orange-100';\n    return 'bg-gray-100';\n  };\n\n  const formatTimeAgo = (timestamp?: string) => {\n    if (!timestamp) return 'Unknown';\n    const now = new Date();\n    const past = new Date(timestamp);\n    const diffMs = now.getTime() - past.getTime();\n    const diffMins = Math.floor(diffMs / 60000);\n    const diffHours = Math.floor(diffMs / 3600000);\n    const diffDays = Math.floor(diffMs / 86400000);\n    const diffWeeks = Math.floor(diffMs / 604800000);\n\n    if (diffMins < 60) return `${diffMins}m ago`;\n    if (diffHours < 24) return `${diffHours}h ago`;\n    if (diffDays < 7) return `${diffDays}d ago`;\n    return `${diffWeeks}w ago`;\n  };\n\n  const generateFlashcards = async () => {\n    if (method !== 'files' || (uploadedFiles.length === 0 && selectedExistingFileIds.length === 0)) {\n      return;\n    }\n\n    setIsGenerating(true);\n    \n    try {\n      // Always make real API call - let backend handle test mode via headers\n      const payload = {\n        project_id: projectId!,\n        source_type: 'files' as const,\n        num_cards: 20,\n        difficulty: form.getValues('difficulty'),\n        language: form.getValues('language'),\n      };\n\n      const headers: any = {};\n      \n      // Add test mode header if in test mode (backend will handle AI mocking)\n      if (isTestMode()) {\n        headers['X-Test-Mode'] = 'true';\n        console.log('üß™ Test mode: Adding X-Test-Mode header for backend AI mocking');\n      }\n\n      console.log('üöÄ Generating flashcards with payload:', payload);\n      console.log('üöÄ Headers:', headers);\n\n      const response = await axiosGeneration.post(`/projects/${projectId}/flashcards/generate`, payload, {\n        headers\n      });\n\n      const result = response.data;\n      console.log('‚úÖ Received flashcard generation response:', result);\n      \n      // Handle different response formats\n      let suggestedTitle, suggestedDescription, cards;\n      \n      if (result.deck && result.cards) {\n        // New format with deck metadata and cards\n        suggestedTitle = result.deck.suggested_title;\n        suggestedDescription = result.deck.suggested_description;\n        cards = result.cards;\n      } else if (result.title && result.flashcards) {\n        // FlashcardSet format from API\n        suggestedTitle = result.title;\n        suggestedDescription = result.description || `Generated flashcard set with ${result.total_cards || result.flashcards?.length || 0} cards`;\n        cards = result.flashcards || [];\n      } else {\n        // Fallback\n        suggestedTitle = \"Generated Flashcards\";\n        suggestedDescription = \"AI-generated flashcard set\";\n        cards = result.cards || result.flashcards || [];\n      }\n      \n      setSuggestedTitle(suggestedTitle);\n      setSuggestedDescription(suggestedDescription);\n      \n      // Reset form with suggestions\n      form.reset({\n        title: suggestedTitle,\n        description: suggestedDescription,\n        difficulty: form.getValues('difficulty'),\n        language: form.getValues('language'),\n      });\n\n      // Build preview-friendly cards for the review step\n      const previewCards = (Array.isArray(cards) ? cards : []).map((c: any, idx: number) => {\n        // Support multiple shapes: {question, answer}, {front, back}, string pairs, etc.\n        const front = typeof c.front === 'string' ? c.front\n          : typeof c.question === 'string' ? c.question\n          : c.q || c.prompt || '';\n        const back = typeof c.back === 'string' ? c.back\n          : typeof c.answer === 'string' ? c.answer\n          : c.a || c.response || '';\n        const tags = Array.isArray(c.tags) ? c.tags : [];\n        return {\n          id: String(c.id ?? idx + 1),\n          front,\n          back,\n          tags,\n        };\n      });\n\n      // Convert to expected format for the wizard\n      const normalizedResult: FlashcardDeck = {\n        deck_metadata: {\n          description: suggestedDescription,\n          learning_objectives: [],\n          themes: [],\n        },\n        flashcards: cards,\n        flashcardSetId: result.id || null,\n      };\n\n      setGeneratedDeck(normalizedResult);\n      goNext();\n      \n    } catch (error) {\n      console.error('Failed to generate flashcards:', error);\n      // In a real app, you'd show an error message here\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n\n  const handleCreate = async () => {\n    if (!generatedDeck) return;\n\n    setIsSubmitting(true);\n    \n    try {\n      // Since the generate API already created the flashcard set, \n      // we just need to navigate to it\n      \n      // The generated deck should contain the flashcard set info if it was created by the API\n      if (generatedDeck.flashcardSetId) {\n        console.log('üîç DEBUG: Using existing flashcard set ID:', generatedDeck.flashcardSetId);\n        // Ensure the deck uses the user-provided Deck name (title)\n        const desiredTitle = form.getValues('title');\n        const desiredDescription = form.getValues('description');\n        try {\n          if (desiredTitle || desiredDescription) {\n            // Generated sets are managed via the generation service\n            await axiosApi.patch(`projects/${projectId}/flashcard-sets/${generatedDeck.flashcardSetId}/`, {\n              ...(desiredTitle ? { title: desiredTitle } : {}),\n              ...(desiredDescription ? { description: desiredDescription } : {}),\n            });\n          }\n        } catch (e) {\n          console.warn('Could not update deck title/description after generation', e);\n        }\n\n        // Close the wizard\n        onOpenChange(false);\n        \n        // Navigate to the created set\n        router.push(`/projects/${projectId}/flashcards/${generatedDeck.flashcardSetId}` as any);\n        return;\n      }\n\n      // Fallback: Create the flashcard set if it wasn't created during generation\n      console.log('üîç DEBUG: Creating new flashcard set from generated cards');\n      \n      const response = await axiosApi.post(`projects/${projectId}/flashcard-sets/`, {\n        title: form.getValues('title') || deriveTitleFromSource(),\n        description: form.getValues('description') || `Generated from ${method === 'files' ? 'uploaded files' : 'manual entry'}`,\n        difficulty_level: 'INTERMEDIATE',\n        target_audience: '',\n        estimated_study_time: 30,\n        tags: [],\n        flashcards: generatedDeck.flashcards\n      });\n\n      const createdSet = response.data;\n      \n      // Close the wizard\n      onOpenChange(false);\n      \n      // Call the onCreated callback if provided\n      if (onCreated) {\n        onCreated(createdSet);\n      }\n      \n      // Navigate to the created set\n      if (createdSet?.id) {\n        router.push(`/projects/${projectId}/flashcards/${createdSet.id}` as any);\n      } else {\n        // Fallback to flashcards dashboard if no ID\n        router.push(`/projects/${projectId}/flashcards` as any);\n      }\n      \n    } catch (error: any) {\n      console.error('Failed to create deck:', error);\n      alert(`Failed to create flashcard set: ${error.message}`);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleFileUpload = async (files: File[]) => {\n    console.log('üîç DEBUG: handleFileUpload called with files:', files);\n    console.log('üîç DEBUG: Files to upload:', files.map(f => ({ name: f.name, size: f.size, type: f.type })));\n    \n    // Set uploaded files in local state first\n    setUploadedFiles(files);\n    console.log('üîç DEBUG: uploadedFiles state updated:', files);\n    \n    // Upload files to the backend project\n    try {\n      console.log('üîç DEBUG: Starting file upload to backend...');\n      \n      for (const file of files) {\n        const formData = new FormData();\n        formData.append('file', file);\n        \n        const response = await axiosApi.post(`projects/${projectId}/upload_file/`, formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data',\n          }\n        });\n        \n        if (response.status === 200 || response.status === 201) {\n          const result = response.data;\n          console.log('üîç DEBUG: File uploaded successfully:', result);\n          console.log('‚úÖ File uploaded successfully:', file.name);\n        } else {\n          console.error('üîç DEBUG: File upload failed:', response.status, response.statusText);\n          console.error('‚ùå File upload failed:', file.name, response.status);\n        }\n      }\n      \n      // Refresh the project files after upload\n      console.log('üîç DEBUG: Refreshing project files after upload...');\n      // Reload files from the backend\n      setTimeout(() => {\n        if (open && projectId) {\n          loadFiles();\n        }\n      }, 1000); // Wait a bit for backend processing\n      \n    } catch (error) {\n      console.error('üîç DEBUG: Error during file upload:', error);\n    }\n    \n    // Auto-advance to next step after file selection\n    if (files.length > 0) {\n      console.log('üîç DEBUG: Files selected, auto-advancing to next step');\n      goNext();\n    }\n  };\n\n  return (\n    <WizardShell\n      open={open}\n      onOpenChange={onOpenChange}\n      title=\"Create Flashcard Set\"\n      step={step}\n      totalSteps={totalSteps}\n      headerExtras={(\n        <>\n          {/* Debug Banner */}\n          <div className=\"bg-blue-50 border border-blue-200 rounded-md p-2 mt-2 text-xs\">\n            <div className=\"font-medium text-blue-800\">üîç DEBUG INFO:</div>\n            <div className=\"text-blue-700\">\n              Open: {open ? 'true' : 'false'} | \n              Step: {step} | \n              Method: {method || 'null'} | \n              ProjectId: {projectId ? 'set' : 'null'} | \n              Files: {projectFiles.length} | \n              Loading: {isLoadingFiles ? 'true' : 'false'}\n            </div>\n            <div className=\"mt-1\">\n              <Button \n                size=\"sm\" \n                variant=\"outline\" \n                onClick={() => {\n                  console.log('üîç DEBUG: Manual loadFiles trigger clicked');\n                  console.log('üîç DEBUG: Current state:', { open, projectId, step, method });\n                  if (projectId) {\n                    loadFiles();\n                  } else {\n                    console.log('üîç DEBUG: No projectId available');\n                  }\n                }}\n                className=\"text-xs h-6 px-2\"\n              >\n                üîÑ Force Load Files\n              </Button>\n            </div>\n          </div>\n\n          {/* Mock Mode Banner */}\n          <div className=\"bg-yellow-50 border border-yellow-200 rounded-md p-3 mt-2\">\n            <div className=\"flex items-center gap-2 text-yellow-800\">\n              <div className=\"text-lg\">üß™</div>\n              <div className=\"text-sm font-medium\">\n                Mock Mode Enabled\n              </div>\n            </div>\n            <p className=\"text-xs text-yellow-700 mt-1\">\n              Using predefined flashcard templates instead of AI generation for testing purposes.\n            </p>\n          </div>\n        </>\n      )}\n    >\n          {step === 1 && (\n            <div className=\"space-y-3\">\n              <div className=\"text-center space-y-2\">\n                <h2 className=\"text-lg font-semibold text-slate-900\">How would you like to start?</h2>\n                <p className=\"text-sm text-slate-600\">Choose your preferred method for creating flashcards</p>\n              </div>\n              \n              <div className=\"grid grid-cols-1 gap-2\">\n                <Card className=\"cursor-pointer hover:shadow-md transition-shadow border-2 hover:border-blue-200\" onClick={() => { setMethod('files'); setStep(2); }}>\n                  <CardContent className=\"p-3\">\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"p-2 rounded-lg bg-blue-100\">\n                        <FileText className=\"h-4 w-4 text-blue-600\" />\n                      </div>\n                      <div className=\"flex-1\">\n                        <h3 className=\"font-medium text-slate-900\">Use Files</h3>\n                        <p className=\"text-sm text-slate-600\">Generate from uploaded documents and materials</p>\n                      </div>\n                    </div>\n                </CardContent>\n              </Card>\n\n                <Card className=\"cursor-pointer hover:shadow-md transition-shadow border-2 hover:border-green-200\" onClick={() => { setMethod('manual'); setStep(2); }}>\n                  <CardContent className=\"p-3\">\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"p-2 rounded-lg bg-green-100\">\n                        <PencilLine className=\"h-4 w-4 text-green-600\" />\n                      </div>\n                      <div className=\"flex-1\">\n                        <h3 className=\"font-medium text-slate-900\">Manual Entry</h3>\n                        <p className=\"text-sm text-slate-600\">Create flashcards one by one with custom content</p>\n                      </div>\n                    </div>\n                </CardContent>\n              </Card>\n              </div>\n            </div>\n          )}\n\n          {step === 2 && (\n            <div className=\"space-y-3\">\n              {/* Test mode banner for step 2 */}\n              {isTestMode() && (\n                <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-3\">\n                  <div className=\"flex items-center gap-2\">\n                    <span className=\"text-yellow-600 text-sm\">üß™</span>\n                    <span className=\"text-yellow-800 text-sm font-medium\">Mock Mode Enabled</span>\n                  </div>\n                  <p className=\"text-yellow-700 text-xs mt-1\">\n                    Using predefined flashcard templates instead of AI generation for testing purposes.\n                    {projectFiles.length > 0 && ' Real project files loaded successfully.'}\n                    {projectFiles.length === 0 && ' Using fallback demo files for testing.'}\n                  </p>\n                </div>\n              )}\n\n              {method === 'files' && (\n                <div className=\"space-y-3\">\n                  {/* Files Selection Section - Side by Side */}\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2\">\n                    {/* Recent Files Section */}\n                  <Card>\n                      <CardHeader className=\"pb-1\">\n                        <div className=\"flex items-center justify-between\">\n                          <CardTitle className=\"text-sm\">Recent Files</CardTitle>\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\" \n                            className=\"h-5 w-5 p-0\"\n                            onClick={() => loadFiles()}\n                            title=\"Refresh files\"\n                          >\n                            <RefreshCw className=\"h-3 w-3\" />\n                          </Button>\n                        </div>\n                    </CardHeader>\n                      <CardContent className=\"p-2\">\n                        <div className=\"space-y-1\">\n                          {isLoadingFiles ? (\n                            <div className=\"text-center py-2 text-slate-500\">\n                              <Loader2 className=\"h-5 w-5 mx-auto mb-1 text-slate-300 animate-spin\" />\n                              <p className=\"text-xs\">Loading files...</p>\n                            </div>\n                          ) : projectFiles.length === 0 ? (\n                            <div className=\"text-center py-2 text-slate-500\">\n                              <FolderOpen className=\"h-5 w-5 mx-auto mb-1 text-slate-300\" />\n                              <p className=\"text-xs\">No files uploaded yet</p>\n                              <p className=\"text-xs text-slate-400\">Upload files to get started</p>\n                            </div>\n                          ) : (\n                            projectFiles.slice(0, 4).map((file) => {\n                              const checked = selectedExistingFileIds.includes(file.id);\n                              return (\n                                <div\n                                  key={file.id}\n                                  className={`flex items-center justify-between p-1 rounded-lg border transition-colors cursor-pointer ${\n                                    checked \n                                      ? 'bg-emerald-50 border-emerald-200' \n                                      : 'hover:bg-slate-50 border-slate-200'\n                                  }`}\n                                  onClick={() => {\n                                    setSelectedExistingFileIds((prev: Array<string | number>) => \n                                      checked \n                                        ? prev.filter(id => id !== file.id)\n                                        : [...prev, file.id]\n                                    );\n                                  }}\n                                >\n                                  <div className=\"flex items-center gap-2 flex-1 min-w-0\">\n                                    <div className={`p-1 rounded-full ${getFileIconBg(file.name, file.file_type)}`}>\n                                      {getFileIcon(file.name, file.file_type)}\n                                    </div>\n                                    <div className=\"flex-1 min-w-0\">\n                                      <p className=\"text-xs font-medium text-slate-900 truncate\">\n                                        {file.name}\n                                      </p>\n                                    </div>\n                                  </div>\n                                  <div className=\"flex items-center gap-2\">\n                                    <div className=\"flex items-center gap-1 text-xs text-slate-500\">\n                                      <Clock className=\"h-3 w-3\" />\n                                      <span className=\"text-xs\">{formatTimeAgo(file.uploaded_at)}</span>\n                                    </div>\n                                    <div className={`w-3 h-3 rounded border-2 flex items-center justify-center ${\n                                      checked \n                                        ? 'bg-emerald-500 border-emerald-500' \n                                        : 'border-slate-300'\n                                    }`}>\n                                      {checked && <CheckCircle2 className=\"h-2 w-2 text-white\" />}\n                                    </div>\n                                  </div>\n                                </div>\n                              );\n                            })\n                          )}\n                        </div>\n                    </CardContent>\n                  </Card>\n\n                    {/* Favorite Files Section */}\n                  <Card>\n                      <CardHeader className=\"pb-1\">\n                        <div className=\"flex items-center justify-between\">\n                          <CardTitle className=\"text-sm\">Favorite Files</CardTitle>\n                          <Button variant=\"ghost\" size=\"sm\" className=\"h-5 w-5 p-0\">\n                            <MoreVertical className=\"h-3 w-3\" />\n                          </Button>\n                        </div>\n                    </CardHeader>\n                      <CardContent className=\"p-2\">\n                        <div className=\"space-y-1\">\n                          {isLoadingFiles ? (\n                            <div className=\"text-center py-2 text-slate-500\">\n                              <Loader2 className=\"h-5 w-5 mx-auto mb-1 text-slate-300 animate-spin\" />\n                              <p className=\"text-xs\">Loading files...</p>\n                            </div>\n                          ) : projectFiles.length === 0 ? (\n                            <div className=\"text-center py-2 text-slate-500\">\n                              <FolderOpen className=\"h-5 w-5 mx-auto mb-1 text-slate-300\" />\n                              <p className=\"text-xs\">No favorite files yet</p>\n                              <p className=\"text-xs text-slate-400\">Mark files as favorites</p>\n                            </div>\n                          ) : (\n                            projectFiles.slice(0, 4).map((file) => {\n                              const checked = selectedExistingFileIds.includes(file.id);\n                              return (\n                                <div\n                                  key={file.id}\n                                  className={`flex items-center justify-between p-1 rounded-lg border transition-colors cursor-pointer ${\n                                    checked \n                                      ? 'bg-emerald-50 border-emerald-200' \n                                      : 'border-slate-300'\n                                  }`}\n                                  onClick={() => {\n                                    setSelectedExistingFileIds((prev: Array<string | number>) => \n                                      checked \n                                        ? prev.filter(id => id !== file.id)\n                                        : [...prev, file.id]\n                                    );\n                                  }}\n                                >\n                                  <div className=\"flex items-center gap-2 flex-1 min-w-0\">\n                                    <div className={`p-1 rounded-full ${getFileIconBg(file.name, file.file_type)}`}>\n                                      {getFileIcon(file.name, file.file_type)}\n                                    </div>\n                                    <div className=\"flex-1 min-w-0\">\n                                      <p className=\"text-xs font-medium text-slate-900 truncate\">\n                                        {file.name}\n                                      </p>\n                                    </div>\n                                  </div>\n                                  <div className=\"flex items-center gap-2\">\n                                    <div className=\"flex items-center gap-1 text-xs text-slate-500\">\n                                      <Clock className=\"h-3 w-3\" />\n                                      <span className=\"text-xs\">{formatTimeAgo(file.uploaded_at)}</span>\n                                    </div>\n                                    <div className={`w-3 h-3 rounded border-2 flex items-center justify-center ${\n                                      checked \n                                        ? 'bg-emerald-500 border-emerald-500' \n                                        : 'border-slate-300'\n                                    }`}>\n                                      {checked && <CheckCircle2 className=\"h-2 w-2 text-white\" />}\n                                    </div>\n                                  </div>\n                                </div>\n                              );\n                            })\n                        )}\n                      </div>\n                      </CardContent>\n                    </Card>\n                  </div>\n\n                  {/* Upload New Files Section - Ultra Compact */}\n                  <Card>\n                    <CardHeader className=\"pb-1\">\n                      <CardTitle className=\"text-sm flex items-center gap-2\"><Upload className=\"h-3 w-3\" /> Upload New Files</CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"p-2 space-y-2\">\n                      <p className=\"text-xs text-slate-600\">Add one or more files to base your deck on</p>\n                      \n                      {/* Ultra Compact Drag & Drop Area */}\n                      <div\n                        className={`border-2 border-dashed rounded-lg p-3 text-center transition-all duration-300 ${\n                          false // TODO: Add drag state\n                            ? 'border-blue-400 bg-blue-50/50 scale-105' \n                            : 'border-gray-300 hover:border-blue-300 hover:bg-gray-50/50'\n                        }`}\n                      >\n                        <div className=\"space-y-1\">\n                          <div className=\"mx-auto w-8 h-8 bg-gradient-to-r from-blue-400 to-purple-600 rounded-full flex items-center justify-center\">\n                            <Upload className=\"h-4 w-4 text-white\" />\n                          </div>\n                          <div>\n                            <h4 className=\"text-xs font-medium text-slate-900 mb-1\">\n                              Drop files here or click to browse\n                            </h4>\n                            <p className=\"text-xs text-slate-500 mb-2\">\n                              Supported: PDF, DOCX, PPTX, TXT, PNG, JPG, CSV, MD\n                            </p>\n                            <Button \n                              variant=\"outline\" \n                              size=\"sm\"\n                              onClick={() => document.getElementById('file-upload')?.click()}\n                              className=\"border-blue-200 text-blue-600 hover:bg-blue-50 text-xs h-7 px-2\"\n                            >\n                              Browse Files\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n\n                      {/* Hidden file input */}\n                      <input\n                        id=\"file-upload\"\n                        type=\"file\"\n                        multiple\n                        className=\"hidden\"\n                        onChange={(e) => {\n                          const files = Array.from(e.target.files || []);\n                          console.log('üîç DEBUG: File input change event:', {\n                            filesCount: files.length,\n                            fileNames: files.map(f => f.name),\n                            fileTypes: files.map(f => f.type)\n                          });\n                          handleFileUpload(files);\n                        }}\n                        accept=\".pdf,.doc,.docx,.ppt,.pptx,.txt,.png,.jpg,.jpeg,.csv,.md\"\n                      />\n\n                      {/* Ultra Compact Uploaded Files Preview */}\n                      {uploadedFiles.length > 0 && (\n                        <div className=\"space-y-1\">\n                          <p className=\"text-xs text-slate-600 font-medium\">Selected files:</p>\n                          <div className=\"space-y-1\">\n                            {uploadedFiles.map((file, index) => (\n                              <div key={index} className=\"flex items-center justify-between p-1 bg-slate-50 rounded border\">\n                                <div className=\"flex items-center gap-2\">\n                                  <FileText className=\"h-3 w-3 text-blue-500\" />\n                                  <span className=\"text-xs text-slate-700 truncate\">{file.name}</span>\n                                </div>\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  className=\"h-4 w-4 p-0 text-slate-400 hover:text-slate-600\"\n                                  onClick={() => {\n                                    setUploadedFiles(uploadedFiles.filter((_, i) => i !== index));\n                                  }}\n                                >\n                                  <X className=\"h-3 w-3\" />\n                                </Button>\n                              </div>\n                            ))}\n                          </div>\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                </div>\n              )}\n            </div>\n          )}\n\n          {step === 3 && (\n            <div className=\"space-y-4\">\n              {/* Form Fields Section */}\n            <Card>\n              <CardHeader className=\"pb-2\">\n                  <CardTitle className=\"text-sm flex items-center gap-2\"><CheckCircle2 className=\"h-3 w-3\" /> Deck Configuration</CardTitle>\n              </CardHeader>\n                <CardContent className=\"p-3 space-y-3\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"deck-title\" className=\"text-xs\">Deck name</Label>\n                    <Input \n                      id=\"deck-title\" \n                      placeholder=\"e.g., Lecture 3 - Neural Networks\" \n                      {...form.register('title')}\n                      className=\"text-sm\"\n                    />\n                  </div>\n                  \n\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"deck-description\" className=\"text-xs\">Description (optional)</Label>\n                    <Input \n                      id=\"deck-description\" \n                      placeholder=\"Brief description of this assessment set\" \n                      {...form.register('description')}\n                      className=\"text-sm\"\n                    />\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Generate Button */}\n              <div className=\"text-center\">\n                <Button \n                  onClick={generateFlashcards}\n                  disabled={!canContinueFromStep3 || isGenerating}\n                  className=\"bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700\"\n                >\n                  {isGenerating ? (\n                    <>\n                      <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                      Generating Flashcards...\n                    </>\n                  ) : (\n                    <>\n                      <Brain className=\"h-4 w-4 mr-2\" />\n                      Generate Flashcards\n                    </>\n                  )}\n                </Button>\n              </div>\n            </div>\n          )}\n\n          {step === 4 && generatedDeck && (\n            <FlashcardReviewStep\n              cards={generatedDeck.flashcards.map((card, idx) => ({\n                id: String(card.concept_id || idx + 1),\n                front: card.question,\n                back: card.answer,\n                tags: card.related_concepts || [],\n              }))}\n              form={form}\n              mockMode={isTestMode()}\n              suggestedTitle={suggestedTitle}\n              suggestedDescription={suggestedDescription}\n            />\n          )}\n\n          {step === 5 && generatedDeck && (\n            <div className=\"space-y-4\">\n              <div className=\"text-center space-y-3\">\n                <div className=\"w-12 h-12 bg-gradient-to-r from-green-500 to-blue-600 rounded-full flex items-center justify-center mx-auto\">\n                  <CheckCircle2 className=\"h-6 w-6 text-white\" />\n                </div>\n                <div>\n                  <h2 className=\"text-xl font-semibold text-gray-900\">Ready to Create!</h2>\n                  <p className=\"text-sm text-gray-600 mt-1\">\n                    Your flashcard set is ready to be created with {generatedDeck.flashcards.length} cards\n                  </p>\n                </div>\n              </div>\n\n              <Card>\n                <CardHeader className=\"pb-2\">\n                  <CardTitle className=\"text-sm flex items-center gap-2\"><CheckCircle2 className=\"h-3 w-3\" /> Final Summary</CardTitle>\n                </CardHeader>\n                <CardContent className=\"p-3 space-y-3\">\n                  <div className=\"space-y-2\">\n                    <div>\n                      <span className=\"text-sm font-medium\">Deck Name:</span>\n                      <p className=\"text-sm text-gray-700\">{form.getValues('title')}</p>\n                    </div>\n                    <div>\n                      <span className=\"text-sm font-medium\">Description:</span>\n                      <p className=\"text-sm text-gray-700\">{form.getValues('description')}</p>\n                    </div>\n                    <div>\n                      <span className=\"text-sm font-medium\">Cards:</span>\n                      <p className=\"text-sm text-gray-700\">{generatedDeck.flashcards.length} flashcards</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          )}\n\n          <div className=\"flex justify-between pt-2\">\n            <div>\n              {step > 1 && (\n                <Button variant=\"outline\" onClick={goBack} disabled={isSubmitting} size=\"sm\">Back</Button>\n              )}\n            </div>\n            <div className=\"flex gap-2\">\n              <Button variant=\"outline\" onClick={() => onOpenChange(false)} disabled={isSubmitting} size=\"sm\">Cancel</Button>\n              {step === 1 ? null : step === 5 ? (\n                <Button onClick={handleCreate} disabled={isSubmitting || !generatedDeck} size=\"sm\">\n                  {isSubmitting ? 'Creating‚Ä¶' : 'Create Flashcard Set'}\n                </Button>\n              ) : (\n                <Button onClick={goNext} disabled={isSubmitting || !canContinueFromStep2} size=\"sm\">\n                  Next\n                </Button>\n              )}\n            </div>\n          </div>\n    </WizardShell>\n  );\n}\n\nexport default CreateFlashcardSetWizard;\n\n\n"],"names":["CreateFlashcardSetWizard","isTestMode","process","env","NODE_ENV","NEXT_PUBLIC_TEST_MODE","window","location","hostname","projectId","open","onOpenChange","onCreated","router","useRouter","step","setStep","React","useState","totalSteps","setTotalSteps","method","setMethod","projectFiles","setProjectFiles","uploadedFiles","setUploadedFiles","selectedExistingFileIds","setSelectedExistingFileIds","existingSearch","setExistingSearch","isGenerating","setIsGenerating","generatedDeck","setGeneratedDeck","form","useForm","resolver","zodResolver","FlashcardDeckSchema","defaultValues","title","description","difficulty","language","suggestedTitle","setSuggestedTitle","suggestedDescription","setSuggestedDescription","isSubmitting","setIsSubmitting","isLoadingFiles","setIsLoadingFiles","console","log","length","useEffect","count","files","map","f","id","name","type","file_type","reset","loadFiles","testMode","hasAuth","localStorage","token","getItem","fallbackFiles","uploaded_at","file_size","apiUrl","response","axiosApi","get","headers","status","data","project","uploaded_files","file","transformedFile","original_name","split","pop","content_type","toLowerCase","size","error","setTimeout","canContinueFromStep1","Boolean","canContinueFromStep2","canContinueFromStep3","getValues","trim","deriveTitleFromSource","base","replace","picked","find","includes","currentTitle","setValue","goNext","goBack","getFileIcon","fileName","fileType","File","className","FileText","Image","Code","getFileIconBg","formatTimeAgo","timestamp","now","Date","past","diffMs","getTime","diffMins","Math","floor","diffHours","diffDays","diffWeeks","generateFlashcards","payload","project_id","source_type","num_cards","axiosGeneration","post","result","cards","deck","suggested_title","suggested_description","flashcards","total_cards","previewCards","Array","isArray","c","idx","front","question","q","prompt","back","answer","a","tags","String","normalizedResult","deck_metadata","learning_objectives","themes","flashcardSetId","handleCreate","desiredTitle","desiredDescription","patch","e","warn","push","difficulty_level","target_audience","estimated_study_time","createdSet","alert","message","handleFileUpload","formData","FormData","append","statusText","WizardShell","headerExtras","div","Button","variant","onClick","p","h2","Card","CardContent","h3","PencilLine","span","CardHeader","CardTitle","RefreshCw","Loader2","FolderOpen","slice","checked","prev","filter","Clock","CheckCircle2","MoreVertical","Upload","h4","document","getElementById","click","input","multiple","onChange","from","target","filesCount","fileNames","fileTypes","accept","index","_","i","X","Label","htmlFor","Input","placeholder","register","disabled","Brain","FlashcardReviewStep","card","concept_id","related_concepts","mockMode"],"mappings":"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"}