{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/components/wizard/shared/useMultiSourceManagement.ts"],"sourcesContent":["/**\n * Enhanced Multi-Source Management Hook\n * \n * Handles flashcards, files, and study materials selection\n * for wizard components. Extends the existing useFileManagement\n * pattern to support multiple source types.\n */\n\nimport { useState, useEffect, useCallback } from 'react';\nimport { axiosApi } from '@/lib/axios-api';\nimport { getProjectScoped } from '@/lib/projectApi';\nimport { isTestMode } from '@/features/projects/services/upload-utils';\n\n// ============================================================================\n// Types and Interfaces\n// ============================================================================\n\nexport interface SourceItem {\n  id: string;\n  name?: string;\n  title?: string;\n  description?: string;\n  size?: number;\n  created_at?: string;\n  updated_at?: string;\n  file_type?: string;\n  flashcard_count?: number;\n  type: 'flashcard' | 'file' | 'study_material';\n}\n\nexport interface SelectedSources {\n  flashcards: { ids: string[]; groundOnly: boolean };\n  files: { ids: string[]; groundOnly: boolean };\n  studyMaterials: { ids: string[]; groundOnly: boolean };\n}\n\ninterface UseMultiSourceManagementOptions {\n  projectId: string;\n  supportedTypes?: Array<'flashcards' | 'files' | 'studyMaterials'>;\n  onSourcesChange?: (sources: SelectedSources) => void;\n  autoLoad?: boolean;\n}\n\ninterface UseMultiSourceManagementReturn {\n  // Source data\n  flashcards: SourceItem[];\n  files: SourceItem[];\n  studyMaterials: SourceItem[];\n  \n  // Upload handling\n  uploadedFiles: File[];\n  \n  // Loading states\n  isLoadingFlashcards: boolean;\n  isLoadingFiles: boolean;\n  isLoadingStudyMaterials: boolean;\n  \n  // Selection state\n  selectedSources: SelectedSources;\n  \n  // Search\n  searchTerm: string;\n  \n  // Actions\n  setSelectedSources: (sources: SelectedSources) => void;\n  setSearchTerm: (term: string) => void;\n  handleFileUpload: (files: File[]) => Promise<void>;\n  removeUploadedFile: (index: number) => void;\n  refreshSources: () => Promise<void>;\n  clearSelection: () => void;\n  \n  // Computed values\n  totalSelectedCount: number;\n  hasMinimumSelection: boolean;\n  isAnyLoading: boolean;\n}\n\n// ============================================================================\n// Default Values\n// ============================================================================\n\nconst DEFAULT_SELECTED_SOURCES: SelectedSources = {\n  flashcards: { ids: [], groundOnly: false },\n  files: { ids: [], groundOnly: false },\n  studyMaterials: { ids: [], groundOnly: false },\n};\n\n// ============================================================================\n// Hook Implementation\n// ============================================================================\n\nexport const useMultiSourceManagement = ({\n  projectId,\n  supportedTypes = ['flashcards', 'files', 'studyMaterials'],\n  onSourcesChange,\n  autoLoad = true,\n}: UseMultiSourceManagementOptions): UseMultiSourceManagementReturn => {\n  const [flashcards, setFlashcards] = useState<SourceItem[]>([]);\n  const [files, setFiles] = useState<SourceItem[]>([]);\n  const [studyMaterials, setStudyMaterials] = useState<SourceItem[]>([]);\n  const [uploadedFiles, setUploadedFiles] = useState<File[]>([]);\n  \n  const [isLoadingFlashcards, setIsLoadingFlashcards] = useState(false);\n  const [isLoadingFiles, setIsLoadingFiles] = useState(false);\n  const [isLoadingStudyMaterials, setIsLoadingStudyMaterials] = useState(false);\n  \n  const [selectedSources, setSelectedSourcesState] = useState<SelectedSources>(DEFAULT_SELECTED_SOURCES);\n  const [searchTerm, setSearchTerm] = useState('');\n\n  const loadFlashcards = useCallback(async () => {\n    if (!supportedTypes.includes('flashcards')) return;\n    setIsLoadingFlashcards(true);\n    try {\n      const response: any = await getProjectScoped(`flashcard-decks/`, projectId, axiosApi as any);\n      const raw = response?.data ?? response ?? []\n      const flashcardData = (Array.isArray(raw) ? raw : raw?.results || []).map((deck: any) => ({\n        id: deck.id,\n        title: deck.title,\n        description: deck.description,\n        flashcard_count: deck.flashcard_count || 0,\n        created_at: deck.created_at,\n        updated_at: deck.updated_at,\n        type: 'flashcard' as const,\n      }));\n      setFlashcards(flashcardData);\n    } catch (error: any) {\n      console.error('Failed to load flashcards:', error);\n      if (isTestMode() && (error?.code === 'ERR_NETWORK' || !error?.response)) {\n        setFlashcards([]);\n      } else {\n        setFlashcards([]);\n      }\n    } finally {\n      setIsLoadingFlashcards(false);\n    }\n  }, [projectId, supportedTypes]);\n  \n  const loadFiles = useCallback(async () => {\n    if (!supportedTypes.includes('files')) return;\n    setIsLoadingFiles(true);\n    try {\n      const response: any = await getProjectScoped(`files/`, projectId, axiosApi as any);\n      const raw = response?.data ?? response ?? []\n      const fileData = (Array.isArray(raw) ? raw : raw?.results || []).map((file: any) => ({\n        id: file.id,\n        name: file.name,\n        description: file.description,\n        size: file.file_size,\n        file_type: file.file_type,\n        created_at: file.created_at || file.uploaded_at,\n        type: 'file' as const,\n      }));\n      setFiles(fileData);\n    } catch (error: any) {\n      console.error('Failed to load files:', error);\n      if (isTestMode() && (error?.code === 'ERR_NETWORK' || !error?.response)) {\n        setFiles([]);\n      } else {\n        setFiles([]);\n      }\n    } finally {\n      setIsLoadingFiles(false);\n    }\n  }, [projectId, supportedTypes]);\n  \n  const loadStudyMaterials = useCallback(async () => {\n    if (!supportedTypes.includes('studyMaterials')) return;\n    setIsLoadingStudyMaterials(true);\n    try {\n      const response: any = await getProjectScoped(`study-materials/`, projectId, axiosApi as any);\n      const raw = response?.data ?? response ?? []\n      const materialData = (Array.isArray(raw) ? raw : raw?.results || []).map((material: any) => ({\n        id: material.id,\n        title: material.title,\n        name: material.name,\n        description: material.description,\n        created_at: material.created_at,\n        updated_at: material.updated_at,\n        type: 'study_material' as const,\n      }));\n      setStudyMaterials(materialData);\n    } catch (error: any) {\n      console.error('Failed to load study materials:', error);\n      if (isTestMode() && (error?.code === 'ERR_NETWORK' || !error?.response)) {\n        setStudyMaterials([]);\n      } else {\n        setStudyMaterials([]);\n      }\n    } finally {\n      setIsLoadingStudyMaterials(false);\n    }\n  }, [projectId, supportedTypes]);\n\n  const handleFileUpload = useCallback(async (files: File[]) => {\n    setUploadedFiles(prev => [...prev, ...files]);\n    try {\n      for (const file of files) {\n        const formData = new FormData();\n        formData.append('file', file);\n        const response = await (axiosApi as any).post(`projects/${projectId}/upload_file/`, formData, {\n          headers: { 'Content-Type': 'multipart/form-data' }\n        });\n        if (response.status === 200 || response.status === 201) {\n          console.log('✅ File uploaded successfully:', file.name);\n        }\n      }\n      setTimeout(() => { loadFiles(); }, 1000);\n    } catch (error) {\n      console.error('❌ File upload failed:', error);\n    }\n  }, [projectId, loadFiles]);\n\n  const removeUploadedFile = useCallback((index: number) => {\n    setUploadedFiles(prev => prev.filter((_, i) => i !== index));\n  }, []);\n\n  const setSelectedSources = useCallback((sources: SelectedSources) => {\n    setSelectedSourcesState(sources);\n    onSourcesChange?.(sources);\n  }, [onSourcesChange]);\n\n  const clearSelection = useCallback(() => {\n    setSelectedSources(DEFAULT_SELECTED_SOURCES);\n    setUploadedFiles([]);\n    setSearchTerm('');\n  }, [setSelectedSources]);\n\n  const refreshSources = useCallback(async () => {\n    await Promise.all([\n      loadFlashcards(),\n      loadFiles(),\n      loadStudyMaterials(),\n    ]);\n  }, [loadFlashcards, loadFiles, loadStudyMaterials]);\n\n  useEffect(() => {\n    if (autoLoad && projectId) {\n      refreshSources();\n    }\n  }, [autoLoad, projectId, refreshSources]);\n\n  const totalSelectedCount = \n    selectedSources.flashcards.ids.length +\n    selectedSources.files.ids.length +\n    selectedSources.studyMaterials.ids.length +\n    uploadedFiles.length;\n  \n  const hasMinimumSelection = totalSelectedCount >= 1;\n  const isAnyLoading = isLoadingFlashcards || isLoadingFiles || isLoadingStudyMaterials;\n  \n  return {\n    flashcards,\n    files,\n    studyMaterials,\n    uploadedFiles,\n    isLoadingFlashcards,\n    isLoadingFiles,\n    isLoadingStudyMaterials,\n    selectedSources,\n    searchTerm,\n    setSelectedSources,\n    setSearchTerm,\n    handleFileUpload,\n    removeUploadedFile,\n    refreshSources,\n    clearSelection,\n    totalSelectedCount,\n    hasMinimumSelection,\n    isAnyLoading,\n  };\n};\n\nexport default useMultiSourceManagement;\n"],"names":["useMultiSourceManagement","DEFAULT_SELECTED_SOURCES","flashcards","ids","groundOnly","files","studyMaterials","projectId","supportedTypes","onSourcesChange","autoLoad","setFlashcards","useState","setFiles","setStudyMaterials","uploadedFiles","setUploadedFiles","isLoadingFlashcards","setIsLoadingFlashcards","isLoadingFiles","setIsLoadingFiles","isLoadingStudyMaterials","setIsLoadingStudyMaterials","selectedSources","setSelectedSourcesState","searchTerm","setSearchTerm","loadFlashcards","useCallback","includes","response","getProjectScoped","axiosApi","raw","data","flashcardData","Array","isArray","results","map","deck","id","title","description","flashcard_count","created_at","updated_at","type","error","console","isTestMode","code","loadFiles","fileData","file","name","size","file_size","file_type","uploaded_at","loadStudyMaterials","materialData","material","handleFileUpload","prev","formData","FormData","append","post","headers","status","log","setTimeout","removeUploadedFile","index","filter","_","i","setSelectedSources","sources","clearSelection","refreshSources","Promise","all","useEffect","totalSelectedCount","length","hasMinimumSelection","isAnyLoading"],"mappings":"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"}