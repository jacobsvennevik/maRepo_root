{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/features/projects/components/steps/__tests__/syllabus-upload-simple.test.tsx"],"sourcesContent":["import React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport { SyllabusUploadStep } from '../syllabus-upload-step';\nimport { jest } from '@jest/globals';\n\n// Mock the dependencies\njest.mock('next/navigation', () => ({\n  useRouter: () => ({\n    push: jest.fn(),\n  }),\n}));\n\n// Mock the mock data service\njest.mock('../../../services/mock-data', () => ({\n  isTestMode: jest.fn(() => true),\n  MOCK_SYLLABUS_EXTRACTION: {\n    course_title: 'Test Course',\n    instructor: 'Test Instructor',\n    topics: ['Topic 1', 'Topic 2'],\n    exam_dates: [\n      { date: '2025-01-01', description: 'Test Exam' }\n    ],\n  },\n  createMockProcessedDocument: jest.fn(() => ({\n    id: 123,\n    original_text: 'Test text',\n    metadata: { course_title: 'Test Course' },\n    status: 'completed',\n  })),\n  simulateProcessingDelay: jest.fn(() => Promise.resolve()),\n}));\n\ndescribe('SyllabusUploadStep Simple', () => {\n  const mockOnUploadComplete = jest.fn();\n  const mockOnNext = jest.fn();\n  const mockOnBack = jest.fn();\n  const mockOnSkip = jest.fn();\n  const mockOnResetUploadState = jest.fn();\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('should render upload interface correctly', () => {\n    render(\n      <SyllabusUploadStep\n        onUploadComplete={mockOnUploadComplete}\n        onNext={mockOnNext}\n        onBack={mockOnBack}\n        onSkip={mockOnSkip}\n        onResetUploadState={mockOnResetUploadState}\n        hasUploadCompleted={false}\n      />\n    );\n\n    // Verify the upload interface is present\n    expect(screen.getByText(/upload your course materials/i)).toBeInTheDocument();\n    expect(screen.getByText(/browse for course materials/i)).toBeInTheDocument();\n    \n    // Verify the skip button is present\n    expect(screen.getByTestId('skip-button')).toBeInTheDocument();\n  });\n\n  it('should show analyze button after file upload', async () => {\n    render(\n      <SyllabusUploadStep\n        onUploadComplete={mockOnUploadComplete}\n        onNext={mockOnNext}\n        onBack={mockOnBack}\n        onSkip={mockOnSkip}\n        onResetUploadState={mockOnResetUploadState}\n        hasUploadCompleted={false}\n      />\n    );\n\n    // Initially, no analyze button should be visible\n    expect(screen.queryByTestId('analyze-button')).not.toBeInTheDocument();\n\n    // Simulate file upload by directly calling handleUpload\n    const file = new File(['test content'], 'test-syllabus.pdf', { type: 'application/pdf' });\n    \n    // Find the FileUpload component and simulate file upload\n    const fileInput = screen.getByTestId('file-input');\n    \n    fireEvent.change(fileInput, { target: { files: [file] } });\n\n    // Wait for the analyze button to appear\n    await waitFor(() => {\n      expect(screen.getByTestId('analyze-button')).toBeInTheDocument();\n    });\n  });\n\n  it('should handle upload completion state correctly', () => {\n    render(\n      <SyllabusUploadStep\n        onUploadComplete={mockOnUploadComplete}\n        onNext={mockOnNext}\n        onBack={mockOnBack}\n        onSkip={mockOnSkip}\n        onResetUploadState={mockOnResetUploadState}\n        hasUploadCompleted={true} // Simulate previous upload completed\n      />\n    );\n\n    // Should still allow new uploads even if previous upload was completed\n    expect(screen.getByText(/upload your course materials/i)).toBeInTheDocument();\n    expect(screen.getByText(/browse for course materials/i)).toBeInTheDocument();\n  });\n}); "],"names":["jest","mock","useRouter","push","fn","isTestMode","MOCK_SYLLABUS_EXTRACTION","course_title","instructor","topics","exam_dates","date","description","createMockProcessedDocument","id","original_text","metadata","status","simulateProcessingDelay","Promise","resolve","describe","mockOnUploadComplete","mockOnNext","mockOnBack","mockOnSkip","mockOnResetUploadState","beforeEach","clearAllMocks","it","render","SyllabusUploadStep","onUploadComplete","onNext","onBack","onSkip","onResetUploadState","hasUploadCompleted","expect","screen","getByText","toBeInTheDocument","getByTestId","queryByTestId","not","file","File","type","fileInput","fireEvent","change","target","files","waitFor"],"mappings":";;;;;8DAAkB;wBACiC;oCAChB;yBACd;;;;;;AAErB,wBAAwB;AACxBA,aAAI,CAACC,IAAI,CAAC,mBAAmB,IAAO,CAAA;QAClCC,WAAW,IAAO,CAAA;gBAChBC,MAAMH,aAAI,CAACI,EAAE;YACf,CAAA;IACF,CAAA;AAEA,6BAA6B;AAC7BJ,aAAI,CAACC,IAAI,CAAC,+BAA+B,IAAO,CAAA;QAC9CI,YAAYL,aAAI,CAACI,EAAE,CAAC,IAAM;QAC1BE,0BAA0B;YACxBC,cAAc;YACdC,YAAY;YACZC,QAAQ;gBAAC;gBAAW;aAAU;YAC9BC,YAAY;gBACV;oBAAEC,MAAM;oBAAcC,aAAa;gBAAY;aAChD;QACH;QACAC,6BAA6Bb,aAAI,CAACI,EAAE,CAAC,IAAO,CAAA;gBAC1CU,IAAI;gBACJC,eAAe;gBACfC,UAAU;oBAAET,cAAc;gBAAc;gBACxCU,QAAQ;YACV,CAAA;QACAC,yBAAyBlB,aAAI,CAACI,EAAE,CAAC,IAAMe,QAAQC,OAAO;IACxD,CAAA;AAEAC,SAAS,6BAA6B;IACpC,MAAMC,uBAAuBtB,aAAI,CAACI,EAAE;IACpC,MAAMmB,aAAavB,aAAI,CAACI,EAAE;IAC1B,MAAMoB,aAAaxB,aAAI,CAACI,EAAE;IAC1B,MAAMqB,aAAazB,aAAI,CAACI,EAAE;IAC1B,MAAMsB,yBAAyB1B,aAAI,CAACI,EAAE;IAEtCuB,WAAW;QACT3B,aAAI,CAAC4B,aAAa;IACpB;IAEAC,GAAG,4CAA4C;QAC7CC,IAAAA,cAAM,gBACJ,qBAACC,sCAAkB;YACjBC,kBAAkBV;YAClBW,QAAQV;YACRW,QAAQV;YACRW,QAAQV;YACRW,oBAAoBV;YACpBW,oBAAoB;;QAIxB,yCAAyC;QACzCC,OAAOC,cAAM,CAACC,SAAS,CAAC,kCAAkCC,iBAAiB;QAC3EH,OAAOC,cAAM,CAACC,SAAS,CAAC,iCAAiCC,iBAAiB;QAE1E,oCAAoC;QACpCH,OAAOC,cAAM,CAACG,WAAW,CAAC,gBAAgBD,iBAAiB;IAC7D;IAEAZ,GAAG,gDAAgD;QACjDC,IAAAA,cAAM,gBACJ,qBAACC,sCAAkB;YACjBC,kBAAkBV;YAClBW,QAAQV;YACRW,QAAQV;YACRW,QAAQV;YACRW,oBAAoBV;YACpBW,oBAAoB;;QAIxB,iDAAiD;QACjDC,OAAOC,cAAM,CAACI,aAAa,CAAC,mBAAmBC,GAAG,CAACH,iBAAiB;QAEpE,wDAAwD;QACxD,MAAMI,OAAO,IAAIC,KAAK;YAAC;SAAe,EAAE,qBAAqB;YAAEC,MAAM;QAAkB;QAEvF,yDAAyD;QACzD,MAAMC,YAAYT,cAAM,CAACG,WAAW,CAAC;QAErCO,iBAAS,CAACC,MAAM,CAACF,WAAW;YAAEG,QAAQ;gBAAEC,OAAO;oBAACP;iBAAK;YAAC;QAAE;QAExD,wCAAwC;QACxC,MAAMQ,IAAAA,eAAO,EAAC;YACZf,OAAOC,cAAM,CAACG,WAAW,CAAC,mBAAmBD,iBAAiB;QAChE;IACF;IAEAZ,GAAG,mDAAmD;QACpDC,IAAAA,cAAM,gBACJ,qBAACC,sCAAkB;YACjBC,kBAAkBV;YAClBW,QAAQV;YACRW,QAAQV;YACRW,QAAQV;YACRW,oBAAoBV;YACpBW,oBAAoB;;QAIxB,uEAAuE;QACvEC,OAAOC,cAAM,CAACC,SAAS,CAAC,kCAAkCC,iBAAiB;QAC3EH,OAAOC,cAAM,CAACC,SAAS,CAAC,iCAAiCC,iBAAiB;IAC5E;AACF"}