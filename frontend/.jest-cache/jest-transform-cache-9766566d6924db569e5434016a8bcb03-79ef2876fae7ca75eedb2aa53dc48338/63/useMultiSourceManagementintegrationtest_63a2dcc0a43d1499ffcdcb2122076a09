aea0d75e46a2fd07370018c4334bf0fd
"use strict";
jest.mock('@/lib/axios-api', ()=>({
        axiosApi: {
            get: jest.fn(),
            post: jest.fn()
        }
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _react = require("@testing-library/react");
const _useMultiSourceManagement = /*#__PURE__*/ _interop_require_default(require("../useMultiSourceManagement"));
const _axios = require("../../../../lib/axios");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
describe('useMultiSourceManagement - integration', ()=>{
    const projectId = '203062be-58d0-4f98-bbd4-33b4ce081276';
    beforeEach(()=>{
        _axios.axiosApi.get.mockReset?.()(_axios.axiosApi.post).mockReset?.();
        process.env.NODE_ENV = 'test';
    });
    it('calls expected URLs for flashcards/files/study-materials', async ()=>{
        ;
        _axios.axiosApi.get.mockResolvedValueOnce({
            data: []
        }) // flashcard-decks
        .mockResolvedValueOnce({
            data: []
        }) // files
        .mockResolvedValueOnce({
            data: []
        }) // study-materials
        ;
        const { result } = (0, _react.renderHook)(()=>(0, _useMultiSourceManagement.default)({
                projectId,
                autoLoad: true
            }));
        // allow effects to flush
        await (0, _react.act)(async ()=>{});
        const calls = _axios.axiosApi.get.mock.calls.map((c)=>c[0]);
        expect(calls).toContain(`projects/${projectId}/flashcard-decks/`);
        expect(calls).toContain(`projects/${projectId}/files/`);
        expect(calls).toContain(`projects/${projectId}/study-materials/`);
        expect(result.current.flashcards).toEqual([]);
        expect(result.current.files).toEqual([]);
        expect(result.current.studyMaterials).toEqual([]);
    });
    it('returns empty arrays on network error in test mode', async ()=>{
        const netErr = new Error('Network Error');
        netErr.code = 'ERR_NETWORK';
        _axios.axiosApi.get.mockRejectedValueOnce(netErr).mockRejectedValueOnce(netErr).mockRejectedValueOnce(netErr);
        const { result } = (0, _react.renderHook)(()=>(0, _useMultiSourceManagement.default)({
                projectId,
                autoLoad: true
            }));
        await (0, _react.act)(async ()=>{});
        expect(result.current.flashcards).toEqual([]);
        expect(result.current.files).toEqual([]);
        expect(result.current.studyMaterials).toEqual([]);
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9qYWNvYmhvcm5zdmVubmV2aWsvRG9jdW1lbnRzL0dpdEh1Yi9tYVJlcG9fcm9vdC9mcm9udGVuZC9zcmMvY29tcG9uZW50cy93aXphcmQvc2hhcmVkL19fdGVzdHNfXy91c2VNdWx0aVNvdXJjZU1hbmFnZW1lbnQuaW50ZWdyYXRpb24udGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVuZGVySG9vaywgYWN0IH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdCdcbmltcG9ydCB1c2VNdWx0aVNvdXJjZU1hbmFnZW1lbnQgZnJvbSAnLi4vdXNlTXVsdGlTb3VyY2VNYW5hZ2VtZW50J1xuaW1wb3J0IHsgYXhpb3NBcGkgfSBmcm9tICdAL2xpYi9heGlvcydcblxuamVzdC5tb2NrKCdAL2xpYi9heGlvcy1hcGknLCAoKSA9PiAoeyBheGlvc0FwaTogeyBnZXQ6IGplc3QuZm4oKSwgcG9zdDogamVzdC5mbigpIH0gfSkpXG5cbmRlc2NyaWJlKCd1c2VNdWx0aVNvdXJjZU1hbmFnZW1lbnQgLSBpbnRlZ3JhdGlvbicsICgpID0+IHtcbiAgY29uc3QgcHJvamVjdElkID0gJzIwMzA2MmJlLTU4ZDAtNGY5OC1iYmQ0LTMzYjRjZTA4MTI3NidcblxuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAoYXhpb3NBcGkuZ2V0IGFzIGFueSkubW9ja1Jlc2V0Py4oKVxuICAgIChheGlvc0FwaS5wb3N0IGFzIGFueSkubW9ja1Jlc2V0Py4oKVxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WID0gJ3Rlc3QnXG4gIH0pXG5cbiAgaXQoJ2NhbGxzIGV4cGVjdGVkIFVSTHMgZm9yIGZsYXNoY2FyZHMvZmlsZXMvc3R1ZHktbWF0ZXJpYWxzJywgYXN5bmMgKCkgPT4ge1xuICAgIDsoYXhpb3NBcGkuZ2V0IGFzIGFueSlcbiAgICAgIC5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2UoeyBkYXRhOiBbXSB9KSAvLyBmbGFzaGNhcmQtZGVja3NcbiAgICAgIC5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2UoeyBkYXRhOiBbXSB9KSAvLyBmaWxlc1xuICAgICAgLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7IGRhdGE6IFtdIH0pIC8vIHN0dWR5LW1hdGVyaWFsc1xuXG4gICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlTXVsdGlTb3VyY2VNYW5hZ2VtZW50KHsgcHJvamVjdElkLCBhdXRvTG9hZDogdHJ1ZSB9KSlcblxuICAgIC8vIGFsbG93IGVmZmVjdHMgdG8gZmx1c2hcbiAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge30pXG5cbiAgICBjb25zdCBjYWxscyA9IChheGlvc0FwaS5nZXQgYXMgYW55KS5tb2NrLmNhbGxzLm1hcCgoYzogYW55W10pID0+IGNbMF0pXG4gICAgZXhwZWN0KGNhbGxzKS50b0NvbnRhaW4oYHByb2plY3RzLyR7cHJvamVjdElkfS9mbGFzaGNhcmQtZGVja3MvYClcbiAgICBleHBlY3QoY2FsbHMpLnRvQ29udGFpbihgcHJvamVjdHMvJHtwcm9qZWN0SWR9L2ZpbGVzL2ApXG4gICAgZXhwZWN0KGNhbGxzKS50b0NvbnRhaW4oYHByb2plY3RzLyR7cHJvamVjdElkfS9zdHVkeS1tYXRlcmlhbHMvYClcblxuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5mbGFzaGNhcmRzKS50b0VxdWFsKFtdKVxuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5maWxlcykudG9FcXVhbChbXSlcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuc3R1ZHlNYXRlcmlhbHMpLnRvRXF1YWwoW10pXG4gIH0pXG5cbiAgaXQoJ3JldHVybnMgZW1wdHkgYXJyYXlzIG9uIG5ldHdvcmsgZXJyb3IgaW4gdGVzdCBtb2RlJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IG5ldEVycjogYW55ID0gbmV3IEVycm9yKCdOZXR3b3JrIEVycm9yJylcbiAgICBuZXRFcnIuY29kZSA9ICdFUlJfTkVUV09SSydcbiAgICA7KGF4aW9zQXBpLmdldCBhcyBhbnkpXG4gICAgICAubW9ja1JlamVjdGVkVmFsdWVPbmNlKG5ldEVycilcbiAgICAgIC5tb2NrUmVqZWN0ZWRWYWx1ZU9uY2UobmV0RXJyKVxuICAgICAgLm1vY2tSZWplY3RlZFZhbHVlT25jZShuZXRFcnIpXG5cbiAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VNdWx0aVNvdXJjZU1hbmFnZW1lbnQoeyBwcm9qZWN0SWQsIGF1dG9Mb2FkOiB0cnVlIH0pKVxuXG4gICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHt9KVxuXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmZsYXNoY2FyZHMpLnRvRXF1YWwoW10pXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmZpbGVzKS50b0VxdWFsKFtdKVxuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5zdHVkeU1hdGVyaWFscykudG9FcXVhbChbXSlcbiAgfSlcbn0pXG4iXSwibmFtZXMiOlsiamVzdCIsIm1vY2siLCJheGlvc0FwaSIsImdldCIsImZuIiwicG9zdCIsImRlc2NyaWJlIiwicHJvamVjdElkIiwiYmVmb3JlRWFjaCIsIm1vY2tSZXNldCIsInByb2Nlc3MiLCJlbnYiLCJOT0RFX0VOViIsIml0IiwibW9ja1Jlc29sdmVkVmFsdWVPbmNlIiwiZGF0YSIsInJlc3VsdCIsInJlbmRlckhvb2siLCJ1c2VNdWx0aVNvdXJjZU1hbmFnZW1lbnQiLCJhdXRvTG9hZCIsImFjdCIsImNhbGxzIiwibWFwIiwiYyIsImV4cGVjdCIsInRvQ29udGFpbiIsImN1cnJlbnQiLCJmbGFzaGNhcmRzIiwidG9FcXVhbCIsImZpbGVzIiwic3R1ZHlNYXRlcmlhbHMiLCJuZXRFcnIiLCJFcnJvciIsImNvZGUiLCJtb2NrUmVqZWN0ZWRWYWx1ZU9uY2UiXSwibWFwcGluZ3MiOiI7QUFJQUEsS0FBS0MsSUFBSSxDQUFDLG1CQUFtQixJQUFPLENBQUE7UUFBRUMsVUFBVTtZQUFFQyxLQUFLSCxLQUFLSSxFQUFFO1lBQUlDLE1BQU1MLEtBQUtJLEVBQUU7UUFBRztJQUFFLENBQUE7Ozs7dUJBSnBEO2lGQUNLO3VCQUNaOzs7Ozs7QUFJekJFLFNBQVMsMENBQTBDO0lBQ2pELE1BQU1DLFlBQVk7SUFFbEJDLFdBQVc7UUFDUk4sZUFBUSxDQUFDQyxHQUFHLENBQVNNLFNBQVMsS0FDOUJQLGVBQVEsQ0FBQ0csSUFBSSxFQUFTSTtRQUN2QkMsUUFBUUMsR0FBRyxDQUFDQyxRQUFRLEdBQUc7SUFDekI7SUFFQUMsR0FBRyw0REFBNEQ7O1FBQzNEWCxlQUFRLENBQUNDLEdBQUcsQ0FDWFcscUJBQXFCLENBQUM7WUFBRUMsTUFBTSxFQUFFO1FBQUMsR0FBRyxrQkFBa0I7U0FDdERELHFCQUFxQixDQUFDO1lBQUVDLE1BQU0sRUFBRTtRQUFDLEdBQUcsUUFBUTtTQUM1Q0QscUJBQXFCLENBQUM7WUFBRUMsTUFBTSxFQUFFO1FBQUMsR0FBRyxrQkFBa0I7O1FBRXpELE1BQU0sRUFBRUMsTUFBTSxFQUFFLEdBQUdDLElBQUFBLGlCQUFVLEVBQUMsSUFBTUMsSUFBQUEsaUNBQXdCLEVBQUM7Z0JBQUVYO2dCQUFXWSxVQUFVO1lBQUs7UUFFekYseUJBQXlCO1FBQ3pCLE1BQU1DLElBQUFBLFVBQUcsRUFBQyxXQUFhO1FBRXZCLE1BQU1DLFFBQVEsQUFBQ25CLGVBQVEsQ0FBQ0MsR0FBRyxDQUFTRixJQUFJLENBQUNvQixLQUFLLENBQUNDLEdBQUcsQ0FBQyxDQUFDQyxJQUFhQSxDQUFDLENBQUMsRUFBRTtRQUNyRUMsT0FBT0gsT0FBT0ksU0FBUyxDQUFDLENBQUMsU0FBUyxFQUFFbEIsVUFBVSxpQkFBaUIsQ0FBQztRQUNoRWlCLE9BQU9ILE9BQU9JLFNBQVMsQ0FBQyxDQUFDLFNBQVMsRUFBRWxCLFVBQVUsT0FBTyxDQUFDO1FBQ3REaUIsT0FBT0gsT0FBT0ksU0FBUyxDQUFDLENBQUMsU0FBUyxFQUFFbEIsVUFBVSxpQkFBaUIsQ0FBQztRQUVoRWlCLE9BQU9SLE9BQU9VLE9BQU8sQ0FBQ0MsVUFBVSxFQUFFQyxPQUFPLENBQUMsRUFBRTtRQUM1Q0osT0FBT1IsT0FBT1UsT0FBTyxDQUFDRyxLQUFLLEVBQUVELE9BQU8sQ0FBQyxFQUFFO1FBQ3ZDSixPQUFPUixPQUFPVSxPQUFPLENBQUNJLGNBQWMsRUFBRUYsT0FBTyxDQUFDLEVBQUU7SUFDbEQ7SUFFQWYsR0FBRyxzREFBc0Q7UUFDdkQsTUFBTWtCLFNBQWMsSUFBSUMsTUFBTTtRQUM5QkQsT0FBT0UsSUFBSSxHQUFHO1FBQ1ovQixlQUFRLENBQUNDLEdBQUcsQ0FDWCtCLHFCQUFxQixDQUFDSCxRQUN0QkcscUJBQXFCLENBQUNILFFBQ3RCRyxxQkFBcUIsQ0FBQ0g7UUFFekIsTUFBTSxFQUFFZixNQUFNLEVBQUUsR0FBR0MsSUFBQUEsaUJBQVUsRUFBQyxJQUFNQyxJQUFBQSxpQ0FBd0IsRUFBQztnQkFBRVg7Z0JBQVdZLFVBQVU7WUFBSztRQUV6RixNQUFNQyxJQUFBQSxVQUFHLEVBQUMsV0FBYTtRQUV2QkksT0FBT1IsT0FBT1UsT0FBTyxDQUFDQyxVQUFVLEVBQUVDLE9BQU8sQ0FBQyxFQUFFO1FBQzVDSixPQUFPUixPQUFPVSxPQUFPLENBQUNHLEtBQUssRUFBRUQsT0FBTyxDQUFDLEVBQUU7UUFDdkNKLE9BQU9SLE9BQU9VLE9BQU8sQ0FBQ0ksY0FBYyxFQUFFRixPQUFPLENBQUMsRUFBRTtJQUNsRDtBQUNGIn0=