92a1c60634d9ea0a9afa337f79993356
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useProjectFlashcards", {
    enumerable: true,
    get: function() {
        return useProjectFlashcards;
    }
});
const _react = require("react");
const _axios = require("../../../../../lib/axios");
const _axios1 = /*#__PURE__*/ _interop_require_default(require("axios"));
const _datatransformation = require("../utils/data-transformation");
const _uploadutils = require("../../../../../features/projects/services/upload-utils");
const _projectApi = require("../../../../../lib/projectApi");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function useProjectFlashcards(projectId) {
    const [flashcardSets, setFlashcardSets] = (0, _react.useState)([]);
    const [stats, setStats] = (0, _react.useState)({
        total_sets: 0,
        total_cards: 0,
        due_today: 0,
        learning_cards: 0,
        mastered_cards: 0,
        average_accuracy: 0
    });
    const [isLoading, setIsLoading] = (0, _react.useState)(true);
    const [error, setError] = (0, _react.useState)(null);
    const refreshData = async ()=>{
        const sets = await (0, _datatransformation.refreshFlashcardSets)(projectId);
        setFlashcardSets(sets);
        setStats((0, _datatransformation.calculateFlashcardStats)(sets));
    };
    (0, _react.useEffect)(()=>{
        const fetchFlashcards = async ()=>{
            try {
                setIsLoading(true);
                setError(null);
                await refreshData();
            } catch (err) {
                if (err.name === 'AbortError' || _axios1.default.isCancel?.(err) || err?.name === "CanceledError" || err?.code === "ERR_CANCELED") return;
                console.error("Failed to fetch project flashcards:", err);
                if (err.code === 'ECONNREFUSED' || err.message?.includes('Network Error') || !err.response) {
                    setError("Cannot connect to server. Please check your connection.");
                } else {
                    setError(err.response?.data?.error || "Failed to load flashcards");
                }
            } finally{
                setIsLoading(false);
            }
        };
        if (projectId) {
            fetchFlashcards();
        }
        return ()=>{};
    }, [
        projectId
    ]);
    const createFlashcardSet = async (title)=>{
        try {
            const data = await (0, _projectApi.postProjectScoped)(`flashcard-sets/`, projectId, {
                title
            });
            await refreshData();
            return data;
        } catch (err) {
            console.error("Failed to create flashcard set:", err);
            throw new Error(err.response?.data?.error || "Failed to create flashcard set");
        }
    };
    const generateFlashcards = async (sourceType, numCards = 10, difficulty = "medium")=>{
        try {
            const headers = {};
            if ((0, _uploadutils.isTestMode)()) headers['X-Test-Mode'] = 'true';
            const data = await (0, _projectApi.postProjectScoped)(`flashcards/generate`, projectId, {
                source_type: sourceType,
                num_cards: numCards,
                difficulty: difficulty
            }, _axios.axiosGeneration);
            await refreshData();
            return data;
        } catch (err) {
            console.error("Failed to generate flashcards:", err);
            throw new Error(err.response?.data?.error || "Failed to generate flashcards");
        }
    };
    const getDueCards = async (limit = 20, algorithm)=>{
        try {
            const params = new URLSearchParams();
            params.append("limit", limit.toString());
            if (algorithm) params.append("algorithm", algorithm);
            const res = await (0, _projectApi.getProjectScoped)(`flashcards/due/?${params}`, projectId, _axios.axiosGeneration);
            return res;
        } catch (err) {
            console.error("Failed to get due cards:", err);
            throw new Error(err.response?.data?.error || "Failed to get due cards");
        }
    };
    const submitReview = async (flashcardId, quality, responseTimeSeconds)=>{
        try {
            const response = await _axios.axiosApi.post(`/flashcards/${flashcardId}/review/`, {
                quality,
                response_time_seconds: responseTimeSeconds
            });
            await refreshData();
            return response.data;
        } catch (err) {
            console.error("Failed to submit review:", err);
            throw new Error(err.response?.data?.error || "Failed to submit review");
        }
    };
    const submitBulkReviews = async (reviews)=>{
        try {
            const reviewsData = reviews.map((review)=>({
                    flashcard_id: review.flashcardId,
                    quality: review.quality,
                    response_time_seconds: review.responseTimeSeconds || 0
                }));
            const response = await _axios.axiosApi.post(`/flashcards/reviews/`, {
                reviews: reviewsData
            });
            await refreshData();
            return response.data;
        } catch (err) {
            console.error("Failed to submit bulk reviews:", err);
            throw new Error(err.response?.data?.error || "Failed to submit bulk reviews");
        }
    };
    return {
        flashcardSets,
        stats,
        isLoading,
        error,
        createFlashcardSet,
        generateFlashcards,
        getDueCards,
        submitReview,
        submitBulkReviews
    };
}

//# sourceMappingURL=data:application/json;base64,