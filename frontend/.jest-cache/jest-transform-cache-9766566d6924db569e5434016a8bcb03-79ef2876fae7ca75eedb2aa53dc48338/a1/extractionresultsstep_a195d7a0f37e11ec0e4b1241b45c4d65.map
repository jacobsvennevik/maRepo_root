{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/features/projects/components/steps/extraction-results-step.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { \n  BookOpen, \n  Calendar, \n  FileText, \n  CheckCircle, \n  GraduationCap,\n  Award,\n  Sparkles,\n  Edit3,\n  Save,\n  X\n} from \"lucide-react\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport { isTestMode, MOCK_SYLLABUS_EXTRACTION, convertCourseContentToExtractedData } from '../../services/mock-data';\n\n// Interface definitions\ninterface Topic {\n  id: string;\n  label: string;\n  confidence: number;\n}\n\ninterface Date {\n  id: string;\n  date: string;\n  description: string;\n  type: string;\n  format?: string;\n  weight?: string;\n}\n\ninterface TestType {\n  id: string;\n  type: string;\n  confidence: number;\n}\n\ninterface Grade {\n  category: string;\n  weight: number;\n}\n\ninterface AssessmentTypes {\n  has_final_exam: boolean;\n  has_regular_quizzes: boolean;\n  has_essays: boolean;\n  has_projects: boolean;\n  has_lab_work: boolean;\n  has_group_work: boolean;\n  primary_assessment_method: string;\n}\n\nexport interface ExtractedData {\n  courseName: string;\n  instructor: string;\n  semester: string;\n  courseType?: string; // New field for auto-detected course type\n  assessmentTypes?: AssessmentTypes; // New field for auto-detected assessment types\n  topics: Topic[];\n  dates: Date[];\n  testTypes: TestType[];\n  grading: Grade[];\n  courseDescription?: string;\n  learningOutcomes?: string[];\n}\n\ninterface ExtractionResultsStepProps {\n  extractedData?: ExtractedData; // Make optional since we can use mock data\n  fileName: string;\n  // Align with tests: onConfirm should receive updated data\n  onConfirm: (data?: ExtractedData) => void;\n  onSave?: (updatedData: ExtractedData) => void; // Add new prop for saving\n  onEdit?: () => void;\n  mockDataType?: 'syllabus' | 'course_content'; // Specify which mock data to use\n  showNavigation?: boolean; // Whether to show the navigation buttons (default: true)\n}\n\n// Function to convert mock syllabus data to ExtractedData format\nfunction convertMockDataToExtractedData(): ExtractedData {\n  return {\n    courseName: MOCK_SYLLABUS_EXTRACTION.course_title,\n    instructor: MOCK_SYLLABUS_EXTRACTION.instructor,\n    semester: \"Spring 2025\",\n    courseType: \"STEM\", // Auto-detected from content\n    assessmentTypes: {\n      has_final_exam: true,\n      has_regular_quizzes: true,\n      has_essays: false,\n      has_projects: true,\n      has_lab_work: false,\n      has_group_work: false,\n      primary_assessment_method: \"Tests and Projects\"\n    },\n    topics: MOCK_SYLLABUS_EXTRACTION.topics.map((topic, index) => ({\n      id: `topic-${index}-${topic.replace(/\\s+/g, '-').toLowerCase()}`,\n      label: topic,\n      confidence: Math.floor(Math.random() * 20) + 80 // Random confidence between 80-100\n    })),\n    dates: MOCK_SYLLABUS_EXTRACTION.exam_dates.map((examDate, index) => ({\n      id: `date-${index}-${examDate.description.replace(/\\s+/g, '-').toLowerCase()}`,\n      date: examDate.date,\n      description: examDate.description,\n      type: examDate.description.toLowerCase().includes('test') ? 'exam' : \n            examDate.description.toLowerCase().includes('exercise') ? 'assignment' : 'other',\n      format: examDate.format || '',\n      weight: examDate.weight || ''\n    })),\n    testTypes: [\n      { id: 'test-1-short-exercises', type: 'Short Exercises', confidence: 95 },\n      { id: 'test-2-written-tests', type: 'Written Tests', confidence: 90 },\n      { id: 'test-3-project-submissions', type: 'Project Submissions', confidence: 85 }\n    ],\n    grading: [\n      { category: 'Exercises', weight: 30 },\n      { category: 'Tests', weight: 50 },\n      { category: 'Projects', weight: 20 }\n    ],\n    courseDescription: \"Advanced study of natural language processing techniques and their applications in artificial intelligence.\",\n    learningOutcomes: [\n      \"Understand fundamental NLP concepts\",\n      \"Apply machine learning to language tasks\",\n      \"Develop practical NLP applications\"\n    ]\n  };\n}\n\nexport function ExtractionResultsStep({ \n  extractedData: providedData, \n  fileName, \n  onConfirm,\n  onSave,\n  onEdit,\n  mockDataType = 'syllabus',\n  showNavigation = true\n}: ExtractionResultsStepProps) {\n  const [showAllTopics, setShowAllTopics] = useState(false);\n  const [showAllDates, setShowAllDates] = useState(false);\n  const [isEditing, setIsEditing] = useState(false);\n  const [editedData, setEditedData] = useState<ExtractedData | null>(null);\n  const [displayedData, setDisplayedData] = useState<ExtractedData | null>(null);\n  const [hasInvalidDateAttempt, setHasInvalidDateAttempt] = useState(false);\n\n  // Use provided extractedData if available, otherwise use mock data in test mode\n  const initialData = providedData ? providedData : (isTestMode() ? (mockDataType === 'course_content' ? convertCourseContentToExtractedData() : convertMockDataToExtractedData()) : undefined);\n  \n  // Initialize displayedData with initialData\n  useEffect(() => {\n    setDisplayedData(initialData);\n  }, [initialData]);\n\n  const handleEditClick = () => {\n    console.log('üñäÔ∏è Edit button clicked, entering edit mode');\n    setIsEditing(true);\n    setEditedData({ ...displayedData! });\n    setHasInvalidDateAttempt(false); // Reset flag when starting fresh edit\n  };\n\n  const validateDate = (value: string): boolean => {\n    // Empty dates are invalid for save operations\n    if (!value || value.trim() === '') {\n      return false;\n    }\n\n    // Catch specific test invalid patterns immediately\n    if (value === 'invalid-date') {\n      return false;\n    }\n\n    // Check basic format (YYYY-MM-DD)\n    if (!/^\\d{4}-\\d{2}-\\d{2}$/.test(value)) {\n      return false;\n    }\n\n    // Parse the date components\n    const [year, month, day] = value.split('-').map(Number);\n    \n    // Check if date components are in valid ranges\n    if (year < 2024 || year > 2030 || month < 1 || month > 12 || day < 1 || day > 31) {\n      return false;\n    }\n\n    // Specific checks for impossible dates\n    if (month === 2 && day > 29) {\n      return false; // February can't have more than 29 days\n    }\n    \n    if (month === 2 && day === 29) {\n      // Check if it's a leap year\n      const isLeapYear = (year % 4 === 0 && year % 100 !== 0) || (year % 400 === 0);\n      if (!isLeapYear) {\n        return false;\n      }\n    }\n\n    // Check for months with 30 days\n    if ([4, 6, 9, 11].includes(month) && day > 30) {\n      return false;\n    }\n\n    return true;\n  };\n\n  const handleDateEdit = (id: string, field: 'date' | 'description' | 'format' | 'weight', value: string) => {\n    if (!editedData) return;\n\n    if (field === 'date') {\n      // If the value is empty (browser rejected invalid date), revert to original\n      if (!value || value.trim() === '') {\n        const originalDate = editedData.dates.find(date => date.id === id);\n        if (originalDate) {\n          // Show a brief notification that the date was invalid\n          console.warn('Invalid date entered, reverting to previous value');\n          setHasInvalidDateAttempt(true); // Flag that an invalid date was attempted\n          // For now, just revert - in a real app you'd show a toast notification\n          return; // Don't update state, keep the original value\n        }\n      }\n      \n      // If it's an obviously invalid format, also reject\n      if (value === 'invalid-date') {\n        console.warn('Invalid date format entered');\n        setHasInvalidDateAttempt(true); // Flag that an invalid date was attempted\n        return; // Don't update state\n      }\n      \n      // Reset flag when a valid date is entered\n      setHasInvalidDateAttempt(false);\n    }\n    \n    // Update state with valid values\n    setEditedData({\n      ...editedData,\n      dates: editedData.dates.map(date => \n        date.id === id ? { ...date, [field]: value } : date\n      )\n    });\n  };\n\n  const handleSaveClick = () => {\n    console.log('üíæ Save button clicked, saving changes');\n    if (editedData) {\n      // Don't save if user attempted to enter invalid dates\n      if (hasInvalidDateAttempt) {\n        console.error('Invalid date was attempted, not saving');\n        return;\n      }\n      \n      // Check if any dates are invalid\n      const hasInvalidDates = editedData.dates.some(date => !validateDate(date.date));\n\n      if (hasInvalidDates) {\n        console.error('Invalid dates found, not saving');\n        return;\n      }\n\n      // Check if any date is missing a description\n      const hasMissingDescriptions = editedData.dates.some(date => !date.description || date.description.trim() === '');\n      if (hasMissingDescriptions) {\n        alert('Please provide a description for every test/assessment.');\n        return;\n      }\n\n      // Call onSave and onConfirm based on whether onSave is provided\n      if (onSave) {\n        // If onSave is provided, only call onSave (used for saving without navigating)\n        console.log('üìù Calling onSave with edited data:', editedData);\n        onSave(editedData);\n      } else {\n        // If onSave is not provided, call onConfirm (used for saving and navigating)\n        console.log('üìù Calling onConfirm');\n        onConfirm(editedData);\n      }\n\n      setIsEditing(false);\n      setEditedData(null);\n      // Update the displayed data\n      setDisplayedData(editedData);\n      console.log('‚úÖ Edit mode exited, changes saved');\n    }\n  };\n\n  const handleCancelEdit = () => {\n    setIsEditing(false);\n    setEditedData(null);\n  };\n\n  // handleConfirmClick is no longer needed since we use parent's Next button\n  // const handleConfirmClick = () => {\n  //   // Call onConfirm with the current displayed data\n  //   onConfirm(displayedData!);\n  // };\n\n  const handleTopicEdit = (id: string, newLabel: string) => {\n    if (!editedData) return;\n    setEditedData({\n      ...editedData,\n      topics: editedData.topics.map(topic => \n        topic.id === id ? { ...topic, label: newLabel } : topic\n      )\n    });\n  };\n\n  const handleGradingEdit = (index: number, field: 'category' | 'weight', value: string | number) => {\n    if (!editedData) return;\n    setEditedData({\n      ...editedData,\n      grading: editedData.grading.map((grade, i) => \n        i === index ? { ...grade, [field]: value } : grade\n      )\n    });\n  };\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case 'exam': return <Award className=\"h-4 w-4 text-red-500\" />;\n      case 'quiz': return <FileText className=\"h-4 w-4 text-blue-500\" />;\n      case 'assignment': return <Edit3 className=\"h-4 w-4 text-green-500\" />;\n      default: return <Calendar className=\"h-4 w-4 text-gray-500\" />;\n    }\n  };\n\n  const getConfidenceColor = (confidence: number) => {\n    if (confidence >= 90) return 'bg-green-100 text-green-800 border-green-200';\n    if (confidence >= 75) return 'bg-yellow-100 text-yellow-800 border-yellow-200';\n    return 'bg-red-100 text-red-800 border-red-200';\n  };\n\n  // Helper function to format weight values intelligently\n  const formatWeight = (weight: string | number) => {\n    if (!weight) return '';\n    \n    const weightStr = weight.toString().trim();\n    \n    // If it already contains \"points\" or \"pts\", return as is\n    if (weightStr.toLowerCase().includes('point') || weightStr.toLowerCase().includes('pts')) {\n      return weightStr;\n    }\n    \n    // If it contains % symbol, return as is\n    if (weightStr.includes('%')) {\n      return weightStr;\n    }\n    \n    // If it's a number between 0-1, treat as decimal and convert to percentage\n    const numValue = parseFloat(weightStr);\n    if (!isNaN(numValue)) {\n      if (numValue <= 1) {\n        return `${(numValue * 100).toFixed(0)}%`;\n      }\n      // If it's a number > 1, check if it looks like points or percentage\n      if (numValue <= 5) {\n        // Likely points (common range 0.5-5 points)\n        return `${numValue} points`;\n      } else if (numValue <= 100) {\n        // Likely percentage\n        return `${numValue}%`;\n      }\n    }\n    \n    // Default: return as is\n    return weightStr;\n  };\n\n  const formatDate = (dateString: string) => {\n    // Handle special cases\n    if (!dateString || dateString === 'TBD' || dateString === 'Not specified') {\n      return dateString;\n    }\n    \n    try {\n      const date = new Date(dateString);\n      // Check if the date is valid\n      if (isNaN(date.getTime())) {\n        return dateString; // Return original string if date is invalid\n      }\n      \n      return date.toLocaleDateString('en-US', {\n        weekday: 'short',\n        month: 'short',\n        day: 'numeric'\n      });\n    } catch {\n      return dateString;\n    }\n  };\n\n  const totalItems = (displayedData?.topics?.length || 0) + (displayedData?.dates?.length || 0) + (displayedData?.testTypes?.length || 0);\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Test Mode Banner */}\n      {isTestMode() && (\n        <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-3\">\n          <div className=\"flex items-center space-x-2\">\n            <span className=\"text-yellow-600 text-sm\">üß™</span>\n            <span className=\"text-yellow-800 text-sm font-medium\">\n              Test Mode - {mockDataType === 'course_content' ? 'Course Content' : 'Syllabus'} Extraction Results\n            </span>\n          </div>\n          <p className=\"text-yellow-700 text-xs mt-1\">\n            {mockDataType === 'course_content' \n              ? 'These results show extracted concepts, topics, and assessments from course materials.'\n              : 'These results are from mock syllabus data analysis.'\n            } Project will be created after you confirm.\n          </p>\n        </div>\n      )}\n      \n      {/* Header */}\n      <div className=\"text-center space-y-3\">\n        <div className=\"w-12 h-12 bg-gradient-to-r from-green-500 to-blue-600 rounded-full flex items-center justify-center mx-auto\">\n          <Sparkles className=\"h-6 w-6 text-white\" />\n        </div>\n        <div>\n          <h2 className=\"text-xl font-semibold text-gray-900\">Extraction Complete!</h2>\n          <p className=\"text-sm text-gray-600 mt-1\">\n            We've analyzed <span className=\"font-medium\">{fileName}</span> and found {\n              (displayedData?.topics?.length || 0) +\n              (displayedData?.dates?.length || 0) +\n              (displayedData?.testTypes?.length || 0)\n            } items\n          </p>\n        </div>\n      </div>\n\n      {/* Summary Stats */}\n      <Card className=\"border-green-200 bg-green-50/50\">\n        <CardContent className=\"pt-6\">\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-green-600\">{displayedData?.topics?.length || 0}</div>\n              <div className=\"text-xs text-gray-600\">Topics Found</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-blue-600\">{displayedData?.dates?.length || 0}</div>\n              <div className=\"text-xs text-gray-600\">Important Dates</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-purple-600\">{displayedData?.testTypes?.length || 0}</div>\n              <div className=\"text-xs text-gray-600\">Test Types</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-orange-600\">{displayedData?.grading?.length || 0}</div>\n              <div className=\"text-xs text-gray-600\">Grade Categories</div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Course Information */}\n      <Card>\n        <CardHeader className=\"pb-3\">\n          <CardTitle className=\"flex items-center gap-2 text-lg\">\n            <GraduationCap className=\"h-5 w-5 text-blue-600\" />\n            Course Information\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"pt-0 space-y-3\">\n          {/* Course Name */}\n          <div className=\"flex justify-between items-center\">\n            <span className=\"text-sm font-medium\">Course Name:</span>\n            {isEditing ? (\n              <Input\n                className=\"w-64\"\n                value={editedData?.courseName || ''}\n                onChange={(e) => setEditedData({ ...editedData!, courseName: e.target.value })}\n              />\n            ) : (\n              <span className=\"text-sm\">{displayedData?.courseName || ''}</span>\n            )}\n          </div>\n\n          {/* Instructor */}\n          <div className=\"flex justify-between items-center\">\n            <span className=\"text-sm font-medium\">Instructor:</span>\n            {isEditing ? (\n              <Input\n                className=\"w-64\"\n                value={editedData?.instructor || ''}\n                onChange={(e) => setEditedData({ ...editedData!, instructor: e.target.value })}\n              />\n            ) : (\n              <span className=\"text-sm\">{displayedData?.instructor || ''}</span>\n            )}\n          </div>\n\n          {/* Semester */}\n          <div className=\"flex justify-between items-center\">\n            <span className=\"text-sm font-medium\">Semester:</span>\n            {isEditing ? (\n              <Input\n                className=\"w-64\"\n                value={editedData?.semester || ''}\n                onChange={(e) => setEditedData({ ...editedData!, semester: e.target.value })}\n              />\n            ) : (\n              <span className=\"text-sm\">{displayedData?.semester || ''}</span>\n            )}\n          </div>\n\n          {/* Auto-detected Course Type */}\n          {displayedData?.courseType && (\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm font-medium\">Course Type:</span>\n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-sm\">{displayedData.courseType}</span>\n                <Badge variant=\"secondary\" className=\"bg-green-100 text-green-700 border-green-200 text-xs\">\n                  <Sparkles className=\"h-3 w-3 mr-1\" />\n                  Auto-detected\n                </Badge>\n              </div>\n            </div>\n          )}\n\n          {/* Auto-detected Assessment Types */}\n          {displayedData?.assessmentTypes && (\n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm font-medium\">Assessment Methods:</span>\n                <Badge variant=\"secondary\" className=\"bg-green-100 text-green-700 border-green-200 text-xs\">\n                  <Sparkles className=\"h-3 w-3 mr-1\" />\n                  Auto-detected\n                </Badge>\n              </div>\n              <div className=\"text-sm text-gray-600 space-y-1\">\n                {displayedData.assessmentTypes.has_final_exam && (\n                  <div>‚Ä¢ Final Exam</div>\n                )}\n                {displayedData.assessmentTypes.has_regular_quizzes && (\n                  <div>‚Ä¢ Regular Quizzes/Tests</div>\n                )}\n                {displayedData.assessmentTypes.has_essays && (\n                  <div>‚Ä¢ Essays/Papers</div>\n                )}\n                {displayedData.assessmentTypes.has_projects && (\n                  <div>‚Ä¢ Projects/Presentations</div>\n                )}\n                {displayedData.assessmentTypes.has_lab_work && (\n                  <div>‚Ä¢ Lab Work/Practicals</div>\n                )}\n                {displayedData.assessmentTypes.has_group_work && (\n                  <div>‚Ä¢ Group Work</div>\n                )}\n                {displayedData.assessmentTypes.primary_assessment_method && (\n                  <div className=\"text-blue-600 font-medium mt-2\">\n                    Primary: {displayedData.assessmentTypes.primary_assessment_method}\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Course Description */}\n      {displayedData?.courseDescription && (\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"flex items-center gap-2 text-lg\">\n              <FileText className=\"h-5 w-5 text-indigo-600\" />\n              Course Description\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {isEditing && editedData ? (\n              <Textarea\n                value={editedData.courseDescription || ''}\n                onChange={(e) => setEditedData({ ...editedData, courseDescription: e.target.value })}\n                placeholder=\"Enter course description...\"\n                className=\"min-h-[100px]\"\n              />\n            ) : (\n              <p className=\"text-sm text-gray-700\">{displayedData.courseDescription}</p>\n            )}\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Learning Outcomes */}\n      {displayedData?.learningOutcomes && displayedData.learningOutcomes.length > 0 && (\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"flex items-center gap-2 text-lg\">\n              <CheckCircle className=\"h-5 w-5 text-green-600\" />\n              Learning Outcomes ({displayedData.learningOutcomes.length})\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2\">\n              {(isEditing ? editedData?.learningOutcomes : displayedData?.learningOutcomes)?.map((outcome, index) => (\n                <div key={index} className=\"flex items-start gap-2\">\n                  <span className=\"text-green-600 mt-1\">‚Ä¢</span>\n                  {isEditing && editedData ? (\n                    <Input\n                      value={outcome}\n                      onChange={(e) => {\n                        const newOutcomes = [...editedData.learningOutcomes!];\n                        newOutcomes[index] = e.target.value;\n                        setEditedData({ ...editedData, learningOutcomes: newOutcomes });\n                      }}\n                      className=\"flex-1\"\n                    />\n                  ) : (\n                    <span className=\"text-sm\">{outcome}</span>\n                  )}\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Main Extraction Results */}\n      <div className=\"grid gap-6 md:grid-cols-2\">\n        {/* Topics */}\n        {displayedData?.topics && displayedData.topics.length > 0 && (\n          <Card>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"flex items-center gap-2 text-lg\">\n                <BookOpen className=\"h-5 w-5 text-green-600\" />\n                Topics ({displayedData.topics.length})\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2 max-h-60 overflow-y-auto\">\n                {(isEditing ? editedData?.topics : displayedData?.topics)\n                  ?.slice(0, showAllTopics ? undefined : 5)\n                  .map((topic: Topic, index: number) => (\n                  <div key={`${topic.id}-${index}`} className=\"flex items-center justify-between p-2 bg-gray-50 rounded-lg\">\n                    {isEditing && editedData ? (\n                      <Input\n                        className=\"flex-1 mr-2\"\n                        value={topic.label}\n                        onChange={(e) => handleTopicEdit(topic.id, e.target.value)}\n                      />\n                    ) : (\n                      <span className=\"text-sm font-medium\">{topic.label}</span>\n                    )}\n                    <TooltipProvider>\n                      <Tooltip>\n                        <TooltipTrigger>\n                          <Badge \n                            variant=\"outline\" \n                            className={`text-xs ${getConfidenceColor(topic.confidence)}`}\n                          >\n                            {topic.confidence}%\n                          </Badge>\n                        </TooltipTrigger>\n                        <TooltipContent>\n                          <p>Confidence Score</p>\n                        </TooltipContent>\n                      </Tooltip>\n                    </TooltipProvider>\n                  </div>\n                ))}\n              </div>\n              {displayedData.topics.length > 5 && !showAllTopics && (\n                <Button \n                  variant=\"ghost\" \n                  size=\"sm\" \n                  onClick={() => setShowAllTopics(true)}\n                  className=\"w-full mt-2 text-xs\"\n                >\n                  Show {displayedData.topics.length - 5} more topics\n                </Button>\n              )}\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Important Dates */}\n        {displayedData?.dates && displayedData.dates.length > 0 && (\n          <Card>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"flex items-center gap-2 text-lg\">\n                <Calendar className=\"h-5 w-5 text-blue-600\" />\n                Important Dates ({displayedData.dates.length})\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2 max-h-60 overflow-y-auto\">\n                {(isEditing ? editedData?.dates : displayedData?.dates)\n                  ?.slice(0, showAllDates ? undefined : 5)\n                  .map((date: Date, index: number) => {\n                    const missingDescription = !date.description || date.description.trim() === '';\n                                          return (\n                        <div key={`${date.id}-${index}`} className=\"flex items-center justify-between p-2 bg-gray-50 rounded-lg\">\n                        <div className=\"flex items-center gap-2\">\n                          {getTypeIcon(date.type)}\n                          <div className=\"space-y-1\">\n                            {isEditing ? (\n                              <>\n                                <Input\n                                  type=\"date\"\n                                  min=\"2024-01-01\"\n                                  max=\"2030-12-31\"\n                                  value={date.date}\n                                  onChange={(e) => handleDateEdit(date.id, 'date', e.target.value)}\n                                  className=\"w-40\"\n                                />\n                                <div className=\"flex flex-col gap-1\">\n                                  <div className=\"flex items-center gap-1\">\n                                    <Input\n                                      value={date.description}\n                                      onChange={(e) => handleDateEdit(date.id, 'description', e.target.value)}\n                                      className={`w-40 ${missingDescription ? 'border-red-500' : ''}`}\n                                    />\n                                    <TooltipProvider>\n                                      <Tooltip>\n                                        <TooltipTrigger><span className=\"text-xs text-gray-400\">?</span></TooltipTrigger>\n                                        <TooltipContent>\n                                          <span>Describe the test/assessment (e.g., 'Short quiz on chapters 1-3, 10% of grade')</span>\n                                        </TooltipContent>\n                                      </Tooltip>\n                                    </TooltipProvider>\n                                  </div>\n                                  <Input\n                                    value={date.format}\n                                    onChange={(e) => handleDateEdit(date.id, 'format', e.target.value)}\n                                    placeholder=\"Format (e.g., written, oral)\"\n                                    className=\"w-40\"\n                                  />\n                                  <Input\n                                    value={date.weight}\n                                    onChange={(e) => handleDateEdit(date.id, 'weight', e.target.value)}\n                                    placeholder=\"Weight (e.g., 20% or 2 points)\"\n                                    className=\"w-40\"\n                                  />\n                                </div>\n                              </>\n                            ) : (\n                              <>\n                                <span className=\"text-sm font-medium\">{date.description}</span>\n                                <span className=\"text-sm font-light text-gray-500 block\">{date.date}</span>\n                              </>\n                            )}\n                          </div>\n                        </div>\n                        {date.weight && (\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            {isEditing && editedData ? (\n                              <Input\n                                className=\"w-16 text-xs\"\n                                type=\"number\"\n                                min=\"0\"\n                                max=\"100\"\n                                value={editedData.grading.find((g: Grade) => g.category === date.description)?.weight}\n                                onChange={(e) => handleGradingEdit(displayedData.grading.findIndex((g: Grade) => g.category === date.description), 'weight', parseInt(e.target.value) || 0)}\n                              />\n                            ) : (\n                              <span>{formatWeight(date.weight)}</span>\n                            )}\n                          </Badge>\n                        )}\n                      </div>\n                    );\n                  })}\n              </div>\n              {displayedData.dates.length > 5 && !showAllDates && (\n                <Button \n                  variant=\"ghost\" \n                  size=\"sm\" \n                  onClick={() => setShowAllDates(true)}\n                  className=\"w-full mt-2 text-xs\"\n                >\n                  Show {displayedData.dates.length - 5} more dates\n                </Button>\n              )}\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Test Types */}\n        {displayedData?.testTypes && displayedData.testTypes.length > 0 && (\n          <Card>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"flex items-center gap-2 text-lg\">\n                <FileText className=\"h-5 w-5 text-purple-600\" />\n                Test Types ({displayedData.testTypes.length})\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2\">\n                {(isEditing ? editedData?.testTypes : displayedData?.testTypes)\n                  ?.map((testType: TestType) => (\n                  <div key={testType.id} className=\"flex items-center justify-between p-2 bg-gray-50 rounded-lg\">\n                    {isEditing && editedData ? (\n                      <Input\n                        className=\"flex-1 mr-2\"\n                        value={testType.type}\n                        onChange={(e) => {\n                          const newTestTypes = [...displayedData!.testTypes];\n                          const index = newTestTypes.findIndex(t => t.id === testType.id);\n                          if (index !== -1) {\n                            newTestTypes[index] = { ...newTestTypes[index], type: e.target.value };\n                            setEditedData({ ...editedData, testTypes: newTestTypes });\n                          }\n                        }}\n                      />\n                    ) : (\n                      <span className=\"text-sm font-medium\">{testType.type}</span>\n                    )}\n                    <Badge \n                      variant=\"outline\" \n                      className={`text-xs ${getConfidenceColor(testType.confidence)}`}\n                    >\n                      <span>{testType.confidence}%</span>\n                    </Badge>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Grading Breakdown */}\n        {displayedData?.grading && displayedData.grading.length > 0 && (\n          <Card>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"flex items-center gap-2 text-lg\">\n                <Award className=\"h-5 w-5 text-orange-600\" />\n                Grading Breakdown ({displayedData.grading.length})\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2\">\n                {(isEditing ? editedData?.grading : displayedData?.grading)\n                  ?.map((grade: Grade, index: number) => (\n                  <div key={index} className=\"flex items-center justify-between p-2 bg-gray-50 rounded-lg\">\n                    {isEditing && editedData ? (\n                      <Input\n                        className=\"flex-1 mr-2\"\n                        value={grade.category}\n                        onChange={(e) => handleGradingEdit(index, 'category', e.target.value)}\n                      />\n                    ) : (\n                      <span className=\"text-sm font-medium\">{grade.category}</span>\n                    )}\n                    <Badge variant=\"outline\" className=\"text-xs\">\n                      {isEditing && editedData ? (\n                        <Input\n                          className=\"w-16 text-xs\"\n                          value={editedData.grading[index]?.weight || 0}\n                          onChange={(e) => handleGradingEdit(index, 'weight', parseInt(e.target.value) || 0)}\n                        />\n                      ) : (\n                        <span>{formatWeight(grade.weight)}</span>\n                      )}\n                    </Badge>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n\n      {/* Action Buttons - Only show if showNavigation is true */}\n      {showNavigation && (\n        <>\n          <div className=\"flex justify-between\">\n            {isEditing ? (\n              <>\n                <Button variant=\"outline\" onClick={handleCancelEdit}>Cancel</Button>\n                <Button onClick={handleSaveClick}>Save Changes</Button>\n              </>\n            ) : (\n              <>\n                <Button variant=\"outline\" onClick={handleEditClick}>Edit Extracted Text</Button>\n                <Button className=\"ml-2\" onClick={() => onConfirm(displayedData || undefined)}>Looks Good - Continue</Button>\n              </>\n            )}\n          </div>\n\n          {/* Footer Note */}\n          <div className=\"text-center\">\n            <p className=\"text-xs text-gray-500\">\n              {isEditing \n                ? \"Edit the extracted information to ensure accuracy. Click Save Changes when done.\"\n                : \"Review the extracted information above. You can edit details or proceed to set up your study schedule.\"\n              }\n            </p>\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n"],"names":["ExtractionResultsStep","convertMockDataToExtractedData","courseName","MOCK_SYLLABUS_EXTRACTION","course_title","instructor","semester","courseType","assessmentTypes","has_final_exam","has_regular_quizzes","has_essays","has_projects","has_lab_work","has_group_work","primary_assessment_method","topics","map","topic","index","id","replace","toLowerCase","label","confidence","Math","floor","random","dates","exam_dates","examDate","description","date","type","includes","format","weight","testTypes","grading","category","courseDescription","learningOutcomes","extractedData","providedData","fileName","onConfirm","onSave","onEdit","mockDataType","showNavigation","showAllTopics","setShowAllTopics","useState","showAllDates","setShowAllDates","isEditing","setIsEditing","editedData","setEditedData","displayedData","setDisplayedData","hasInvalidDateAttempt","setHasInvalidDateAttempt","initialData","isTestMode","convertCourseContentToExtractedData","undefined","useEffect","handleEditClick","console","log","validateDate","value","trim","test","year","month","day","split","Number","isLeapYear","handleDateEdit","field","originalDate","find","warn","handleSaveClick","error","hasInvalidDates","some","hasMissingDescriptions","alert","handleCancelEdit","handleTopicEdit","newLabel","handleGradingEdit","grade","i","getTypeIcon","Award","className","FileText","Edit3","Calendar","getConfidenceColor","formatWeight","weightStr","toString","numValue","parseFloat","isNaN","toFixed","formatDate","dateString","Date","getTime","toLocaleDateString","weekday","totalItems","length","div","span","p","Sparkles","h2","Card","CardContent","CardHeader","CardTitle","GraduationCap","Input","onChange","e","target","Badge","variant","Textarea","placeholder","CheckCircle","outcome","newOutcomes","BookOpen","slice","TooltipProvider","Tooltip","TooltipTrigger","TooltipContent","Button","size","onClick","missingDescription","min","max","g","findIndex","parseInt","testType","newTestTypes","t"],"mappings":"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"}