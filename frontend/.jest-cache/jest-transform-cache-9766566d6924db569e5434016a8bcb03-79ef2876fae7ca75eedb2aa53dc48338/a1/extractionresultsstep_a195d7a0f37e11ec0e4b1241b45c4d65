d4bc191eca0c50942ac495e283e2782b
'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "ExtractionResultsStep", {
    enumerable: true,
    get: function() {
        return ExtractionResultsStep;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _card = require("../../../../components/ui/card");
const _button = require("../../../../components/ui/button");
const _badge = require("../../../../components/ui/badge");
const _input = require("../../../../components/ui/input");
const _textarea = require("../../../../components/ui/textarea");
const _lucidereact = require("lucide-react");
const _tooltip = require("../../../../components/ui/tooltip");
const _mockdata = require("../../services/mock-data");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
// Function to convert mock syllabus data to ExtractedData format
function convertMockDataToExtractedData() {
    return {
        courseName: _mockdata.MOCK_SYLLABUS_EXTRACTION.course_title,
        instructor: _mockdata.MOCK_SYLLABUS_EXTRACTION.instructor,
        semester: "Spring 2025",
        courseType: "STEM",
        assessmentTypes: {
            has_final_exam: true,
            has_regular_quizzes: true,
            has_essays: false,
            has_projects: true,
            has_lab_work: false,
            has_group_work: false,
            primary_assessment_method: "Tests and Projects"
        },
        topics: _mockdata.MOCK_SYLLABUS_EXTRACTION.topics.map((topic, index)=>({
                id: `topic-${index}-${topic.replace(/\s+/g, '-').toLowerCase()}`,
                label: topic,
                confidence: Math.floor(Math.random() * 20) + 80 // Random confidence between 80-100
            })),
        dates: _mockdata.MOCK_SYLLABUS_EXTRACTION.exam_dates.map((examDate, index)=>({
                id: `date-${index}-${examDate.description.replace(/\s+/g, '-').toLowerCase()}`,
                date: examDate.date,
                description: examDate.description,
                type: examDate.description.toLowerCase().includes('test') ? 'exam' : examDate.description.toLowerCase().includes('exercise') ? 'assignment' : 'other',
                format: examDate.format || '',
                weight: examDate.weight || ''
            })),
        testTypes: [
            {
                id: 'test-1-short-exercises',
                type: 'Short Exercises',
                confidence: 95
            },
            {
                id: 'test-2-written-tests',
                type: 'Written Tests',
                confidence: 90
            },
            {
                id: 'test-3-project-submissions',
                type: 'Project Submissions',
                confidence: 85
            }
        ],
        grading: [
            {
                category: 'Exercises',
                weight: 30
            },
            {
                category: 'Tests',
                weight: 50
            },
            {
                category: 'Projects',
                weight: 20
            }
        ],
        courseDescription: "Advanced study of natural language processing techniques and their applications in artificial intelligence.",
        learningOutcomes: [
            "Understand fundamental NLP concepts",
            "Apply machine learning to language tasks",
            "Develop practical NLP applications"
        ]
    };
}
function ExtractionResultsStep({ extractedData: providedData, fileName, onConfirm, onSave, onEdit, mockDataType = 'syllabus', showNavigation = true }) {
    const [showAllTopics, setShowAllTopics] = (0, _react.useState)(false);
    const [showAllDates, setShowAllDates] = (0, _react.useState)(false);
    const [isEditing, setIsEditing] = (0, _react.useState)(false);
    const [editedData, setEditedData] = (0, _react.useState)(null);
    const [displayedData, setDisplayedData] = (0, _react.useState)(null);
    const [hasInvalidDateAttempt, setHasInvalidDateAttempt] = (0, _react.useState)(false);
    // Use provided extractedData if available, otherwise use mock data in test mode
    const initialData = providedData ? providedData : (0, _mockdata.isTestMode)() ? mockDataType === 'course_content' ? (0, _mockdata.convertCourseContentToExtractedData)() : convertMockDataToExtractedData() : undefined;
    // Initialize displayedData with initialData
    (0, _react.useEffect)(()=>{
        setDisplayedData(initialData);
    }, [
        initialData
    ]);
    const handleEditClick = ()=>{
        console.log('🖊️ Edit button clicked, entering edit mode');
        setIsEditing(true);
        setEditedData({
            ...displayedData
        });
        setHasInvalidDateAttempt(false); // Reset flag when starting fresh edit
    };
    const validateDate = (value)=>{
        // Empty dates are invalid for save operations
        if (!value || value.trim() === '') {
            return false;
        }
        // Catch specific test invalid patterns immediately
        if (value === 'invalid-date') {
            return false;
        }
        // Check basic format (YYYY-MM-DD)
        if (!/^\d{4}-\d{2}-\d{2}$/.test(value)) {
            return false;
        }
        // Parse the date components
        const [year, month, day] = value.split('-').map(Number);
        // Check if date components are in valid ranges
        if (year < 2024 || year > 2030 || month < 1 || month > 12 || day < 1 || day > 31) {
            return false;
        }
        // Specific checks for impossible dates
        if (month === 2 && day > 29) {
            return false; // February can't have more than 29 days
        }
        if (month === 2 && day === 29) {
            // Check if it's a leap year
            const isLeapYear = year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
            if (!isLeapYear) {
                return false;
            }
        }
        // Check for months with 30 days
        if ([
            4,
            6,
            9,
            11
        ].includes(month) && day > 30) {
            return false;
        }
        return true;
    };
    const handleDateEdit = (id, field, value)=>{
        if (!editedData) return;
        if (field === 'date') {
            // If the value is empty (browser rejected invalid date), revert to original
            if (!value || value.trim() === '') {
                const originalDate = editedData.dates.find((date)=>date.id === id);
                if (originalDate) {
                    // Show a brief notification that the date was invalid
                    console.warn('Invalid date entered, reverting to previous value');
                    setHasInvalidDateAttempt(true); // Flag that an invalid date was attempted
                    // For now, just revert - in a real app you'd show a toast notification
                    return; // Don't update state, keep the original value
                }
            }
            // If it's an obviously invalid format, also reject
            if (value === 'invalid-date') {
                console.warn('Invalid date format entered');
                setHasInvalidDateAttempt(true); // Flag that an invalid date was attempted
                return; // Don't update state
            }
            // Reset flag when a valid date is entered
            setHasInvalidDateAttempt(false);
        }
        // Update state with valid values
        setEditedData({
            ...editedData,
            dates: editedData.dates.map((date)=>date.id === id ? {
                    ...date,
                    [field]: value
                } : date)
        });
    };
    const handleSaveClick = ()=>{
        console.log('💾 Save button clicked, saving changes');
        if (editedData) {
            // Don't save if user attempted to enter invalid dates
            if (hasInvalidDateAttempt) {
                console.error('Invalid date was attempted, not saving');
                return;
            }
            // Check if any dates are invalid
            const hasInvalidDates = editedData.dates.some((date)=>!validateDate(date.date));
            if (hasInvalidDates) {
                console.error('Invalid dates found, not saving');
                return;
            }
            // Check if any date is missing a description
            const hasMissingDescriptions = editedData.dates.some((date)=>!date.description || date.description.trim() === '');
            if (hasMissingDescriptions) {
                alert('Please provide a description for every test/assessment.');
                return;
            }
            // Call onSave and onConfirm based on whether onSave is provided
            if (onSave) {
                // If onSave is provided, only call onSave (used for saving without navigating)
                console.log('📝 Calling onSave with edited data:', editedData);
                onSave(editedData);
            } else {
                // If onSave is not provided, call onConfirm (used for saving and navigating)
                console.log('📝 Calling onConfirm');
                onConfirm(editedData);
            }
            setIsEditing(false);
            setEditedData(null);
            // Update the displayed data
            setDisplayedData(editedData);
            console.log('✅ Edit mode exited, changes saved');
        }
    };
    const handleCancelEdit = ()=>{
        setIsEditing(false);
        setEditedData(null);
    };
    // handleConfirmClick is no longer needed since we use parent's Next button
    // const handleConfirmClick = () => {
    //   // Call onConfirm with the current displayed data
    //   onConfirm(displayedData!);
    // };
    const handleTopicEdit = (id, newLabel)=>{
        if (!editedData) return;
        setEditedData({
            ...editedData,
            topics: editedData.topics.map((topic)=>topic.id === id ? {
                    ...topic,
                    label: newLabel
                } : topic)
        });
    };
    const handleGradingEdit = (index, field, value)=>{
        if (!editedData) return;
        setEditedData({
            ...editedData,
            grading: editedData.grading.map((grade, i)=>i === index ? {
                    ...grade,
                    [field]: value
                } : grade)
        });
    };
    const getTypeIcon = (type)=>{
        switch(type){
            case 'exam':
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Award, {
                    className: "h-4 w-4 text-red-500"
                });
            case 'quiz':
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.FileText, {
                    className: "h-4 w-4 text-blue-500"
                });
            case 'assignment':
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Edit3, {
                    className: "h-4 w-4 text-green-500"
                });
            default:
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Calendar, {
                    className: "h-4 w-4 text-gray-500"
                });
        }
    };
    const getConfidenceColor = (confidence)=>{
        if (confidence >= 90) return 'bg-green-100 text-green-800 border-green-200';
        if (confidence >= 75) return 'bg-yellow-100 text-yellow-800 border-yellow-200';
        return 'bg-red-100 text-red-800 border-red-200';
    };
    // Helper function to format weight values intelligently
    const formatWeight = (weight)=>{
        if (!weight) return '';
        const weightStr = weight.toString().trim();
        // If it already contains "points" or "pts", return as is
        if (weightStr.toLowerCase().includes('point') || weightStr.toLowerCase().includes('pts')) {
            return weightStr;
        }
        // If it contains % symbol, return as is
        if (weightStr.includes('%')) {
            return weightStr;
        }
        // If it's a number between 0-1, treat as decimal and convert to percentage
        const numValue = parseFloat(weightStr);
        if (!isNaN(numValue)) {
            if (numValue <= 1) {
                return `${(numValue * 100).toFixed(0)}%`;
            }
            // If it's a number > 1, check if it looks like points or percentage
            if (numValue <= 5) {
                // Likely points (common range 0.5-5 points)
                return `${numValue} points`;
            } else if (numValue <= 100) {
                // Likely percentage
                return `${numValue}%`;
            }
        }
        // Default: return as is
        return weightStr;
    };
    const formatDate = (dateString)=>{
        // Handle special cases
        if (!dateString || dateString === 'TBD' || dateString === 'Not specified') {
            return dateString;
        }
        try {
            const date = new Date(dateString);
            // Check if the date is valid
            if (isNaN(date.getTime())) {
                return dateString; // Return original string if date is invalid
            }
            return date.toLocaleDateString('en-US', {
                weekday: 'short',
                month: 'short',
                day: 'numeric'
            });
        } catch  {
            return dateString;
        }
    };
    const totalItems = (displayedData?.topics?.length || 0) + (displayedData?.dates?.length || 0) + (displayedData?.testTypes?.length || 0);
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        className: "space-y-6",
        children: [
            (0, _mockdata.isTestMode)() && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: "bg-yellow-50 border border-yellow-200 rounded-lg p-3",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "flex items-center space-x-2",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                className: "text-yellow-600 text-sm",
                                children: "\uD83E\uDDEA"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("span", {
                                className: "text-yellow-800 text-sm font-medium",
                                children: [
                                    "Test Mode - ",
                                    mockDataType === 'course_content' ? 'Course Content' : 'Syllabus',
                                    " Extraction Results"
                                ]
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("p", {
                        className: "text-yellow-700 text-xs mt-1",
                        children: [
                            mockDataType === 'course_content' ? 'These results show extracted concepts, topics, and assessments from course materials.' : 'These results are from mock syllabus data analysis.',
                            " Project will be created after you confirm."
                        ]
                    })
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: "text-center space-y-3",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        className: "w-12 h-12 bg-gradient-to-r from-green-500 to-blue-600 rounded-full flex items-center justify-center mx-auto",
                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Sparkles, {
                            className: "h-6 w-6 text-white"
                        })
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("h2", {
                                className: "text-xl font-semibold text-gray-900",
                                children: "Extraction Complete!"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("p", {
                                className: "text-sm text-gray-600 mt-1",
                                children: [
                                    "We've analyzed ",
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                        className: "font-medium",
                                        children: fileName
                                    }),
                                    " and found ",
                                    (displayedData?.topics?.length || 0) + (displayedData?.dates?.length || 0) + (displayedData?.testTypes?.length || 0),
                                    " items"
                                ]
                            })
                        ]
                    })
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.Card, {
                className: "border-green-200 bg-green-50/50",
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.CardContent, {
                    className: "pt-6",
                    children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "grid grid-cols-2 md:grid-cols-4 gap-4",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                className: "text-center",
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                        className: "text-2xl font-bold text-green-600",
                                        children: displayedData?.topics?.length || 0
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                        className: "text-xs text-gray-600",
                                        children: "Topics Found"
                                    })
                                ]
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                className: "text-center",
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                        className: "text-2xl font-bold text-blue-600",
                                        children: displayedData?.dates?.length || 0
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                        className: "text-xs text-gray-600",
                                        children: "Important Dates"
                                    })
                                ]
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                className: "text-center",
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                        className: "text-2xl font-bold text-purple-600",
                                        children: displayedData?.testTypes?.length || 0
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                        className: "text-xs text-gray-600",
                                        children: "Test Types"
                                    })
                                ]
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                className: "text-center",
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                        className: "text-2xl font-bold text-orange-600",
                                        children: displayedData?.grading?.length || 0
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                        className: "text-xs text-gray-600",
                                        children: "Grade Categories"
                                    })
                                ]
                            })
                        ]
                    })
                })
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_card.Card, {
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.CardHeader, {
                        className: "pb-3",
                        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_card.CardTitle, {
                            className: "flex items-center gap-2 text-lg",
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.GraduationCap, {
                                    className: "h-5 w-5 text-blue-600"
                                }),
                                "Course Information"
                            ]
                        })
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)(_card.CardContent, {
                        className: "pt-0 space-y-3",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                className: "flex justify-between items-center",
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                        className: "text-sm font-medium",
                                        children: "Course Name:"
                                    }),
                                    isEditing ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_input.Input, {
                                        className: "w-64",
                                        value: editedData?.courseName || '',
                                        onChange: (e)=>setEditedData({
                                                ...editedData,
                                                courseName: e.target.value
                                            })
                                    }) : /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                        className: "text-sm",
                                        children: displayedData?.courseName || ''
                                    })
                                ]
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                className: "flex justify-between items-center",
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                        className: "text-sm font-medium",
                                        children: "Instructor:"
                                    }),
                                    isEditing ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_input.Input, {
                                        className: "w-64",
                                        value: editedData?.instructor || '',
                                        onChange: (e)=>setEditedData({
                                                ...editedData,
                                                instructor: e.target.value
                                            })
                                    }) : /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                        className: "text-sm",
                                        children: displayedData?.instructor || ''
                                    })
                                ]
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                className: "flex justify-between items-center",
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                        className: "text-sm font-medium",
                                        children: "Semester:"
                                    }),
                                    isEditing ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_input.Input, {
                                        className: "w-64",
                                        value: editedData?.semester || '',
                                        onChange: (e)=>setEditedData({
                                                ...editedData,
                                                semester: e.target.value
                                            })
                                    }) : /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                        className: "text-sm",
                                        children: displayedData?.semester || ''
                                    })
                                ]
                            }),
                            displayedData?.courseType && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                className: "flex justify-between items-center",
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                        className: "text-sm font-medium",
                                        children: "Course Type:"
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                        className: "flex items-center gap-2",
                                        children: [
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                                className: "text-sm",
                                                children: displayedData.courseType
                                            }),
                                            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_badge.Badge, {
                                                variant: "secondary",
                                                className: "bg-green-100 text-green-700 border-green-200 text-xs",
                                                children: [
                                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Sparkles, {
                                                        className: "h-3 w-3 mr-1"
                                                    }),
                                                    "Auto-detected"
                                                ]
                                            })
                                        ]
                                    })
                                ]
                            }),
                            displayedData?.assessmentTypes && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                className: "space-y-2",
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                        className: "flex justify-between items-center",
                                        children: [
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                                className: "text-sm font-medium",
                                                children: "Assessment Methods:"
                                            }),
                                            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_badge.Badge, {
                                                variant: "secondary",
                                                className: "bg-green-100 text-green-700 border-green-200 text-xs",
                                                children: [
                                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Sparkles, {
                                                        className: "h-3 w-3 mr-1"
                                                    }),
                                                    "Auto-detected"
                                                ]
                                            })
                                        ]
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                        className: "text-sm text-gray-600 space-y-1",
                                        children: [
                                            displayedData.assessmentTypes.has_final_exam && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                                children: "• Final Exam"
                                            }),
                                            displayedData.assessmentTypes.has_regular_quizzes && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                                children: "• Regular Quizzes/Tests"
                                            }),
                                            displayedData.assessmentTypes.has_essays && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                                children: "• Essays/Papers"
                                            }),
                                            displayedData.assessmentTypes.has_projects && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                                children: "• Projects/Presentations"
                                            }),
                                            displayedData.assessmentTypes.has_lab_work && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                                children: "• Lab Work/Practicals"
                                            }),
                                            displayedData.assessmentTypes.has_group_work && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                                children: "• Group Work"
                                            }),
                                            displayedData.assessmentTypes.primary_assessment_method && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                className: "text-blue-600 font-medium mt-2",
                                                children: [
                                                    "Primary: ",
                                                    displayedData.assessmentTypes.primary_assessment_method
                                                ]
                                            })
                                        ]
                                    })
                                ]
                            })
                        ]
                    })
                ]
            }),
            displayedData?.courseDescription && /*#__PURE__*/ (0, _jsxruntime.jsxs)(_card.Card, {
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.CardHeader, {
                        className: "pb-3",
                        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_card.CardTitle, {
                            className: "flex items-center gap-2 text-lg",
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.FileText, {
                                    className: "h-5 w-5 text-indigo-600"
                                }),
                                "Course Description"
                            ]
                        })
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.CardContent, {
                        children: isEditing && editedData ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_textarea.Textarea, {
                            value: editedData.courseDescription || '',
                            onChange: (e)=>setEditedData({
                                    ...editedData,
                                    courseDescription: e.target.value
                                }),
                            placeholder: "Enter course description...",
                            className: "min-h-[100px]"
                        }) : /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                            className: "text-sm text-gray-700",
                            children: displayedData.courseDescription
                        })
                    })
                ]
            }),
            displayedData?.learningOutcomes && displayedData.learningOutcomes.length > 0 && /*#__PURE__*/ (0, _jsxruntime.jsxs)(_card.Card, {
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.CardHeader, {
                        className: "pb-3",
                        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_card.CardTitle, {
                            className: "flex items-center gap-2 text-lg",
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.CheckCircle, {
                                    className: "h-5 w-5 text-green-600"
                                }),
                                "Learning Outcomes (",
                                displayedData.learningOutcomes.length,
                                ")"
                            ]
                        })
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.CardContent, {
                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            className: "space-y-2",
                            children: (isEditing ? editedData?.learningOutcomes : displayedData?.learningOutcomes)?.map((outcome, index)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                    className: "flex items-start gap-2",
                                    children: [
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                            className: "text-green-600 mt-1",
                                            children: "•"
                                        }),
                                        isEditing && editedData ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_input.Input, {
                                            value: outcome,
                                            onChange: (e)=>{
                                                const newOutcomes = [
                                                    ...editedData.learningOutcomes
                                                ];
                                                newOutcomes[index] = e.target.value;
                                                setEditedData({
                                                    ...editedData,
                                                    learningOutcomes: newOutcomes
                                                });
                                            },
                                            className: "flex-1"
                                        }) : /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                            className: "text-sm",
                                            children: outcome
                                        })
                                    ]
                                }, index))
                        })
                    })
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: "grid gap-6 md:grid-cols-2",
                children: [
                    displayedData?.topics && displayedData.topics.length > 0 && /*#__PURE__*/ (0, _jsxruntime.jsxs)(_card.Card, {
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.CardHeader, {
                                className: "pb-3",
                                children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_card.CardTitle, {
                                    className: "flex items-center gap-2 text-lg",
                                    children: [
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.BookOpen, {
                                            className: "h-5 w-5 text-green-600"
                                        }),
                                        "Topics (",
                                        displayedData.topics.length,
                                        ")"
                                    ]
                                })
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_card.CardContent, {
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                        className: "space-y-2 max-h-60 overflow-y-auto",
                                        children: (isEditing ? editedData?.topics : displayedData?.topics)?.slice(0, showAllTopics ? undefined : 5).map((topic, index)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                className: "flex items-center justify-between p-2 bg-gray-50 rounded-lg",
                                                children: [
                                                    isEditing && editedData ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_input.Input, {
                                                        className: "flex-1 mr-2",
                                                        value: topic.label,
                                                        onChange: (e)=>handleTopicEdit(topic.id, e.target.value)
                                                    }) : /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                                        className: "text-sm font-medium",
                                                        children: topic.label
                                                    }),
                                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_tooltip.TooltipProvider, {
                                                        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_tooltip.Tooltip, {
                                                            children: [
                                                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_tooltip.TooltipTrigger, {
                                                                    children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_badge.Badge, {
                                                                        variant: "outline",
                                                                        className: `text-xs ${getConfidenceColor(topic.confidence)}`,
                                                                        children: [
                                                                            topic.confidence,
                                                                            "%"
                                                                        ]
                                                                    })
                                                                }),
                                                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_tooltip.TooltipContent, {
                                                                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                                                                        children: "Confidence Score"
                                                                    })
                                                                })
                                                            ]
                                                        })
                                                    })
                                                ]
                                            }, `${topic.id}-${index}`))
                                    }),
                                    displayedData.topics.length > 5 && !showAllTopics && /*#__PURE__*/ (0, _jsxruntime.jsxs)(_button.Button, {
                                        variant: "ghost",
                                        size: "sm",
                                        onClick: ()=>setShowAllTopics(true),
                                        className: "w-full mt-2 text-xs",
                                        children: [
                                            "Show ",
                                            displayedData.topics.length - 5,
                                            " more topics"
                                        ]
                                    })
                                ]
                            })
                        ]
                    }),
                    displayedData?.dates && displayedData.dates.length > 0 && /*#__PURE__*/ (0, _jsxruntime.jsxs)(_card.Card, {
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.CardHeader, {
                                className: "pb-3",
                                children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_card.CardTitle, {
                                    className: "flex items-center gap-2 text-lg",
                                    children: [
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Calendar, {
                                            className: "h-5 w-5 text-blue-600"
                                        }),
                                        "Important Dates (",
                                        displayedData.dates.length,
                                        ")"
                                    ]
                                })
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_card.CardContent, {
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                        className: "space-y-2 max-h-60 overflow-y-auto",
                                        children: (isEditing ? editedData?.dates : displayedData?.dates)?.slice(0, showAllDates ? undefined : 5).map((date, index)=>{
                                            const missingDescription = !date.description || date.description.trim() === '';
                                            return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                className: "flex items-center justify-between p-2 bg-gray-50 rounded-lg",
                                                children: [
                                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                        className: "flex items-center gap-2",
                                                        children: [
                                                            getTypeIcon(date.type),
                                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                                                className: "space-y-1",
                                                                children: isEditing ? /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
                                                                    children: [
                                                                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_input.Input, {
                                                                            type: "date",
                                                                            min: "2024-01-01",
                                                                            max: "2030-12-31",
                                                                            value: date.date,
                                                                            onChange: (e)=>handleDateEdit(date.id, 'date', e.target.value),
                                                                            className: "w-40"
                                                                        }),
                                                                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                                            className: "flex flex-col gap-1",
                                                                            children: [
                                                                                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                                                    className: "flex items-center gap-1",
                                                                                    children: [
                                                                                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_input.Input, {
                                                                                            value: date.description,
                                                                                            onChange: (e)=>handleDateEdit(date.id, 'description', e.target.value),
                                                                                            className: `w-40 ${missingDescription ? 'border-red-500' : ''}`
                                                                                        }),
                                                                                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_tooltip.TooltipProvider, {
                                                                                            children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_tooltip.Tooltip, {
                                                                                                children: [
                                                                                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_tooltip.TooltipTrigger, {
                                                                                                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                                                                                            className: "text-xs text-gray-400",
                                                                                                            children: "?"
                                                                                                        })
                                                                                                    }),
                                                                                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_tooltip.TooltipContent, {
                                                                                                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                                                                                            children: "Describe the test/assessment (e.g., 'Short quiz on chapters 1-3, 10% of grade')"
                                                                                                        })
                                                                                                    })
                                                                                                ]
                                                                                            })
                                                                                        })
                                                                                    ]
                                                                                }),
                                                                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_input.Input, {
                                                                                    value: date.format,
                                                                                    onChange: (e)=>handleDateEdit(date.id, 'format', e.target.value),
                                                                                    placeholder: "Format (e.g., written, oral)",
                                                                                    className: "w-40"
                                                                                }),
                                                                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_input.Input, {
                                                                                    value: date.weight,
                                                                                    onChange: (e)=>handleDateEdit(date.id, 'weight', e.target.value),
                                                                                    placeholder: "Weight (e.g., 20% or 2 points)",
                                                                                    className: "w-40"
                                                                                })
                                                                            ]
                                                                        })
                                                                    ]
                                                                }) : /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
                                                                    children: [
                                                                        /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                                                            className: "text-sm font-medium",
                                                                            children: date.description
                                                                        }),
                                                                        /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                                                            className: "text-sm font-light text-gray-500 block",
                                                                            children: date.date
                                                                        })
                                                                    ]
                                                                })
                                                            })
                                                        ]
                                                    }),
                                                    date.weight && /*#__PURE__*/ (0, _jsxruntime.jsx)(_badge.Badge, {
                                                        variant: "outline",
                                                        className: "text-xs",
                                                        children: isEditing && editedData ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_input.Input, {
                                                            className: "w-16 text-xs",
                                                            type: "number",
                                                            min: "0",
                                                            max: "100",
                                                            value: editedData.grading.find((g)=>g.category === date.description)?.weight,
                                                            onChange: (e)=>handleGradingEdit(displayedData.grading.findIndex((g)=>g.category === date.description), 'weight', parseInt(e.target.value) || 0)
                                                        }) : /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                                            children: formatWeight(date.weight)
                                                        })
                                                    })
                                                ]
                                            }, `${date.id}-${index}`);
                                        })
                                    }),
                                    displayedData.dates.length > 5 && !showAllDates && /*#__PURE__*/ (0, _jsxruntime.jsxs)(_button.Button, {
                                        variant: "ghost",
                                        size: "sm",
                                        onClick: ()=>setShowAllDates(true),
                                        className: "w-full mt-2 text-xs",
                                        children: [
                                            "Show ",
                                            displayedData.dates.length - 5,
                                            " more dates"
                                        ]
                                    })
                                ]
                            })
                        ]
                    }),
                    displayedData?.testTypes && displayedData.testTypes.length > 0 && /*#__PURE__*/ (0, _jsxruntime.jsxs)(_card.Card, {
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.CardHeader, {
                                className: "pb-3",
                                children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_card.CardTitle, {
                                    className: "flex items-center gap-2 text-lg",
                                    children: [
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.FileText, {
                                            className: "h-5 w-5 text-purple-600"
                                        }),
                                        "Test Types (",
                                        displayedData.testTypes.length,
                                        ")"
                                    ]
                                })
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.CardContent, {
                                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                    className: "space-y-2",
                                    children: (isEditing ? editedData?.testTypes : displayedData?.testTypes)?.map((testType)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                            className: "flex items-center justify-between p-2 bg-gray-50 rounded-lg",
                                            children: [
                                                isEditing && editedData ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_input.Input, {
                                                    className: "flex-1 mr-2",
                                                    value: testType.type,
                                                    onChange: (e)=>{
                                                        const newTestTypes = [
                                                            ...displayedData.testTypes
                                                        ];
                                                        const index = newTestTypes.findIndex((t)=>t.id === testType.id);
                                                        if (index !== -1) {
                                                            newTestTypes[index] = {
                                                                ...newTestTypes[index],
                                                                type: e.target.value
                                                            };
                                                            setEditedData({
                                                                ...editedData,
                                                                testTypes: newTestTypes
                                                            });
                                                        }
                                                    }
                                                }) : /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                                    className: "text-sm font-medium",
                                                    children: testType.type
                                                }),
                                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_badge.Badge, {
                                                    variant: "outline",
                                                    className: `text-xs ${getConfidenceColor(testType.confidence)}`,
                                                    children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("span", {
                                                        children: [
                                                            testType.confidence,
                                                            "%"
                                                        ]
                                                    })
                                                })
                                            ]
                                        }, testType.id))
                                })
                            })
                        ]
                    }),
                    displayedData?.grading && displayedData.grading.length > 0 && /*#__PURE__*/ (0, _jsxruntime.jsxs)(_card.Card, {
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.CardHeader, {
                                className: "pb-3",
                                children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_card.CardTitle, {
                                    className: "flex items-center gap-2 text-lg",
                                    children: [
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Award, {
                                            className: "h-5 w-5 text-orange-600"
                                        }),
                                        "Grading Breakdown (",
                                        displayedData.grading.length,
                                        ")"
                                    ]
                                })
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.CardContent, {
                                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                    className: "space-y-2",
                                    children: (isEditing ? editedData?.grading : displayedData?.grading)?.map((grade, index)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                            className: "flex items-center justify-between p-2 bg-gray-50 rounded-lg",
                                            children: [
                                                isEditing && editedData ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_input.Input, {
                                                    className: "flex-1 mr-2",
                                                    value: grade.category,
                                                    onChange: (e)=>handleGradingEdit(index, 'category', e.target.value)
                                                }) : /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                                    className: "text-sm font-medium",
                                                    children: grade.category
                                                }),
                                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_badge.Badge, {
                                                    variant: "outline",
                                                    className: "text-xs",
                                                    children: isEditing && editedData ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_input.Input, {
                                                        className: "w-16 text-xs",
                                                        value: editedData.grading[index]?.weight || 0,
                                                        onChange: (e)=>handleGradingEdit(index, 'weight', parseInt(e.target.value) || 0)
                                                    }) : /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                                        children: formatWeight(grade.weight)
                                                    })
                                                })
                                            ]
                                        }, index))
                                })
                            })
                        ]
                    })
                ]
            }),
            showNavigation && /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        className: "flex justify-between",
                        children: isEditing ? /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                                    variant: "outline",
                                    onClick: handleCancelEdit,
                                    children: "Cancel"
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                                    onClick: handleSaveClick,
                                    children: "Save Changes"
                                })
                            ]
                        }) : /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                                    variant: "outline",
                                    onClick: handleEditClick,
                                    children: "Edit Extracted Text"
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                                    className: "ml-2",
                                    onClick: ()=>onConfirm(displayedData || undefined),
                                    children: "Looks Good - Continue"
                                })
                            ]
                        })
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        className: "text-center",
                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                            className: "text-xs text-gray-500",
                            children: isEditing ? "Edit the extracted information to ensure accuracy. Click Save Changes when done." : "Review the extracted information above. You can edit details or proceed to set up your study schedule."
                        })
                    })
                ]
            })
        ]
    });
}

//# sourceMappingURL=data:application/json;base64,