{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/features/projects/components/guided-setup/utils/transformBackendData.ts"],"sourcesContent":["export interface ExtractedData {\n  courseName: string;\n  instructor: string;\n  semester: string;\n  courseType?: string;\n  assessmentTypes?: {\n    has_final_exam: boolean;\n    has_regular_quizzes: boolean;\n    has_essays: boolean;\n    has_projects: boolean;\n    has_lab_work: boolean;\n    has_group_work: boolean;\n    primary_assessment_method: string;\n  };\n  topics: Array<{\n    id: string;\n    label: string;\n    confidence: number;\n  }>;\n  dates: Array<{\n    id: string;\n    date: string;\n    description: string;\n    type: string;\n    format?: string;\n    weight?: string;\n  }>;\n  testTypes: Array<{\n    id: string;\n    type: string;\n    confidence: number;\n  }>;\n  grading: Array<{\n    category: string;\n    weight: number;\n  }>;\n  courseDescription?: string;\n  learningOutcomes?: string[];\n}\n\nexport const transformTopics = (topicsData: any): Array<{ id: string; label: string; confidence: number }> => {\n  if (!topicsData || !Array.isArray(topicsData)) return [];\n  \n  return topicsData.map((topic: any, index: number) => {\n    let label: string;\n    if (typeof topic === 'string') {\n      label = topic;\n    } else if (topic && typeof topic === 'object' && topic.label) {\n      label = topic.label;\n    } else {\n      label = String(topic);\n    }\n    \n    return {\n      id: `topic-${index}-${label.replace(/\\s+/g, '-').toLowerCase()}`,\n      label,\n      confidence: Math.floor(Math.random() * 20) + 80 // Random confidence between 80-100\n    };\n  }).filter(topic => topic.label);\n};\n\nexport const transformDates = (datesData: any): Array<{ id: string; date: string; description: string; type: string; format?: string; weight?: string }> => {\n  if (!datesData || !Array.isArray(datesData)) return [];\n  \n  const parseDateString = (dateStr: string) => {\n    // Handle various date formats\n    const date = new Date(dateStr);\n    if (isNaN(date.getTime())) {\n      // Try to parse common formats\n      const formats = [\n        /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/, // MM/DD/YYYY\n        /(\\d{4})-(\\d{1,2})-(\\d{1,2})/, // YYYY-MM-DD\n        /(\\d{1,2})-(\\d{1,2})-(\\d{4})/, // MM-DD-YYYY\n      ];\n      \n      for (const format of formats) {\n        const match = dateStr.match(format);\n        if (match) {\n          const [, month, day, year] = match;\n          return new Date(parseInt(year), parseInt(month) - 1, parseInt(day));\n        }\n      }\n      return null;\n    }\n    return date;\n  };\n  \n  return datesData\n    .map((dateItem: any, index: number) => {\n      if (!dateItem) return null;\n      \n      let date: string;\n      let description: string;\n      let type: string = 'exam';\n      \n      if (typeof dateItem === 'string') {\n        // Simple string format - try to extract date and description\n        const parts = dateItem.split(/[:\\-–—]/);\n        if (parts.length >= 2) {\n          date = parts[0].trim();\n          description = parts[1].trim();\n        } else {\n          date = dateItem;\n          description = 'Important date';\n        }\n      } else if (dateItem && typeof dateItem === 'object') {\n        date = dateItem.date || dateItem.date_string || dateItem.date_str || '';\n        description = dateItem.description || dateItem.desc || dateItem.title || 'Important date';\n        type = dateItem.type || dateItem.category || 'exam';\n      } else {\n        return null;\n      }\n      \n      if (!date) return null;\n      \n      const parsedDate = parseDateString(date);\n      if (!parsedDate) return null;\n      \n      return {\n        id: `date-${index}-${description.replace(/\\s+/g, '-').toLowerCase()}`,\n        date: parsedDate.toISOString().split('T')[0],\n        description,\n        type,\n        format: dateItem.format || '',\n        weight: dateItem.weight || ''\n      };\n    })\n    .filter((item): item is NonNullable<typeof item> => item !== null);\n};\n\nexport const transformTestTypes = (evaluationData: any): Array<{ id: string; type: string; confidence: number }> => {\n  if (!evaluationData || !Array.isArray(evaluationData)) return [];\n  \n  return evaluationData\n    .map((item: any, index: number) => {\n      let type: string;\n      if (typeof item === 'string') {\n        type = item;\n      } else if (item && typeof item === 'object') {\n        type = item.type || item.name || item.label || String(item);\n      } else {\n        type = String(item);\n      }\n      \n      return {\n        id: `test-${index}-${type.replace(/\\s+/g, '-').toLowerCase()}`,\n        type,\n        confidence: Math.floor(Math.random() * 20) + 80 // Random confidence between 80-100\n      };\n    })\n    .filter(testType => testType.type);\n};\n\nexport const transformBackendData = (backendData: any): ExtractedData => {\n  const metadata = backendData.metadata || backendData;\n  \n  // Determine assessment types based on exam dates\n  const examDates = metadata.exam_dates || metadata.important_dates || metadata.dates || [];\n  const hasTests = examDates.some((date: any) => \n    date.description?.toLowerCase().includes('test') || \n    date.description?.toLowerCase().includes('exam')\n  );\n  const hasExercises = examDates.some((date: any) => \n    date.description?.toLowerCase().includes('exercise') || \n    date.description?.toLowerCase().includes('assignment')\n  );\n  const hasProjects = examDates.some((date: any) => \n    date.description?.toLowerCase().includes('project')\n  );\n  \n  return {\n    courseName: metadata.course_title || metadata.course_name || metadata.course || 'Unknown Course',\n    instructor: metadata.instructor || metadata.professor || metadata.teacher || 'Unknown Instructor',\n    semester: metadata.semester || metadata.term || 'Spring 2025',\n    courseType: metadata.course_type || metadata.subject || 'STEM',\n    assessmentTypes: {\n      has_final_exam: hasTests,\n      has_regular_quizzes: hasTests,\n      has_essays: false,\n      has_projects: hasProjects,\n      has_lab_work: false,\n      has_group_work: false,\n      primary_assessment_method: hasTests ? 'Tests and Quizzes' : hasProjects ? 'Projects' : 'Mixed Assessment'\n    },\n    topics: transformTopics(metadata.topics || metadata.topics_covered),\n    dates: transformDates(metadata.important_dates || metadata.dates || metadata.exam_dates),\n    testTypes: transformTestTypes(metadata.forms_of_evaluation || metadata.assessment_types || metadata.test_types),\n    grading: Array.isArray(metadata.grading) \n      ? metadata.grading.map((g: any) => ({ \n          category: g.category || g.name || 'Unknown', \n          weight: parseFloat(g.weight || g.percentage || 0) \n        }))\n      : [],\n    courseDescription: metadata.course_description || metadata.description || 'Course description not available.',\n    learningOutcomes: metadata.learning_outcomes || metadata.objectives || []\n  };\n}; "],"names":["transformBackendData","transformDates","transformTestTypes","transformTopics","topicsData","Array","isArray","map","topic","index","label","String","id","replace","toLowerCase","confidence","Math","floor","random","filter","datesData","parseDateString","dateStr","date","Date","isNaN","getTime","formats","format","match","month","day","year","parseInt","dateItem","description","type","parts","split","length","trim","date_string","date_str","desc","title","category","parsedDate","toISOString","weight","item","evaluationData","name","testType","backendData","metadata","examDates","exam_dates","important_dates","dates","hasTests","some","includes","hasExercises","hasProjects","courseName","course_title","course_name","course","instructor","professor","teacher","semester","term","courseType","course_type","subject","assessmentTypes","has_final_exam","has_regular_quizzes","has_essays","has_projects","has_lab_work","has_group_work","primary_assessment_method","topics","topics_covered","testTypes","forms_of_evaluation","assessment_types","test_types","grading","g","parseFloat","percentage","courseDescription","course_description","learningOutcomes","learning_outcomes","objectives"],"mappings":"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"}