3334e75dc4627b461c415371d2f10d6d
/**
 * WebSocket service for real-time study progress updates.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    WebSocketService: function() {
        return WebSocketService;
    },
    useWebSocket: function() {
        return useWebSocket;
    },
    webSocketService: function() {
        return webSocketService;
    }
});
const _auth = require("../app/(auth)/services/auth");
const _designtokens = require("../constants/design-tokens");
class WebSocketService {
    constructor(){
        this.socket = null;
        this.reconnectAttempts = 0;
        this.maxReconnectAttempts = _designtokens.WEBSOCKET_CONFIG.MAX_RECONNECT_ATTEMPTS;
        this.reconnectDelay = _designtokens.WEBSOCKET_CONFIG.RECONNECT_DELAY;
        this.reconnectTimer = null;
    // Temporarily disable auto-connect until Django Channels is properly configured
    // this.connect();
    }
    connect() {
        if (!_auth.AuthService.isAuthenticated()) {
            console.log('🔌 WebSocket: Not authenticated, skipping connection');
            return;
        }
        const token = _auth.AuthService.getAuthToken();
        if (!token) {
            console.log('🔌 WebSocket: No auth token available');
            return;
        }
        try {
            // Use Django Channels WebSocket endpoint
            const wsUrl = `ws://localhost:8000/ws/study-progress/`;
            this.socket = new WebSocket(wsUrl);
            this.setupEventHandlers();
            console.log('🔌 WebSocket: Connected successfully');
        } catch (error) {
            console.error('🔌 WebSocket: Connection failed:', error);
            this.handleReconnect();
        }
    }
    setupEventHandlers() {
        if (!this.socket) return;
        this.socket.onopen = ()=>{
            console.log('🔌 WebSocket: Connected');
            this.reconnectAttempts = 0;
            // Send authentication token
            const token = _auth.AuthService.getAuthToken();
            if (token) {
                this.socket?.send(JSON.stringify({
                    type: 'auth',
                    token: token
                }));
            }
        };
        this.socket.onclose = (event)=>{
            console.log('🔌 WebSocket: Disconnected:', event.code, event.reason);
            if (event.code !== 1000) {
                this.handleReconnect();
            }
        };
        this.socket.onerror = (error)=>{
            console.error('🔌 WebSocket: Connection error:', error);
            this.handleReconnect();
        };
        this.socket.onmessage = (event)=>{
            try {
                const data = JSON.parse(event.data);
                console.log('📊 WebSocket message received:', data);
                // Handle different message types
                switch(data.type){
                    case 'study_progress_update':
                        this.dispatchCustomEvent('study-progress-update', data.data);
                        break;
                    case 'initial_stats':
                        this.dispatchCustomEvent('initial-study-stats', data.data);
                        break;
                    case 'progress_update':
                        this.dispatchCustomEvent('progress-update', data.data);
                        break;
                    case 'project_created':
                        this.dispatchCustomEvent('project-created', data.data);
                        break;
                    case 'project_updated':
                        this.dispatchCustomEvent('project-updated', data.data);
                        break;
                    case 'file_processing_update':
                        this.dispatchCustomEvent('file-processing-update', data.data);
                        break;
                    case 'pong':
                        console.log('🏓 WebSocket: Pong received');
                        break;
                    default:
                        console.log('📊 Unknown message type:', data.type);
                }
            } catch (error) {
                console.error('🔌 WebSocket: Error parsing message:', error);
            }
        };
    }
    handleReconnect() {
        if (this.reconnectAttempts >= this.maxReconnectAttempts) {
            console.error('🔌 WebSocket: Max reconnection attempts reached');
            return;
        }
        this.reconnectAttempts++;
        const delay = this.reconnectDelay * Math.pow(2, this.reconnectAttempts - 1);
        console.log(`🔌 WebSocket: Reconnecting in ${delay}ms (attempt ${this.reconnectAttempts})`);
        this.reconnectTimer = setTimeout(()=>{
            this.connect();
        }, delay);
    }
    dispatchCustomEvent(eventName, data) {
        const event = new CustomEvent(eventName, {
            detail: data
        });
        window.dispatchEvent(event);
    }
    /**
   * Send flashcard review to server
   */ reviewFlashcard(flashcardId, rating) {
        if (!this.socket || this.socket.readyState !== WebSocket.OPEN) {
            console.warn('🔌 WebSocket: Not connected, cannot send review');
            return;
        }
        this.socket.send(JSON.stringify({
            type: 'flashcard_review',
            flashcard_id: flashcardId,
            rating: rating
        }));
    }
    /**
   * Request current study progress
   */ getStudyProgress() {
        if (!this.socket || this.socket.readyState !== WebSocket.OPEN) {
            console.warn('🔌 WebSocket: Not connected, cannot get progress');
            return;
        }
        this.socket.send(JSON.stringify({
            type: 'get_progress'
        }));
    }
    /**
   * Ping server to check connection
   */ ping() {
        if (!this.socket || this.socket.readyState !== WebSocket.OPEN) {
            console.warn('🔌 WebSocket: Not connected, cannot ping');
            return;
        }
        this.socket.send(JSON.stringify({
            type: 'ping'
        }));
    }
    /**
   * Disconnect WebSocket
   */ disconnect() {
        if (this.reconnectTimer) {
            clearTimeout(this.reconnectTimer);
            this.reconnectTimer = null;
        }
        if (this.socket) {
            this.socket.close(1000, 'Client disconnect');
            this.socket = null;
            console.log('🔌 WebSocket: Disconnected');
        }
    }
    /**
   * Check if WebSocket is connected
   */ isConnected() {
        // Temporarily return false until Django Channels is properly configured
        return false;
    }
    /**
   * Reconnect WebSocket
   */ reconnect() {
        this.disconnect();
        this.reconnectAttempts = 0;
        this.connect();
    }
}
const webSocketService = new WebSocketService();
function useWebSocket() {
    return webSocketService;
}

//# sourceMappingURL=data:application/json;base64,