3c939fa71bd098d721bc83f7b919e146
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    createDragHandlers: function() {
        return createDragHandlers;
    },
    createFileRemover: function() {
        return createFileRemover;
    },
    formatFileSize: function() {
        return formatFileSize;
    },
    handleUploadError: function() {
        return handleUploadError;
    },
    removeProgress: function() {
        return removeProgress;
    },
    updateProgress: function() {
        return updateProgress;
    },
    useFileRemover: function() {
        return useFileRemover;
    },
    useFileSelector: function() {
        return useFileSelector;
    }
});
const _react = require("react");
const _fileHelpers = require("../../../utils/fileHelpers");
const formatFileSize = _fileHelpers.formatFileSize;
const updateProgress = (fileName, progress)=>{
    return (prev)=>({
            ...prev,
            [fileName]: progress
        });
};
const removeProgress = (fileName)=>{
    return (prev)=>{
        const newProgress = {
            ...prev
        };
        delete newProgress[fileName];
        return newProgress;
    };
};
const createDragHandlers = (onDrop, setIsDragOver)=>{
    const handleDragOver = (e)=>{
        e.preventDefault();
        setIsDragOver(true);
    };
    const handleDragLeave = (e)=>{
        e.preventDefault();
        setIsDragOver(false);
    };
    const handleDrop = (e)=>{
        e.preventDefault();
        setIsDragOver(false);
        const droppedFiles = Array.from(e.dataTransfer.files);
        onDrop(droppedFiles);
    };
    return {
        handleDragOver,
        handleDragLeave,
        handleDrop
    };
};
const useFileRemover = (files, setFiles, setUploadProgress)=>{
    return (0, _react.useCallback)((index)=>{
        const newFiles = files.filter((_, i)=>i !== index);
        setFiles(newFiles);
        // Clear progress for the removed file if progress tracking is enabled
        const removedFile = files[index];
        if (removedFile && removedFile.name && setUploadProgress) {
            setUploadProgress((prev)=>{
                const newProgress = {
                    ...prev
                };
                delete newProgress[removedFile.name];
                return newProgress;
            });
        }
    }, [
        files,
        setFiles,
        setUploadProgress
    ]);
};
const createFileRemover = (files, setFiles, setUploadProgress)=>{
    return (index)=>{
        const newFiles = files.filter((_, i)=>i !== index);
        setFiles(newFiles);
        // Clear progress for the removed file if progress tracking is enabled
        const removedFile = files[index];
        if (removedFile && removedFile.name && setUploadProgress) {
            setUploadProgress((prev)=>{
                const newProgress = {
                    ...prev
                };
                delete newProgress[removedFile.name];
                return newProgress;
            });
        }
    };
};
const useFileSelector = (existingFiles, onFilesChange, fileTransformer)=>{
    return (0, _react.useCallback)((e)=>{
        const selectedFiles = Array.from(e.target.files || []);
        const transformedFiles = fileTransformer ? selectedFiles.map(fileTransformer) : selectedFiles;
        onFilesChange([
            ...existingFiles,
            ...transformedFiles
        ]);
    }, [
        existingFiles,
        onFilesChange,
        fileTransformer
    ]);
};
const handleUploadError = (error, fileName, setError, setUploadProgress)=>{
    console.error("File upload error:", error);
    let errorMessage;
    if (error instanceof Error) {
        if ("statusCode" in error && error.statusCode === 401) {
            errorMessage = "Your session has expired. Please log in again.";
        } else {
            errorMessage = error.message;
        }
    } else {
        errorMessage = `Failed to upload ${fileName}. Please try again.`;
    }
    setError(errorMessage);
    // Mark upload as failed in progress tracking
    if (setUploadProgress) {
        setUploadProgress((prev)=>({
                ...prev,
                [fileName]: -1
            }));
    }
};

//# sourceMappingURL=data:application/json;base64,