9129a9a147caac4aca96a87e258bc84d
/**
 * Example: How to Use Modular Test Patterns
 * 
 * This file demonstrates how to use the modular test patterns
 * for different types of components.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
require("@testing-library/jest-dom");
const _testutils = require("..");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// ============================================================================
// Example 1: Authentication Component Testing
// ============================================================================
// Mock component for demonstration
const AuthComponent = ()=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                type: "email",
                placeholder: "Email"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                type: "password",
                placeholder: "Password"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                children: "Sign In"
            })
        ]
    });
describe('AuthComponent - Modular Testing', ()=>{
    // Create a complete test suite
    const authSuite = (0, _testutils.createAuthTestSuite)(AuthComponent);
    describe('Complete Authentication Suite', ()=>{
        it('successful login', async ()=>{
            await authSuite.testSuccessfulLogin();
        });
        it('login error', async ()=>{
            await authSuite.testLoginError();
        });
        it('form validation', async ()=>{
            await authSuite.testFormValidation();
        });
        it('accessibility', async ()=>{
            await authSuite.testAccessibility();
        });
        it('performance', async ()=>{
            await authSuite.testPerformance();
        });
    });
});
// ============================================================================
// Example 2: File Upload Component Testing
// ============================================================================
// Mock file upload component
const FileUploadComponent = ({ onUpload })=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                type: "file",
                multiple: true
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                onClick: ()=>onUpload([]),
                children: "Upload"
            })
        ]
    });
describe('FileUploadComponent - Modular Testing', ()=>{
    const mockOnUpload = jest.fn();
    // Create a complete test suite
    const fileUploadSuite = (0, _testutils.createFileUploadTestSuite)(FileUploadComponent, {
        onUpload: mockOnUpload
    });
    describe('Complete File Upload Suite', ()=>{
        it('file upload', async ()=>{
            await fileUploadSuite.testFileUpload();
        });
        it('file validation', async ()=>{
            await fileUploadSuite.testFileValidation();
        });
        it('drag and drop', async ()=>{
            await fileUploadSuite.testDragAndDrop();
        });
        it('error handling', async ()=>{
            await fileUploadSuite.testErrorHandling();
        });
        it('accessibility', async ()=>{
            await fileUploadSuite.testAccessibility();
        });
        it('performance', async ()=>{
            await fileUploadSuite.testPerformance();
        });
    });
});
// ============================================================================
// Example 3: Custom Component with Manual Pattern Usage
// ============================================================================
const CustomComponent = ()=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)("h1", {
                children: "Custom Component"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                children: "Click me"
            })
        ]
    });
describe('CustomComponent - Manual Pattern Usage', ()=>{
    // Setup test environment
    const testEnv = (0, _testutils.setupTestEnvironment)({
        includeAuth: true,
        includeFileUpload: false,
        timeout: 5000
    });
    beforeEach(()=>{
        testEnv.cleanup();
    });
    describe('Rendering', ()=>{
        it('renders with required elements', ()=>{
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(CustomComponent, {}));
            expect(_react1.screen.getByText('Custom Component')).toBeInTheDocument();
            expect(_react1.screen.getByRole('button')).toBeInTheDocument();
        });
    });
    describe('Interactions', ()=>{
        it('handles button click', async ()=>{
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(CustomComponent, {}));
            const button = _react1.screen.getByRole('button');
        // Add your interaction test here
        });
    });
    describe('Performance', ()=>{
        it('renders within acceptable time', ()=>{
            const startTime = performance.now();
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(CustomComponent, {}));
            const endTime = performance.now();
            expect(endTime - startTime).toBeLessThan(100);
        });
    });
});
// ============================================================================
// Example 4: Data-Driven Testing
// ============================================================================
describe('Data-Driven Testing Examples', ()=>{
    describe('Authentication Scenarios', ()=>{
        // Test multiple credential scenarios
        _testutils.authScenarios.validCredentials.forEach((credentials, index)=>{
            it(`handles valid credentials ${index + 1}`, async ()=>{
                const authSuite = (0, _testutils.createAuthTestSuite)(AuthComponent);
            // Custom test implementation using the credentials
            });
        });
        // Test multiple error scenarios
        _testutils.authScenarios.errorScenarios.forEach((scenario)=>{
            it(`handles ${scenario.name}`, async ()=>{
                const authSuite = (0, _testutils.createAuthTestSuite)(AuthComponent);
            // Custom test implementation using the error scenario
            });
        });
    });
    describe('File Upload Scenarios', ()=>{
        // Test multiple file types
        _testutils.fileUploadScenarios.validFiles.forEach((file)=>{
            it(`handles ${file.name} upload`, async ()=>{
                const fileUploadSuite = (0, _testutils.createFileUploadTestSuite)(FileUploadComponent);
            // Custom test implementation using the file
            });
        });
        // Test validation scenarios
        _testutils.fileUploadScenarios.validationScenarios.forEach((scenario)=>{
            it(`validates ${scenario.name}`, async ()=>{
                const fileUploadSuite = (0, _testutils.createFileUploadTestSuite)(FileUploadComponent);
            // Custom test implementation using the validation scenario
            });
        });
    });
});
// ============================================================================
// Example 5: Custom Test Patterns
// ============================================================================
/**
 * Create custom test patterns for specific component types
 */ const createCustomTestPattern = (component)=>{
    return {
        async testCustomBehavior () {
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)("component", {}));
        // Custom test implementation
        },
        async testCustomInteraction () {
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)("component", {}));
        // Custom interaction test
        },
        async testCustomValidation () {
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)("component", {}));
        // Custom validation test
        }
    };
};
describe('Custom Test Patterns', ()=>{
    const customPattern = createCustomTestPattern(CustomComponent);
    it('custom behavior', async ()=>{
        await customPattern.testCustomBehavior();
    });
    it('custom interaction', async ()=>{
        await customPattern.testCustomInteraction();
    });
    it('custom validation', async ()=>{
        await customPattern.testCustomValidation();
    });
});

//# sourceMappingURL=data:application/json;base64,