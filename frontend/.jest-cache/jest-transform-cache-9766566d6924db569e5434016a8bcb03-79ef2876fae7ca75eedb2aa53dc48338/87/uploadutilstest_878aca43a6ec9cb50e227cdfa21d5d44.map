{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/features/projects/services/__tests__/upload-utils.test.ts"],"sourcesContent":["import { uploadFileToService, startDocumentProcessing } from \"../upload-utils\";\nimport { registerUpload } from \"../cleanup-utils\";\n\n// Mock the cleanup utils\njest.mock(\"../cleanup-utils\", () => ({\n  registerUpload: jest.fn(),\n}));\n\n// Mock fetch\nglobal.fetch = jest.fn();\n\n// Mock window.showToast\nconst mockShowToast = jest.fn();\nObject.defineProperty(window, \"showToast\", {\n  value: mockShowToast,\n  writable: true,\n});\n\ndescribe(\"upload-utils\", () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    mockShowToast.mockClear();\n    (registerUpload as jest.Mock).mockClear();\n  });\n\n  describe(\"uploadFileToService\", () => {\n    it(\"should upload file successfully\", async () => {\n      const mockFile = new File([\"test content\"], \"test.pdf\", {\n        type: \"application/pdf\",\n      });\n      const mockResponse = { id: 1, filename: \"test.pdf\", status: \"uploaded\" };\n\n      (global.fetch as jest.Mock).mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockResponse,\n      });\n\n      const result = await uploadFileToService(mockFile, \"course_files\");\n\n      expect(global.fetch).toHaveBeenCalledWith(\n        expect.stringContaining(\"/api/documents/upload/\"),\n        expect.objectContaining({\n          method: \"POST\",\n          body: expect.any(FormData),\n        }),\n      );\n      expect(result).toEqual(mockResponse);\n      expect(registerUpload).toHaveBeenCalled();\n    });\n\n    it(\"should handle upload progress\", async () => {\n      const mockFile = new File([\"test content\"], \"test.pdf\", {\n        type: \"application/pdf\",\n      });\n      const mockResponse = { id: 1, filename: \"test.pdf\", status: \"uploaded\" };\n      const onProgress = jest.fn();\n\n      (global.fetch as jest.Mock).mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockResponse,\n      });\n\n      await uploadFileToService(mockFile, \"course_files\", onProgress);\n\n      expect(registerUpload).toHaveBeenCalled();\n    });\n\n    it(\"should handle upload errors\", async () => {\n      const mockFile = new File([\"test content\"], \"test.pdf\", {\n        type: \"application/pdf\",\n      });\n\n      (global.fetch as jest.Mock).mockResolvedValueOnce({\n        ok: false,\n        status: 400,\n        statusText: \"Bad Request\",\n        text: async () => \"Upload failed\",\n      });\n\n      await expect(\n        uploadFileToService(mockFile, \"course_files\"),\n      ).rejects.toThrow(\"Upload failed: 400 Bad Request\");\n    });\n\n    it(\"should handle network errors\", async () => {\n      const mockFile = new File([\"test content\"], \"test.pdf\", {\n        type: \"application/pdf\",\n      });\n\n      (global.fetch as jest.Mock).mockRejectedValueOnce(\n        new Error(\"Network error\"),\n      );\n\n      await expect(\n        uploadFileToService(mockFile, \"course_files\"),\n      ).rejects.toThrow(\"Network error\");\n    });\n\n    it(\"should handle abort errors\", async () => {\n      const mockFile = new File([\"test content\"], \"test.pdf\", {\n        type: \"application/pdf\",\n      });\n\n      const abortError = new Error(\"Upload was cancelled\");\n      abortError.name = \"AbortError\";\n      (global.fetch as jest.Mock).mockRejectedValueOnce(abortError);\n\n      await expect(\n        uploadFileToService(mockFile, \"course_files\"),\n      ).rejects.toThrow(\"Upload was cancelled\");\n    });\n\n    it(\"should upload different file types\", async () => {\n      const mockFile = new File([\"test content\"], \"test.pdf\", {\n        type: \"application/pdf\",\n      });\n      const mockResponse = { id: 1, filename: \"test.pdf\", status: \"uploaded\" };\n\n      (global.fetch as jest.Mock).mockResolvedValue({\n        ok: true,\n        json: async () => mockResponse,\n      });\n\n      // Test course files\n      await uploadFileToService(mockFile, \"course_files\");\n      expect(global.fetch).toHaveBeenCalledWith(\n        expect.stringContaining(\"/api/documents/upload/\"),\n        expect.objectContaining({\n          method: \"POST\",\n          body: expect.any(FormData),\n        }),\n      );\n\n      // Test test files\n      await uploadFileToService(mockFile, \"test_files\");\n      expect(global.fetch).toHaveBeenCalledWith(\n        expect.stringContaining(\"/api/documents/upload/\"),\n        expect.objectContaining({\n          method: \"POST\",\n          body: expect.any(FormData),\n        }),\n      );\n\n      // Test learning materials\n      await uploadFileToService(mockFile, \"learning_materials\");\n      expect(global.fetch).toHaveBeenCalledWith(\n        expect.stringContaining(\"/api/documents/upload/\"),\n        expect.objectContaining({\n          method: \"POST\",\n          body: expect.any(FormData),\n        }),\n      );\n    });\n  });\n\n  describe(\"startDocumentProcessing\", () => {\n    it(\"should start document processing successfully\", async () => {\n      (global.fetch as jest.Mock).mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({ status: \"processing\" }),\n      });\n\n      await startDocumentProcessing(1);\n\n      expect(global.fetch).toHaveBeenCalledWith(\n        expect.stringContaining(\"/api/documents/1/process/\"),\n        expect.objectContaining({\n          method: \"POST\",\n          headers: expect.objectContaining({\n            Authorization: expect.any(String),\n          }),\n        }),\n      );\n      expect(registerUpload).toHaveBeenCalled();\n    });\n\n    it(\"should handle processing errors\", async () => {\n      (global.fetch as jest.Mock).mockResolvedValueOnce({\n        ok: false,\n        status: 500,\n        statusText: \"Internal Server Error\",\n        text: async () => \"Processing failed\",\n      });\n\n      await expect(startDocumentProcessing(1)).rejects.toThrow(\n        \"Processing failed: 500 Internal Server Error\",\n      );\n    });\n\n    it(\"should handle network errors during processing\", async () => {\n      (global.fetch as jest.Mock).mockRejectedValueOnce(\n        new Error(\"Network error\"),\n      );\n\n      await expect(startDocumentProcessing(1)).rejects.toThrow(\"Network error\");\n    });\n\n    it(\"should handle abort errors during processing\", async () => {\n      const abortError = new Error(\"Processing was cancelled\");\n      abortError.name = \"AbortError\";\n      (global.fetch as jest.Mock).mockRejectedValueOnce(abortError);\n\n      await expect(startDocumentProcessing(1)).rejects.toThrow(\n        \"Processing was cancelled\",\n      );\n    });\n\n    it(\"should handle different document IDs\", async () => {\n      const mockResponse = { status: \"processing\" };\n\n      (global.fetch as jest.Mock).mockResolvedValue({\n        ok: true,\n        json: async () => mockResponse,\n      });\n\n      await startDocumentProcessing(1);\n      expect(global.fetch).toHaveBeenCalledWith(\n        expect.stringContaining(\"/api/documents/1/process/\"),\n        expect.any(Object),\n      );\n\n      await startDocumentProcessing(999);\n      expect(global.fetch).toHaveBeenCalledWith(\n        expect.stringContaining(\"/api/documents/999/process/\"),\n        expect.any(Object),\n      );\n    });\n  });\n\n  describe(\"error handling edge cases\", () => {\n    it(\"should handle malformed JSON responses\", async () => {\n      const mockFile = new File([\"test content\"], \"test.pdf\", {\n        type: \"application/pdf\",\n      });\n\n      (global.fetch as jest.Mock).mockResolvedValueOnce({\n        ok: true,\n        json: async () => {\n          throw new Error(\"Invalid JSON\");\n        },\n      });\n\n      await expect(\n        uploadFileToService(mockFile, \"course_files\"),\n      ).rejects.toThrow(\"Invalid JSON\");\n    });\n\n    it(\"should handle empty file uploads\", async () => {\n      const mockFile = new File([\"\"], \"empty.pdf\", { type: \"application/pdf\" });\n      const mockResponse = { id: 1, filename: \"empty.pdf\", status: \"uploaded\" };\n\n      (global.fetch as jest.Mock).mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockResponse,\n      });\n\n      const result = await uploadFileToService(mockFile, \"course_files\");\n      expect(result).toEqual(mockResponse);\n    });\n\n    it(\"should handle large file uploads\", async () => {\n      const largeContent = \"x\".repeat(1024 * 1024); // 1MB\n      const mockFile = new File([largeContent], \"large.pdf\", {\n        type: \"application/pdf\",\n      });\n      const mockResponse = { id: 1, filename: \"large.pdf\", status: \"uploaded\" };\n\n      (global.fetch as jest.Mock).mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockResponse,\n      });\n\n      const result = await uploadFileToService(mockFile, \"course_files\");\n      expect(result).toEqual(mockResponse);\n    });\n  });\n\n  describe(\"authentication headers\", () => {\n    it(\"should include authentication headers\", async () => {\n      const mockFile = new File([\"test content\"], \"test.pdf\", {\n        type: \"application/pdf\",\n      });\n      const mockResponse = { id: 1, filename: \"test.pdf\", status: \"uploaded\" };\n\n      // Mock localStorage for auth token\n      const mockLocalStorage = {\n        getItem: jest.fn().mockReturnValue(\"mock-token\"),\n      };\n      Object.defineProperty(window, \"localStorage\", {\n        value: mockLocalStorage,\n        writable: true,\n      });\n\n      (global.fetch as jest.Mock).mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockResponse,\n      });\n\n      await uploadFileToService(mockFile, \"course_files\");\n\n      expect(global.fetch).toHaveBeenCalledWith(\n        expect.stringContaining(\"/api/documents/upload/\"),\n        expect.objectContaining({\n          method: \"POST\",\n          headers: expect.objectContaining({\n            Authorization: \"Bearer mock-token\",\n          }),\n          body: expect.any(FormData),\n        }),\n      );\n    });\n\n    it(\"should handle missing auth token gracefully\", async () => {\n      const mockFile = new File([\"test content\"], \"test.pdf\", {\n        type: \"application/pdf\",\n      });\n      const mockResponse = { id: 1, filename: \"test.pdf\", status: \"uploaded\" };\n\n      // Mock localStorage with no token\n      const mockLocalStorage = {\n        getItem: jest.fn().mockReturnValue(null),\n      };\n      Object.defineProperty(window, \"localStorage\", {\n        value: mockLocalStorage,\n        writable: true,\n      });\n\n      (global.fetch as jest.Mock).mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockResponse,\n      });\n\n      const result = await uploadFileToService(mockFile, \"course_files\");\n      expect(result).toEqual(mockResponse);\n    });\n  });\n});\n"],"names":["jest","mock","registerUpload","fn","global","fetch","mockShowToast","Object","defineProperty","window","value","writable","describe","beforeEach","clearAllMocks","mockClear","it","mockFile","File","type","mockResponse","id","filename","status","mockResolvedValueOnce","ok","json","result","uploadFileToService","expect","toHaveBeenCalledWith","stringContaining","objectContaining","method","body","any","FormData","toEqual","toHaveBeenCalled","onProgress","statusText","text","rejects","toThrow","mockRejectedValueOnce","Error","abortError","name","mockResolvedValue","startDocumentProcessing","headers","Authorization","String","largeContent","repeat","mockLocalStorage","getItem","mockReturnValue"],"mappings":"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"}