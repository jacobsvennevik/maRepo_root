d7a41c1f876a967731f628a741f07032
"use strict";
// Mock the cleanup utils
jest.mock("../cleanup-utils", ()=>({
        registerUpload: jest.fn()
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _uploadutils = require("../upload-utils");
const _cleanuputils = require("../cleanup-utils");
// Mock fetch
global.fetch = jest.fn();
// Mock window.showToast
const mockShowToast = jest.fn();
Object.defineProperty(window, "showToast", {
    value: mockShowToast,
    writable: true
});
describe("upload-utils", ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
        mockShowToast.mockClear();
        _cleanuputils.registerUpload.mockClear();
    });
    describe("uploadFileToService", ()=>{
        it("should upload file successfully", async ()=>{
            const mockFile = new File([
                "test content"
            ], "test.pdf", {
                type: "application/pdf"
            });
            const mockResponse = {
                id: 1,
                filename: "test.pdf",
                status: "uploaded"
            };
            global.fetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockResponse
            });
            const result = await (0, _uploadutils.uploadFileToService)(mockFile, "course_files");
            expect(global.fetch).toHaveBeenCalledWith(expect.stringContaining("/api/documents/upload/"), expect.objectContaining({
                method: "POST",
                body: expect.any(FormData)
            }));
            expect(result).toEqual(mockResponse);
            expect(_cleanuputils.registerUpload).toHaveBeenCalled();
        });
        it("should handle upload progress", async ()=>{
            const mockFile = new File([
                "test content"
            ], "test.pdf", {
                type: "application/pdf"
            });
            const mockResponse = {
                id: 1,
                filename: "test.pdf",
                status: "uploaded"
            };
            const onProgress = jest.fn();
            global.fetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockResponse
            });
            await (0, _uploadutils.uploadFileToService)(mockFile, "course_files", onProgress);
            expect(_cleanuputils.registerUpload).toHaveBeenCalled();
        });
        it("should handle upload errors", async ()=>{
            const mockFile = new File([
                "test content"
            ], "test.pdf", {
                type: "application/pdf"
            });
            global.fetch.mockResolvedValueOnce({
                ok: false,
                status: 400,
                statusText: "Bad Request",
                text: async ()=>"Upload failed"
            });
            await expect((0, _uploadutils.uploadFileToService)(mockFile, "course_files")).rejects.toThrow("Upload failed: 400 Bad Request");
        });
        it("should handle network errors", async ()=>{
            const mockFile = new File([
                "test content"
            ], "test.pdf", {
                type: "application/pdf"
            });
            global.fetch.mockRejectedValueOnce(new Error("Network error"));
            await expect((0, _uploadutils.uploadFileToService)(mockFile, "course_files")).rejects.toThrow("Network error");
        });
        it("should handle abort errors", async ()=>{
            const mockFile = new File([
                "test content"
            ], "test.pdf", {
                type: "application/pdf"
            });
            const abortError = new Error("Upload was cancelled");
            abortError.name = "AbortError";
            global.fetch.mockRejectedValueOnce(abortError);
            await expect((0, _uploadutils.uploadFileToService)(mockFile, "course_files")).rejects.toThrow("Upload was cancelled");
        });
        it("should upload different file types", async ()=>{
            const mockFile = new File([
                "test content"
            ], "test.pdf", {
                type: "application/pdf"
            });
            const mockResponse = {
                id: 1,
                filename: "test.pdf",
                status: "uploaded"
            };
            global.fetch.mockResolvedValue({
                ok: true,
                json: async ()=>mockResponse
            });
            // Test course files
            await (0, _uploadutils.uploadFileToService)(mockFile, "course_files");
            expect(global.fetch).toHaveBeenCalledWith(expect.stringContaining("/api/documents/upload/"), expect.objectContaining({
                method: "POST",
                body: expect.any(FormData)
            }));
            // Test test files
            await (0, _uploadutils.uploadFileToService)(mockFile, "test_files");
            expect(global.fetch).toHaveBeenCalledWith(expect.stringContaining("/api/documents/upload/"), expect.objectContaining({
                method: "POST",
                body: expect.any(FormData)
            }));
            // Test learning materials
            await (0, _uploadutils.uploadFileToService)(mockFile, "learning_materials");
            expect(global.fetch).toHaveBeenCalledWith(expect.stringContaining("/api/documents/upload/"), expect.objectContaining({
                method: "POST",
                body: expect.any(FormData)
            }));
        });
    });
    describe("startDocumentProcessing", ()=>{
        it("should start document processing successfully", async ()=>{
            global.fetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        status: "processing"
                    })
            });
            await (0, _uploadutils.startDocumentProcessing)(1);
            expect(global.fetch).toHaveBeenCalledWith(expect.stringContaining("/api/documents/1/process/"), expect.objectContaining({
                method: "POST",
                headers: expect.objectContaining({
                    Authorization: expect.any(String)
                })
            }));
            expect(_cleanuputils.registerUpload).toHaveBeenCalled();
        });
        it("should handle processing errors", async ()=>{
            global.fetch.mockResolvedValueOnce({
                ok: false,
                status: 500,
                statusText: "Internal Server Error",
                text: async ()=>"Processing failed"
            });
            await expect((0, _uploadutils.startDocumentProcessing)(1)).rejects.toThrow("Processing failed: 500 Internal Server Error");
        });
        it("should handle network errors during processing", async ()=>{
            global.fetch.mockRejectedValueOnce(new Error("Network error"));
            await expect((0, _uploadutils.startDocumentProcessing)(1)).rejects.toThrow("Network error");
        });
        it("should handle abort errors during processing", async ()=>{
            const abortError = new Error("Processing was cancelled");
            abortError.name = "AbortError";
            global.fetch.mockRejectedValueOnce(abortError);
            await expect((0, _uploadutils.startDocumentProcessing)(1)).rejects.toThrow("Processing was cancelled");
        });
        it("should handle different document IDs", async ()=>{
            const mockResponse = {
                status: "processing"
            };
            global.fetch.mockResolvedValue({
                ok: true,
                json: async ()=>mockResponse
            });
            await (0, _uploadutils.startDocumentProcessing)(1);
            expect(global.fetch).toHaveBeenCalledWith(expect.stringContaining("/api/documents/1/process/"), expect.any(Object));
            await (0, _uploadutils.startDocumentProcessing)(999);
            expect(global.fetch).toHaveBeenCalledWith(expect.stringContaining("/api/documents/999/process/"), expect.any(Object));
        });
    });
    describe("error handling edge cases", ()=>{
        it("should handle malformed JSON responses", async ()=>{
            const mockFile = new File([
                "test content"
            ], "test.pdf", {
                type: "application/pdf"
            });
            global.fetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>{
                    throw new Error("Invalid JSON");
                }
            });
            await expect((0, _uploadutils.uploadFileToService)(mockFile, "course_files")).rejects.toThrow("Invalid JSON");
        });
        it("should handle empty file uploads", async ()=>{
            const mockFile = new File([
                ""
            ], "empty.pdf", {
                type: "application/pdf"
            });
            const mockResponse = {
                id: 1,
                filename: "empty.pdf",
                status: "uploaded"
            };
            global.fetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockResponse
            });
            const result = await (0, _uploadutils.uploadFileToService)(mockFile, "course_files");
            expect(result).toEqual(mockResponse);
        });
        it("should handle large file uploads", async ()=>{
            const largeContent = "x".repeat(1024 * 1024); // 1MB
            const mockFile = new File([
                largeContent
            ], "large.pdf", {
                type: "application/pdf"
            });
            const mockResponse = {
                id: 1,
                filename: "large.pdf",
                status: "uploaded"
            };
            global.fetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockResponse
            });
            const result = await (0, _uploadutils.uploadFileToService)(mockFile, "course_files");
            expect(result).toEqual(mockResponse);
        });
    });
    describe("authentication headers", ()=>{
        it("should include authentication headers", async ()=>{
            const mockFile = new File([
                "test content"
            ], "test.pdf", {
                type: "application/pdf"
            });
            const mockResponse = {
                id: 1,
                filename: "test.pdf",
                status: "uploaded"
            };
            // Mock localStorage for auth token
            const mockLocalStorage = {
                getItem: jest.fn().mockReturnValue("mock-token")
            };
            Object.defineProperty(window, "localStorage", {
                value: mockLocalStorage,
                writable: true
            });
            global.fetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockResponse
            });
            await (0, _uploadutils.uploadFileToService)(mockFile, "course_files");
            expect(global.fetch).toHaveBeenCalledWith(expect.stringContaining("/api/documents/upload/"), expect.objectContaining({
                method: "POST",
                headers: expect.objectContaining({
                    Authorization: "Bearer mock-token"
                }),
                body: expect.any(FormData)
            }));
        });
        it("should handle missing auth token gracefully", async ()=>{
            const mockFile = new File([
                "test content"
            ], "test.pdf", {
                type: "application/pdf"
            });
            const mockResponse = {
                id: 1,
                filename: "test.pdf",
                status: "uploaded"
            };
            // Mock localStorage with no token
            const mockLocalStorage = {
                getItem: jest.fn().mockReturnValue(null)
            };
            Object.defineProperty(window, "localStorage", {
                value: mockLocalStorage,
                writable: true
            });
            global.fetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockResponse
            });
            const result = await (0, _uploadutils.uploadFileToService)(mockFile, "course_files");
            expect(result).toEqual(mockResponse);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,