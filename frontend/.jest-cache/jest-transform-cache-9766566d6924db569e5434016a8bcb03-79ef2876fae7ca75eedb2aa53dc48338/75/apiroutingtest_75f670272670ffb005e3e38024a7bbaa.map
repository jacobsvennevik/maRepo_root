{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/app/projects/[projectId]/flashcards/[setId]/__tests__/api-routing.test.ts"],"sourcesContent":["import { axiosApi, axiosGeneration } from '@/lib/axios';\nimport { isTestMode } from '@/lib/env/runMode';\n\n// Mock the axios instances\njest.mock('@/lib/axios', () => ({\n  axiosApi: {\n    get: jest.fn(),\n    post: jest.fn(),\n    put: jest.fn(),\n    delete: jest.fn(),\n  },\n  axiosGeneration: {\n    get: jest.fn(),\n    post: jest.fn(),\n    put: jest.fn(),\n    delete: jest.fn(),\n  },\n}));\n\n// Mock test mode\njest.mock('@/lib/env/runMode', () => ({\n  isTestMode: jest.fn(),\n}));\n\nconst mockAxiosApi = axiosApi as jest.Mocked<typeof axiosApi>;\nconst mockAxiosGeneration = axiosGeneration as jest.Mocked<typeof axiosGeneration>;\nconst mockIsTestMode = isTestMode as jest.MockedFunction<typeof isTestMode>;\n\ndescribe('Flashcard API Routing', () => {\n  const projectId = '203062be-58d0-4f98-bbd4-33b4ce081276';\n  const setId = '9';\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('Correct API client usage', () => {\n    it('should use axiosGeneration for flashcard set retrieval', async () => {\n      const mockFlashcardSet = {\n        id: 9,\n        title: 'Test Set',\n        description: 'Test',\n        owner: 1,\n        difficulty_level: 'INTERMEDIATE',\n        target_audience: 'Students',\n        estimated_study_time: 15,\n        tags: ['test'],\n        created_at: '2024-01-01T00:00:00Z',\n        updated_at: '2024-01-01T00:00:00Z',\n        flashcard_count: 0,\n        is_public: false,\n        study_stats: {\n          total_cards: 0,\n          due_cards: 0,\n          mastered_cards: 0,\n          learning_cards: 0,\n          review_cards: 0,\n          retention_rate: 0,\n          streak_days: 0,\n          next_review: '2024-01-01T00:00:00Z'\n        },\n        flashcards: []\n      };\n\n      mockAxiosGeneration.get.mockResolvedValue({ data: mockFlashcardSet });\n\n      // Simulate the correct API call\n      const response = await axiosGeneration.get(`projects/${projectId}/flashcard-sets/${setId}/`);\n\n      expect(mockAxiosGeneration.get).toHaveBeenCalledWith(\n        `projects/${projectId}/flashcard-sets/${setId}/`\n      );\n      expect(response.data).toEqual(mockFlashcardSet);\n    });\n\n    it('should NOT use axiosApi for flashcard operations', async () => {\n      const error = new Error('Page not found at /api/projects/203062be-58d0-4f98-bbd4-33b4ce081276/flashcard-sets/9/');\n      mockAxiosApi.get.mockRejectedValue(error);\n\n      // This should fail because we're using the wrong client\n      try {\n        await axiosApi.get(`projects/${projectId}/flashcard-sets/${setId}/`);\n      } catch (e) {\n        expect(e).toEqual(error);\n      }\n\n      expect(mockAxiosApi.get).toHaveBeenCalledWith(\n        `projects/${projectId}/flashcard-sets/${setId}/`\n      );\n    });\n  });\n\n  describe('Test mode behavior', () => {\n    it('should add X-Test-Mode header when in test mode', async () => {\n      mockIsTestMode.mockReturnValue(true);\n      mockAxiosGeneration.get.mockResolvedValue({ data: {} });\n\n      await axiosGeneration.get(`projects/${projectId}/flashcard-sets/${setId}/`);\n\n      expect(mockAxiosGeneration.get).toHaveBeenCalledWith(\n        `projects/${projectId}/flashcard-sets/${setId}/`,\n        expect.objectContaining({\n          headers: expect.objectContaining({\n            'X-Test-Mode': 'true'\n          })\n        })\n      );\n    });\n\n    it('should not add X-Test-Mode header when not in test mode', async () => {\n      mockIsTestMode.mockReturnValue(false);\n      mockAxiosGeneration.get.mockResolvedValue({ data: {} });\n\n      await axiosGeneration.get(`projects/${projectId}/flashcard-sets/${setId}/`);\n\n      expect(mockAxiosGeneration.get).toHaveBeenCalledWith(\n        `projects/${projectId}/flashcard-sets/${setId}/`,\n        expect.not.objectContaining({\n          headers: expect.objectContaining({\n            'X-Test-Mode': 'true'\n          })\n        })\n      );\n    });\n  });\n\n  describe('API endpoint validation', () => {\n    it('should call the correct backend endpoint', async () => {\n      mockAxiosGeneration.get.mockResolvedValue({ data: {} });\n\n      await axiosGeneration.get(`projects/${projectId}/flashcard-sets/${setId}/`);\n\n      // Verify the call goes to the generation API\n      expect(mockAxiosGeneration.get).toHaveBeenCalledWith(\n        `projects/${projectId}/flashcard-sets/${setId}/`\n      );\n    });\n\n    it('should handle 404 errors correctly', async () => {\n      const notFoundError = new Error('Not found');\n      notFoundError.response = { status: 404 };\n      mockAxiosGeneration.get.mockRejectedValue(notFoundError);\n\n      try {\n        await axiosGeneration.get(`projects/${projectId}/flashcard-sets/${setId}/`);\n      } catch (error) {\n        expect(error.response.status).toBe(404);\n      }\n    });\n  });\n\n  describe('Base URL configuration', () => {\n    it('should use correct base URLs for different clients', () => {\n      // axiosApi should point to /api/\n      expect(mockAxiosApi.defaults.baseURL).toBe('http://localhost:8000/api/');\n      \n      // axiosGeneration should point to /generation/api/\n      expect(mockAxiosGeneration.defaults.baseURL).toBe('http://localhost:8000/generation/api/');\n    });\n  });\n});\n"],"names":["jest","mock","axiosApi","get","fn","post","put","delete","axiosGeneration","isTestMode","mockAxiosApi","mockAxiosGeneration","mockIsTestMode","describe","projectId","setId","beforeEach","clearAllMocks","it","mockFlashcardSet","id","title","description","owner","difficulty_level","target_audience","estimated_study_time","tags","created_at","updated_at","flashcard_count","is_public","study_stats","total_cards","due_cards","mastered_cards","learning_cards","review_cards","retention_rate","streak_days","next_review","flashcards","mockResolvedValue","data","response","expect","toHaveBeenCalledWith","toEqual","error","Error","mockRejectedValue","e","mockReturnValue","objectContaining","headers","not","notFoundError","status","toBe","defaults","baseURL"],"mappings":"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"}