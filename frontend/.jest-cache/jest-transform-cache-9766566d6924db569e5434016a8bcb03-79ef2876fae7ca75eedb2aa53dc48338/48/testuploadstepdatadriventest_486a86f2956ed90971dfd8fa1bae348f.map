{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/features/projects/components/__tests__/test-upload-step.data-driven.test.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { screen } from \"@testing-library/react\";\nimport \"@testing-library/jest-dom\";\nimport { TestUploadStep } from \"../steps/test-upload-step\";\n\n// Import new centralized utilities\nimport {\n  renderWithProviders,\n  setupFullTestEnvironment,\n  testFactories,\n  standardMocks\n} from \"../../../../../src/test-utils\";\n\n// Setup test environment\nconst testEnv = setupFullTestEnvironment();\nconst { createTestFile } = testFactories;\n\ndescribe(\"TestUploadStep - Data-Driven Tests\", () => {\n  beforeEach(() => {\n    testEnv.mocks.resetAll();\n  });\n\n  // Test mode scenarios\n  const testModeScenarios = [\n    {\n      mode: 'test',\n      expectedBanner: true,\n      expectedText: 'Test Mode Active',\n      description: 'should show test mode banner in test environment'\n    },\n    {\n      mode: 'development',\n      expectedBanner: true,\n      expectedText: 'Test Mode Active',\n      description: 'should show test mode banner in development environment'\n    }\n  ];\n\n  describe.each(testModeScenarios)('Test Mode Detection', ({ mode, expectedBanner, expectedText, description }) => {\n    it(description, () => {\n      const mockCallbacks = {\n        onUploadComplete: jest.fn(),\n        onAnalysisComplete: jest.fn(),\n        onNext: jest.fn(),\n        onBack: jest.fn()\n      };\n\n      renderWithProviders(<TestUploadStep {...mockCallbacks} />);\n\n      if (expectedBanner) {\n        expect(screen.getByText(/Test Mode/)).toBeInTheDocument();\n        expect(screen.getByText(expectedText)).toBeInTheDocument();\n      } else {\n        expect(screen.queryByText(/Test Mode/)).not.toBeInTheDocument();\n      }\n    });\n  });\n\n  // File upload scenarios\n  const fileUploadScenarios = [\n    {\n      fileName: 'single.pdf',\n      fileCount: 1,\n      expectedAnalysis: 'ðŸ§ª Simulating AI analysis...',\n      description: 'should handle single file upload'\n    },\n    {\n      fileName: 'multiple.pdf',\n      fileCount: 3,\n      expectedAnalysis: 'ðŸ§ª Simulating AI analysis...',\n      description: 'should handle multiple file upload'\n    },\n    {\n      fileName: 'large.pdf',\n      fileCount: 1,\n      fileSize: 10 * 1024 * 1024, // 10MB\n      expectedAnalysis: 'ðŸ§ª Simulating AI analysis...',\n      description: 'should handle large file upload'\n    }\n  ];\n\n  describe.each(fileUploadScenarios)('File Upload Scenarios', ({ fileName, fileCount, fileSize, expectedAnalysis, description }) => {\n    it(description, async () => {\n      const mockCallbacks = {\n        onUploadComplete: jest.fn(),\n        onAnalysisComplete: jest.fn(),\n        onNext: jest.fn(),\n        onBack: jest.fn()\n      };\n\n      renderWithProviders(<TestUploadStep {...mockCallbacks} />);\n\n      // Create test files\n      const files = Array.from({ length: fileCount }, (_, index) => {\n        const { file } = createTestFile({\n          fileName: fileCount === 1 ? fileName : `${fileName.replace('.pdf', '')}_${index + 1}.pdf`,\n          fileSize: fileSize || 1024 * 1024,\n          content: `test content ${index + 1}`\n        });\n        return file;\n      });\n\n      const fileInput = screen.getByTestId(\"file-input\");\n      await testEnv.files.createTestFile().simulateFileUpload(fileInput, files);\n\n      // Verify files are listed\n      files.forEach((file) => {\n        expect(screen.getByText(file.name)).toBeInTheDocument();\n      });\n\n      // Verify analysis starts\n      expect(screen.getByText(expectedAnalysis)).toBeInTheDocument();\n    });\n  });\n\n  // API response scenarios\n  const apiResponseScenarios = [\n    {\n      status: 200,\n      response: { id: 123, status: 'completed' },\n      expectedBehavior: 'success',\n      description: 'should handle successful API response'\n    },\n    {\n      status: 400,\n      response: { error: 'Bad Request' },\n      expectedBehavior: 'error',\n      description: 'should handle API error response'\n    },\n    {\n      status: 500,\n      response: { error: 'Internal Server Error' },\n      expectedBehavior: 'error',\n      description: 'should handle server error response'\n    },\n    {\n      status: 0,\n      response: null,\n      expectedBehavior: 'network_error',\n      description: 'should handle network error'\n    }\n  ];\n\n  describe.each(apiResponseScenarios)('API Response Scenarios', ({ status, response, expectedBehavior, description }) => {\n    it(description, async () => {\n      const { apiMocks } = standardMocks;\n      \n      // Setup mock response\n      if (expectedBehavior === 'network_error') {\n        apiMocks.mockNetworkError();\n      } else {\n        apiMocks.mockFetch.mockResolvedValueOnce({\n          ok: status >= 200 && status < 300,\n          status,\n          json: async () => response\n        });\n      }\n\n      const mockCallbacks = {\n        onUploadComplete: jest.fn(),\n        onAnalysisComplete: jest.fn(),\n        onNext: jest.fn(),\n        onBack: jest.fn()\n      };\n\n      renderWithProviders(<TestUploadStep {...mockCallbacks} />);\n\n      // Create and upload test file\n      const { file } = createTestFile({\n        fileName: 'test.pdf',\n        content: 'test content'\n      });\n\n      const fileInput = screen.getByTestId(\"file-input\");\n      await testEnv.files.createTestFile().simulateFileUpload(fileInput, [file]);\n\n      // Verify expected behavior\n      if (expectedBehavior === 'success') {\n        expect(screen.getByText(\"ðŸ¤– Analyzing test content...\")).toBeInTheDocument();\n      } else {\n        // In test mode, component uses mock data regardless of API response\n        expect(screen.getByText(\"ðŸ¤– Analyzing test content...\")).toBeInTheDocument();\n      }\n    });\n  });\n\n  // Component state scenarios\n  const componentStateScenarios = [\n    {\n      initialState: 'idle',\n      action: 'upload_file',\n      expectedState: 'processing',\n      description: 'should transition from idle to processing on file upload'\n    },\n    {\n      initialState: 'processing',\n      action: 'analysis_complete',\n      expectedState: 'completed',\n      description: 'should transition from processing to completed on analysis'\n    },\n    {\n      initialState: 'processing',\n      action: 'analysis_error',\n      expectedState: 'error',\n      description: 'should transition from processing to error on analysis failure'\n    }\n  ];\n\n  describe.each(componentStateScenarios)('Component State Transitions', ({ initialState, action, expectedState, description }) => {\n    it(description, async () => {\n      const mockCallbacks = {\n        onUploadComplete: jest.fn(),\n        onAnalysisComplete: jest.fn(),\n        onNext: jest.fn(),\n        onBack: jest.fn()\n      };\n\n      renderWithProviders(<TestUploadStep {...mockCallbacks} />);\n\n      if (action === 'upload_file') {\n        const { file } = createTestFile({ fileName: 'test.pdf' });\n        const fileInput = screen.getByTestId(\"file-input\");\n        await testEnv.files.createTestFile().simulateFileUpload(fileInput, [file]);\n        \n        expect(screen.getByText(\"ðŸ¤– Analyzing test content...\")).toBeInTheDocument();\n      }\n      \n      // Additional state verification would go here based on expectedState\n    });\n  });\n\n  // Performance scenarios\n  const performanceScenarios = [\n    {\n      fileCount: 1,\n      maxRenderTime: 1000,\n      description: 'should render single file upload within 1 second'\n    },\n    {\n      fileCount: 5,\n      maxRenderTime: 2000,\n      description: 'should render multiple file upload within 2 seconds'\n    },\n    {\n      fileCount: 10,\n      maxRenderTime: 3000,\n      description: 'should render many files within 3 seconds'\n    }\n  ];\n\n  describe.each(performanceScenarios)('Performance Tests', ({ fileCount, maxRenderTime, description }) => {\n    it(description, async () => {\n      const startTime = Date.now();\n      \n      const mockCallbacks = {\n        onUploadComplete: jest.fn(),\n        onAnalysisComplete: jest.fn(),\n        onNext: jest.fn(),\n        onBack: jest.fn()\n      };\n\n      renderWithProviders(<TestUploadStep {...mockCallbacks} />);\n\n      // Create multiple files\n      const files = Array.from({ length: fileCount }, (_, index) => {\n        const { file } = createTestFile({\n          fileName: `test_${index + 1}.pdf`,\n          content: `test content ${index + 1}`\n        });\n        return file;\n      });\n\n      const fileInput = screen.getByTestId(\"file-input\");\n      await testEnv.files.createTestFile().simulateFileUpload(fileInput, files);\n\n      const renderTime = Date.now() - startTime;\n      expect(renderTime).toBeLessThan(maxRenderTime);\n      \n      // Verify files are rendered\n      files.forEach((file) => {\n        expect(screen.getByText(file.name)).toBeInTheDocument();\n      });\n    });\n  });\n});\n"],"names":["testEnv","setupFullTestEnvironment","createTestFile","testFactories","describe","beforeEach","mocks","resetAll","testModeScenarios","mode","expectedBanner","expectedText","description","each","it","mockCallbacks","onUploadComplete","jest","fn","onAnalysisComplete","onNext","onBack","renderWithProviders","TestUploadStep","expect","screen","getByText","toBeInTheDocument","queryByText","not","fileUploadScenarios","fileName","fileCount","expectedAnalysis","fileSize","files","Array","from","length","_","index","file","replace","content","fileInput","getByTestId","simulateFileUpload","forEach","name","apiResponseScenarios","status","response","id","expectedBehavior","error","apiMocks","standardMocks","mockNetworkError","mockFetch","mockResolvedValueOnce","ok","json","componentStateScenarios","initialState","action","expectedState","performanceScenarios","maxRenderTime","startTime","Date","now","renderTime","toBeLessThan"],"mappings":"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"}