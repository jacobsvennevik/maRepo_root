5a46297315c84025c0a75e04ddb1014d
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _react1 = require("@testing-library/react");
require("@testing-library/jest-dom");
const _testuploadstep = require("../steps/test-upload-step");
const _testutils = require("../../../../test-utils");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
// Setup test environment
const testEnv = (0, _testutils.setupFullTestEnvironment)();
const { createTestFile } = _testutils.testFactories;
describe("TestUploadStep - Data-Driven Tests", ()=>{
    beforeEach(()=>{
        testEnv.mocks.resetAll();
    });
    // Test mode scenarios
    const testModeScenarios = [
        {
            mode: 'test',
            expectedBanner: true,
            expectedText: 'Test Mode Active',
            description: 'should show test mode banner in test environment'
        },
        {
            mode: 'development',
            expectedBanner: true,
            expectedText: 'Test Mode Active',
            description: 'should show test mode banner in development environment'
        }
    ];
    describe.each(testModeScenarios)('Test Mode Detection', ({ mode, expectedBanner, expectedText, description })=>{
        it(description, ()=>{
            const mockCallbacks = {
                onUploadComplete: jest.fn(),
                onAnalysisComplete: jest.fn(),
                onNext: jest.fn(),
                onBack: jest.fn()
            };
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_testuploadstep.TestUploadStep, {
                ...mockCallbacks
            }));
            if (expectedBanner) {
                expect(_react1.screen.getByText(/Test Mode/)).toBeInTheDocument();
                expect(_react1.screen.getByText(expectedText)).toBeInTheDocument();
            } else {
                expect(_react1.screen.queryByText(/Test Mode/)).not.toBeInTheDocument();
            }
        });
    });
    // File upload scenarios
    const fileUploadScenarios = [
        {
            fileName: 'single.pdf',
            fileCount: 1,
            expectedAnalysis: 'ðŸ§ª Simulating AI analysis...',
            description: 'should handle single file upload'
        },
        {
            fileName: 'multiple.pdf',
            fileCount: 3,
            expectedAnalysis: 'ðŸ§ª Simulating AI analysis...',
            description: 'should handle multiple file upload'
        },
        {
            fileName: 'large.pdf',
            fileCount: 1,
            fileSize: 10 * 1024 * 1024,
            expectedAnalysis: 'ðŸ§ª Simulating AI analysis...',
            description: 'should handle large file upload'
        }
    ];
    describe.each(fileUploadScenarios)('File Upload Scenarios', ({ fileName, fileCount, fileSize, expectedAnalysis, description })=>{
        it(description, async ()=>{
            const mockCallbacks = {
                onUploadComplete: jest.fn(),
                onAnalysisComplete: jest.fn(),
                onNext: jest.fn(),
                onBack: jest.fn()
            };
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_testuploadstep.TestUploadStep, {
                ...mockCallbacks
            }));
            // Create test files
            const files = Array.from({
                length: fileCount
            }, (_, index)=>{
                const { file } = createTestFile({
                    fileName: fileCount === 1 ? fileName : `${fileName.replace('.pdf', '')}_${index + 1}.pdf`,
                    fileSize: fileSize || 1024 * 1024,
                    content: `test content ${index + 1}`
                });
                return file;
            });
            const fileInput = _react1.screen.getByTestId("file-input");
            await testEnv.files.createTestFile().simulateFileUpload(fileInput, files);
            // Verify files are listed
            files.forEach((file)=>{
                expect(_react1.screen.getByText(file.name)).toBeInTheDocument();
            });
            // Verify analysis starts
            expect(_react1.screen.getByText(expectedAnalysis)).toBeInTheDocument();
        });
    });
    // API response scenarios
    const apiResponseScenarios = [
        {
            status: 200,
            response: {
                id: 123,
                status: 'completed'
            },
            expectedBehavior: 'success',
            description: 'should handle successful API response'
        },
        {
            status: 400,
            response: {
                error: 'Bad Request'
            },
            expectedBehavior: 'error',
            description: 'should handle API error response'
        },
        {
            status: 500,
            response: {
                error: 'Internal Server Error'
            },
            expectedBehavior: 'error',
            description: 'should handle server error response'
        },
        {
            status: 0,
            response: null,
            expectedBehavior: 'network_error',
            description: 'should handle network error'
        }
    ];
    describe.each(apiResponseScenarios)('API Response Scenarios', ({ status, response, expectedBehavior, description })=>{
        it(description, async ()=>{
            const { apiMocks } = _testutils.standardMocks;
            // Setup mock response
            if (expectedBehavior === 'network_error') {
                apiMocks.mockNetworkError();
            } else {
                apiMocks.mockFetch.mockResolvedValueOnce({
                    ok: status >= 200 && status < 300,
                    status,
                    json: async ()=>response
                });
            }
            const mockCallbacks = {
                onUploadComplete: jest.fn(),
                onAnalysisComplete: jest.fn(),
                onNext: jest.fn(),
                onBack: jest.fn()
            };
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_testuploadstep.TestUploadStep, {
                ...mockCallbacks
            }));
            // Create and upload test file
            const { file } = createTestFile({
                fileName: 'test.pdf',
                content: 'test content'
            });
            const fileInput = _react1.screen.getByTestId("file-input");
            await testEnv.files.createTestFile().simulateFileUpload(fileInput, [
                file
            ]);
            // Verify expected behavior
            if (expectedBehavior === 'success') {
                expect(_react1.screen.getByText("ðŸ¤– Analyzing test content...")).toBeInTheDocument();
            } else {
                // In test mode, component uses mock data regardless of API response
                expect(_react1.screen.getByText("ðŸ¤– Analyzing test content...")).toBeInTheDocument();
            }
        });
    });
    // Component state scenarios
    const componentStateScenarios = [
        {
            initialState: 'idle',
            action: 'upload_file',
            expectedState: 'processing',
            description: 'should transition from idle to processing on file upload'
        },
        {
            initialState: 'processing',
            action: 'analysis_complete',
            expectedState: 'completed',
            description: 'should transition from processing to completed on analysis'
        },
        {
            initialState: 'processing',
            action: 'analysis_error',
            expectedState: 'error',
            description: 'should transition from processing to error on analysis failure'
        }
    ];
    describe.each(componentStateScenarios)('Component State Transitions', ({ initialState, action, expectedState, description })=>{
        it(description, async ()=>{
            const mockCallbacks = {
                onUploadComplete: jest.fn(),
                onAnalysisComplete: jest.fn(),
                onNext: jest.fn(),
                onBack: jest.fn()
            };
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_testuploadstep.TestUploadStep, {
                ...mockCallbacks
            }));
            if (action === 'upload_file') {
                const { file } = createTestFile({
                    fileName: 'test.pdf'
                });
                const fileInput = _react1.screen.getByTestId("file-input");
                await testEnv.files.createTestFile().simulateFileUpload(fileInput, [
                    file
                ]);
                expect(_react1.screen.getByText("ðŸ¤– Analyzing test content...")).toBeInTheDocument();
            }
        // Additional state verification would go here based on expectedState
        });
    });
    // Performance scenarios
    const performanceScenarios = [
        {
            fileCount: 1,
            maxRenderTime: 1000,
            description: 'should render single file upload within 1 second'
        },
        {
            fileCount: 5,
            maxRenderTime: 2000,
            description: 'should render multiple file upload within 2 seconds'
        },
        {
            fileCount: 10,
            maxRenderTime: 3000,
            description: 'should render many files within 3 seconds'
        }
    ];
    describe.each(performanceScenarios)('Performance Tests', ({ fileCount, maxRenderTime, description })=>{
        it(description, async ()=>{
            const startTime = Date.now();
            const mockCallbacks = {
                onUploadComplete: jest.fn(),
                onAnalysisComplete: jest.fn(),
                onNext: jest.fn(),
                onBack: jest.fn()
            };
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_testuploadstep.TestUploadStep, {
                ...mockCallbacks
            }));
            // Create multiple files
            const files = Array.from({
                length: fileCount
            }, (_, index)=>{
                const { file } = createTestFile({
                    fileName: `test_${index + 1}.pdf`,
                    content: `test content ${index + 1}`
                });
                return file;
            });
            const fileInput = _react1.screen.getByTestId("file-input");
            await testEnv.files.createTestFile().simulateFileUpload(fileInput, files);
            const renderTime = Date.now() - startTime;
            expect(renderTime).toBeLessThan(maxRenderTime);
            // Verify files are rendered
            files.forEach((file)=>{
                expect(_react1.screen.getByText(file.name)).toBeInTheDocument();
            });
        });
    });
});

//# sourceMappingURL=data:application/json;base64,