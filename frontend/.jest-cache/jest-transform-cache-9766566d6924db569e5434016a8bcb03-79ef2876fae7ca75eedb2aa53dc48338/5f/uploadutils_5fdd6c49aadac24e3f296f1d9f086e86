25415bbb9f9fd39cc97685c1ba0a1ea3
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    API_BASE_URL: function() {
        return API_BASE_URL;
    },
    clearProgress: function() {
        return clearProgress;
    },
    getAuthHeaders: function() {
        return getAuthHeaders;
    },
    isTestMode: function() {
        return isTestMode;
    },
    pollDocumentStatus: function() {
        return pollDocumentStatus;
    },
    startDocumentProcessing: function() {
        return startDocumentProcessing;
    },
    updateProgress: function() {
        return updateProgress;
    },
    uploadFileToService: function() {
        return uploadFileToService;
    },
    validateFileSize: function() {
        return validateFileSize;
    },
    validateFileType: function() {
        return validateFileType;
    },
    validateFiles: function() {
        return validateFiles;
    }
});
const _cleanuputils = require("./cleanup-utils");
const _axiosapi = require("../../../lib/axios-api");
const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || "http://localhost:8000";
const isTestMode = ()=>{
    // Check if running in test environment
    if (process.env.NODE_ENV === "test") {
        return true;
    }
    // Check for explicit test mode flag in development
    if (process.env.NODE_ENV === "development" && process.env.NEXT_PUBLIC_TEST_MODE === "true") {
        return true;
    }
    // Check for localhost and test mode
    if (typeof window !== "undefined" && window.location.hostname === "localhost" && process.env.NEXT_PUBLIC_TEST_MODE === "true") {
        return true;
    }
    return false;
};
const getAuthHeaders = ()=>{
    const validDevToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzUwMzE4MDc5LCJpYXQiOjE3NTAzMTQ0NzksImp0aSI6IjU1MmVjNDQ4ZTllNjRmNjM5OTBlNTgyNzk3NzBjNjg2IiwidXNlcl9pZCI6MX0.O8k3yL_dUEMvkBaqxViq-syDXTZNqDfjKtWZEMlxJ14";
    const token = localStorage.getItem("authToken") || validDevToken;
    return token ? {
        Authorization: `Bearer ${token}`,
        "Content-Type": "application/json"
    } : {
        "Content-Type": "application/json"
    };
};
const uploadFileToService = async (file, uploadType, onProgress)=>{
    const controller = new AbortController();
    // Register the upload for cleanup
    (0, _cleanuputils.registerUpload)(controller);
    try {
        const formData = new FormData();
        formData.append("file", file);
        formData.append("upload_type", uploadType);
        const response = await fetch(`${API_BASE_URL}/api/documents/upload/`, {
            method: "POST",
            body: formData,
            headers: getAuthHeaders(),
            signal: controller.signal
        });
        if (!response.ok) {
            const errorText = await response.text().catch(()=>"");
            throw new Error(`Upload failed: ${response.status} ${response.statusText}`);
        }
        const result = await response.json();
        return {
            id: result.id,
            filename: file.name,
            status: result.status
        };
    } catch (error) {
        if (error.name === "AbortError") {
            console.log("Upload aborted:", file.name);
            throw new Error("Upload was cancelled");
        }
        throw error;
    }
};
const startDocumentProcessing = async (documentId, onProgress)=>{
    const controller = new AbortController();
    // Register the processing for cleanup
    (0, _cleanuputils.registerUpload)(controller);
    try {
        const response = await fetch(`${API_BASE_URL}/api/documents/${documentId}/process/`, {
            method: "POST",
            headers: getAuthHeaders(),
            signal: controller.signal
        });
        if (!response.ok) {
            const errorText = await response.text().catch(()=>"");
            throw new Error(`Processing failed: ${response.status} ${response.statusText}`);
        }
        if (onProgress) {
            onProgress(100);
        }
    } catch (error) {
        if (error.name === "AbortError") {
            console.log("Document processing aborted:", documentId);
            throw new Error("Processing was cancelled");
        }
        throw error;
    }
};
const pollDocumentStatus = async (documentId, maxAttempts = 10, onProgress)=>{
    let attempts = 0;
    let processedData = null;
    while(attempts < maxAttempts && !processedData){
        try {
            const statusResponse = await _axiosapi.axiosApi.get(`/pdf_service/documents/${documentId}/`);
            if (statusResponse.status === 200) {
                const statusData = statusResponse.data;
                if (statusData.status === "completed") {
                    processedData = statusData;
                    if (onProgress) onProgress(100);
                    break;
                } else if (statusData.status === "error") {
                    throw new Error("Document processing failed: " + (statusData.error_message || "Unknown error"));
                }
            }
            attempts++;
            if (attempts < maxAttempts) {
                await new Promise((resolve)=>setTimeout(resolve, 1000));
            }
        } catch (pollError) {
            // If this is a processing error, re-throw it
            if (pollError instanceof Error && pollError.message.includes("Document processing failed")) {
                throw pollError;
            }
            // Otherwise, continue polling
            attempts++;
            if (attempts < maxAttempts) {
                await new Promise((resolve)=>setTimeout(resolve, 1000));
            }
        }
    }
    return processedData;
};
const validateFileType = (file, allowedTypes)=>{
    return allowedTypes.some((type)=>file.name.toLowerCase().endsWith(type));
};
const validateFileSize = (file, maxSizeMB)=>{
    return file.size <= maxSizeMB * 1024 * 1024;
};
const validateFiles = (files, allowedTypes, maxSizeMB)=>{
    const invalidFiles = files.filter((file)=>!validateFileType(file, allowedTypes));
    const oversizedFiles = files.filter((file)=>!validateFileSize(file, maxSizeMB));
    return {
        valid: invalidFiles.length === 0 && oversizedFiles.length === 0,
        invalidFiles,
        oversizedFiles
    };
};
const updateProgress = (setUploadProgress, fileName, progress)=>{
    setUploadProgress((prev)=>({
            ...prev,
            [fileName]: progress
        }));
};
const clearProgress = (setUploadProgress, fileName)=>{
    setUploadProgress((prev)=>{
        const newProgress = {
            ...prev
        };
        delete newProgress[fileName];
        return newProgress;
    });
};

//# sourceMappingURL=data:application/json;base64,