{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/features/projects/services/upload-utils.ts"],"sourcesContent":["import { registerUpload } from \"./cleanup-utils\";\nimport { axiosApi } from \"@/lib/axios-api\";\n\n// Shared upload utilities for project creation steps\nexport const API_BASE_URL =\n  process.env.NEXT_PUBLIC_API_URL || \"http://localhost:8000\";\n\n// Test mode detection - check dynamically to respond to environment variable changes during tests\nexport const isTestMode = (): boolean => {\n  // Check if running in test environment\n  if (process.env.NODE_ENV === \"test\") {\n    return true;\n  }\n\n  // Check for explicit test mode flag in development\n  if (\n    process.env.NODE_ENV === \"development\" &&\n    process.env.NEXT_PUBLIC_TEST_MODE === \"true\"\n  ) {\n    return true;\n  }\n\n  // Check for localhost and test mode\n  if (\n    typeof window !== \"undefined\" &&\n    window.location.hostname === \"localhost\" &&\n    process.env.NEXT_PUBLIC_TEST_MODE === \"true\"\n  ) {\n    return true;\n  }\n\n  return false;\n};\n\n// Shared authentication headers with fallback dev token\nexport const getAuthHeaders = (): HeadersInit => {\n  const validDevToken =\n    \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzUwMzE4MDc5LCJpYXQiOjE3NTAzMTQ0NzksImp0aSI6IjU1MmVjNDQ4ZTllNjRmNjM5OTBlNTgyNzk3NzBjNjg2IiwidXNlcl9pZCI6MX0.O8k3yL_dUEMvkBaqxViq-syDXTZNqDfjKtWZEMlxJ14\";\n  const token = localStorage.getItem(\"authToken\") || validDevToken;\n  return token\n    ? {\n        Authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/json\",\n      }\n    : {\n        \"Content-Type\": \"application/json\",\n      };\n};\n\n// Shared file upload function\nexport const uploadFileToService = async (\n  file: File,\n  uploadType: \"course_files\" | \"test_files\" | \"learning_materials\",\n  onProgress?: (progress: number) => void,\n): Promise<{ id: number; filename: string; status: string }> => {\n  const controller = new AbortController();\n\n  // Register the upload for cleanup\n  registerUpload(controller);\n\n  try {\n    const formData = new FormData();\n    formData.append(\"file\", file);\n    formData.append(\"upload_type\", uploadType);\n\n    const response = await fetch(`${API_BASE_URL}/api/documents/upload/`, {\n      method: \"POST\",\n      body: formData,\n      headers: getAuthHeaders(),\n      signal: controller.signal as any,\n    } as RequestInit);\n\n    if (!response.ok) {\n      const errorText = await response.text().catch(() => \"\");\n      throw new Error(`Upload failed: ${response.status} ${response.statusText}`);\n    }\n\n    const result = await response.json();\n    return {\n      id: result.id,\n      filename: file.name,\n      status: result.status,\n    };\n  } catch (error: any) {\n    if (error.name === \"AbortError\") {\n      console.log(\"Upload aborted:\", file.name);\n      throw new Error(\"Upload was cancelled\");\n    }\n    throw error;\n  }\n};\n\n// Shared document processing function\nexport const startDocumentProcessing = async (\n  documentId: number,\n  onProgress?: (progress: number) => void,\n): Promise<void> => {\n  const controller = new AbortController();\n\n  // Register the processing for cleanup\n  registerUpload(controller);\n\n  try {\n    const response = await fetch(`${API_BASE_URL}/api/documents/${documentId}/process/`, {\n      method: \"POST\",\n      headers: getAuthHeaders(),\n      signal: controller.signal as any,\n    } as RequestInit);\n\n    if (!response.ok) {\n      const errorText = await response.text().catch(() => \"\");\n      throw new Error(`Processing failed: ${response.status} ${response.statusText}`);\n    }\n\n    if (onProgress) {\n      onProgress(100);\n    }\n  } catch (error: any) {\n    if (error.name === \"AbortError\") {\n      console.log(\"Document processing aborted:\", documentId);\n      throw new Error(\"Processing was cancelled\");\n    }\n    throw error;\n  }\n};\n\n// Shared polling function for document status\nexport const pollDocumentStatus = async (\n  documentId: number,\n  maxAttempts: number = 10,\n  onProgress?: (progress: number) => void,\n): Promise<any> => {\n  let attempts = 0;\n  let processedData = null;\n\n  while (attempts < maxAttempts && !processedData) {\n    try {\n      const statusResponse = await axiosApi.get(\n        `/pdf_service/documents/${documentId}/`\n      );\n      if (statusResponse.status === 200) {\n        const statusData = statusResponse.data as any;\n\n        if (statusData.status === \"completed\") {\n          processedData = statusData;\n          if (onProgress) onProgress(100);\n          break;\n        } else if (statusData.status === \"error\") {\n          throw new Error(\n            \"Document processing failed: \" +\n              (statusData.error_message || \"Unknown error\"),\n          );\n        }\n      }\n\n      attempts++;\n      if (attempts < maxAttempts) {\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n      }\n    } catch (pollError) {\n      // If this is a processing error, re-throw it\n      if (\n        pollError instanceof Error &&\n        pollError.message.includes(\"Document processing failed\")\n      ) {\n        throw pollError;\n      }\n      // Otherwise, continue polling\n      attempts++;\n      if (attempts < maxAttempts) {\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n      }\n    }\n  }\n\n  return processedData;\n};\n\n// File validation utilities\nexport const validateFileType = (\n  file: File,\n  allowedTypes: string[],\n): boolean => {\n  return allowedTypes.some((type) => file.name.toLowerCase().endsWith(type));\n};\n\nexport const validateFileSize = (file: File, maxSizeMB: number): boolean => {\n  return file.size <= maxSizeMB * 1024 * 1024;\n};\n\nexport const validateFiles = (\n  files: File[],\n  allowedTypes: string[],\n  maxSizeMB: number,\n): { valid: boolean; invalidFiles: File[]; oversizedFiles: File[] } => {\n  const invalidFiles = files.filter(\n    (file) => !validateFileType(file, allowedTypes),\n  );\n  const oversizedFiles = files.filter(\n    (file) => !validateFileSize(file, maxSizeMB),\n  );\n\n  return {\n    valid: invalidFiles.length === 0 && oversizedFiles.length === 0,\n    invalidFiles,\n    oversizedFiles,\n  };\n};\n\n// Progress tracking utilities\nexport const updateProgress = (\n  setUploadProgress: React.Dispatch<\n    React.SetStateAction<Record<string, number>>\n  >,\n  fileName: string,\n  progress: number,\n) => {\n  setUploadProgress((prev) => ({ ...prev, [fileName]: progress }));\n};\n\nexport const clearProgress = (\n  setUploadProgress: React.Dispatch<\n    React.SetStateAction<Record<string, number>>\n  >,\n  fileName: string,\n) => {\n  setUploadProgress((prev) => {\n    const newProgress = { ...prev };\n    delete newProgress[fileName];\n    return newProgress;\n  });\n};\n"],"names":["API_BASE_URL","clearProgress","getAuthHeaders","isTestMode","pollDocumentStatus","startDocumentProcessing","updateProgress","uploadFileToService","validateFileSize","validateFileType","validateFiles","process","env","NEXT_PUBLIC_API_URL","NODE_ENV","NEXT_PUBLIC_TEST_MODE","window","location","hostname","validDevToken","token","localStorage","getItem","Authorization","file","uploadType","onProgress","controller","AbortController","registerUpload","formData","FormData","append","response","fetch","method","body","headers","signal","ok","errorText","text","catch","Error","status","statusText","result","json","id","filename","name","error","console","log","documentId","maxAttempts","attempts","processedData","statusResponse","axiosApi","get","statusData","data","error_message","Promise","resolve","setTimeout","pollError","message","includes","allowedTypes","some","type","toLowerCase","endsWith","maxSizeMB","size","files","invalidFiles","filter","oversizedFiles","valid","length","setUploadProgress","fileName","progress","prev","newProgress"],"mappings":"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"}