de3dbddc3772f286b8e59ff85229f799
/**
 * Enhanced Quiz Wizard Main Component
 * 
 * Updated quiz creation wizard using the new shared components
 * and improved patterns for better code reuse and UX.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    EnhancedQuizWizard: function() {
        return EnhancedQuizWizard;
    },
    default: function() {
        return _default;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _navigation = require("next/navigation");
const _WizardShell = require("../../../../components/wizard/WizardShell");
const _button = require("../../../../components/ui/button");
const _badge = require("../../../../components/ui/badge");
const _alert = require("../../../../components/ui/alert");
const _quizApi = require("../../services/quizApi");
const _SourceSelectionStep = require("../../../../components/wizard/shared/SourceSelectionStep");
const _AIMetadataStep = require("../../../../components/wizard/shared/AIMetadataStep");
const _useMultiSourceManagement = require("../../../../components/wizard/shared/useMultiSourceManagement");
const _EnhancedBasicConfigStep = require("./steps/EnhancedBasicConfigStep");
const _steps = require("./steps");
const _hooks = require("../../hooks");
const _quizCreation = require("../../schemas/quizCreation");
const _utils = require("../../utils");
const _titleGeneration = require("../../../../components/wizard/shared/titleGeneration");
const _lucidereact = require("lucide-react");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// ============================================================================
// Configuration
// ============================================================================
const ENHANCED_WIZARD_STEPS = [
    {
        id: 1,
        title: 'Choose Sources',
        description: 'Select content sources for questions',
        component: 'SourceSelection',
        required: true
    },
    {
        id: 2,
        title: 'Configure Quiz',
        description: 'Set quiz type and basic parameters',
        component: 'BasicConfig',
        required: true
    },
    {
        id: 3,
        title: 'Review Details',
        description: 'Finalize title and description',
        component: 'AIMetadata',
        required: true
    },
    {
        id: 4,
        title: 'Advanced Options',
        description: 'Customize advanced settings',
        component: 'AdvancedConfig',
        required: false
    },
    {
        id: 5,
        title: 'Generate Quiz',
        description: 'Create questions using AI',
        component: 'Generate',
        required: true,
        showInProgress: true
    },
    {
        id: 6,
        title: 'Review & Create',
        description: 'Final review and publish',
        component: 'Review',
        required: true
    }
];
const TOTAL_STEPS = ENHANCED_WIZARD_STEPS.length;
const EnhancedQuizWizard = ({ projectId, open, onOpenChange, onCreated })=>{
    const router = (0, _navigation.useRouter)();
    // ============================================================================
    // State Management
    // ============================================================================
    const [selectedPreset, setSelectedPreset] = _react.default.useState(null);
    const [metadataFormData, setMetadataFormData] = _react.default.useState({});
    const [skipAdvanced, setSkipAdvanced] = _react.default.useState(false);
    // ============================================================================
    // Custom Hooks
    // ============================================================================
    const form = (0, _hooks.useFormValidation)({
        schema: _quizCreation.QuizCreationSchema,
        defaultValues: {
            ..._quizCreation.DEFAULT_QUIZ_FORM_CONFIG,
            source_type: 'auto'
        }
    });
    const sourceManagement = (0, _useMultiSourceManagement.useMultiSourceManagement)({
        projectId,
        supportedTypes: [
            'flashcards',
            'files',
            'studyMaterials'
        ],
        onSourcesChange: (sources)=>{
            console.log('üîç Sources changed:', sources);
        }
    });
    const quizGeneration = (0, _hooks.useQuizGeneration)({
        projectId,
        onSuccess: (quiz)=>{
            console.log('‚úÖ Quiz generated successfully:', quiz);
        },
        onError: (error)=>{
            console.error('‚ùå Quiz generation failed:', error);
        }
    });
    const navigation = (0, _hooks.useWizardNavigation)({
        totalSteps: TOTAL_STEPS,
        validateStep: async (step)=>{
            switch(step){
                case 1:
                    return sourceManagement.hasMinimumSelection;
                case 2:
                    return form.getFormValue('title')?.trim().length > 0 && form.getFormValue('topic')?.trim().length > 0;
                case 3:
                    return metadataFormData.title?.trim().length > 0;
                case 4:
                    return true;
                case 5:
                    return !!quizGeneration.generatedQuiz;
                default:
                    return await form.validateForm();
            }
        }
    });
    // ============================================================================
    // Effects and Initialization
    // ============================================================================
    _react.default.useEffect(()=>{
        if (!open) {
            // Reset all state when wizard closes
            setSelectedPreset(null);
            setMetadataFormData({});
            setSkipAdvanced(false);
            form.resetForm();
            sourceManagement.clearSelection();
            quizGeneration.reset();
            navigation.reset();
        }
    }, [
        open
    ]);
    // Auto-populate title and topic when sources change
    _react.default.useEffect(()=>{
        if (sourceManagement.totalSelectedCount > 0) {
            const allSources = [
                ...sourceManagement.flashcards,
                ...sourceManagement.files,
                ...sourceManagement.studyMaterials
            ].filter((source)=>sourceManagement.selectedSources.flashcards.ids.includes(source.id) || sourceManagement.selectedSources.files.ids.includes(source.id) || sourceManagement.selectedSources.studyMaterials.ids.includes(source.id));
            if (allSources.length > 0) {
                const suggestions = (0, _titleGeneration.generateMetadata)({
                    contentType: 'quiz',
                    sources: allSources,
                    quizType: form.getFormValue('quiz_type'),
                    difficulty: form.getFormValue('difficulty')
                });
                if (!form.getFormValue('topic')) {
                    form.setFormValue('topic', suggestions.topic);
                }
                if (!form.getFormValue('title')) {
                    form.setFormValue('title', suggestions.title);
                }
            }
        }
    }, [
        sourceManagement.selectedSources,
        sourceManagement.totalSelectedCount
    ]);
    // Skip advanced step if preset is simple
    _react.default.useEffect(()=>{
        if (selectedPreset) {
            const simplePresets = [
                'quick-check',
                'diagnostic-basic',
                'practice-session'
            ];
            setSkipAdvanced(simplePresets.includes(selectedPreset.id));
        }
    }, [
        selectedPreset
    ]);
    // ============================================================================
    // Event Handlers
    // ============================================================================
    const handlePresetSelected = (preset)=>{
        setSelectedPreset(preset);
        console.log('üîç Preset selected:', preset.name);
    };
    const handleMetadataChange = (metadata)=>{
        setMetadataFormData(metadata);
        // Update form with metadata
        form.setFormValue('title', metadata.title);
        form.setFormValue('topic', metadata.topic);
        form.setFormValue('description', metadata.description);
    };
    const handleGenerateQuiz = async ()=>{
        const formData = form.form.getValues();
        // Prepare payload for API
        const payload = {
            project: projectId,
            topic: formData.topic || metadataFormData.topic || 'General Knowledge',
            quiz_type: formData.quiz_type || 'formative',
            difficulty: formData.difficulty || 'INTERMEDIATE',
            delivery_mode: formData.delivery_mode,
            max_questions: formData.max_questions,
            title: formData.title || metadataFormData.title,
            description: formData.description || metadataFormData.description,
            sources: sourceManagement.selectedSources,
            preset_id: selectedPreset?.id
        };
        console.log('üîç DEBUG: Generating quiz with payload:', payload);
        await quizGeneration.generateQuiz(payload);
    };
    const handleCreateQuiz = async ()=>{
        try {
            const formData = form.form.getValues();
            if (quizGeneration.generatedQuiz) {
                console.log('üîç DEBUG: Using existing quiz session:', quizGeneration.generatedQuiz.id);
                // Update quiz metadata if needed
                if (metadataFormData.title || metadataFormData.description) {
                    const quizApi = new _quizApi.QuizApiService();
                    await quizApi.updateSession(quizGeneration.generatedQuiz.id, {
                        title: metadataFormData.title
                    });
                }
                // Close wizard and navigate
                onOpenChange(false);
                router.push(`/projects/${projectId}/quiz-center/${quizGeneration.generatedQuiz.id}`);
                onCreated?.(quizGeneration.generatedQuiz.id);
                return;
            }
            // Fallback: Create quiz manually
            console.log('üîç DEBUG: Creating quiz manually');
            const quizApi = new _quizApi.QuizApiService();
            const session = await quizApi.createSession({
                project: projectId,
                topic: formData.topic || metadataFormData.topic || 'General Knowledge',
                difficulty: formData.difficulty || 'INTERMEDIATE',
                delivery_mode: formData.delivery_mode,
                max_questions: formData.max_questions
            });
            onOpenChange(false);
            router.push(`/projects/${projectId}/quiz-center/${session.id}`);
            onCreated?.(session.id);
        } catch (error) {
            console.error('‚ùå DEBUG: Quiz creation failed:', error);
        }
    };
    // ============================================================================
    // Navigation Helpers
    // ============================================================================
    const shouldSkipStep = (stepNumber)=>{
        if (stepNumber === 4 && skipAdvanced) return true;
        return false;
    };
    const getEffectiveStepNumber = ()=>{
        let effectiveStep = navigation.currentStep;
        if (navigation.currentStep > 4 && skipAdvanced) {
            effectiveStep = navigation.currentStep - 1;
        }
        return effectiveStep;
    };
    const goToNextStep = async ()=>{
        const nextStep = navigation.currentStep + 1;
        if (shouldSkipStep(nextStep)) {
            // Skip to the step after
            await navigation.goNext();
            await navigation.goNext();
        } else {
            await navigation.goNext();
        }
    };
    // ============================================================================
    // Render Functions
    // ============================================================================
    const renderCurrentStep = ()=>{
        const currentStep = navigation.currentStep;
        switch(currentStep){
            case 1:
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(_SourceSelectionStep.SourceSelectionStep, {
                    sources: {
                        flashcards: {
                            enabled: true,
                            count: sourceManagement.flashcards.length,
                            items: sourceManagement.flashcards,
                            loading: sourceManagement.isLoadingFlashcards
                        },
                        files: {
                            enabled: true,
                            count: sourceManagement.files.length,
                            items: sourceManagement.files,
                            loading: sourceManagement.isLoadingFiles
                        },
                        studyMaterials: {
                            enabled: true,
                            count: sourceManagement.studyMaterials.length,
                            items: sourceManagement.studyMaterials,
                            loading: sourceManagement.isLoadingStudyMaterials
                        }
                    },
                    selectedSources: sourceManagement.selectedSources,
                    onSourcesChange: sourceManagement.setSelectedSources,
                    onFileUpload: sourceManagement.handleFileUpload,
                    uploadedFiles: sourceManagement.uploadedFiles,
                    onRemoveUploadedFile: sourceManagement.removeUploadedFile,
                    searchTerm: sourceManagement.searchTerm,
                    onSearchChange: sourceManagement.setSearchTerm
                });
            case 2:
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(_EnhancedBasicConfigStep.EnhancedBasicConfigStep, {
                    form: form.form,
                    sources: [
                        ...sourceManagement.flashcards,
                        ...sourceManagement.files,
                        ...sourceManagement.studyMaterials
                    ],
                    onPresetSelected: handlePresetSelected,
                    showPresets: true
                });
            case 3:
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(_AIMetadataStep.AIMetadataStep, {
                    sources: [
                        ...sourceManagement.flashcards,
                        ...sourceManagement.files,
                        ...sourceManagement.studyMaterials
                    ],
                    initialMetadata: metadataFormData,
                    onMetadataChange: handleMetadataChange,
                    contentType: "quiz",
                    projectId: projectId,
                    isGenerating: false,
                    onRegenerate: ()=>console.log('Regenerating metadata...')
                });
            case 4:
                if (skipAdvanced) {
                    // This should not render due to navigation logic
                    return null;
                }
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(_steps.AdvancedConfigStep, {
                    form: form.form
                });
            case 5:
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(_steps.GenerateQuizStep, {
                    form: form.form,
                    method: "files" // Updated based on sources
                    ,
                    uploadedFiles: sourceManagement.uploadedFiles,
                    selectedExistingFileIds: [
                        ...sourceManagement.selectedSources.flashcards.ids,
                        ...sourceManagement.selectedSources.files.ids,
                        ...sourceManagement.selectedSources.studyMaterials.ids
                    ],
                    projectFiles: [
                        ...sourceManagement.flashcards,
                        ...sourceManagement.files,
                        ...sourceManagement.studyMaterials
                    ],
                    isGenerating: quizGeneration.isGenerating,
                    generatedQuiz: quizGeneration.generatedQuiz,
                    error: quizGeneration.error,
                    onGenerate: handleGenerateQuiz
                });
            case 6:
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(_steps.ReviewCreateStep, {
                    form: form.form,
                    method: "files",
                    generatedQuiz: quizGeneration.generatedQuiz,
                    isSubmitting: false,
                    error: quizGeneration.error,
                    onCreate: handleCreateQuiz
                });
            default:
                return null;
        }
    };
    const getStepValidationStatus = (stepNumber)=>{
        switch(stepNumber){
            case 1:
                return sourceManagement.hasMinimumSelection;
            case 2:
                return form.getFormValue('title')?.trim().length > 0;
            case 3:
                return metadataFormData.title?.trim().length > 0;
            case 5:
                return !!quizGeneration.generatedQuiz;
            default:
                return true;
        }
    };
    // ============================================================================
    // Main Render
    // ============================================================================
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_WizardShell.WizardShell, {
        open: open,
        onOpenChange: onOpenChange,
        title: "Create AI-Generated Quiz",
        step: getEffectiveStepNumber(),
        totalSteps: skipAdvanced ? TOTAL_STEPS - 1 : TOTAL_STEPS,
        headerExtras: /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
            className: "flex items-center gap-2 mt-2",
            children: [
                selectedPreset && /*#__PURE__*/ (0, _jsxruntime.jsxs)(_badge.Badge, {
                    variant: "secondary",
                    className: "bg-blue-100 text-blue-800",
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Sparkles, {
                            className: "h-3 w-3 mr-1"
                        }),
                        selectedPreset.name
                    ]
                }),
                sourceManagement.totalSelectedCount > 0 && /*#__PURE__*/ (0, _jsxruntime.jsxs)(_badge.Badge, {
                    variant: "secondary",
                    className: "bg-green-100 text-green-800",
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.CheckCircle2, {
                            className: "h-3 w-3 mr-1"
                        }),
                        sourceManagement.totalSelectedCount,
                        " source",
                        sourceManagement.totalSelectedCount !== 1 ? 's' : ''
                    ]
                }),
                (0, _utils.isTestModeActive)() && /*#__PURE__*/ (0, _jsxruntime.jsx)(_badge.Badge, {
                    variant: "outline",
                    className: "bg-orange-100 text-orange-800",
                    children: "Test Mode"
                })
            ]
        }),
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "source-selection",
                children: renderCurrentStep()
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: "flex justify-between pt-4",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        children: navigation.canGoPrevious && /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                            variant: "outline",
                            onClick: navigation.goPrevious,
                            size: "sm",
                            children: "Back"
                        })
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "flex gap-2",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                                variant: "outline",
                                onClick: ()=>onOpenChange(false),
                                size: "sm",
                                children: "Cancel"
                            }),
                            navigation.currentStep === TOTAL_STEPS ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                                onClick: handleCreateQuiz,
                                disabled: !quizGeneration.generatedQuiz,
                                size: "sm",
                                children: "Create Quiz"
                            }) : navigation.currentStep === 5 ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                                onClick: navigation.goNext,
                                disabled: !quizGeneration.generatedQuiz,
                                size: "sm",
                                children: "Next"
                            }) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                                onClick: goToNextStep,
                                disabled: !getStepValidationStatus(navigation.currentStep),
                                size: "sm",
                                children: skipAdvanced && navigation.currentStep === 3 ? 'Skip to Generation' : 'Next'
                            })
                        ]
                    })
                ]
            }),
            sourceManagement.isAnyLoading && /*#__PURE__*/ (0, _jsxruntime.jsxs)(_alert.Alert, {
                className: "mt-4",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.AlertTriangle, {
                        className: "h-4 w-4"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_alert.AlertDescription, {
                        children: "Loading sources... Please wait."
                    })
                ]
            })
        ]
    });
};
const _default = EnhancedQuizWizard;

//# sourceMappingURL=data:application/json;base64,