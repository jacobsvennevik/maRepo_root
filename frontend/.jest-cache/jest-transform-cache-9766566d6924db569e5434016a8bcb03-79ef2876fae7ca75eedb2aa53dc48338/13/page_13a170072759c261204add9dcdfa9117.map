{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/app/projects/[projectId]/tests/page.tsx"],"sourcesContent":["'use client';\n\nimport { useParams } from 'next/navigation';\nimport Link from 'next/link';\nimport { useState, useEffect, useMemo } from 'react';\nimport { quizApi, type DiagnosticSession } from '@/features/quiz';\nimport { \n  ChevronRight, \n  Plus, \n  CheckCircle, \n  Clock, \n  AlertCircle, \n  Brain, \n  BookOpen, \n  Sparkles, \n  Target, \n  Trophy, \n  Flame, \n  BarChart3, \n  Play, \n  Edit, \n  Trash2, \n  Share2, \n  Download, \n  Upload,\n  Filter,\n  Calendar,\n  Star,\n  Timer,\n  Award,\n  TrendingUp,\n  Lightbulb,\n  Puzzle,\n  FileText,\n  Image,\n  List,\n  Grid3X3\n} from 'lucide-react';\nimport { OceanCenteredPageHeader } from '@/components/ui/common/OceanCenteredPageHeader';\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { QuizStatsFooter } from '@/features/quiz/components/QuizStatsFooter';\nimport { EnhancedQuizWizard } from '@/features/quiz/components/QuizWizard/EnhancedQuizWizard';\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\n\n// Loaded from backend\ntype QuizCard = {\n  id: string;\n  title: string;\n  subject: string;\n  type: string;\n  questions: number;\n  timeEstimate: number;\n  lastScore?: number | null;\n  status: 'completed' | 'upcoming' | 'needs-review';\n  createdAt?: string;\n  icon: string;\n};\n\nconst testTypes = [\n  { name: 'Multiple Choice', icon: '‚úÖ', description: 'Single or multi-select questions' },\n  { name: 'Matching Pairs', icon: 'üß©', description: 'Match terms with definitions' },\n  { name: 'Short Answer', icon: '‚úèÔ∏è', description: 'Fill in the blank questions' },\n  { name: 'Interactive Diagram', icon: 'üïπÔ∏è', description: 'Drag labels onto images' },\n  { name: 'Ranking', icon: 'üî¢', description: 'Order steps in a process' }\n];\n\nconst quickActions = [\n  { \n    title: 'Create New Test', \n    description: 'Build custom tests from scratch', \n    icon: Plus, \n    color: 'from-green-400 to-green-600',\n    action: 'create'\n  },\n  { \n    title: 'Auto-Generate', \n    description: 'From your flashcards', \n    icon: Brain, \n    color: 'from-purple-400 to-purple-600',\n    action: 'auto-generate'\n  },\n  { \n    title: 'Import Quiz', \n    description: 'Upload existing tests', \n    icon: Upload, \n    color: 'from-blue-400 to-blue-600',\n    action: 'import'\n  },\n  { \n    title: 'Practice by Topic', \n    description: 'Focus on specific areas', \n    icon: Target, \n    color: 'from-orange-400 to-orange-600',\n    action: 'practice'\n  },\n  { \n    title: 'Analytics', \n    description: 'View performance trends', \n    icon: BarChart3, \n    color: 'from-emerald-400 to-emerald-600',\n    action: 'analytics'\n  },\n  { \n    title: 'Achievements', \n    description: 'Track your progress', \n    icon: Trophy, \n    color: 'from-pink-400 to-pink-600',\n    action: 'achievements'\n  }\n];\n\nexport default function ProjectTests() {\n  const params = useParams();\n  const projectId = params.projectId as string;\n  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');\n  const [sessions, setSessions] = useState<DiagnosticSession[]>([]);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [isWizardOpen, setIsWizardOpen] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    let isMounted = true;\n    const fetchSessions = async () => {\n      try {\n        setLoading(true);\n        const data = await quizApi.listSessions({ project: projectId });\n        if (isMounted) setSessions(data);\n      } catch (e: any) {\n        if (isMounted) setError(e?.message || 'Failed to load quizzes');\n      } finally {\n        if (isMounted) setLoading(false);\n      }\n    };\n    fetchSessions();\n    return () => { isMounted = false; };\n  }, [projectId]);\n\n  const tests: QuizCard[] = useMemo(() => (\n    sessions.map(s => ({\n      id: s.id,\n      title: s.title || 'Quiz Session',\n      subject: 'Mixed',\n      type: 'Mixed',\n      questions: 0,\n      timeEstimate: s.time_limit_sec || 0,\n      lastScore: null,\n      status: 'upcoming',\n      createdAt: s.created_at,\n      icon: 'üìù'\n    }))\n  ), [sessions]);\n\n  const completedTests = tests.filter(test => test.status === 'completed');\n  const averageScore = 0; // Placeholder until analytics are wired\n\n  // Event handlers\n  const handleStartTest = async (testId: string) => {\n    try {\n      setLoading(true);\n      await quizApi.start(testId);\n      // TODO: navigate to quiz runner when available\n    } catch (e) {\n      console.error('Failed to start quiz', e);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleQuickAction = (action: string) => {\n    console.log('Quick action:', action);\n    // TODO: Implement specific actions\n    if (action === 'auto-generate') {\n      setIsWizardOpen(true);\n    }\n  };\n\n  return (\n    <div className=\"relative min-h-screen space-y-6\">\n      <Breadcrumbs />\n      {/* Centered Page Header for consistency */}\n      <OceanCenteredPageHeader\n        title=\"Project Quizzes\"\n        subtitle=\"Assess your knowledge with auto-generated quizzes\"\n        icon={<Target className=\"h-8 w-8 text-white\" />}\n        gradientClassName=\"from-blue-400 to-purple-600\"\n      />\n      {/* Removed top stats; using compact footer like quiz center */}\n      {tests[0] && (\n        <RecommendedTestCard \n          test={tests[0]}\n          onStart={handleStartTest}\n        />\n      )}\n      <QuickActionsGrid onAction={handleQuickAction} />\n      <EnhancedQuizWizard\n        projectId={projectId}\n        open={isWizardOpen}\n        onOpenChange={setIsWizardOpen}\n      />\n      <TestTypesSection />\n      {tests.length === 0 ? (\n        <div className=\"flex flex-col items-center justify-center p-10 border rounded-lg bg-white/60\">\n          <div className=\"text-4xl mb-2\">üìù</div>\n          <div className=\"text-lg font-semibold text-slate-900 mb-1\">No quizzes yet</div>\n          <div className=\"text-slate-600 mb-4\">Generate your first quiz from project materials.</div>\n          <Button onClick={() => handleQuickAction('auto-generate')}>Auto-Generate Quiz</Button>\n        </div>\n      ) : (\n        <YourTestsSection \n          tests={tests}\n          viewMode={viewMode}\n          onViewModeChange={setViewMode}\n          onStartTest={handleStartTest}\n        />\n      )}\n      <QuizStatsFooter\n        totalQuizzes={tests.length}\n        averageScore={averageScore}\n        completedCount={completedTests.length}\n        dueToday={0}\n        learningCount={0}\n        accuracyPct={averageScore}\n        setsCount={tests.length}\n        pillLabel=\"Completed\"\n      />\n    </div>\n  );\n}\n\n// Component: Breadcrumbs\nfunction Breadcrumbs() {\n  return (\n    <div className=\"flex items-center text-sm text-gray-600\">\n      <Link href=\"/projects\" className=\"hover:text-blue-600\">Projects</Link>\n      <ChevronRight size={16} className=\"mx-2\" />\n      <span className=\"font-medium text-gray-900\">Tests</span>\n    </div>\n  );\n}\n\n// Component: Ocean Header Card\nfunction OceanHeader({ \n  totalTests, \n  completedTests, \n  averageScore \n}: { \n  totalTests: number; \n  completedTests: number; \n  averageScore: number; \n}) {\n  return (\n    <Card className=\"bg-gradient-to-r from-blue-500/10 to-purple-500/10 backdrop-blur-sm border-blue-200/30 shadow-xl\">\n      <CardContent className=\"p-8\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"p-3 rounded-xl bg-gradient-to-r from-blue-400 to-purple-600 shadow-lg\">\n                <Target className=\"h-8 w-8 text-white\" />\n              </div>\n              <div>\n                <h1 className=\"text-3xl font-bold text-slate-900\">Quiz Center</h1>\n                <p className=\"text-slate-600\">Navigate your learning journey</p>\n              </div>\n            </div>\n            <div className=\"flex items-center gap-6 text-sm text-slate-600\">\n              <div className=\"flex items-center gap-2\">\n                <BookOpen className=\"h-4 w-4 text-blue-600\" />\n                <span>{totalTests} Total Quizzes</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Sparkles className=\"h-4 w-4 text-purple-600\" />\n                <span>{averageScore}% Average Score</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Flame className=\"h-4 w-4 text-orange-500\" />\n                <span>3-day Streak</span>\n              </div>\n            </div>\n          </div>\n          <div className=\"text-right\">\n            <div className=\"p-4 rounded-xl bg-gradient-to-r from-emerald-400 to-emerald-600 shadow-lg\">\n              <div className=\"text-white text-center\">\n                <div className=\"text-2xl font-bold\">{completedTests}</div>\n                <div className=\"text-xs\">Completed</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\n// Component: Stats Cards\nfunction StatsCards({ \n  totalTests, \n  completedTests, \n  averageScore \n}: { \n  totalTests: number; \n  completedTests: number; \n  averageScore: number; \n}) {\n  const stats = [\n    { title: 'Total Tests', value: totalTests, icon: Target, color: 'from-blue-400 to-blue-600' },\n    { title: 'Completed', value: completedTests, icon: CheckCircle, color: 'from-green-400 to-green-600' },\n    { title: 'Avg Score', value: `${averageScore}%`, icon: TrendingUp, color: 'from-purple-400 to-purple-600' },\n    { title: 'Streak', value: '3', icon: Flame, color: 'from-orange-400 to-orange-600' }\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n      {stats.map((stat, index) => (\n        <Card key={index} className={`bg-gradient-to-r ${stat.color} text-white`}>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-white/80 text-sm\">{stat.title}</p>\n                <p className=\"text-3xl font-bold\">{stat.value}</p>\n              </div>\n              <stat.icon className=\"h-8 w-8 text-white/80\" />\n            </div>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  );\n}\n\n// Component: Recommended Test Card\nfunction RecommendedTestCard({ \n  test, \n  onStart \n}: { \n  test: any; \n  onStart: (id: string) => void; \n}) {\n  return (\n    <Card className=\"bg-gradient-to-r from-indigo-50 to-purple-50 border-indigo-200/50 shadow-lg\">\n      <CardContent className=\"p-8\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"p-3 rounded-xl bg-gradient-to-r from-indigo-400 to-purple-600 shadow-lg\">\n                <Lightbulb className=\"h-8 w-8 text-white\" />\n              </div>\n              <div>\n                <h2 className=\"text-2xl font-bold text-slate-900\">Recommended for You</h2>\n                <p className=\"text-slate-600\">Based on your learning progress</p>\n              </div>\n            </div>\n            \n            <div className=\"space-y-3\">\n              <div className=\"flex items-center gap-4\">\n                <span className=\"text-3xl\">{test.icon}</span>\n                <div>\n                  <h3 className=\"text-xl font-semibold text-slate-900\">{test.title}</h3>\n                  <p className=\"text-slate-600\">{test.subject} ‚Ä¢ {test.type}</p>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center gap-4 text-sm\">\n                <Badge variant=\"secondary\" className=\"bg-blue-100 text-blue-700\">\n                  <Timer className=\"h-3 w-3 mr-1\" />\n                  {test.timeEstimate} min\n                </Badge>\n                <Badge variant=\"secondary\" className=\"bg-purple-100 text-purple-700\">\n                  <FileText className=\"h-3 w-3 mr-1\" />\n                  {test.questions} questions\n                </Badge>\n              </div>\n            </div>\n\n            <div className=\"flex gap-3\">\n              <Button \n                className=\"bg-gradient-to-r from-indigo-500 to-purple-600 hover:from-indigo-600 hover:to-purple-700\"\n                onClick={() => onStart(test.id)}\n              >\n                <Play className=\"h-4 w-4 mr-2\" />\n                Start Recommended Test\n              </Button>\n              <Button variant=\"outline\" className=\"border-indigo-200 text-indigo-600 hover:bg-indigo-50\">\n                <Edit className=\"h-4 w-4 mr-2\" />\n                Customize\n              </Button>\n            </div>\n          </div>\n          \n          <div className=\"text-right space-y-4\">\n            <div className=\"p-4 rounded-xl bg-gradient-to-r from-indigo-400 to-purple-600 shadow-lg\">\n              <div className=\"text-white text-center\">\n                <div className=\"text-2xl font-bold\">85%</div>\n                <div className=\"text-xs\">Last Score</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\n// Component: Quick Actions Grid\nfunction QuickActionsGrid({ onAction }: { onAction: (action: string) => void }) {\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n      {quickActions.map((action, index) => (\n        <Card \n          key={index} \n          className=\"hover:shadow-lg transition-shadow cursor-pointer\" \n          onClick={() => onAction(action.action)}\n        >\n          <CardContent className=\"p-6 text-center\">\n            <div className={`p-4 rounded-xl bg-gradient-to-r ${action.color} mx-auto w-16 h-16 flex items-center justify-center mb-4`}>\n              <action.icon className=\"h-8 w-8 text-white\" />\n            </div>\n            <h3 className=\"font-semibold text-slate-900 mb-2\">{action.title}</h3>\n            <p className=\"text-sm text-slate-600\">{action.description}</p>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  );\n}\n\n// Component: Test Types Section\nfunction TestTypesSection() {\n  return (\n    <Card className=\"bg-gradient-to-r from-purple-50 to-pink-50/80 backdrop-blur-sm border-purple-200/50\">\n      <CardContent className=\"p-6\">\n        <h3 className=\"text-lg font-semibold text-slate-900 mb-4\">Test Types Available</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {testTypes.map((type, index) => (\n            <div key={index} className=\"p-4 bg-white/60 rounded-lg border border-purple-200/50 hover:shadow-md transition-shadow\">\n              <div className=\"flex items-center gap-3\">\n                <span className=\"text-2xl\">{type.icon}</span>\n                <div>\n                  <h4 className=\"font-medium text-slate-900\">{type.name}</h4>\n                  <p className=\"text-sm text-slate-600\">{type.description}</p>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\n// Component: Your Tests Section\nfunction YourTestsSection({ \n  tests, \n  viewMode, \n  onViewModeChange, \n  onStartTest \n}: { \n  tests: any[]; \n  viewMode: 'grid' | 'list'; \n  onViewModeChange: (mode: 'grid' | 'list') => void; \n  onStartTest: (id: string) => void; \n}) {\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"text-lg font-semibold text-slate-900\">Your Tests</h3>\n        <div className=\"flex items-center gap-2\">\n          <Button variant=\"outline\" size=\"sm\">\n            <Filter className=\"h-4 w-4 mr-2\" />\n            Filter\n          </Button>\n          <Button\n            variant={viewMode === 'grid' ? 'default' : 'outline'}\n            size=\"sm\"\n            onClick={() => onViewModeChange('grid')}\n          >\n            <Grid3X3 className=\"h-4 w-4\" />\n          </Button>\n          <Button\n            variant={viewMode === 'list' ? 'default' : 'outline'}\n            size=\"sm\"\n            onClick={() => onViewModeChange('list')}\n          >\n            <List className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </div>\n\n      {viewMode === 'grid' ? (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {tests.map((test) => (\n            <TestCard key={test.id} test={test} onStart={onStartTest} />\n          ))}\n        </div>\n      ) : (\n        <div className=\"space-y-4\">\n          {tests.map((test) => (\n            <TestListItem key={test.id} test={test} onStart={onStartTest} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n\n// Component: Test Card\nfunction TestCard({ test, onStart }: { test: any; onStart: (id: string) => void }) {\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'completed': return 'bg-green-100 text-green-800';\n      case 'upcoming': return 'bg-yellow-100 text-yellow-800';\n      case 'needs-review': return 'bg-red-100 text-red-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'completed': return <CheckCircle className=\"w-4 h-4\" />;\n      case 'upcoming': return <Clock className=\"w-4 h-4\" />;\n      case 'needs-review': return <AlertCircle className=\"w-4 h-4\" />;\n      default: return <Clock className=\"w-4 h-4\" />;\n    }\n  };\n\n  return (\n    <Card className=\"hover:shadow-lg transition-shadow cursor-pointer group\">\n      <CardContent className=\"p-6\">\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-3xl\">{test.icon}</span>\n            <Badge className={getStatusColor(test.status)}>\n              {getStatusIcon(test.status)}\n            </Badge>\n          </div>\n          \n          <div>\n            <h3 className=\"font-semibold text-slate-900 mb-1\">{test.title}</h3>\n            <p className=\"text-sm text-slate-600 mb-2\">{test.subject}</p>\n            <div className=\"flex items-center gap-2 text-xs text-slate-500\">\n              <FileText className=\"h-3 w-3\" />\n              <span>{test.questions} questions</span>\n              <span>‚Ä¢</span>\n              <Timer className=\"h-3 w-3\" />\n              <span>{test.timeEstimate} min</span>\n            </div>\n          </div>\n\n          {test.lastScore && (\n            <div className=\"flex items-center gap-2 text-sm\">\n              <Star className=\"h-4 w-4 text-yellow-500\" />\n              <span className=\"text-slate-600\">Last score: {test.lastScore}%</span>\n            </div>\n          )}\n\n          <div className=\"flex gap-2\">\n            <Button \n              size=\"sm\" \n              className=\"flex-1\"\n              onClick={() => onStart(test.id)}\n            >\n              <Play className=\"h-3 w-3 mr-1\" />\n              {test.status === 'completed' ? 'Retake' : 'Start'}\n            </Button>\n            <Button size=\"sm\" variant=\"outline\">\n              <Edit className=\"h-3 w-3\" />\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\n// Component: Test List Item\nfunction TestListItem({ test, onStart }: { test: any; onStart: (id: string) => void }) {\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'completed': return 'bg-green-100 text-green-800';\n      case 'upcoming': return 'bg-yellow-100 text-yellow-800';\n      case 'needs-review': return 'bg-red-100 text-red-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'completed': return <CheckCircle className=\"w-4 h-4\" />;\n      case 'upcoming': return <Clock className=\"w-4 h-4\" />;\n      case 'needs-review': return <AlertCircle className=\"w-4 h-4\" />;\n      default: return <Clock className=\"w-4 h-4\" />;\n    }\n  };\n\n  return (\n    <Card className=\"hover:shadow-md transition-shadow\">\n      <CardContent className=\"p-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-4\">\n            <span className=\"text-2xl\">{test.icon}</span>\n            <div>\n              <h3 className=\"font-semibold text-slate-900\">{test.title}</h3>\n              <p className=\"text-sm text-slate-600\">{test.subject} ‚Ä¢ {test.questions} questions ‚Ä¢ {test.timeEstimate} min</p>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center gap-3\">\n            <Badge className={getStatusColor(test.status)}>\n              {getStatusIcon(test.status)}\n            </Badge>\n            <Button size=\"sm\" onClick={() => onStart(test.id)}>\n              <Play className=\"h-3 w-3 mr-1\" />\n              {test.status === 'completed' ? 'Retake' : 'Start'}\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n} "],"names":["ProjectTests","testTypes","name","icon","description","quickActions","title","Plus","color","action","Brain","Upload","Target","BarChart3","Trophy","params","useParams","projectId","viewMode","setViewMode","useState","sessions","setSessions","loading","setLoading","isWizardOpen","setIsWizardOpen","error","setError","useEffect","isMounted","fetchSessions","data","quizApi","listSessions","project","e","message","tests","useMemo","map","s","id","subject","type","questions","timeEstimate","time_limit_sec","lastScore","status","createdAt","created_at","completedTests","filter","test","averageScore","handleStartTest","testId","start","console","handleQuickAction","log","div","className","Breadcrumbs","OceanCenteredPageHeader","subtitle","gradientClassName","RecommendedTestCard","onStart","QuickActionsGrid","onAction","EnhancedQuizWizard","open","onOpenChange","TestTypesSection","length","Button","onClick","YourTestsSection","onViewModeChange","onStartTest","QuizStatsFooter","totalQuizzes","completedCount","dueToday","learningCount","accuracyPct","setsCount","pillLabel","Link","href","ChevronRight","size","span","OceanHeader","totalTests","Card","CardContent","h1","p","BookOpen","Sparkles","Flame","StatsCards","stats","value","CheckCircle","TrendingUp","stat","index","Lightbulb","h2","h3","Badge","variant","Timer","FileText","Play","Edit","h4","Filter","Grid3X3","List","TestCard","TestListItem","getStatusColor","getStatusIcon","Clock","AlertCircle","Star"],"mappings":"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"}