{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/features/projects/hooks/useFileStorage.ts"],"sourcesContent":["'use client';\n\n// Custom hook for file storage state management\nimport { useState, useEffect, useCallback, useRef } from 'react';\nimport { useParams } from 'next/navigation';\nimport { axiosApi } from '@/lib/axios-api';\nimport { FileItem, StorageStats, formatDate, generateFileColors } from '@/lib/file-utils';\n\nexport type ViewMode = 'list' | 'grid';\nexport type SortOption = 'name' | 'size' | 'date' | 'type';\nexport type FilterOption = 'all' | 'documents' | 'images' | 'videos' | 'audio' | 'archives' | 'favorites';\n\ninterface UseFileStorageReturn {\n  // State\n  files: FileItem[];\n  filteredFiles: FileItem[];\n  loading: boolean;\n  uploading: boolean;\n  uploadProgress: number;\n  error: string | null;\n  uploadError: string | null;\n  viewMode: ViewMode;\n  sortBy: SortOption;\n  filterBy: FilterOption;\n  searchQuery: string;\n  selectedFiles: Set<string>;\n  showDetails: boolean;\n  selectedFile: FileItem | null;\n  storageStats: StorageStats;\n  \n  // Actions\n  setViewMode: (mode: ViewMode) => void;\n  setSortBy: (sort: SortOption) => void;\n  setFilterBy: (filter: FilterOption) => void;\n  setSearchQuery: (query: string) => void;\n  setShowDetails: (show: boolean) => void;\n  setSelectedFile: (file: FileItem | null) => void;\n  \n  // File operations\n  fetchFiles: () => Promise<void>;\n  handleFileUpload: (files: FileList) => Promise<void>;\n  handleFileSelect: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  handleToggleFavorite: (fileId: string) => void;\n  handleSelectFile: (fileId: string) => void;\n  handleSelectAll: () => void;\n  handleFileAction: (action: string, fileId: string) => void;\n  handleBulkAction: (action: string) => void;\n  \n  // Refs\n  fileInputRef: React.RefObject<HTMLInputElement | null>;\n}\n\nexport function useFileStorage(): UseFileStorageReturn {\n  const params = useParams();\n  const projectId = params.projectId as string;\n  \n  // State management\n  const [files, setFiles] = useState<FileItem[]>([]);\n  const [filteredFiles, setFilteredFiles] = useState<FileItem[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [uploading, setUploading] = useState(false);\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const [error, setError] = useState<string | null>(null);\n  const [uploadError, setUploadError] = useState<string | null>(null);\n  \n  // UI state\n  const [viewMode, setViewMode] = useState<ViewMode>('list');\n  const [sortBy, setSortBy] = useState<SortOption>('date');\n  const [filterBy, setFilterBy] = useState<FilterOption>('all');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedFiles, setSelectedFiles] = useState<Set<string>>(new Set());\n  const [showDetails, setShowDetails] = useState(false);\n  const [selectedFile, setSelectedFile] = useState<FileItem | null>(null);\n  \n  // Storage stats\n  const [storageStats, setStorageStats] = useState<StorageStats>({\n    totalUsed: 104.6 * 1024 * 1024 * 1024, // 104.6 GB\n    totalAvailable: 256 * 1024 * 1024 * 1024, // 256 GB\n    breakdown: {\n      documents: { count: 42, size: 112.8 * 1024 * 1024 },\n      images: { count: 75, size: 286.8 * 1024 * 1024 },\n      videos: { count: 32, size: 1639.2 * 1024 * 1024 },\n      audio: { count: 20, size: 23.6 * 1024 * 1024 },\n      archives: { count: 14, size: 213.3 * 1024 * 1024 },\n    }\n  });\n  \n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  // Fetch files from backend\n  const fetchFiles = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await axiosApi.get(`projects/${projectId}/`);\n      const project = response.data;\n      \n      // Transform backend files to frontend format\n      const transformedFiles: FileItem[] = project.uploaded_files.map((file: any, index: number) => ({\n        id: file.id,\n        name: file.original_name || file.file.split('/').pop(),\n        type: file.file.split('.').pop().toLowerCase() as FileItem['type'],\n        size: file.file_size || 0,\n        uploadedAt: formatDate(file.uploaded_at),\n        lastModified: formatDate(file.uploaded_at),\n        status: file.processing_status === 'completed' ? 'completed' : \n                file.processing_status === 'failed' ? 'error' : 'processing',\n        isFavorite: false, // TODO: Add favorite functionality\n        tags: [], // TODO: Add tags functionality\n        visibility: 'private' as const,\n        versionCount: 1, // TODO: Add version tracking\n        sharedWith: [], // TODO: Add sharing functionality\n        permissions: ['read'], // TODO: Add permissions\n        ...generateFileColors(index)\n      }));\n      \n      setFiles(transformedFiles);\n    } catch (err: any) {\n      console.error('Failed to fetch files:', err);\n      setError(err.response?.data?.detail || 'Failed to load files');\n    } finally {\n      setLoading(false);\n    }\n  }, [projectId]);\n\n  // Handle file upload\n  const handleFileUpload = useCallback(async (files: FileList) => {\n    if (!files.length) return;\n    \n    const file = files[0];\n    setUploading(true);\n    setUploadProgress(0);\n    setUploadError(null);\n\n    try {\n      const formData = new FormData();\n      formData.append('file', file);\n\n      // Simulate progress\n      const progressInterval = setInterval(() => {\n        setUploadProgress(prev => Math.min(prev + 10, 90));\n      }, 200);\n\n      const response = await axiosApi.post(\n        `/projects/${projectId}/upload_file/`,\n        formData,\n        {\n          headers: {\n            'Content-Type': 'multipart/form-data',\n          },\n          onUploadProgress: (progressEvent) => {\n            if (progressEvent.total) {\n              const progress = Math.round((progressEvent.loaded * 100) / progressEvent.total);\n              setUploadProgress(progress);\n            }\n          },\n        }\n      );\n\n      clearInterval(progressInterval);\n      setUploadProgress(100);\n\n      // Refresh files\n      await fetchFiles();\n      \n      // Reset form\n      if (fileInputRef.current) {\n        fileInputRef.current.value = '';\n      }\n    } catch (err: any) {\n      console.error('Upload failed:', err);\n      setUploadError(err.response?.data?.detail || 'Upload failed');\n    } finally {\n      setUploading(false);\n      setUploadProgress(0);\n    }\n  }, [projectId, fetchFiles]);\n\n  // Handle file selection\n  const handleFileSelect = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files) {\n      handleFileUpload(e.target.files);\n    }\n  }, [handleFileUpload]);\n\n  // Filter and sort files\n  useEffect(() => {\n    let filtered = [...files];\n\n    // Apply search filter\n    if (searchQuery) {\n      filtered = filtered.filter(file => \n        file.name.toLowerCase().includes(searchQuery.toLowerCase())\n      );\n    }\n\n    // Apply type filter\n    if (filterBy !== 'all') {\n      filtered = filtered.filter(file => {\n        switch (filterBy) {\n          case 'documents':\n            return ['pdf', 'docx', 'pptx', 'txt', 'md'].includes(file.type);\n          case 'images':\n            return ['png', 'jpg', 'jpeg'].includes(file.type);\n          case 'videos':\n            return ['mp4'].includes(file.type);\n          case 'audio':\n            return ['mp3', 'wav'].includes(file.type);\n          case 'archives':\n            return ['zip'].includes(file.type);\n          case 'favorites':\n            return file.isFavorite;\n          default:\n            return true;\n        }\n      });\n    }\n\n    // Apply sorting\n    filtered.sort((a, b) => {\n      switch (sortBy) {\n        case 'name':\n          return a.name.localeCompare(b.name);\n        case 'size':\n          return b.size - a.size;\n        case 'date':\n          return new Date(b.lastModified).getTime() - new Date(a.lastModified).getTime();\n        case 'type':\n          return a.type.localeCompare(b.type);\n        default:\n          return 0;\n      }\n    });\n\n    setFilteredFiles(filtered);\n  }, [files, searchQuery, filterBy, sortBy]);\n\n  // Load files on mount\n  useEffect(() => {\n    fetchFiles();\n  }, [fetchFiles]);\n\n  // File actions\n  const handleToggleFavorite = (fileId: string) => {\n    setFiles(prev => prev.map(file => \n      file.id === fileId ? { ...file, isFavorite: !file.isFavorite } : file\n    ));\n  };\n\n  const handleSelectFile = (fileId: string) => {\n    setSelectedFiles(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(fileId)) {\n        newSet.delete(fileId);\n      } else {\n        newSet.add(fileId);\n      }\n      return newSet;\n    });\n  };\n\n  const handleSelectAll = () => {\n    if (selectedFiles.size === filteredFiles.length) {\n      setSelectedFiles(new Set());\n    } else {\n      setSelectedFiles(new Set(filteredFiles.map(f => f.id)));\n    }\n  };\n\n  const handleFileAction = (action: string, fileId: string) => {\n    const file = files.find(f => f.id === fileId);\n    if (!file) return;\n\n    switch (action) {\n      case 'preview':\n        setSelectedFile(file);\n        setShowDetails(true);\n        break;\n      case 'download':\n        // TODO: Implement download\n        console.log('Download file:', file.name);\n        break;\n      case 'share':\n        // TODO: Implement sharing\n        console.log('Share file:', file.name);\n        break;\n      case 'rename':\n        // TODO: Implement rename\n        console.log('Rename file:', file.name);\n        break;\n    }\n  };\n\n  const handleBulkAction = (action: string) => {\n    const selectedFileIds = Array.from(selectedFiles);\n    console.log(`Bulk ${action}:`, selectedFileIds);\n    // TODO: Implement bulk actions\n  };\n\n  return {\n    // State\n    files,\n    filteredFiles,\n    loading,\n    uploading,\n    uploadProgress,\n    error,\n    uploadError,\n    viewMode,\n    sortBy,\n    filterBy,\n    searchQuery,\n    selectedFiles,\n    showDetails,\n    selectedFile,\n    storageStats,\n    \n    // Actions\n    setViewMode,\n    setSortBy,\n    setFilterBy,\n    setSearchQuery,\n    setShowDetails,\n    setSelectedFile,\n    \n    // File operations\n    fetchFiles,\n    handleFileUpload,\n    handleFileSelect,\n    handleToggleFavorite,\n    handleSelectFile,\n    handleSelectAll,\n    handleFileAction,\n    handleBulkAction,\n    \n    // Refs\n    fileInputRef,\n  };\n}\n\n"],"names":["useFileStorage","params","useParams","projectId","files","setFiles","useState","filteredFiles","setFilteredFiles","loading","setLoading","uploading","setUploading","uploadProgress","setUploadProgress","error","setError","uploadError","setUploadError","viewMode","setViewMode","sortBy","setSortBy","filterBy","setFilterBy","searchQuery","setSearchQuery","selectedFiles","setSelectedFiles","Set","showDetails","setShowDetails","selectedFile","setSelectedFile","storageStats","setStorageStats","totalUsed","totalAvailable","breakdown","documents","count","size","images","videos","audio","archives","fileInputRef","useRef","fetchFiles","useCallback","response","axiosApi","get","project","data","transformedFiles","uploaded_files","map","file","index","id","name","original_name","split","pop","type","toLowerCase","file_size","uploadedAt","formatDate","uploaded_at","lastModified","status","processing_status","isFavorite","tags","visibility","versionCount","sharedWith","permissions","generateFileColors","err","console","detail","handleFileUpload","length","formData","FormData","append","progressInterval","setInterval","prev","Math","min","post","headers","onUploadProgress","progressEvent","total","progress","round","loaded","clearInterval","current","value","handleFileSelect","e","target","useEffect","filtered","filter","includes","sort","a","b","localeCompare","Date","getTime","handleToggleFavorite","fileId","handleSelectFile","newSet","has","delete","add","handleSelectAll","f","handleFileAction","action","find","log","handleBulkAction","selectedFileIds","Array","from"],"mappings":"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"}