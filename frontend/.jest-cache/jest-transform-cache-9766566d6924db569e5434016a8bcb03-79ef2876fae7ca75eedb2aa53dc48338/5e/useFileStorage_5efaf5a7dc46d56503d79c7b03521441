d96f1f62d7a164b615c190c723a9b7cc
'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useFileStorage", {
    enumerable: true,
    get: function() {
        return useFileStorage;
    }
});
const _react = require("react");
const _navigation = require("next/navigation");
const _axiosapi = require("../../../lib/axios-api");
const _fileutils = require("../../../lib/file-utils");
function useFileStorage() {
    const params = (0, _navigation.useParams)();
    const projectId = params.projectId;
    // State management
    const [files, setFiles] = (0, _react.useState)([]);
    const [filteredFiles, setFilteredFiles] = (0, _react.useState)([]);
    const [loading, setLoading] = (0, _react.useState)(true);
    const [uploading, setUploading] = (0, _react.useState)(false);
    const [uploadProgress, setUploadProgress] = (0, _react.useState)(0);
    const [error, setError] = (0, _react.useState)(null);
    const [uploadError, setUploadError] = (0, _react.useState)(null);
    // UI state
    const [viewMode, setViewMode] = (0, _react.useState)('list');
    const [sortBy, setSortBy] = (0, _react.useState)('date');
    const [filterBy, setFilterBy] = (0, _react.useState)('all');
    const [searchQuery, setSearchQuery] = (0, _react.useState)('');
    const [selectedFiles, setSelectedFiles] = (0, _react.useState)(new Set());
    const [showDetails, setShowDetails] = (0, _react.useState)(false);
    const [selectedFile, setSelectedFile] = (0, _react.useState)(null);
    // Storage stats
    const [storageStats, setStorageStats] = (0, _react.useState)({
        totalUsed: 104.6 * 1024 * 1024 * 1024,
        totalAvailable: 256 * 1024 * 1024 * 1024,
        breakdown: {
            documents: {
                count: 42,
                size: 112.8 * 1024 * 1024
            },
            images: {
                count: 75,
                size: 286.8 * 1024 * 1024
            },
            videos: {
                count: 32,
                size: 1639.2 * 1024 * 1024
            },
            audio: {
                count: 20,
                size: 23.6 * 1024 * 1024
            },
            archives: {
                count: 14,
                size: 213.3 * 1024 * 1024
            }
        }
    });
    const fileInputRef = (0, _react.useRef)(null);
    // Fetch files from backend
    const fetchFiles = (0, _react.useCallback)(async ()=>{
        try {
            setLoading(true);
            setError(null);
            const response = await _axiosapi.axiosApi.get(`projects/${projectId}/`);
            const project = response.data;
            // Transform backend files to frontend format
            const transformedFiles = project.uploaded_files.map((file, index)=>({
                    id: file.id,
                    name: file.original_name || file.file.split('/').pop(),
                    type: file.file.split('.').pop().toLowerCase(),
                    size: file.file_size || 0,
                    uploadedAt: (0, _fileutils.formatDate)(file.uploaded_at),
                    lastModified: (0, _fileutils.formatDate)(file.uploaded_at),
                    status: file.processing_status === 'completed' ? 'completed' : file.processing_status === 'failed' ? 'error' : 'processing',
                    isFavorite: false,
                    tags: [],
                    visibility: 'private',
                    versionCount: 1,
                    sharedWith: [],
                    permissions: [
                        'read'
                    ],
                    ...(0, _fileutils.generateFileColors)(index)
                }));
            setFiles(transformedFiles);
        } catch (err) {
            console.error('Failed to fetch files:', err);
            setError(err.response?.data?.detail || 'Failed to load files');
        } finally{
            setLoading(false);
        }
    }, [
        projectId
    ]);
    // Handle file upload
    const handleFileUpload = (0, _react.useCallback)(async (files)=>{
        if (!files.length) return;
        const file = files[0];
        setUploading(true);
        setUploadProgress(0);
        setUploadError(null);
        try {
            const formData = new FormData();
            formData.append('file', file);
            // Simulate progress
            const progressInterval = setInterval(()=>{
                setUploadProgress((prev)=>Math.min(prev + 10, 90));
            }, 200);
            const response = await _axiosapi.axiosApi.post(`/projects/${projectId}/upload_file/`, formData, {
                headers: {
                    'Content-Type': 'multipart/form-data'
                },
                onUploadProgress: (progressEvent)=>{
                    if (progressEvent.total) {
                        const progress = Math.round(progressEvent.loaded * 100 / progressEvent.total);
                        setUploadProgress(progress);
                    }
                }
            });
            clearInterval(progressInterval);
            setUploadProgress(100);
            // Refresh files
            await fetchFiles();
            // Reset form
            if (fileInputRef.current) {
                fileInputRef.current.value = '';
            }
        } catch (err) {
            console.error('Upload failed:', err);
            setUploadError(err.response?.data?.detail || 'Upload failed');
        } finally{
            setUploading(false);
            setUploadProgress(0);
        }
    }, [
        projectId,
        fetchFiles
    ]);
    // Handle file selection
    const handleFileSelect = (0, _react.useCallback)((e)=>{
        if (e.target.files) {
            handleFileUpload(e.target.files);
        }
    }, [
        handleFileUpload
    ]);
    // Filter and sort files
    (0, _react.useEffect)(()=>{
        let filtered = [
            ...files
        ];
        // Apply search filter
        if (searchQuery) {
            filtered = filtered.filter((file)=>file.name.toLowerCase().includes(searchQuery.toLowerCase()));
        }
        // Apply type filter
        if (filterBy !== 'all') {
            filtered = filtered.filter((file)=>{
                switch(filterBy){
                    case 'documents':
                        return [
                            'pdf',
                            'docx',
                            'pptx',
                            'txt',
                            'md'
                        ].includes(file.type);
                    case 'images':
                        return [
                            'png',
                            'jpg',
                            'jpeg'
                        ].includes(file.type);
                    case 'videos':
                        return [
                            'mp4'
                        ].includes(file.type);
                    case 'audio':
                        return [
                            'mp3',
                            'wav'
                        ].includes(file.type);
                    case 'archives':
                        return [
                            'zip'
                        ].includes(file.type);
                    case 'favorites':
                        return file.isFavorite;
                    default:
                        return true;
                }
            });
        }
        // Apply sorting
        filtered.sort((a, b)=>{
            switch(sortBy){
                case 'name':
                    return a.name.localeCompare(b.name);
                case 'size':
                    return b.size - a.size;
                case 'date':
                    return new Date(b.lastModified).getTime() - new Date(a.lastModified).getTime();
                case 'type':
                    return a.type.localeCompare(b.type);
                default:
                    return 0;
            }
        });
        setFilteredFiles(filtered);
    }, [
        files,
        searchQuery,
        filterBy,
        sortBy
    ]);
    // Load files on mount
    (0, _react.useEffect)(()=>{
        fetchFiles();
    }, [
        fetchFiles
    ]);
    // File actions
    const handleToggleFavorite = (fileId)=>{
        setFiles((prev)=>prev.map((file)=>file.id === fileId ? {
                    ...file,
                    isFavorite: !file.isFavorite
                } : file));
    };
    const handleSelectFile = (fileId)=>{
        setSelectedFiles((prev)=>{
            const newSet = new Set(prev);
            if (newSet.has(fileId)) {
                newSet.delete(fileId);
            } else {
                newSet.add(fileId);
            }
            return newSet;
        });
    };
    const handleSelectAll = ()=>{
        if (selectedFiles.size === filteredFiles.length) {
            setSelectedFiles(new Set());
        } else {
            setSelectedFiles(new Set(filteredFiles.map((f)=>f.id)));
        }
    };
    const handleFileAction = (action, fileId)=>{
        const file = files.find((f)=>f.id === fileId);
        if (!file) return;
        switch(action){
            case 'preview':
                setSelectedFile(file);
                setShowDetails(true);
                break;
            case 'download':
                // TODO: Implement download
                console.log('Download file:', file.name);
                break;
            case 'share':
                // TODO: Implement sharing
                console.log('Share file:', file.name);
                break;
            case 'rename':
                // TODO: Implement rename
                console.log('Rename file:', file.name);
                break;
        }
    };
    const handleBulkAction = (action)=>{
        const selectedFileIds = Array.from(selectedFiles);
        console.log(`Bulk ${action}:`, selectedFileIds);
    // TODO: Implement bulk actions
    };
    return {
        // State
        files,
        filteredFiles,
        loading,
        uploading,
        uploadProgress,
        error,
        uploadError,
        viewMode,
        sortBy,
        filterBy,
        searchQuery,
        selectedFiles,
        showDetails,
        selectedFile,
        storageStats,
        // Actions
        setViewMode,
        setSortBy,
        setFilterBy,
        setSearchQuery,
        setShowDetails,
        setSelectedFile,
        // File operations
        fetchFiles,
        handleFileUpload,
        handleFileSelect,
        handleToggleFavorite,
        handleSelectFile,
        handleSelectAll,
        handleFileAction,
        handleBulkAction,
        // Refs
        fileInputRef
    };
}

//# sourceMappingURL=data:application/json;base64,