{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/features/projects/components/ai/ai-preview.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { \n  Sparkles, \n  Calendar, \n  CheckCircle, \n  BookOpen,\n  Zap,\n  Brain\n} from \"lucide-react\";\nimport { formatDate } from '../../services/formatters';\n\ninterface DetectedTopic {\n  id: string;\n  label: string;\n  confidence: number;\n}\n\ninterface DetectedDate {\n  id: string;\n  date: string;\n  description: string;\n  type: string;\n}\n\ninterface DetectedTestType {\n  id: string;\n  type: string;\n  confidence: number;\n}\n\ninterface SmartRecommendation {\n  id: string;\n  type: 'schedule' | 'material' | 'strategy' | 'timeline';\n  title: string;\n  description: string;\n  confidence: number;\n  action: string;\n}\n\ninterface AIPreviewProps {\n  detectedTopics: DetectedTopic[];\n  detectedDates: DetectedDate[];\n  detectedTestTypes: DetectedTestType[];\n  onApplyTopics: (topics: string[]) => void;\n  onApplyDates: (dates: DetectedDate[]) => void;\n  onApplyTestTypes: (testTypes: string[]) => void;\n  onApplyRecommendations: (recommendations: SmartRecommendation[]) => void;\n  onDismiss: () => void;\n}\n\nexport function AIPreview({\n  detectedTopics,\n  detectedDates,\n  detectedTestTypes,\n  onApplyTopics,\n  onApplyDates,\n  onApplyTestTypes,\n  onApplyRecommendations,\n  onDismiss\n}: AIPreviewProps) {\n  const [selectedTopics, setSelectedTopics] = useState<string[]>([]);\n  const [selectedDates, setSelectedDates] = useState<string[]>([]);\n  const [selectedTestTypes, setSelectedTestTypes] = useState<string[]>([]);\n  const [selectedRecommendations, setSelectedRecommendations] = useState<string[]>([]);\n  const [smartRecommendations, setSmartRecommendations] = useState<SmartRecommendation[]>([]);\n\n  // Auto-select high-confidence items\n  useEffect(() => {\n    const highConfidenceTopics = detectedTopics\n      .filter(topic => topic.confidence >= 90)\n      .map(topic => topic.id);\n    setSelectedTopics(highConfidenceTopics);\n\n    const highConfidenceDates = detectedDates\n      .filter(date => date.type === 'exam' || date.type === 'assignment')\n      .map(date => date.id);\n    setSelectedDates(highConfidenceDates);\n\n    const highConfidenceTestTypes = detectedTestTypes\n      .filter(type => type.confidence >= 85)\n      .map(type => type.id);\n    setSelectedTestTypes(highConfidenceTestTypes);\n  }, [detectedTopics, detectedDates, detectedTestTypes]);\n\n  // Generate smart recommendations\n  useEffect(() => {\n    const recommendations: SmartRecommendation[] = [];\n    \n    // Study schedule recommendations\n    if (detectedDates.length > 0) {\n      recommendations.push({\n        id: 'schedule-1',\n        type: 'schedule',\n        title: 'Optimized Study Schedule',\n        description: `Based on ${detectedDates.length} detected dates, we recommend a spaced repetition schedule with review sessions before each deadline.`,\n        confidence: 92,\n        action: 'Apply 3-week study schedule'\n      });\n    }\n\n    // Material recommendations\n    if (detectedTopics.length > 0) {\n      recommendations.push({\n        id: 'material-1',\n        type: 'material',\n        title: 'Focused Study Materials',\n        description: `Create flashcards and practice tests for the ${detectedTopics.length} detected topics with highest confidence scores.`,\n        confidence: 88,\n        action: 'Generate study materials'\n      });\n    }\n\n    // Strategy recommendations\n    if (detectedTestTypes.length > 0) {\n      recommendations.push({\n        id: 'strategy-1',\n        type: 'strategy',\n        title: 'Test Preparation Strategy',\n        description: `Based on detected test types, we recommend a mix of practice tests and concept review sessions.`,\n        confidence: 85,\n        action: 'Apply test strategy'\n      });\n    }\n\n    setSmartRecommendations(recommendations);\n  }, [detectedTopics, detectedDates, detectedTestTypes]);\n\n  const handleTopicToggle = (topicId: string) => {\n    setSelectedTopics(prev => \n      prev.includes(topicId) \n        ? prev.filter(id => id !== topicId)\n        : [...prev, topicId]\n    );\n  };\n\n  const handleDateToggle = (dateId: string) => {\n    setSelectedDates(prev => \n      prev.includes(dateId) \n        ? prev.filter(id => id !== dateId)\n        : [...prev, dateId]\n    );\n  };\n\n  const handleTestTypeToggle = (testTypeId: string) => {\n    setSelectedTestTypes(prev => \n      prev.includes(testTypeId) \n        ? prev.filter(id => id !== testTypeId)\n        : [...prev, testTypeId]\n    );\n  };\n\n  const handleRecommendationToggle = (recommendationId: string) => {\n    setSelectedRecommendations(prev => \n      prev.includes(recommendationId) \n        ? prev.filter(id => id !== recommendationId)\n        : [...prev, recommendationId]\n    );\n  };\n\n  const handleApplyAll = () => {\n    const selectedTopicObjects = detectedTopics.filter(topic => selectedTopics.includes(topic.id));\n    const selectedDateObjects = detectedDates.filter(date => selectedDates.includes(date.id));\n    const selectedTestTypeObjects = detectedTestTypes.filter(testType => selectedTestTypes.includes(testType.id));\n    const selectedRecommendationObjects = smartRecommendations.filter(rec => selectedRecommendations.includes(rec.id));\n\n    onApplyTopics(selectedTopics);\n    onApplyDates(selectedDateObjects);\n    onApplyTestTypes(selectedTestTypes);\n    onApplyRecommendations(selectedRecommendationObjects);\n    onDismiss();\n  };\n\n  const handleOneClickSetup = () => {\n    // Auto-select all high-confidence items\n    const allTopicIds = detectedTopics.map(t => t.id);\n    const allDateIds = detectedDates.map(d => d.id);\n    const allTestTypeIds = detectedTestTypes.map(t => t.id);\n    const allRecommendationIds = smartRecommendations.map(r => r.id);\n\n    setSelectedTopics(allTopicIds);\n    setSelectedDates(allDateIds);\n    setSelectedTestTypes(allTestTypeIds);\n    setSelectedRecommendations(allRecommendationIds);\n\n    // Apply everything immediately\n    setTimeout(() => {\n      handleApplyAll();\n    }, 500);\n  };\n\n  const totalDetections = detectedTopics.length + detectedDates.length + detectedTestTypes.length;\n  const totalSelected = selectedTopics.length + selectedDates.length + selectedTestTypes.length + selectedRecommendations.length;\n\n  if (totalDetections === 0) return null;\n\n  return (\n    <Card className=\"border-blue-200 bg-blue-50/50\">\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-center gap-2\">\n          <div className=\"w-8 h-8 bg-gradient-to-r from-purple-500 to-pink-600 rounded-full flex items-center justify-center\">\n            <Sparkles className=\"h-4 w-4 text-white\" />\n          </div>\n          <CardTitle className=\"text-lg text-blue-900\">\n            AI Analysis Complete! ðŸŽ‰\n          </CardTitle>\n        </div>\n        <p className=\"text-sm text-blue-700\">\n          We found {totalDetections} items and generated smart recommendations. High-confidence items are pre-selected:\n        </p>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {/* Detected Topics */}\n        {detectedTopics.length > 0 && (\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center gap-2\">\n              <BookOpen className=\"h-4 w-4 text-blue-600\" />\n              <h4 className=\"font-medium text-blue-900\">Detected Topics ({detectedTopics.length})</h4>\n              <Badge variant=\"outline\" className=\"text-xs\">\n                {selectedTopics.length} selected\n              </Badge>\n            </div>\n            <div className=\"space-y-2\">\n              {detectedTopics.map((topic) => (\n                <div key={topic.id} className=\"flex items-center gap-3 p-2 bg-white rounded-lg border border-blue-200\">\n                  <Checkbox\n                    id={topic.id}\n                    checked={selectedTopics.includes(topic.id)}\n                    onCheckedChange={() => handleTopicToggle(topic.id)}\n                  />\n                  <label htmlFor={topic.id} className=\"flex-1 cursor-pointer\">\n                    <span className=\"text-sm font-medium text-gray-900\">{topic.label}</span>\n                    <Badge variant=\"outline\" className=\"ml-2 text-xs\">\n                      {topic.confidence}% confidence\n                    </Badge>\n                    {topic.confidence >= 90 && (\n                      <Badge variant=\"secondary\" className=\"ml-1 text-xs bg-green-100 text-green-800\">\n                        Auto-selected\n                      </Badge>\n                    )}\n                  </label>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Detected Dates */}\n        {detectedDates.length > 0 && (\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center gap-2\">\n              <Calendar className=\"h-4 w-4 text-green-600\" />\n              <h4 className=\"font-medium text-green-900\">Detected Dates ({detectedDates.length})</h4>\n              <Badge variant=\"outline\" className=\"text-xs\">\n                {selectedDates.length} selected\n              </Badge>\n            </div>\n            <div className=\"space-y-2\">\n              {detectedDates.map((date) => (\n                <div key={date.id} className=\"flex items-center gap-3 p-2 bg-white rounded-lg border border-green-200\">\n                  <Checkbox\n                    id={date.id}\n                    checked={selectedDates.includes(date.id)}\n                    onCheckedChange={() => handleDateToggle(date.id)}\n                  />\n                  <label htmlFor={date.id} className=\"flex-1 cursor-pointer\">\n                    <div className=\"space-y-1\">\n                      <div className=\"flex items-center gap-2\">\n                        <span className=\"text-sm font-medium text-gray-900\">{date.description}</span>\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {date.type}\n                        </Badge>\n                      </div>\n                      <p className=\"text-xs text-gray-600\">{formatDate(date.date)}</p>\n                    </div>\n                  </label>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Detected Test Types */}\n        {detectedTestTypes.length > 0 && (\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center gap-2\">\n              <CheckCircle className=\"h-4 w-4 text-orange-600\" />\n              <h4 className=\"font-medium text-orange-900\">Detected Test Types ({detectedTestTypes.length})</h4>\n              <Badge variant=\"outline\" className=\"text-xs\">\n                {selectedTestTypes.length} selected\n              </Badge>\n            </div>\n            <div className=\"space-y-2\">\n              {detectedTestTypes.map((testType) => (\n                <div key={testType.id} className=\"flex items-center gap-3 p-2 bg-white rounded-lg border border-orange-200\">\n                  <Checkbox\n                    id={testType.id}\n                    checked={selectedTestTypes.includes(testType.id)}\n                    onCheckedChange={() => handleTestTypeToggle(testType.id)}\n                  />\n                  <label htmlFor={testType.id} className=\"flex-1 cursor-pointer\">\n                    <span className=\"text-sm font-medium text-gray-900\">{testType.type}</span>\n                    <Badge variant=\"outline\" className=\"ml-2 text-xs\">\n                      {testType.confidence}% confidence\n                    </Badge>\n                  </label>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Smart Recommendations */}\n        {smartRecommendations.length > 0 && (\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center gap-2\">\n              <Brain className=\"h-4 w-4 text-purple-600\" />\n              <h4 className=\"font-medium text-purple-900\">Smart Recommendations ({smartRecommendations.length})</h4>\n              <Badge variant=\"outline\" className=\"text-xs\">\n                {selectedRecommendations.length} selected\n              </Badge>\n            </div>\n            <div className=\"space-y-2\">\n              {smartRecommendations.map((recommendation) => (\n                <div key={recommendation.id} className=\"flex items-center gap-3 p-3 bg-purple-50 rounded-lg border border-purple-200\">\n                  <Checkbox\n                    id={recommendation.id}\n                    checked={selectedRecommendations.includes(recommendation.id)}\n                    onCheckedChange={() => handleRecommendationToggle(recommendation.id)}\n                  />\n                  <label htmlFor={recommendation.id} className=\"flex-1 cursor-pointer\">\n                    <div className=\"space-y-1\">\n                      <div className=\"flex items-center gap-2\">\n                        <span className=\"text-sm font-medium text-purple-900\">{recommendation.title}</span>\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {recommendation.confidence}% confidence\n                        </Badge>\n                      </div>\n                      <p className=\"text-xs text-purple-700\">{recommendation.description}</p>\n                      <Badge variant=\"secondary\" className=\"text-xs bg-purple-100 text-purple-800\">\n                        {recommendation.action}\n                      </Badge>\n                    </div>\n                  </label>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Action Buttons */}\n        <div className=\"flex gap-2 pt-2\">\n          <Button \n            onClick={handleOneClickSetup}\n            className=\"bg-gradient-to-r from-purple-500 to-pink-600 hover:from-purple-600 hover:to-pink-700 text-white\"\n          >\n            <Zap className=\"h-4 w-4 mr-2\" />\n            One-Click Setup\n          </Button>\n          <Button \n            onClick={handleApplyAll}\n            disabled={totalSelected === 0}\n            className=\"bg-gradient-to-r from-blue-500 to-indigo-600 hover:from-blue-600 hover:to-indigo-700 text-white\"\n          >\n            <CheckCircle className=\"h-4 w-4 mr-2\" />\n            Apply Selected ({totalSelected})\n          </Button>\n          <Button \n            variant=\"outline\" \n            onClick={onDismiss}\n            className=\"border-gray-300 text-gray-600 hover:bg-gray-50\"\n          >\n            Dismiss\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}"],"names":["AIPreview","detectedTopics","detectedDates","detectedTestTypes","onApplyTopics","onApplyDates","onApplyTestTypes","onApplyRecommendations","onDismiss","selectedTopics","setSelectedTopics","useState","selectedDates","setSelectedDates","selectedTestTypes","setSelectedTestTypes","selectedRecommendations","setSelectedRecommendations","smartRecommendations","setSmartRecommendations","useEffect","highConfidenceTopics","filter","topic","confidence","map","id","highConfidenceDates","date","type","highConfidenceTestTypes","recommendations","length","push","title","description","action","handleTopicToggle","topicId","prev","includes","handleDateToggle","dateId","handleTestTypeToggle","testTypeId","handleRecommendationToggle","recommendationId","handleApplyAll","selectedTopicObjects","selectedDateObjects","selectedTestTypeObjects","testType","selectedRecommendationObjects","rec","handleOneClickSetup","allTopicIds","t","allDateIds","d","allTestTypeIds","allRecommendationIds","r","setTimeout","totalDetections","totalSelected","Card","className","CardHeader","div","Sparkles","CardTitle","p","CardContent","BookOpen","h4","Badge","variant","Checkbox","checked","onCheckedChange","label","htmlFor","span","Calendar","formatDate","CheckCircle","Brain","recommendation","Button","onClick","Zap","disabled"],"mappings":"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"}