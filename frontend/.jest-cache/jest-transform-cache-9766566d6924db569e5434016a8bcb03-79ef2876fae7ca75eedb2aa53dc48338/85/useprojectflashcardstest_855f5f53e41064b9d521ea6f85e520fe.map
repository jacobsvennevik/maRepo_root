{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/app/projects/[projectId]/flashcards/hooks/use-project-flashcards.test.ts"],"sourcesContent":["import { renderHook, act, waitFor } from '@testing-library/react';\nimport { useProjectFlashcards } from './use-project-flashcards';\nimport { axiosApi, axiosGeneration } from '@/lib/axios';\n\n// Mock the axios instances\njest.mock('@/lib/axios', () => ({\n  axiosApi: {\n    get: jest.fn(),\n  },\n  axiosGeneration: {\n    get: jest.fn(),\n  }\n}));\n\nconst mockAxiosApi = axiosApi as any;\nconst mockAxiosGeneration = axiosGeneration as any;\n\ndescribe('useProjectFlashcards Error Handling', () => {\n  const mockProjectId = '203062be-58d0-4f98-bbd4-33b4ce081276';\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  afterEach(() => {\n    jest.restoreAllMocks();\n  });\n\n  it('should handle project data fetch timeout errors', async () => {\n    // Mock timeout error for project data\n    const timeoutError = new Error('Network Error');\n    timeoutError.name = 'AxiosError';\n    (timeoutError as any).code = 'ECONNABORTED';\n    (timeoutError as any).message = 'timeout of 30000ms exceeded';\n\n    mockAxiosApi.get.mockRejectedValueOnce(timeoutError);\n    mockAxiosGeneration.get.mockResolvedValueOnce({ data: [] });\n\n    const { result } = renderHook(() => useProjectFlashcards(mockProjectId));\n\n    // Should set error state on timeout\n    await waitFor(() => {\n      expect(result.current.error).toBeTruthy();\n      expect(result.current.isLoading).toBe(false);\n    });\n\n    // Verify correct API calls were attempted\n    expect(mockAxiosApi.get).toHaveBeenCalledWith(`projects/${mockProjectId}/`);\n  });\n\n  it('should handle flashcard sets fetch errors', async () => {\n    // Mock successful project fetch but failed flashcard sets fetch\n    const mockProject = {\n      id: mockProjectId,\n      name: 'Test Project',\n      uploaded_files: []\n    };\n\n    const flashcardError = new Error('Flashcard fetch failed');\n    (flashcardError as any).response = {\n      status: 500,\n      data: { detail: 'Database connection failed' }\n    };\n\n    mockAxiosApi.get.mockResolvedValueOnce({ data: mockProject });\n    mockAxiosGeneration.get.mockRejectedValueOnce(flashcardError);\n\n    const { result } = renderHook(() => useProjectFlashcards(mockProjectId));\n\n    await waitFor(() => {\n      expect(result.current.error).toBeTruthy();\n      expect(result.current.flashcardSets).toEqual([]);\n    });\n\n    expect(mockAxiosGeneration.get).toHaveBeenCalledWith(`projects/${mockProjectId}/flashcard-sets/`);\n  });\n\n  it('should handle PostgreSQL \"too many clients\" errors gracefully', async () => {\n    const dbError = new Error('Database connection failed');\n    (dbError as any).response = {\n      status: 500,\n      data: { \n        detail: 'connection to server failed: FATAL: sorry, too many clients already'\n      }\n    };\n\n    mockAxiosApi.get.mockRejectedValueOnce(dbError);\n    mockAxiosGeneration.get.mockResolvedValueOnce({ data: [] });\n\n    const { result } = renderHook(() => useProjectFlashcards(mockProjectId));\n\n    await waitFor(() => {\n      expect(result.current.error).toBeTruthy();\n      expect(result.current.error?.message).toContain('Database connection failed');\n    });\n  });\n\n  it('should recover after successful retry', async () => {\n    const mockProject = {\n      id: mockProjectId,\n      name: 'Test Project',\n      uploaded_files: [\n        { id: '1', name: 'test.pdf', file_size: 1024 }\n      ]\n    };\n\n    const mockFlashcardSets = [\n      {\n        id: '1',\n        title: 'Test Set',\n        cards_count: 10,\n        created_at: '2025-09-19T07:00:00Z'\n      }\n    ];\n\n    // First calls fail, then succeed\n    mockAxiosApi.get\n      .mockRejectedValueOnce(new Error('Network timeout'))\n      .mockResolvedValueOnce({ data: mockProject });\n\n    mockAxiosGeneration.get\n      .mockRejectedValueOnce(new Error('Network timeout'))\n      .mockResolvedValueOnce({ data: mockFlashcardSets });\n\n    const { result } = renderHook(() => useProjectFlashcards(mockProjectId));\n\n    // Should show error initially\n    await waitFor(() => {\n      expect(result.current.error).toBeTruthy();\n    });\n\n    // Trigger retry\n    await act(async () => {\n      await result.current.retryFetch();\n    });\n\n    // Should succeed after retry\n    await waitFor(() => {\n      expect(result.current.error).toBeNull();\n      expect(result.current.flashcardSets).toHaveLength(1);\n      expect(result.current.projectFiles).toHaveLength(1);\n      expect(result.current.flashcardSets[0].title).toBe('Test Set');\n    });\n  });\n\n  it('should handle malformed API responses', async () => {\n    // Mock malformed responses\n    mockAxiosApi.get.mockResolvedValueOnce({ data: null });\n    mockAxiosGeneration.get.mockResolvedValueOnce({ data: { invalid: 'format' } });\n\n    const { result } = renderHook(() => useProjectFlashcards(mockProjectId));\n\n    await waitFor(() => {\n      // Should handle null/malformed data gracefully\n      expect(result.current.flashcardSets).toEqual([]);\n      expect(result.current.projectFiles).toEqual([]);\n      expect(result.current.isLoading).toBe(false);\n    });\n  });\n\n  it('should prevent concurrent requests during loading', async () => {\n    // Mock slow responses\n    const slowPromise1 = new Promise(resolve => \n      setTimeout(() => resolve({ data: { uploaded_files: [] } }), 1000)\n    );\n    const slowPromise2 = new Promise(resolve => \n      setTimeout(() => resolve({ data: [] }), 1000)\n    );\n\n    mockAxiosApi.get.mockReturnValueOnce(slowPromise1);\n    mockAxiosGeneration.get.mockReturnValueOnce(slowPromise2);\n\n    const { result } = renderHook(() => useProjectFlashcards(mockProjectId));\n\n    // Trigger multiple refresh calls while loading\n    await act(async () => {\n      result.current.retryFetch();\n      result.current.retryFetch();\n      result.current.retryFetch();\n    });\n\n    // Should only make one set of API calls\n    await waitFor(() => {\n      expect(mockAxiosApi.get).toHaveBeenCalledTimes(1);\n      expect(mockAxiosGeneration.get).toHaveBeenCalledTimes(1);\n    });\n  });\n\n  it('should handle creation success and update state', async () => {\n    const mockProject = {\n      id: mockProjectId,\n      name: 'Test Project',\n      uploaded_files: []\n    };\n\n    const mockNewSet = {\n      id: '2',\n      title: 'New Set',\n      cards_count: 5,\n      created_at: '2025-09-19T08:00:00Z'\n    };\n\n    mockAxiosApi.get.mockResolvedValue({ data: mockProject });\n    mockAxiosGeneration.get\n      .mockResolvedValueOnce({ data: [] }) // Initial empty state\n      .mockResolvedValueOnce({ data: [mockNewSet] }); // After creation\n\n    const { result } = renderHook(() => useProjectFlashcards(mockProjectId));\n\n    // Wait for initial load\n    await waitFor(() => {\n      expect(result.current.isLoading).toBe(false);\n      expect(result.current.flashcardSets).toEqual([]);\n    });\n\n    // Simulate successful creation\n    await act(async () => {\n      result.current.onCreationSuccess();\n    });\n\n    // Should refresh and show new set\n    await waitFor(() => {\n      expect(result.current.flashcardSets).toHaveLength(1);\n      expect(result.current.flashcardSets[0].title).toBe('New Set');\n    });\n  });\n\n  it('should handle stats calculation with empty data', async () => {\n    const mockProject = {\n      id: mockProjectId,\n      name: 'Test Project',\n      uploaded_files: []\n    };\n\n    mockAxiosApi.get.mockResolvedValueOnce({ data: mockProject });\n    mockAxiosGeneration.get.mockResolvedValueOnce({ data: [] });\n\n    const { result } = renderHook(() => useProjectFlashcards(mockProjectId));\n\n    await waitFor(() => {\n      expect(result.current.stats).toEqual({\n        totalSets: 0,\n        totalCards: 0,\n        averageCardsPerSet: 0,\n        lastStudied: null\n      });\n    });\n  });\n});\n"],"names":["jest","mock","axiosApi","get","fn","axiosGeneration","mockAxiosApi","mockAxiosGeneration","describe","mockProjectId","beforeEach","clearAllMocks","afterEach","restoreAllMocks","it","timeoutError","Error","name","code","message","mockRejectedValueOnce","mockResolvedValueOnce","data","result","renderHook","useProjectFlashcards","waitFor","expect","current","error","toBeTruthy","isLoading","toBe","toHaveBeenCalledWith","mockProject","id","uploaded_files","flashcardError","response","status","detail","flashcardSets","toEqual","dbError","toContain","file_size","mockFlashcardSets","title","cards_count","created_at","act","retryFetch","toBeNull","toHaveLength","projectFiles","invalid","slowPromise1","Promise","resolve","setTimeout","slowPromise2","mockReturnValueOnce","toHaveBeenCalledTimes","mockNewSet","mockResolvedValue","onCreationSuccess","stats","totalSets","totalCards","averageCardsPerSet","lastStudied"],"mappings":"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"}