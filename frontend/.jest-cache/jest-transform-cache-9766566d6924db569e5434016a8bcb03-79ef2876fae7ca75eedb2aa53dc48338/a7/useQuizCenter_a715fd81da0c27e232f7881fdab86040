b941767ebd75174f8b3dc4e90450aa6d
/**
 * useQuizCenter Custom Hook
 * 
 * Comprehensive state management hook for Quiz Center,
 * following the established patterns from useFlashcardDashboard and useFileStorage.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useQuizCenter", {
    enumerable: true,
    get: function() {
        return useQuizCenter;
    }
});
const _react = require("react");
const _quizApi = require("../services/quizApi");
const _transformers = require("../utils/transformers");
function useQuizCenter({ projectId, autoLoad = true, refreshInterval }) {
    // State management
    const [state, setState] = (0, _react.useState)({
        sessions: [],
        currentSession: undefined,
        currentQuestions: undefined,
        analytics: undefined,
        // Loading states
        loading: true,
        loadingSessions: false,
        loadingSession: false,
        loadingQuestions: false,
        submittingAnswer: false,
        generatingQuiz: false,
        // Error states
        error: null,
        sessionError: null,
        questionsError: null,
        submissionError: null,
        // UI state
        selectedSessionId: undefined,
        currentQuestionIndex: 0,
        sessionStarted: false,
        sessionCompleted: false,
        // Stats
        totalSessions: 0,
        completedSessions: 0,
        averageScore: 0,
        totalTimeSpent: 0
    });
    // Refs for cleanup and tracking
    const isMountedRef = (0, _react.useRef)(true);
    const refreshIntervalRef = (0, _react.useRef)(null);
    // Cleanup on unmount
    (0, _react.useEffect)(()=>{
        return ()=>{
            isMountedRef.current = false;
            if (refreshIntervalRef.current) {
                clearInterval(refreshIntervalRef.current);
            }
        };
    }, []);
    // Auto-load data on mount
    (0, _react.useEffect)(()=>{
        if (autoLoad && projectId) {
            loadSessions();
        }
    }, [
        projectId,
        autoLoad,
        loadSessions
    ]);
    // Set up refresh interval
    (0, _react.useEffect)(()=>{
        if (refreshInterval && refreshInterval > 0) {
            refreshIntervalRef.current = setInterval(()=>{
                if (isMountedRef.current) {
                    refreshData();
                }
            }, refreshInterval);
        }
        return ()=>{
            if (refreshIntervalRef.current) {
                clearInterval(refreshIntervalRef.current);
            }
        };
    }, [
        refreshInterval
    ]);
    // Data loading functions
    const loadSessions = (0, _react.useCallback)(async ()=>{
        if (!projectId) return;
        try {
            setState((prev)=>({
                    ...prev,
                    loadingSessions: true,
                    error: null
                }));
            console.log(`🔍 Loading quiz sessions for project: ${projectId}`);
            const backendSessions = await _quizApi.quizApi.getProjectSessions(projectId);
            const sessions = (0, _transformers.transformSessions)(backendSessions);
            // Calculate project stats
            const stats = (0, _transformers.calculateProjectStats)(sessions);
            if (isMountedRef.current) {
                setState((prev)=>({
                        ...prev,
                        sessions,
                        loadingSessions: false,
                        loading: false,
                        totalSessions: stats.totalSessions,
                        completedSessions: stats.completedSessions,
                        averageScore: stats.averageScore,
                        totalTimeSpent: stats.totalTimeSpent
                    }));
            }
        } catch (error) {
            console.error('❌ Failed to load sessions:', error);
            if (isMountedRef.current) {
                setState((prev)=>({
                        ...prev,
                        loadingSessions: false,
                        loading: false,
                        error: error instanceof Error ? error.message : 'Failed to load quiz sessions'
                    }));
            }
        }
    }, [
        projectId
    ]);
    const loadSession = (0, _react.useCallback)(async (sessionId)=>{
        try {
            setState((prev)=>({
                    ...prev,
                    loadingSession: true,
                    sessionError: null
                }));
            console.log(`🔍 Loading quiz session: ${sessionId}`);
            const backendSession = await _quizApi.quizApi.getSession(sessionId);
            const session = (0, _transformers.transformSessions)([
                backendSession
            ])[0];
            if (isMountedRef.current) {
                setState((prev)=>({
                        ...prev,
                        currentSession: session,
                        loadingSession: false,
                        selectedSessionId: sessionId
                    }));
            }
        } catch (error) {
            console.error(`❌ Failed to load session ${sessionId}:`, error);
            if (isMountedRef.current) {
                setState((prev)=>({
                        ...prev,
                        loadingSession: false,
                        sessionError: error instanceof Error ? error.message : 'Failed to load quiz session'
                    }));
            }
        }
    }, []);
    const loadSessionQuestions = (0, _react.useCallback)(async (sessionId)=>{
        try {
            setState((prev)=>({
                    ...prev,
                    loadingQuestions: true,
                    questionsError: null
                }));
            console.log(`❓ Loading questions for session: ${sessionId}`);
            const backendQuestions = await _quizApi.quizApi.getSessionQuestions(sessionId);
            const questions = (0, _transformers.transformQuestions)(backendQuestions);
            if (isMountedRef.current) {
                setState((prev)=>({
                        ...prev,
                        currentQuestions: questions,
                        loadingQuestions: false,
                        currentQuestionIndex: 0
                    }));
            }
        } catch (error) {
            console.error(`❌ Failed to load questions for session ${sessionId}:`, error);
            if (isMountedRef.current) {
                setState((prev)=>({
                        ...prev,
                        loadingQuestions: false,
                        questionsError: error instanceof Error ? error.message : 'Failed to load quiz questions'
                    }));
            }
        }
    }, []);
    const loadSessionResponses = (0, _react.useCallback)(async (sessionId)=>{
        try {
            console.log(`📊 Loading responses for session: ${sessionId}`);
            const backendResponses = await _quizApi.quizApi.getSessionResponses(sessionId);
            const responses = (0, _transformers.transformResponses)(backendResponses);
            // Update session stats with responses
            const session = state.sessions.find((s)=>s.id === sessionId);
            if (session) {
                const stats = (0, _transformers.calculateSessionStats)(session, responses);
                const updatedSession = {
                    ...session,
                    ...stats
                };
                if (isMountedRef.current) {
                    setState((prev)=>({
                            ...prev,
                            sessions: prev.sessions.map((s)=>s.id === sessionId ? updatedSession : s)
                        }));
                }
            }
        } catch (error) {
            console.error(`❌ Failed to load responses for session ${sessionId}:`, error);
        }
    }, [
        state.sessions
    ]);
    const loadSessionAnalytics = (0, _react.useCallback)(async (sessionId)=>{
        try {
            console.log(`📈 Loading analytics for session: ${sessionId}`);
            const backendAnalytics = await _quizApi.quizApi.getSessionAnalytics(sessionId);
            const analytics = (0, _transformers.transformAnalytics)(backendAnalytics);
            if (isMountedRef.current) {
                setState((prev)=>({
                        ...prev,
                        analytics
                    }));
            }
        } catch (error) {
            console.error(`❌ Failed to load analytics for session ${sessionId}:`, error);
        }
    }, []);
    const refreshData = (0, _react.useCallback)(async ()=>{
        await loadSessions();
    }, [
        loadSessions
    ]);
    // CRUD operations
    const createSession = (0, _react.useCallback)(async (request)=>{
        try {
            setState((prev)=>({
                    ...prev,
                    generatingQuiz: true,
                    error: null
                }));
            console.log('🚀 Creating new quiz session:', request);
            const backendSession = await _quizApi.quizApi.createSession(request);
            const session = (0, _transformers.transformSessions)([
                backendSession
            ])[0];
            if (isMountedRef.current) {
                setState((prev)=>({
                        ...prev,
                        sessions: [
                            session,
                            ...prev.sessions
                        ],
                        generatingQuiz: false,
                        totalSessions: prev.totalSessions + 1
                    }));
            }
            return session;
        } catch (error) {
            console.error('❌ Failed to create session:', error);
            if (isMountedRef.current) {
                setState((prev)=>({
                        ...prev,
                        generatingQuiz: false,
                        error: error instanceof Error ? error.message : 'Failed to create quiz session'
                    }));
            }
            throw error;
        }
    }, []);
    const updateSession = (0, _react.useCallback)(async (sessionId, request)=>{
        try {
            console.log(`📝 Updating session ${sessionId}:`, request);
            const backendSession = await _quizApi.quizApi.updateSession(sessionId, request);
            const updatedSession = (0, _transformers.transformSessions)([
                backendSession
            ])[0];
            if (isMountedRef.current) {
                setState((prev)=>({
                        ...prev,
                        sessions: prev.sessions.map((s)=>s.id === sessionId ? updatedSession : s),
                        currentSession: prev.currentSession?.id === sessionId ? updatedSession : prev.currentSession
                    }));
            }
        } catch (error) {
            console.error(`❌ Failed to update session ${sessionId}:`, error);
            throw error;
        }
    }, []);
    const deleteSession = (0, _react.useCallback)(async (sessionId)=>{
        try {
            console.log(`🗑️ Deleting session: ${sessionId}`);
            await _quizApi.quizApi.deleteSession(sessionId);
            if (isMountedRef.current) {
                setState((prev)=>({
                        ...prev,
                        sessions: prev.sessions.filter((s)=>s.id !== sessionId),
                        currentSession: prev.currentSession?.id === sessionId ? undefined : prev.currentSession,
                        selectedSessionId: prev.selectedSessionId === sessionId ? undefined : prev.selectedSessionId,
                        totalSessions: prev.totalSessions - 1
                    }));
            }
        } catch (error) {
            console.error(`❌ Failed to delete session ${sessionId}:`, error);
            throw error;
        }
    }, []);
    const bulkDeleteSessions = (0, _react.useCallback)(async (sessionIds)=>{
        try {
            console.log(`🗑️ Bulk deleting ${sessionIds.length} sessions`);
            await _quizApi.quizApi.bulkDeleteSessions(sessionIds);
            if (isMountedRef.current) {
                setState((prev)=>({
                        ...prev,
                        sessions: prev.sessions.filter((s)=>!sessionIds.includes(s.id)),
                        totalSessions: prev.totalSessions - sessionIds.length
                    }));
            }
        } catch (error) {
            console.error(`❌ Failed to bulk delete sessions:`, error);
            throw error;
        }
    }, []);
    const bulkUpdateSessions = (0, _react.useCallback)(async (sessionIds, updates)=>{
        try {
            console.log(`📝 Bulk updating ${sessionIds.length} sessions`);
            await _quizApi.quizApi.bulkUpdateSessions(sessionIds, updates);
            // Refresh data to get updated sessions
            await refreshData();
        } catch (error) {
            console.error(`❌ Failed to bulk update sessions:`, error);
            throw error;
        }
    }, [
        refreshData
    ]);
    // Quiz session operations
    const startSession = (0, _react.useCallback)(async (sessionId)=>{
        try {
            console.log(`▶️ Starting session: ${sessionId}`);
            const response = await _quizApi.quizApi.startSession(sessionId);
            if (isMountedRef.current) {
                setState((prev)=>({
                        ...prev,
                        currentQuestions: response.questions,
                        sessionStarted: true,
                        sessionCompleted: false,
                        currentQuestionIndex: 0
                    }));
            }
        } catch (error) {
            console.error(`❌ Failed to start session ${sessionId}:`, error);
            throw error;
        }
    }, []);
    const submitAnswer = (0, _react.useCallback)(async (request)=>{
        if (!state.currentSession) return;
        try {
            setState((prev)=>({
                    ...prev,
                    submittingAnswer: true,
                    submissionError: null
                }));
            console.log(`📝 Submitting answer for question ${request.question_id}`);
            const response = await _quizApi.quizApi.submitAnswer(state.currentSession.id, request);
            // Update current question with answer
            if (isMountedRef.current) {
                setState((prev)=>({
                        ...prev,
                        currentQuestions: prev.currentQuestions?.map((q)=>q.id === request.question_id ? {
                                ...q,
                                userAnswer: request.user_answer,
                                isCorrect: response.is_correct,
                                isAnswered: true
                            } : q),
                        submittingAnswer: false
                    }));
            }
        } catch (error) {
            console.error(`❌ Failed to submit answer:`, error);
            if (isMountedRef.current) {
                setState((prev)=>({
                        ...prev,
                        submittingAnswer: false,
                        submissionError: error instanceof Error ? error.message : 'Failed to submit answer'
                    }));
            }
            throw error;
        }
    }, [
        state.currentSession
    ]);
    const completeSession = (0, _react.useCallback)(async ()=>{
        if (!state.currentSession) return;
        try {
            console.log(`✅ Completing session: ${state.currentSession.id}`);
            // Update session status to completed
            await updateSession(state.currentSession.id, {
                status: 'completed'
            });
            // Load analytics
            await loadSessionAnalytics(state.currentSession.id);
            if (isMountedRef.current) {
                setState((prev)=>({
                        ...prev,
                        sessionCompleted: true,
                        sessionStarted: false
                    }));
            }
        } catch (error) {
            console.error(`❌ Failed to complete session:`, error);
            throw error;
        }
    }, [
        state.currentSession,
        updateSession,
        loadSessionAnalytics
    ]);
    // UI operations
    const selectSession = (0, _react.useCallback)((sessionId)=>{
        setState((prev)=>({
                ...prev,
                selectedSessionId: sessionId,
                currentSession: prev.sessions.find((s)=>s.id === sessionId)
            }));
    }, []);
    const nextQuestion = (0, _react.useCallback)(()=>{
        setState((prev)=>({
                ...prev,
                currentQuestionIndex: Math.min(prev.currentQuestionIndex + 1, (prev.currentQuestions?.length || 1) - 1)
            }));
    }, []);
    const previousQuestion = (0, _react.useCallback)(()=>{
        setState((prev)=>({
                ...prev,
                currentQuestionIndex: Math.max(prev.currentQuestionIndex - 1, 0)
            }));
    }, []);
    const goToQuestion = (0, _react.useCallback)((index)=>{
        setState((prev)=>({
                ...prev,
                currentQuestionIndex: Math.max(0, Math.min(index, (prev.currentQuestions?.length || 1) - 1))
            }));
    }, []);
    // Filtering and sorting
    const filterSessions = (0, _react.useCallback)((filters)=>{
        // Implementation would filter sessions based on criteria
        console.log('🔍 Filtering sessions:', filters);
    }, []);
    const sortSessions = (0, _react.useCallback)((sort)=>{
        // Implementation would sort sessions based on criteria
        console.log('📊 Sorting sessions:', sort);
    }, []);
    // Error handling
    const clearError = (0, _react.useCallback)(()=>{
        setState((prev)=>({
                ...prev,
                error: null
            }));
    }, []);
    const clearSessionError = (0, _react.useCallback)(()=>{
        setState((prev)=>({
                ...prev,
                sessionError: null
            }));
    }, []);
    const clearQuestionsError = (0, _react.useCallback)(()=>{
        setState((prev)=>({
                ...prev,
                questionsError: null
            }));
    }, []);
    const clearSubmissionError = (0, _react.useCallback)(()=>{
        setState((prev)=>({
                ...prev,
                submissionError: null
            }));
    }, []);
    // Utility functions
    const getCurrentQuestion = (0, _react.useCallback)(()=>{
        return state.currentQuestions?.[state.currentQuestionIndex];
    }, [
        state.currentQuestions,
        state.currentQuestionIndex
    ]);
    const getSessionById = (0, _react.useCallback)((sessionId)=>{
        return state.sessions.find((s)=>s.id === sessionId);
    }, [
        state.sessions
    ]);
    const isSessionCompleted = (0, _react.useCallback)((sessionId)=>{
        const session = getSessionById(sessionId);
        return session?.status === 'completed';
    }, [
        getSessionById
    ]);
    const getSessionProgress = (0, _react.useCallback)((sessionId)=>{
        const session = getSessionById(sessionId);
        return session?.completionRate || 0;
    }, [
        getSessionById
    ]);
    return {
        ...state,
        // Data operations
        loadSessions,
        loadSession,
        loadSessionQuestions,
        loadSessionResponses,
        loadSessionAnalytics,
        refreshData,
        // CRUD operations
        createSession,
        updateSession,
        deleteSession,
        bulkDeleteSessions,
        bulkUpdateSessions,
        // Quiz session operations
        startSession,
        submitAnswer,
        completeSession,
        // UI operations
        selectSession,
        nextQuestion,
        previousQuestion,
        goToQuestion,
        // Filtering and sorting
        filterSessions,
        sortSessions,
        // Error handling
        clearError,
        clearSessionError,
        clearQuestionsError,
        clearSubmissionError,
        // Utility functions
        getCurrentQuestion,
        getSessionById,
        isSessionCompleted,
        getSessionProgress
    };
}

//# sourceMappingURL=data:application/json;base64,