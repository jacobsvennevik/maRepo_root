{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/features/quiz/hooks/useQuizCenter.ts"],"sourcesContent":["/**\n * useQuizCenter Custom Hook\n * \n * Comprehensive state management hook for Quiz Center,\n * following the established patterns from useFlashcardDashboard and useFileStorage.\n */\n\nimport { useState, useEffect, useCallback, useRef } from 'react';\nimport { quizApi } from '../services/quizApi';\nimport {\n  transformSessions,\n  transformQuestions,\n  transformResponses,\n  transformAnalytics,\n  calculateSessionStats,\n  calculateProjectStats,\n  validateSession\n} from '../utils/transformers';\nimport type {\n  QuizCenterState,\n  QuizSession,\n  QuizQuestion,\n  QuizResponse,\n  QuizAnalytics,\n  CreateQuizSessionRequest,\n  UpdateQuizSessionRequest,\n  SubmitQuizAnswerRequest,\n  QuizSessionFilters,\n  QuizSessionSort,\n  QuizError\n} from '../types';\n\ninterface UseQuizCenterOptions {\n  projectId: string;\n  autoLoad?: boolean;\n  refreshInterval?: number;\n}\n\ninterface UseQuizCenterReturn extends QuizCenterState {\n  // Data operations\n  loadSessions: () => Promise<void>;\n  loadSession: (sessionId: string) => Promise<void>;\n  loadSessionQuestions: (sessionId: string) => Promise<void>;\n  loadSessionResponses: (sessionId: string) => Promise<void>;\n  loadSessionAnalytics: (sessionId: string) => Promise<void>;\n  refreshData: () => Promise<void>;\n  \n  // CRUD operations\n  createSession: (request: CreateQuizSessionRequest) => Promise<QuizSession>;\n  updateSession: (sessionId: string, request: UpdateQuizSessionRequest) => Promise<void>;\n  deleteSession: (sessionId: string) => Promise<void>;\n  bulkDeleteSessions: (sessionIds: string[]) => Promise<void>;\n  bulkUpdateSessions: (sessionIds: string[], updates: UpdateQuizSessionRequest) => Promise<void>;\n  \n  // Quiz session operations\n  startSession: (sessionId: string) => Promise<void>;\n  submitAnswer: (request: SubmitQuizAnswerRequest) => Promise<void>;\n  completeSession: () => Promise<void>;\n  \n  // UI operations\n  selectSession: (sessionId: string) => void;\n  nextQuestion: () => void;\n  previousQuestion: () => void;\n  goToQuestion: (index: number) => void;\n  \n  // Filtering and sorting\n  filterSessions: (filters: QuizSessionFilters) => void;\n  sortSessions: (sort: QuizSessionSort) => void;\n  \n  // Error handling\n  clearError: () => void;\n  clearSessionError: () => void;\n  clearQuestionsError: () => void;\n  clearSubmissionError: () => void;\n  \n  // Utility functions\n  getCurrentQuestion: () => QuizQuestion | undefined;\n  getSessionById: (sessionId: string) => QuizSession | undefined;\n  isSessionCompleted: (sessionId: string) => boolean;\n  getSessionProgress: (sessionId: string) => number;\n}\n\nexport function useQuizCenter({ \n  projectId, \n  autoLoad = true, \n  refreshInterval \n}: UseQuizCenterOptions): UseQuizCenterReturn {\n  \n  // State management\n  const [state, setState] = useState<QuizCenterState>({\n    sessions: [],\n    currentSession: undefined,\n    currentQuestions: undefined,\n    analytics: undefined,\n    \n    // Loading states\n    loading: true,\n    loadingSessions: false,\n    loadingSession: false,\n    loadingQuestions: false,\n    submittingAnswer: false,\n    generatingQuiz: false,\n    \n    // Error states\n    error: null,\n    sessionError: null,\n    questionsError: null,\n    submissionError: null,\n    \n    // UI state\n    selectedSessionId: undefined,\n    currentQuestionIndex: 0,\n    sessionStarted: false,\n    sessionCompleted: false,\n    \n    // Stats\n    totalSessions: 0,\n    completedSessions: 0,\n    averageScore: 0,\n    totalTimeSpent: 0\n  });\n\n  // Refs for cleanup and tracking\n  const isMountedRef = useRef(true);\n  const refreshIntervalRef = useRef<NodeJS.Timeout | null>(null);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      isMountedRef.current = false;\n      if (refreshIntervalRef.current) {\n        clearInterval(refreshIntervalRef.current);\n      }\n    };\n  }, []);\n\n  // Auto-load data on mount\n  useEffect(() => {\n    if (autoLoad && projectId) {\n      loadSessions();\n    }\n  }, [projectId, autoLoad, loadSessions]);\n\n  // Set up refresh interval\n  useEffect(() => {\n    if (refreshInterval && refreshInterval > 0) {\n      refreshIntervalRef.current = setInterval(() => {\n        if (isMountedRef.current) {\n          refreshData();\n        }\n      }, refreshInterval);\n    }\n\n    return () => {\n      if (refreshIntervalRef.current) {\n        clearInterval(refreshIntervalRef.current);\n      }\n    };\n  }, [refreshInterval]);\n\n  // Data loading functions\n  const loadSessions = useCallback(async () => {\n    if (!projectId) return;\n\n    try {\n      setState(prev => ({ ...prev, loadingSessions: true, error: null }));\n      \n      console.log(`🔍 Loading quiz sessions for project: ${projectId}`);\n      const backendSessions = await quizApi.getProjectSessions(projectId);\n      const sessions = transformSessions(backendSessions);\n      \n      // Calculate project stats\n      const stats = calculateProjectStats(sessions);\n      \n      if (isMountedRef.current) {\n        setState(prev => ({\n          ...prev,\n          sessions,\n          loadingSessions: false,\n          loading: false,\n          totalSessions: stats.totalSessions,\n          completedSessions: stats.completedSessions,\n          averageScore: stats.averageScore,\n          totalTimeSpent: stats.totalTimeSpent\n        }));\n      }\n    } catch (error) {\n      console.error('❌ Failed to load sessions:', error);\n      if (isMountedRef.current) {\n        setState(prev => ({\n          ...prev,\n          loadingSessions: false,\n          loading: false,\n          error: error instanceof Error ? error.message : 'Failed to load quiz sessions'\n        }));\n      }\n    }\n  }, [projectId]);\n\n  const loadSession = useCallback(async (sessionId: string) => {\n    try {\n      setState(prev => ({ ...prev, loadingSession: true, sessionError: null }));\n      \n      console.log(`🔍 Loading quiz session: ${sessionId}`);\n      const backendSession = await quizApi.getSession(sessionId);\n      const session = transformSessions([backendSession])[0];\n      \n      if (isMountedRef.current) {\n        setState(prev => ({\n          ...prev,\n          currentSession: session,\n          loadingSession: false,\n          selectedSessionId: sessionId\n        }));\n      }\n    } catch (error) {\n      console.error(`❌ Failed to load session ${sessionId}:`, error);\n      if (isMountedRef.current) {\n        setState(prev => ({\n          ...prev,\n          loadingSession: false,\n          sessionError: error instanceof Error ? error.message : 'Failed to load quiz session'\n        }));\n      }\n    }\n  }, []);\n\n  const loadSessionQuestions = useCallback(async (sessionId: string) => {\n    try {\n      setState(prev => ({ ...prev, loadingQuestions: true, questionsError: null }));\n      \n      console.log(`❓ Loading questions for session: ${sessionId}`);\n      const backendQuestions = await quizApi.getSessionQuestions(sessionId);\n      const questions = transformQuestions(backendQuestions);\n      \n      if (isMountedRef.current) {\n        setState(prev => ({\n          ...prev,\n          currentQuestions: questions,\n          loadingQuestions: false,\n          currentQuestionIndex: 0\n        }));\n      }\n    } catch (error) {\n      console.error(`❌ Failed to load questions for session ${sessionId}:`, error);\n      if (isMountedRef.current) {\n        setState(prev => ({\n          ...prev,\n          loadingQuestions: false,\n          questionsError: error instanceof Error ? error.message : 'Failed to load quiz questions'\n        }));\n      }\n    }\n  }, []);\n\n  const loadSessionResponses = useCallback(async (sessionId: string) => {\n    try {\n      console.log(`📊 Loading responses for session: ${sessionId}`);\n      const backendResponses = await quizApi.getSessionResponses(sessionId);\n      const responses = transformResponses(backendResponses);\n      \n      // Update session stats with responses\n      const session = state.sessions.find(s => s.id === sessionId);\n      if (session) {\n        const stats = calculateSessionStats(session, responses);\n        const updatedSession = { ...session, ...stats };\n        \n        if (isMountedRef.current) {\n          setState(prev => ({\n            ...prev,\n            sessions: prev.sessions.map(s => s.id === sessionId ? updatedSession : s)\n          }));\n        }\n      }\n    } catch (error) {\n      console.error(`❌ Failed to load responses for session ${sessionId}:`, error);\n    }\n  }, [state.sessions]);\n\n  const loadSessionAnalytics = useCallback(async (sessionId: string) => {\n    try {\n      console.log(`📈 Loading analytics for session: ${sessionId}`);\n      const backendAnalytics = await quizApi.getSessionAnalytics(sessionId);\n      const analytics = transformAnalytics(backendAnalytics);\n      \n      if (isMountedRef.current) {\n        setState(prev => ({\n          ...prev,\n          analytics\n        }));\n      }\n    } catch (error) {\n      console.error(`❌ Failed to load analytics for session ${sessionId}:`, error);\n    }\n  }, []);\n\n  const refreshData = useCallback(async () => {\n    await loadSessions();\n  }, [loadSessions]);\n\n  // CRUD operations\n  const createSession = useCallback(async (request: CreateQuizSessionRequest): Promise<QuizSession> => {\n    try {\n      setState(prev => ({ ...prev, generatingQuiz: true, error: null }));\n      \n      console.log('🚀 Creating new quiz session:', request);\n      const backendSession = await quizApi.createSession(request);\n      const session = transformSessions([backendSession])[0];\n      \n      if (isMountedRef.current) {\n        setState(prev => ({\n          ...prev,\n          sessions: [session, ...prev.sessions],\n          generatingQuiz: false,\n          totalSessions: prev.totalSessions + 1\n        }));\n      }\n      \n      return session;\n    } catch (error) {\n      console.error('❌ Failed to create session:', error);\n      if (isMountedRef.current) {\n        setState(prev => ({\n          ...prev,\n          generatingQuiz: false,\n          error: error instanceof Error ? error.message : 'Failed to create quiz session'\n        }));\n      }\n      throw error;\n    }\n  }, []);\n\n  const updateSession = useCallback(async (sessionId: string, request: UpdateQuizSessionRequest) => {\n    try {\n      console.log(`📝 Updating session ${sessionId}:`, request);\n      const backendSession = await quizApi.updateSession(sessionId, request);\n      const updatedSession = transformSessions([backendSession])[0];\n      \n      if (isMountedRef.current) {\n        setState(prev => ({\n          ...prev,\n          sessions: prev.sessions.map(s => s.id === sessionId ? updatedSession : s),\n          currentSession: prev.currentSession?.id === sessionId ? updatedSession : prev.currentSession\n        }));\n      }\n    } catch (error) {\n      console.error(`❌ Failed to update session ${sessionId}:`, error);\n      throw error;\n    }\n  }, []);\n\n  const deleteSession = useCallback(async (sessionId: string) => {\n    try {\n      console.log(`🗑️ Deleting session: ${sessionId}`);\n      await quizApi.deleteSession(sessionId);\n      \n      if (isMountedRef.current) {\n        setState(prev => ({\n          ...prev,\n          sessions: prev.sessions.filter(s => s.id !== sessionId),\n          currentSession: prev.currentSession?.id === sessionId ? undefined : prev.currentSession,\n          selectedSessionId: prev.selectedSessionId === sessionId ? undefined : prev.selectedSessionId,\n          totalSessions: prev.totalSessions - 1\n        }));\n      }\n    } catch (error) {\n      console.error(`❌ Failed to delete session ${sessionId}:`, error);\n      throw error;\n    }\n  }, []);\n\n  const bulkDeleteSessions = useCallback(async (sessionIds: string[]) => {\n    try {\n      console.log(`🗑️ Bulk deleting ${sessionIds.length} sessions`);\n      await quizApi.bulkDeleteSessions(sessionIds);\n      \n      if (isMountedRef.current) {\n        setState(prev => ({\n          ...prev,\n          sessions: prev.sessions.filter(s => !sessionIds.includes(s.id)),\n          totalSessions: prev.totalSessions - sessionIds.length\n        }));\n      }\n    } catch (error) {\n      console.error(`❌ Failed to bulk delete sessions:`, error);\n      throw error;\n    }\n  }, []);\n\n  const bulkUpdateSessions = useCallback(async (sessionIds: string[], updates: UpdateQuizSessionRequest) => {\n    try {\n      console.log(`📝 Bulk updating ${sessionIds.length} sessions`);\n      await quizApi.bulkUpdateSessions(sessionIds, updates);\n      \n      // Refresh data to get updated sessions\n      await refreshData();\n    } catch (error) {\n      console.error(`❌ Failed to bulk update sessions:`, error);\n      throw error;\n    }\n  }, [refreshData]);\n\n  // Quiz session operations\n  const startSession = useCallback(async (sessionId: string) => {\n    try {\n      console.log(`▶️ Starting session: ${sessionId}`);\n      const response = await quizApi.startSession(sessionId);\n      \n      if (isMountedRef.current) {\n        setState(prev => ({\n          ...prev,\n          currentQuestions: response.questions,\n          sessionStarted: true,\n          sessionCompleted: false,\n          currentQuestionIndex: 0\n        }));\n      }\n    } catch (error) {\n      console.error(`❌ Failed to start session ${sessionId}:`, error);\n      throw error;\n    }\n  }, []);\n\n  const submitAnswer = useCallback(async (request: SubmitQuizAnswerRequest) => {\n    if (!state.currentSession) return;\n\n    try {\n      setState(prev => ({ ...prev, submittingAnswer: true, submissionError: null }));\n      \n      console.log(`📝 Submitting answer for question ${request.question_id}`);\n      const response = await quizApi.submitAnswer(state.currentSession.id, request);\n      \n      // Update current question with answer\n      if (isMountedRef.current) {\n        setState(prev => ({\n          ...prev,\n          currentQuestions: prev.currentQuestions?.map(q => \n            q.id === request.question_id \n              ? { ...q, userAnswer: request.user_answer, isCorrect: response.is_correct, isAnswered: true }\n              : q\n          ),\n          submittingAnswer: false\n        }));\n      }\n    } catch (error) {\n      console.error(`❌ Failed to submit answer:`, error);\n      if (isMountedRef.current) {\n        setState(prev => ({\n          ...prev,\n          submittingAnswer: false,\n          submissionError: error instanceof Error ? error.message : 'Failed to submit answer'\n        }));\n      }\n      throw error;\n    }\n  }, [state.currentSession]);\n\n  const completeSession = useCallback(async () => {\n    if (!state.currentSession) return;\n\n    try {\n      console.log(`✅ Completing session: ${state.currentSession.id}`);\n      \n      // Update session status to completed\n      await updateSession(state.currentSession.id, { status: 'completed' });\n      \n      // Load analytics\n      await loadSessionAnalytics(state.currentSession.id);\n      \n      if (isMountedRef.current) {\n        setState(prev => ({\n          ...prev,\n          sessionCompleted: true,\n          sessionStarted: false\n        }));\n      }\n    } catch (error) {\n      console.error(`❌ Failed to complete session:`, error);\n      throw error;\n    }\n  }, [state.currentSession, updateSession, loadSessionAnalytics]);\n\n  // UI operations\n  const selectSession = useCallback((sessionId: string) => {\n    setState(prev => ({\n      ...prev,\n      selectedSessionId: sessionId,\n      currentSession: prev.sessions.find(s => s.id === sessionId)\n    }));\n  }, []);\n\n  const nextQuestion = useCallback(() => {\n    setState(prev => ({\n      ...prev,\n      currentQuestionIndex: Math.min(\n        prev.currentQuestionIndex + 1,\n        (prev.currentQuestions?.length || 1) - 1\n      )\n    }));\n  }, []);\n\n  const previousQuestion = useCallback(() => {\n    setState(prev => ({\n      ...prev,\n      currentQuestionIndex: Math.max(prev.currentQuestionIndex - 1, 0)\n    }));\n  }, []);\n\n  const goToQuestion = useCallback((index: number) => {\n    setState(prev => ({\n      ...prev,\n      currentQuestionIndex: Math.max(0, Math.min(index, (prev.currentQuestions?.length || 1) - 1))\n    }));\n  }, []);\n\n  // Filtering and sorting\n  const filterSessions = useCallback((filters: QuizSessionFilters) => {\n    // Implementation would filter sessions based on criteria\n    console.log('🔍 Filtering sessions:', filters);\n  }, []);\n\n  const sortSessions = useCallback((sort: QuizSessionSort) => {\n    // Implementation would sort sessions based on criteria\n    console.log('📊 Sorting sessions:', sort);\n  }, []);\n\n  // Error handling\n  const clearError = useCallback(() => {\n    setState(prev => ({ ...prev, error: null }));\n  }, []);\n\n  const clearSessionError = useCallback(() => {\n    setState(prev => ({ ...prev, sessionError: null }));\n  }, []);\n\n  const clearQuestionsError = useCallback(() => {\n    setState(prev => ({ ...prev, questionsError: null }));\n  }, []);\n\n  const clearSubmissionError = useCallback(() => {\n    setState(prev => ({ ...prev, submissionError: null }));\n  }, []);\n\n  // Utility functions\n  const getCurrentQuestion = useCallback((): QuizQuestion | undefined => {\n    return state.currentQuestions?.[state.currentQuestionIndex];\n  }, [state.currentQuestions, state.currentQuestionIndex]);\n\n  const getSessionById = useCallback((sessionId: string): QuizSession | undefined => {\n    return state.sessions.find(s => s.id === sessionId);\n  }, [state.sessions]);\n\n  const isSessionCompleted = useCallback((sessionId: string): boolean => {\n    const session = getSessionById(sessionId);\n    return session?.status === 'completed';\n  }, [getSessionById]);\n\n  const getSessionProgress = useCallback((sessionId: string): number => {\n    const session = getSessionById(sessionId);\n    return session?.completionRate || 0;\n  }, [getSessionById]);\n\n  return {\n    ...state,\n    \n    // Data operations\n    loadSessions,\n    loadSession,\n    loadSessionQuestions,\n    loadSessionResponses,\n    loadSessionAnalytics,\n    refreshData,\n    \n    // CRUD operations\n    createSession,\n    updateSession,\n    deleteSession,\n    bulkDeleteSessions,\n    bulkUpdateSessions,\n    \n    // Quiz session operations\n    startSession,\n    submitAnswer,\n    completeSession,\n    \n    // UI operations\n    selectSession,\n    nextQuestion,\n    previousQuestion,\n    goToQuestion,\n    \n    // Filtering and sorting\n    filterSessions,\n    sortSessions,\n    \n    // Error handling\n    clearError,\n    clearSessionError,\n    clearQuestionsError,\n    clearSubmissionError,\n    \n    // Utility functions\n    getCurrentQuestion,\n    getSessionById,\n    isSessionCompleted,\n    getSessionProgress\n  };\n}\n"],"names":["useQuizCenter","projectId","autoLoad","refreshInterval","state","setState","useState","sessions","currentSession","undefined","currentQuestions","analytics","loading","loadingSessions","loadingSession","loadingQuestions","submittingAnswer","generatingQuiz","error","sessionError","questionsError","submissionError","selectedSessionId","currentQuestionIndex","sessionStarted","sessionCompleted","totalSessions","completedSessions","averageScore","totalTimeSpent","isMountedRef","useRef","refreshIntervalRef","useEffect","current","clearInterval","loadSessions","setInterval","refreshData","useCallback","prev","console","log","backendSessions","quizApi","getProjectSessions","transformSessions","stats","calculateProjectStats","Error","message","loadSession","sessionId","backendSession","getSession","session","loadSessionQuestions","backendQuestions","getSessionQuestions","questions","transformQuestions","loadSessionResponses","backendResponses","getSessionResponses","responses","transformResponses","find","s","id","calculateSessionStats","updatedSession","map","loadSessionAnalytics","backendAnalytics","getSessionAnalytics","transformAnalytics","createSession","request","updateSession","deleteSession","filter","bulkDeleteSessions","sessionIds","length","includes","bulkUpdateSessions","updates","startSession","response","submitAnswer","question_id","q","userAnswer","user_answer","isCorrect","is_correct","isAnswered","completeSession","status","selectSession","nextQuestion","Math","min","previousQuestion","max","goToQuestion","index","filterSessions","filters","sortSessions","sort","clearError","clearSessionError","clearQuestionsError","clearSubmissionError","getCurrentQuestion","getSessionById","isSessionCompleted","getSessionProgress","completionRate"],"mappings":"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"}