{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/features/projects/components/__tests__/file-upload-integration.test.tsx"],"sourcesContent":["/**\n * Test-Driven Development: Frontend File Upload Integration Tests\n * \n * These tests will initially FAIL (RED phase) and guide the implementation\n * of proper file upload and project creation functionality in the frontend.\n * \n * Test Mode Considerations:\n * - Tests work with both real and mock data\n * - AI calls are mocked via MOCK_REGISTRY\n * - File operations and database operations are REAL\n * - Only AI/LLM calls are mocked as per TEST_MODE_EXPLANATION.md\n */\n\nimport React from 'react';\nimport { screen, fireEvent, waitFor } from '@testing-library/react';\nimport '@testing-library/jest-dom';\n\n// Import centralized test utilities\nimport {\n  testFactories,\n  standardMocks\n} from '../../../../test-utils';\nimport { renderWithProviders } from '../../../../test-utils/setup/shared-setup';\nimport { setupFullTestEnvironment } from '../../../../test-utils/setup/shared-setup';\n\n// Setup test environment\nconst testEnv = setupFullTestEnvironment({\n  timeout: 10000,\n  includeAPI: true,\n  includeStorage: true,\n  includeNavigation: true\n});\n\nconst { apiMocks } = standardMocks;\n\n// Create project-specific mocks\nconst mockProjects = {\n  create: jest.fn(),\n  uploadFile: jest.fn(),\n  getProjects: jest.fn(),\n};\n\n// Mock the API service\njest.mock('../../services/api', () => ({\n  createProject: mockProjects.create,\n  uploadFileWithProgress: mockProjects.uploadFile,\n  getProjects: mockProjects.getProjects,\n}));\n\n// Mock dependencies\njest.mock('next/navigation', () => ({\n  useRouter: () => ({\n    push: jest.fn(),\n    back: jest.fn(),\n    forward: jest.fn(),\n    refresh: jest.fn(),\n    replace: jest.fn()\n  }),\n  useParams: () => ({ projectId: 'test-project-123' })\n}));\n\njest.mock('next/dynamic', () => () => {\n  const DynamicComponent = () => <div>Dynamic Component</div>;\n  return DynamicComponent;\n});\n\n// Mock API services\njest.mock('../../services/api', () => ({\n  createProject: jest.fn(),\n  uploadFileWithProgress: jest.fn(),\n  APIError: jest.fn().mockImplementation((message: string, status: number) => {\n    const error = new Error(message) as Error & { status: number };\n    error.status = status;\n    return error;\n  })\n}));\n\n// Mock axiosApi for FileStorage component\njest.mock('@/lib/axios-api', () => ({\n  axiosApi: {\n    get: jest.fn(),\n    post: jest.fn(),\n  }\n}));\n\n// Mock Next.js navigation\njest.mock('next/navigation', () => ({\n  useParams: jest.fn(() => ({ projectId: 'test-project-123' })),\n  useRouter: jest.fn(() => ({\n    push: jest.fn(),\n    replace: jest.fn(),\n    back: jest.fn(),\n    forward: jest.fn(),\n    refresh: jest.fn(),\n    prefetch: jest.fn(),\n  }))\n}));\n\n// Import the mocked functions\nimport { createProject, uploadFileWithProgress } from '../../services/api';\nimport { axiosApi } from '@/lib/axios-api';\n\n// Mock file upload component\njest.mock('@/components/ui/file-upload', () => ({\n  FileUpload: ({ onUpload, onRemove, onError, error, ...props }: any) => (\n    <div data-testid=\"file-upload\">\n      <input\n        type=\"file\"\n        data-testid=\"file-input\"\n        onChange={(e) => {\n          if (e.target.files && e.target.files.length > 0) {\n            // Call onUpload with the files instead of onFileSelect\n            onUpload && onUpload(Array.from(e.target.files));\n          }\n        }}\n        {...props}\n      />\n      {error && <div data-testid=\"error-message\">{error}</div>}\n    </div>\n  )\n}));\n\n// Import components to test\nimport { FileUploadStep } from '../steps/file-upload-step';\nimport FileStorage from '../files/file-storage';\n\ndescribe('File Upload Integration Tests', () => {\n  const mockOnUploadComplete = jest.fn();\n  \n  beforeEach(() => {\n    jest.clearAllMocks();\n    mockOnUploadComplete.mockClear();\n    \n    // Set test mode environment variables\n    process.env.NODE_ENV = 'development';\n    process.env.NEXT_PUBLIC_TEST_MODE = 'true';\n  });\n\n  describe('File Upload Step - Project Creation', () => {\n    it('should create project and link files in test mode', async () => {\n      // Mock API responses\n      const mockProject = { \n        id: 'test-project-123', \n        name: 'Test Project',\n        project_type: 'school',\n        course_name: 'Test Course'\n      };\n      \n      const mockUploadResponse = { \n        success: true, \n        file_id: 'file-123',\n        filename: 'test.pdf'\n      };\n      \n      // Setup mocks\n      (createProject as jest.Mock).mockResolvedValue(mockProject);\n      (uploadFileWithProgress as jest.Mock).mockResolvedValue(mockUploadResponse);\n      \n      // Render component\n      renderWithProviders(\n        <FileUploadStep onUploadComplete={mockOnUploadComplete} />\n      );\n      \n      // Check that the component renders correctly\n      expect(screen.getByTestId('file-input')).toBeInTheDocument();\n      \n      // In test mode, the component should automatically create a project\n      // This happens in the useEffect when isTestMode() returns true\n      await waitFor(() => {\n        expect(createProject).toHaveBeenCalledWith(\n          expect.objectContaining({\n            name: 'Test Project',\n            project_type: 'school',\n            course_name: 'Test Course',\n            is_draft: true,\n          })\n        );\n      });\n      \n      // Should call onUploadComplete with the project ID\n      await waitFor(() => {\n        expect(mockOnUploadComplete).toHaveBeenCalledWith('test-project-123');\n      });\n    });\n\n    it('should handle file upload errors gracefully', async () => {\n      // Mock API error\n      (createProject as jest.Mock).mockRejectedValue(new Error('API Error'));\n      \n      // Render component\n      renderWithProviders(\n        <FileUploadStep onUploadComplete={mockOnUploadComplete} />\n      );\n      \n      // Simulate file upload\n      const file = new File(['test content'], 'test.pdf', { type: 'application/pdf' });\n      const fileInput = screen.getByTestId('file-input');\n      fireEvent.change(fileInput, { target: { files: [file] } });\n      \n      // Wait for error handling\n      await waitFor(() => {\n        expect(createProject).toHaveBeenCalled();\n        expect(mockOnUploadComplete).not.toHaveBeenCalled();\n      });\n      \n      // Should show error message\n      await waitFor(() => {\n        expect(screen.getByTestId('error-message')).toBeInTheDocument();\n      });\n    });\n\n    it('should work with test mode enabled', async () => {\n      // Mock test mode environment\n      const originalEnv = process.env.NEXT_PUBLIC_TEST_MODE;\n      process.env.NEXT_PUBLIC_TEST_MODE = 'true';\n      \n      const mockProject = { \n        id: 'test-project-123', \n        name: 'Test Project' \n      };\n      \n      mockProjects.create.mockResolvedValue(mockProject);\n      \n      // Render component\n      renderWithProviders(\n        <FileUploadStep onUploadComplete={mockOnUploadComplete} />\n      );\n      \n      // In test mode, should automatically create project\n      await waitFor(() => {\n        expect(createProject).toHaveBeenCalledWith(\n          expect.objectContaining({\n            name: 'Test Project',\n            project_type: 'school',\n            course_name: 'Test Course',\n            is_draft: true\n          })\n        );\n        expect(mockOnUploadComplete).toHaveBeenCalledWith('test-project-123');\n      });\n      \n      // Restore environment\n      process.env.NEXT_PUBLIC_TEST_MODE = originalEnv;\n    });\n  });\n\n  describe('File Storage Component - File Display', () => {\n    it('should display uploaded files in Files section', async () => {\n      // Mock API responses\n      const mockProject = {\n        id: 'test-project-123',\n        name: 'Test Project',\n        uploaded_files: [\n          {\n            id: 'file-1',\n            original_name: 'test.pdf',\n            file: '/uploads/test.pdf',\n            file_size: 1024,\n            uploaded_at: '2024-01-01T00:00:00Z',\n            processing_status: 'completed'\n          },\n          {\n            id: 'file-2',\n            original_name: 'document.docx',\n            file: '/uploads/document.docx',\n            file_size: 2048,\n            uploaded_at: '2024-01-02T00:00:00Z',\n            processing_status: 'pending'\n          }\n        ]\n      };\n      \n      // Mock API calls\n      (axiosApi.get as jest.Mock).mockResolvedValue({ data: mockProject });\n      \n      // Render component\n      renderWithProviders(<FileStorage />);\n      \n      // Wait for files to load\n      await waitFor(() => {\n        expect(screen.getAllByText('test.pdf')).toHaveLength(2); // Header and file list\n        expect(screen.getAllByText('document.docx')).toHaveLength(2); // Header and file list\n      });\n      \n      // Verify file details\n      expect(screen.getAllByText('1 KB')).toHaveLength(2); // Header and file list\n      expect(screen.getAllByText('2 KB')).toHaveLength(2); // Header and file list\n    });\n\n    it('should handle empty file list', async () => {\n      // Mock empty project\n      const mockProject = {\n        id: 'test-project-123',\n        name: 'Test Project',\n        uploaded_files: []\n      };\n      \n      (axiosApi.get as jest.Mock).mockResolvedValue({ data: mockProject });\n      \n      // Render component\n      renderWithProviders(<FileStorage />);\n      \n      // Wait for component to load\n      await waitFor(() => {\n        expect(screen.getByText(/no files/i)).toBeInTheDocument();\n      });\n    });\n\n    it('should handle file upload errors', async () => {\n      // Mock API error\n      (axiosApi.get as jest.Mock).mockRejectedValue(new Error('API Error'));\n      \n      // Render component\n      renderWithProviders(<FileStorage />);\n      \n      // Wait for error handling\n      await waitFor(() => {\n        expect(screen.getAllByText('Failed to load files')).toHaveLength(2); // Header and description\n      });\n    });\n\n    it('should allow file upload to existing project', async () => {\n      // Mock project with existing files\n      const mockProject = {\n        id: 'test-project-123',\n        name: 'Test Project',\n        uploaded_files: [\n          {\n            id: 'file-1',\n            original_name: 'existing.pdf',\n            file: '/uploads/existing.pdf',\n            file_size: 1024,\n            uploaded_at: '2024-01-01T00:00:00Z',\n            processing_status: 'completed'\n          }\n        ]\n      };\n      \n      const mockUploadResponse = { \n        success: true, \n        file_id: 'file-2',\n        filename: 'new.pdf'\n      };\n      \n      // Setup mocks\n      (axiosApi.get as jest.Mock).mockResolvedValue({ data: mockProject });\n      (uploadFileWithProgress as jest.Mock).mockResolvedValue(mockUploadResponse);\n      \n      // Render component\n      renderWithProviders(<FileStorage />);\n      \n      // Wait for existing files to load\n      await waitFor(() => {\n        expect(screen.getAllByText('existing.pdf')).toHaveLength(2); // Header and file list\n      });\n      \n      // Simulate new file upload\n      const file = new File(['new content'], 'new.pdf', { type: 'application/pdf' });\n      const fileInput = screen.getByTestId('file-input');\n      fireEvent.change(fileInput, { target: { files: [file] } });\n      \n      // Wait for upload to complete\n      await waitFor(() => {\n        expect(mockProjects.uploadFile).toHaveBeenCalledWith(\n          'test-project-123',\n          file\n        );\n      });\n    });\n  });\n\n  describe('Complete Upload to Display Flow', () => {\n    it('should complete full flow from upload to display', async () => {\n      // Mock complete flow\n      const mockProject = { \n        id: 'test-project-123', \n        name: 'Test Project',\n        project_type: 'school',\n        course_name: 'Test Course'\n      };\n      \n      const mockUploadResponse = { \n        success: true, \n        file_id: 'file-123',\n        filename: 'test.pdf'\n      };\n      \n      const mockProjectWithFiles = {\n        ...mockProject,\n        uploaded_files: [\n          {\n            id: 'file-123',\n            original_name: 'test.pdf',\n            file_size: 1024,\n            uploaded_at: '2024-01-01T00:00:00Z',\n            processing_status: 'completed'\n          }\n        ]\n      };\n      \n      // Setup mocks\n      mockProjects.create.mockResolvedValue(mockProject);\n      mockProjects.uploadFile.mockResolvedValue(mockUploadResponse);\n      mockProjects.getProjects.mockResolvedValue(mockProjectWithFiles);\n      \n      // Step 1: Upload file and create project\n      renderWithProviders(\n        <FileUploadStep onUploadComplete={mockOnUploadComplete} />\n      );\n      \n      const file = new File(['test content'], 'test.pdf', { type: 'application/pdf' });\n      const fileInput = screen.getByTestId('file-input');\n      fireEvent.change(fileInput, { target: { files: [file] } });\n      \n      await waitFor(() => {\n        expect(mockOnUploadComplete).toHaveBeenCalledWith('test-project-123');\n      });\n      \n      // Step 2: Navigate to Files section and verify display\n      renderWithProviders(<FileStorage />);\n      \n      await waitFor(() => {\n        expect(screen.getByText('test.pdf')).toBeInTheDocument();\n        expect(screen.getByText('1.0 KB')).toBeInTheDocument();\n      });\n    });\n\n    it('should handle test mode with mock data', async () => {\n      // Mock test mode environment\n      const originalEnv = process.env.NEXT_PUBLIC_TEST_MODE;\n      process.env.NEXT_PUBLIC_TEST_MODE = 'true';\n      \n      const mockProject = { \n        id: 'test-project-123', \n        name: 'Test Project' \n      };\n      \n      const mockProjectWithFiles = {\n        ...mockProject,\n        uploaded_files: [\n          {\n            id: 'file-123',\n            original_name: 'mock.pdf',\n            file_size: 1024,\n            uploaded_at: '2024-01-01T00:00:00Z',\n            processing_status: 'completed'\n          }\n        ]\n      };\n      \n      // Setup mocks\n      mockProjects.create.mockResolvedValue(mockProject);\n      mockProjects.getProjects.mockResolvedValue(mockProjectWithFiles);\n      \n      // Test upload step in test mode\n      renderWithProviders(\n        <FileUploadStep onUploadComplete={mockOnUploadComplete} />\n      );\n      \n      await waitFor(() => {\n        expect(mockOnUploadComplete).toHaveBeenCalledWith('test-project-123');\n      });\n      \n      // Test file display\n      renderWithProviders(<FileStorage />);\n      \n      await waitFor(() => {\n        expect(screen.getByText('mock.pdf')).toBeInTheDocument();\n      });\n      \n      // Restore environment\n      process.env.NEXT_PUBLIC_TEST_MODE = originalEnv;\n    });\n  });\n\n  describe('Error Handling and Edge Cases', () => {\n    it('should handle network errors gracefully', async () => {\n      // Mock network error\n      mockProjects.create.mockRejectedValue(new Error('Network Error'));\n      \n      renderWithProviders(\n        <FileUploadStep onUploadComplete={mockOnUploadComplete} />\n      );\n      \n      const file = new File(['test content'], 'test.pdf', { type: 'application/pdf' });\n      const fileInput = screen.getByTestId('file-input');\n      fireEvent.change(fileInput, { target: { files: [file] } });\n      \n      await waitFor(() => {\n        expect(screen.getByText(/network error/i)).toBeInTheDocument();\n      });\n    });\n\n    it('should handle invalid file types', async () => {\n      renderWithProviders(\n        <FileUploadStep onUploadComplete={mockOnUploadComplete} />\n      );\n      \n      // Try to upload invalid file type\n      const file = new File(['test content'], 'test.exe', { type: 'application/exe' });\n      const fileInput = screen.getByTestId('file-input');\n      fireEvent.change(fileInput, { target: { files: [file] } });\n      \n      // Should show validation error\n      await waitFor(() => {\n        expect(screen.getByText(/invalid file type/i)).toBeInTheDocument();\n      });\n    });\n\n    it('should handle large file uploads', async () => {\n      const mockProject = { \n        id: 'test-project-123', \n        name: 'Test Project' \n      };\n      \n      mockProjects.create.mockResolvedValue(mockProject);\n      \n      renderWithProviders(\n        <FileUploadStep onUploadComplete={mockOnUploadComplete} />\n      );\n      \n      // Create large file (simulate)\n      const largeFile = new File(['x'.repeat(10 * 1024 * 1024)], 'large.pdf', { \n        type: 'application/pdf' \n      });\n      \n      const fileInput = screen.getByTestId('file-input');\n      fireEvent.change(fileInput, { target: { files: [largeFile] } });\n      \n      // Should handle large file upload\n      await waitFor(() => {\n        expect(createProject).toHaveBeenCalled();\n        expect(uploadFileWithProgress).toHaveBeenCalledWith(\n          'test-project-123',\n          largeFile,\n          expect.any(Function)\n        );\n      });\n    });\n  });\n});\n"],"names":["jest","mock","createProject","mockProjects","create","uploadFileWithProgress","uploadFile","getProjects","useRouter","push","fn","back","forward","refresh","replace","useParams","projectId","DynamicComponent","div","APIError","mockImplementation","message","status","error","Error","axiosApi","get","post","prefetch","FileUpload","onUpload","onRemove","onError","props","data-testid","input","type","onChange","e","target","files","length","Array","from","testEnv","setupFullTestEnvironment","timeout","includeAPI","includeStorage","includeNavigation","apiMocks","standardMocks","describe","mockOnUploadComplete","beforeEach","clearAllMocks","mockClear","process","env","NODE_ENV","NEXT_PUBLIC_TEST_MODE","it","mockProject","id","name","project_type","course_name","mockUploadResponse","success","file_id","filename","mockResolvedValue","renderWithProviders","FileUploadStep","onUploadComplete","expect","screen","getByTestId","toBeInTheDocument","waitFor","toHaveBeenCalledWith","objectContaining","is_draft","mockRejectedValue","file","File","fileInput","fireEvent","change","toHaveBeenCalled","not","originalEnv","uploaded_files","original_name","file_size","uploaded_at","processing_status","data","FileStorage","getAllByText","toHaveLength","getByText","mockProjectWithFiles","largeFile","repeat","any","Function"],"mappings":"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"}