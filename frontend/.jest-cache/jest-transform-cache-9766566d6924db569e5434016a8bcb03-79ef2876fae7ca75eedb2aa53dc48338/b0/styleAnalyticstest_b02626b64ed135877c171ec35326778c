204cf031a20e255a632ddda4906039b4
// Unit Tests for Analytics Wrapper
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _styleAnalytics = /*#__PURE__*/ _interop_require_wildcard(require("../styleAnalytics"));
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
// Mock console.log to capture analytics events
const mockConsoleLog = jest.fn();
const originalConsoleLog = console.log;
beforeEach(()=>{
    console.log = mockConsoleLog;
    _styleAnalytics.default.clearEvents();
});
afterEach(()=>{
    console.log = originalConsoleLog;
    jest.clearAllMocks();
});
describe('Style Analytics', ()=>{
    describe('trackStyleSelected', ()=>{
        it('should track style selection events', ()=>{
            (0, _styleAnalytics.trackStyleSelected)('mcq_quiz', 'MCQ Quiz', 'preset');
            expect(mockConsoleLog).toHaveBeenCalledWith('[StyleAnalytics] style_selected:', expect.objectContaining({
                style_id: 'mcq_quiz',
                preset_name: 'MCQ Quiz',
                source: 'preset'
            }));
        });
        it('should track custom style selection', ()=>{
            (0, _styleAnalytics.trackStyleSelected)('custom', undefined, 'custom');
            expect(mockConsoleLog).toHaveBeenCalledWith('[StyleAnalytics] style_selected:', expect.objectContaining({
                style_id: 'custom',
                source: 'custom'
            }));
        });
    });
    describe('trackStyleCustomized', ()=>{
        it('should track style customization events', ()=>{
            (0, _styleAnalytics.trackStyleCustomized)('mcq_quiz', 'timing.total_minutes', 15, 20, 'total_minutes');
            expect(mockConsoleLog).toHaveBeenCalledWith('[StyleAnalytics] style_customized:', expect.objectContaining({
                style_id: 'mcq_quiz',
                path: 'timing.total_minutes',
                from: 15,
                to: 20,
                field_name: 'total_minutes'
            }));
        });
        it('should handle missing field name', ()=>{
            (0, _styleAnalytics.trackStyleCustomized)('mcq_quiz', 'timing.total_minutes', 15, 20);
            expect(mockConsoleLog).toHaveBeenCalledWith('[StyleAnalytics] style_customized:', expect.objectContaining({
                field_name: 'total_minutes'
            }));
        });
    });
    describe('trackPreviewOpened', ()=>{
        it('should track preview opened events', ()=>{
            (0, _styleAnalytics.trackPreviewOpened)('mcq_quiz', 3);
            expect(mockConsoleLog).toHaveBeenCalledWith('[StyleAnalytics] preview_opened:', expect.objectContaining({
                style_id: 'mcq_quiz',
                preview_type: 'opened',
                item_count: 3
            }));
        });
        it('should use default item count', ()=>{
            (0, _styleAnalytics.trackPreviewOpened)('mcq_quiz');
            expect(mockConsoleLog).toHaveBeenCalledWith('[StyleAnalytics] preview_opened:', expect.objectContaining({
                item_count: 3
            }));
        });
    });
    describe('trackValidationTriggered', ()=>{
        it('should track validation events', ()=>{
            (0, _styleAnalytics.trackValidationTriggered)('mcq_quiz', 2, true, false);
            expect(mockConsoleLog).toHaveBeenCalledWith('[StyleAnalytics] validation_triggered:', expect.objectContaining({
                style_id: 'mcq_quiz',
                issue_count: 2,
                has_errors: true,
                has_warnings: false
            }));
        });
    });
    describe('trackAutofixApplied', ()=>{
        it('should track autofix application', ()=>{
            (0, _styleAnalytics.trackAutofixApplied)('mcq_quiz', 2, [
                'item_mix',
                'timing.per_item_seconds'
            ]);
            expect(mockConsoleLog).toHaveBeenCalledWith('[StyleAnalytics] autofix_applied:', expect.objectContaining({
                style_id: 'mcq_quiz',
                fix_count: 2,
                fixes: [
                    'item_mix',
                    'timing.per_item_seconds'
                ]
            }));
        });
    });
    describe('StyleAnalytics class', ()=>{
        it('should store events internally', ()=>{
            _styleAnalytics.default.styleSelected('test-style');
            const events = _styleAnalytics.default.getEvents();
            expect(events).toHaveLength(1);
            expect(events[0].eventName).toBe('style_selected');
        });
        it('should filter events by type', ()=>{
            _styleAnalytics.default.styleSelected('test-style');
            _styleAnalytics.default.styleCustomized('test-style', 'path', 'from', 'to');
            const styleSelectedEvents = _styleAnalytics.default.getEventsByType('style_selected');
            expect(styleSelectedEvents).toHaveLength(1);
            const styleCustomizedEvents = _styleAnalytics.default.getEventsByType('style_customized');
            expect(styleCustomizedEvents).toHaveLength(1);
        });
        it('should provide analytics summary', ()=>{
            // Mock Date.now to return different timestamps
            const originalDateNow = Date.now;
            let timestamp = 1000;
            Date.now = jest.fn(()=>timestamp++);
            _styleAnalytics.default.styleSelected('test-style');
            _styleAnalytics.default.styleCustomized('test-style', 'path', 'from', 'to');
            _styleAnalytics.default.styleSelected('another-style');
            const summary = _styleAnalytics.default.getSummary();
            expect(summary.totalEvents).toBe(3);
            expect(summary.eventTypes.style_selected).toBe(2);
            expect(summary.eventTypes.style_customized).toBe(1);
            expect(summary.timeRange.start).toBeGreaterThan(0);
            expect(summary.timeRange.end).toBeGreaterThan(summary.timeRange.start);
            // Restore original Date.now
            Date.now = originalDateNow;
        });
        it('should clear events', ()=>{
            _styleAnalytics.default.styleSelected('test-style');
            expect(_styleAnalytics.default.getEvents()).toHaveLength(1);
            _styleAnalytics.default.clearEvents();
            expect(_styleAnalytics.default.getEvents()).toHaveLength(0);
        });
        it('should respect enabled/disabled state', ()=>{
            _styleAnalytics.default.setEnabled(false);
            _styleAnalytics.default.styleSelected('test-style');
            expect(mockConsoleLog).not.toHaveBeenCalled();
            expect(_styleAnalytics.default.getEvents()).toHaveLength(0);
            _styleAnalytics.default.setEnabled(true);
            _styleAnalytics.default.styleSelected('test-style');
            expect(mockConsoleLog).toHaveBeenCalled();
            expect(_styleAnalytics.default.getEvents()).toHaveLength(1);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,