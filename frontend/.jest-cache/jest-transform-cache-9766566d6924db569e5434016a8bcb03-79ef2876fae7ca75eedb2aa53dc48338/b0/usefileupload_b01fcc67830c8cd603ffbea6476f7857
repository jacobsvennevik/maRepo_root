331646d8032c977184a50295c119454c
'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    handleUploadError: function() {
        return handleUploadError;
    },
    useFileUpload: function() {
        return useFileUpload;
    },
    validateFiles: function() {
        return validateFiles;
    }
});
const _react = require("react");
const _navigation = require("next/navigation");
const _api = require("../../../services/api");
function useFileUpload() {
    const [files, setFiles] = (0, _react.useState)([]);
    const [uploadProgress, setUploadProgress] = (0, _react.useState)({});
    const [error, setError] = (0, _react.useState)(null);
    const [isAnalyzing, setIsAnalyzing] = (0, _react.useState)(false);
    const [showSuccess, setShowSuccess] = (0, _react.useState)(false);
    const router = (0, _navigation.useRouter)();
    const handleUpload = (0, _react.useCallback)((newFiles)=>{
        setFiles((prev)=>[
                ...prev,
                ...newFiles
            ]);
        setError(null);
    }, []);
    const handleRemove = (0, _react.useCallback)((index)=>{
        setFiles((prev)=>prev.filter((_, i)=>i !== index));
        setError(null);
        // Clear progress for the removed file
        const removedFile = files[index];
        if (removedFile) {
            setUploadProgress((prev)=>{
                const newProgress = {
                    ...prev
                };
                delete newProgress[removedFile.name];
                return newProgress;
            });
        }
    }, [
        files
    ]);
    const clearProgress = (0, _react.useCallback)(()=>{
        setUploadProgress({});
    }, []);
    const state = {
        files,
        uploadProgress,
        error,
        isAnalyzing,
        showSuccess
    };
    const actions = {
        handleUpload,
        handleRemove,
        setError,
        setIsAnalyzing,
        setShowSuccess,
        clearProgress
    };
    return [
        state,
        actions
    ];
}
function handleUploadError(error, router) {
    if (error instanceof _api.APIError) {
        if (error.statusCode === 401) {
            router.push("/login");
            return "Your session has expired. Please log in again.";
        }
        return error.message;
    }
    if (error instanceof Error) {
        return error.message;
    }
    return "An unexpected error occurred. Please try again.";
}
function validateFiles(files, validTypes, maxSizeMB) {
    const validFiles = [];
    const invalidFiles = [];
    const oversizedFiles = [];
    const maxSizeBytes = maxSizeMB * 1024 * 1024;
    files.forEach((file)=>{
        const fileExtension = "." + file.name.split(".").pop()?.toLowerCase();
        const isValidType = validTypes.some((type)=>type.startsWith(".") ? fileExtension === type : file.type.includes(type));
        if (!isValidType) {
            invalidFiles.push(file);
        } else if (file.size > maxSizeBytes) {
            oversizedFiles.push(file);
        } else {
            validFiles.push(file);
        }
    });
    return {
        validFiles,
        invalidFiles,
        oversizedFiles
    };
}

//# sourceMappingURL=data:application/json;base64,