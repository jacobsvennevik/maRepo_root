{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/components/wizard/shared/titleGeneration.ts"],"sourcesContent":["/**\n * Shared Title Generation Utilities\n * \n * Centralized utilities for generating titles, topics, and descriptions\n * across different wizard types. Ensures consistency and reusability\n * while following CEFR-B2 guidelines and uniqueness constraints.\n */\n\n// ============================================================================\n// Types and Interfaces\n// ============================================================================\n\nexport interface SourceItem {\n  id: string;\n  name?: string;\n  title?: string;\n  description?: string;\n  type: 'flashcard' | 'file' | 'study_material';\n  flashcard_count?: number;\n  file_type?: string;\n}\n\nexport interface TitleGenerationOptions {\n  contentType: 'quiz' | 'flashcard' | 'diagnostic' | 'project';\n  sources: SourceItem[];\n  quizType?: 'formative' | 'summative' | 'diagnostic' | 'mastery';\n  difficulty?: 'BEGINNER' | 'INTERMEDIATE' | 'ADVANCED' | 'EXPERT';\n  template?: string;\n  maxLength?: number;\n  ensureUnique?: boolean;\n  existingTitles?: string[];\n}\n\nexport interface GeneratedMetadata {\n  topic: string;\n  title: string;\n  description: string;\n  confidence: number;\n  keywords: string[];\n  suggestedTags: string[];\n}\n\n// ============================================================================\n// Constants and Configuration\n// ============================================================================\n\nconst CONTENT_TYPE_SUFFIXES = {\n  quiz: {\n    formative: 'Practice Quiz',\n    summative: 'Assessment',\n    diagnostic: 'Diagnostic Quiz',\n    mastery: 'Mastery Test',\n    default: 'Quiz',\n  },\n  flashcard: {\n    default: 'Flashcards',\n    study: 'Study Cards',\n    review: 'Review Set',\n  },\n  diagnostic: {\n    default: 'Assessment',\n    quick: 'Quick Check',\n    comprehensive: 'Comprehensive Assessment',\n  },\n  project: {\n    default: 'Project',\n    study: 'Study Project',\n    course: 'Course Project',\n  },\n};\n\nconst DIFFICULTY_DESCRIPTORS = {\n  BEGINNER: ['Introduction to', 'Basic', 'Fundamentals of', 'Getting Started with'],\n  INTERMEDIATE: ['Understanding', 'Working with', 'Exploring', 'Core'],\n  ADVANCED: ['Advanced', 'Mastering', 'In-depth', 'Expert'],\n  EXPERT: ['Research-level', 'Professional', 'Specialized', 'Expert-level'],\n};\n\nconst CEFR_B2_WORDS = {\n  action_verbs: ['assess', 'evaluate', 'analyze', 'explore', 'understand', 'demonstrate', 'review', 'practice', 'master'],\n  descriptors: ['comprehensive', 'essential', 'fundamental', 'practical', 'effective', 'structured', 'systematic'],\n  connectors: ['including', 'focusing on', 'covering', 'examining', 'featuring'],\n};\n\nconst DOMAIN_KEYWORDS = {\n  science: ['biology', 'chemistry', 'physics', 'anatomy', 'genetics', 'molecular'],\n  technology: ['programming', 'software', 'algorithm', 'database', 'system', 'network'],\n  mathematics: ['calculus', 'algebra', 'geometry', 'statistics', 'probability', 'equation'],\n  language: ['grammar', 'vocabulary', 'syntax', 'literature', 'writing', 'reading'],\n  business: ['management', 'finance', 'marketing', 'strategy', 'economics', 'accounting'],\n  history: ['ancient', 'medieval', 'modern', 'war', 'civilization', 'empire'],\n  arts: ['painting', 'sculpture', 'music', 'theater', 'design', 'composition'],\n};\n\n// ============================================================================\n// Utility Functions\n// ============================================================================\n\n/**\n * Extract dominant concepts from source names and descriptions\n */\nconst extractConcepts = (sources: SourceItem[]): string[] => {\n  const concepts: string[] = [];\n  \n  sources.forEach(source => {\n    const text = `${source.name || ''} ${source.title || ''} ${source.description || ''}`.toLowerCase();\n    \n    // Extract domain-specific keywords\n    Object.entries(DOMAIN_KEYWORDS).forEach(([domain, keywords]) => {\n      keywords.forEach(keyword => {\n        if (text.includes(keyword) && !concepts.includes(keyword)) {\n          concepts.push(keyword);\n        }\n      });\n    });\n    \n    // Extract potential topic words (2-3 word phrases)\n    const words = text.split(/\\s+/).filter(word => word.length > 3);\n    words.forEach((word, index) => {\n      if (index < words.length - 1) {\n        const phrase = `${word} ${words[index + 1]}`;\n        if (phrase.length > 8 && phrase.length < 25 && !concepts.includes(phrase)) {\n          concepts.push(phrase);\n        }\n      }\n    });\n  });\n  \n  return concepts.slice(0, 10); // Limit to top 10 concepts\n};\n\n/**\n * Determine the primary domain/subject from sources\n */\nconst determineDomain = (sources: SourceItem[]): string => {\n  const domainScores: Record<string, number> = {};\n  \n  sources.forEach(source => {\n    const text = `${source.name || ''} ${source.title || ''} ${source.description || ''}`.toLowerCase();\n    \n    Object.entries(DOMAIN_KEYWORDS).forEach(([domain, keywords]) => {\n      const score = keywords.filter(keyword => text.includes(keyword)).length;\n      domainScores[domain] = (domainScores[domain] || 0) + score;\n    });\n  });\n  \n  const topDomain = Object.entries(domainScores)\n    .sort(([,a], [,b]) => b - a)[0];\n  \n  return topDomain ? topDomain[0] : 'general';\n};\n\n/**\n * Extract topic from source names using intelligent parsing\n */\nconst extractTopic = (sources: SourceItem[]): string => {\n  if (sources.length === 0) return 'General Knowledge';\n  \n  // Strategy 1: Use first source name/title, cleaned up\n  const firstSource = sources[0];\n  let topic = firstSource.title || firstSource.name || 'Unknown Topic';\n  \n  // Remove file extensions\n  topic = topic.replace(/\\.[^.]+$/, '');\n  \n  // Remove common prefixes/suffixes\n  topic = topic.replace(/^(Chapter|Lesson|Unit|Week|Day)\\s+\\d+:?\\s*/i, '');\n  topic = topic.replace(/\\s*(Notes|Summary|Overview|Introduction)$/i, '');\n  \n  // Handle multiple sources - try to find common theme\n  if (sources.length > 1) {\n    const concepts = extractConcepts(sources);\n    if (concepts.length > 0) {\n      // Use the most common concept as topic\n      topic = concepts[0].split(' ').map(word => \n        word.charAt(0).toUpperCase() + word.slice(1)\n      ).join(' ');\n    }\n  }\n  \n  // Ensure proper case\n  topic = topic.split(' ').map(word => \n    word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()\n  ).join(' ');\n  \n  // Limit length\n  if (topic.length > 40) {\n    topic = topic.substring(0, 37) + '...';\n  }\n  \n  return topic || 'General Knowledge';\n};\n\n/**\n * Generate title using template and smart substitution\n */\nconst generateTitle = (options: TitleGenerationOptions): string => {\n  const { contentType, sources, quizType, difficulty, template, maxLength = 60 } = options;\n  \n  const topic = extractTopic(sources);\n  \n  // Get appropriate suffix\n  let suffix = CONTENT_TYPE_SUFFIXES[contentType].default;\n  if (contentType === 'quiz' && quizType) {\n    suffix = CONTENT_TYPE_SUFFIXES.quiz[quizType] || suffix;\n  }\n  \n  // Add difficulty descriptor if provided\n  let difficultyPrefix = '';\n  if (difficulty && DIFFICULTY_DESCRIPTORS[difficulty]) {\n    const descriptors = DIFFICULTY_DESCRIPTORS[difficulty];\n    difficultyPrefix = descriptors[Math.floor(Math.random() * descriptors.length)] + ' ';\n  }\n  \n  // Generate title\n  let title: string;\n  if (template) {\n    title = template\n      .replace('{topic}', topic)\n      .replace('{type}', suffix)\n      .replace('{difficulty}', difficultyPrefix.trim());\n  } else {\n    // Default template: \"{difficulty} {topic} — {type}\"\n    title = `${difficultyPrefix}${topic} — ${suffix}`;\n  }\n  \n  // Clean up double spaces and trim\n  title = title.replace(/\\s+/g, ' ').trim();\n  \n  // Ensure length constraint\n  if (title.length > maxLength) {\n    const targetLength = maxLength - 3; // Account for \"...\"\n    title = title.substring(0, targetLength).trim() + '...';\n  }\n  \n  return title;\n};\n\n/**\n * Generate description using CEFR-B2 compliant language\n */\nconst generateDescription = (options: TitleGenerationOptions): string => {\n  const { contentType, sources, quizType, difficulty } = options;\n  \n  const topic = extractTopic(sources).toLowerCase();\n  const concepts = extractConcepts(sources);\n  const domain = determineDomain(sources);\n  \n  // Select appropriate action verb\n  const actionVerbs = CEFR_B2_WORDS.action_verbs;\n  let actionVerb = 'explore';\n  \n  if (contentType === 'quiz') {\n    actionVerb = quizType === 'diagnostic' ? 'assess' : \n                 quizType === 'summative' ? 'evaluate' : \n                 'practice';\n  } else if (contentType === 'flashcard') {\n    actionVerb = 'review';\n  }\n  \n  // Build description components\n  const baseDescription = `${actionVerb.charAt(0).toUpperCase() + actionVerb.slice(1)} your understanding of ${topic}`;\n  \n  let additionalContext = '';\n  if (concepts.length > 0) {\n    const topConcepts = concepts.slice(0, 3);\n    additionalContext = ` including ${topConcepts.join(', ')}`;\n  }\n  \n  let purposeClause = '';\n  if (contentType === 'quiz') {\n    purposeClause = quizType === 'formative' ? \n      '. This practice quiz helps reinforce your learning.' :\n      quizType === 'summative' ? \n      '. This assessment evaluates your mastery of key concepts.' :\n      '. This diagnostic helps identify areas for improvement.';\n  } else if (contentType === 'flashcard') {\n    purposeClause = '. Use these cards for effective spaced repetition study.';\n  }\n  \n  const description = `${baseDescription}${additionalContext}${purposeClause}`;\n  \n  // Ensure length constraints (max 200 characters)\n  if (description.length > 200) {\n    return description.substring(0, 197) + '...';\n  }\n  \n  return description;\n};\n\n/**\n * Ensure title uniqueness by adding disambiguators\n */\nconst ensureUniqueness = (title: string, existingTitles: string[]): string => {\n  if (!existingTitles.includes(title)) {\n    return title;\n  }\n  \n  // Try adding version numbers\n  for (let i = 2; i <= 10; i++) {\n    const versionedTitle = `${title} (v${i})`;\n    if (!existingTitles.includes(versionedTitle)) {\n      return versionedTitle;\n    }\n  }\n  \n  // Fallback to timestamp\n  const timestamp = new Date().toISOString().slice(5, 10); // MM-DD format\n  return `${title} (${timestamp})`;\n};\n\n// ============================================================================\n// Main Export Functions\n// ============================================================================\n\n/**\n * Generate comprehensive metadata for content\n */\nexport const generateMetadata = (options: TitleGenerationOptions): GeneratedMetadata => {\n  const topic = extractTopic(options.sources);\n  let title = generateTitle(options);\n  const description = generateDescription(options);\n  const keywords = extractConcepts(options.sources);\n  \n  // Ensure uniqueness if required\n  if (options.ensureUnique && options.existingTitles) {\n    title = ensureUniqueness(title, options.existingTitles);\n  }\n  \n  // Calculate confidence based on source quality\n  let confidence = 0.7; // Base confidence\n  \n  if (options.sources.length > 0) {\n    confidence += 0.1; // Has sources\n  }\n  if (options.sources.length > 2) {\n    confidence += 0.1; // Multiple sources\n  }\n  if (keywords.length > 2) {\n    confidence += 0.1; // Rich content\n  }\n  \n  confidence = Math.min(confidence, 1.0);\n  \n  // Generate suggested tags based on domain and difficulty\n  const suggestedTags = [\n    determineDomain(options.sources),\n    options.difficulty?.toLowerCase() || 'intermediate',\n    options.contentType,\n  ].filter(Boolean);\n  \n  return {\n    topic,\n    title,\n    description,\n    confidence,\n    keywords: keywords.slice(0, 5),\n    suggestedTags,\n  };\n};\n\n/**\n * Quick title generation for simple use cases\n */\nexport const generateQuickTitle = (\n  contentType: 'quiz' | 'flashcard' | 'diagnostic' | 'project',\n  sourceName: string,\n  quizType?: string\n): string => {\n  const mockSource: SourceItem = {\n    id: '1',\n    name: sourceName,\n    type: 'file',\n  };\n  \n  return generateTitle({\n    contentType,\n    sources: [mockSource],\n    quizType: quizType as any,\n  });\n};\n\n/**\n * Validate generated title against quality criteria\n */\nexport const validateTitle = (title: string): { isValid: boolean; issues: string[]; score: number } => {\n  const issues: string[] = [];\n  let score = 100;\n  \n  // Length checks\n  if (title.length < 5) {\n    issues.push('Title too short (minimum 5 characters)');\n    score -= 30;\n  }\n  if (title.length > 60) {\n    issues.push('Title too long (maximum 60 characters)');\n    score -= 20;\n  }\n  \n  // Format checks\n  if (!/^[A-Z]/.test(title)) {\n    issues.push('Should start with capital letter');\n    score -= 10;\n  }\n  \n  if (/[!@#$%^&*()_+={}[\\]|\\\\:\";'<>?,./]/.test(title)) {\n    issues.push('Contains special characters');\n    score -= 15;\n  }\n  \n  // Content quality checks\n  if (title.split(' ').length < 2) {\n    issues.push('Should contain multiple words');\n    score -= 10;\n  }\n  \n  if (title.toLowerCase() === title) {\n    issues.push('Should use proper capitalization');\n    score -= 10;\n  }\n  \n  return {\n    isValid: issues.length === 0,\n    issues,\n    score: Math.max(0, score),\n  };\n};\n\nexport default {\n  generateMetadata,\n  generateQuickTitle,\n  validateTitle,\n  extractTopic,\n  extractConcepts,\n  determineDomain,\n};\n\n"],"names":["generateMetadata","generateQuickTitle","validateTitle","CONTENT_TYPE_SUFFIXES","quiz","formative","summative","diagnostic","mastery","default","flashcard","study","review","quick","comprehensive","project","course","DIFFICULTY_DESCRIPTORS","BEGINNER","INTERMEDIATE","ADVANCED","EXPERT","CEFR_B2_WORDS","action_verbs","descriptors","connectors","DOMAIN_KEYWORDS","science","technology","mathematics","language","business","history","arts","extractConcepts","sources","concepts","forEach","source","text","name","title","description","toLowerCase","Object","entries","domain","keywords","keyword","includes","push","words","split","filter","word","length","index","phrase","slice","determineDomain","domainScores","score","topDomain","sort","a","b","extractTopic","firstSource","topic","replace","map","charAt","toUpperCase","join","substring","generateTitle","options","contentType","quizType","difficulty","template","maxLength","suffix","difficultyPrefix","Math","floor","random","trim","targetLength","generateDescription","actionVerbs","actionVerb","baseDescription","additionalContext","topConcepts","purposeClause","ensureUniqueness","existingTitles","i","versionedTitle","timestamp","Date","toISOString","ensureUnique","confidence","min","suggestedTags","Boolean","sourceName","mockSource","id","type","issues","test","isValid","max"],"mappings":"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"}