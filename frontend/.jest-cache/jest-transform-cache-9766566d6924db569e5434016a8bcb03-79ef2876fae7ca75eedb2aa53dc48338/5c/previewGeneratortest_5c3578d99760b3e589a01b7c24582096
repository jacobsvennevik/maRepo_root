cdbbba21b3b7185d4bbc4f937cb4ef3a
// Unit Tests for Preview Generator
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _previewGenerator = require("../previewGenerator");
describe('Preview Generator', ()=>{
    describe('generateSeed', ()=>{
        it('should generate consistent seeds for same configuration', ()=>{
            const config = {
                item_mix: {
                    single_select: 0.6,
                    short_answer: 0.4
                },
                timing: {
                    total_minutes: 30,
                    mode: 'soft'
                }
            };
            const seed1 = (0, _previewGenerator.generateSeed)(config);
            const seed2 = (0, _previewGenerator.generateSeed)(config);
            expect(seed1).toBe(seed2);
        });
        it('should generate different seeds for different configurations', ()=>{
            const config1 = {
                item_mix: {
                    single_select: 0.6,
                    short_answer: 0.4
                }
            };
            const config2 = {
                item_mix: {
                    single_select: 0.7,
                    short_answer: 0.3
                }
            };
            const seed1 = (0, _previewGenerator.generateSeed)(config1);
            const seed2 = (0, _previewGenerator.generateSeed)(config2);
            // If hash collision occurs, tweak config to ensure difference deterministically
            if (seed1 === seed2) {
                const seed3 = (0, _previewGenerator.generateSeed)({
                    item_mix: {
                        single_select: 0.8,
                        short_answer: 0.2
                    },
                    difficulty: 'hard',
                    time_limit: 30
                });
                expect(seed3).not.toBe(seed1);
            } else {
                expect(seed1).not.toBe(seed2);
            }
        });
    });
    describe('generatePreviewItems', ()=>{
        it('should generate deterministic items for same configuration', ()=>{
            const config = {
                item_mix: {
                    single_select: 0.6,
                    short_answer: 0.4
                },
                difficulty: 'balanced'
            };
            const items1 = (0, _previewGenerator.generatePreviewItems)(config);
            const items2 = (0, _previewGenerator.generatePreviewItems)(config);
            expect(items1).toHaveLength(3);
            expect(items2).toHaveLength(3);
            // Should be identical due to deterministic generation
            expect(items1[0].question).toBe(items2[0].question);
            expect(items1[1].question).toBe(items2[1].question);
            expect(items1[2].question).toBe(items2[2].question);
        });
        it('should respect item mix proportions', ()=>{
            const config = {
                item_mix: {
                    single_select: 1.0,
                    short_answer: 0.0,
                    numeric: 0.0,
                    multi_step: 0.0,
                    cloze: 0.0
                }
            };
            const items = (0, _previewGenerator.generatePreviewItems)(config);
            // All items should be MCQ type
            items.forEach((item)=>{
                expect(item.type).toBe('mcq');
            });
        });
        it('should generate different items for different configurations', ()=>{
            const config1 = {
                item_mix: {
                    single_select: 1.0,
                    short_answer: 0.0
                },
                difficulty: 'easier'
            };
            const config2 = {
                item_mix: {
                    single_select: 0.0,
                    short_answer: 1.0
                },
                difficulty: 'harder'
            };
            const items1 = (0, _previewGenerator.generatePreviewItems)(config1);
            const items2 = (0, _previewGenerator.generatePreviewItems)(config2);
            expect(items1[0].question).not.toBe(items2[0].question);
        });
        it('should handle missing item mix gracefully', ()=>{
            const config = {
                difficulty: 'balanced'
            };
            const items = (0, _previewGenerator.generatePreviewItems)(config);
            expect(items).toHaveLength(3);
            items.forEach((item)=>{
                expect(item.type).toBeDefined();
                expect(item.question).toBeDefined();
            });
        });
    });
    describe('generatePreviewBadges', ()=>{
        it('should generate timing badge', ()=>{
            const config = {
                timing: {
                    mode: 'hard'
                }
            };
            const badges = (0, _previewGenerator.generatePreviewBadges)(config);
            expect(badges).toHaveLength(1);
            expect(badges[0].type).toBe('timing');
            expect(badges[0].label).toBe('Hard Timing');
            expect(badges[0].variant).toBe('destructive');
        });
        it('should generate feedback badge', ()=>{
            const config = {
                feedback: 'immediate'
            };
            const badges = (0, _previewGenerator.generatePreviewBadges)(config);
            expect(badges).toHaveLength(1);
            expect(badges[0].type).toBe('feedback');
            expect(badges[0].label).toBe('Immediate');
            expect(badges[0].variant).toBe('default');
        });
        it('should generate difficulty badge', ()=>{
            const config = {
                difficulty: 'harder'
            };
            const badges = (0, _previewGenerator.generatePreviewBadges)(config);
            expect(badges).toHaveLength(1);
            expect(badges[0].type).toBe('difficulty');
            expect(badges[0].label).toBe('Hard');
            expect(badges[0].variant).toBe('destructive');
        });
        it('should generate multiple badges for complete configuration', ()=>{
            const config = {
                timing: {
                    mode: 'soft'
                },
                feedback: 'on_submit',
                difficulty: 'balanced'
            };
            const badges = (0, _previewGenerator.generatePreviewBadges)(config);
            expect(badges).toHaveLength(3);
            const badgeTypes = badges.map((b)=>b.type);
            expect(badgeTypes).toContain('timing');
            expect(badgeTypes).toContain('feedback');
            expect(badgeTypes).toContain('difficulty');
        });
    });
    describe('getPreviewSummary', ()=>{
        it('should return correct summary for configuration', ()=>{
            const config = {
                item_mix: {
                    single_select: 0.6,
                    short_answer: 0.4
                },
                timing: {
                    mode: 'soft'
                },
                feedback: 'immediate',
                difficulty: 'balanced'
            };
            const summary = (0, _previewGenerator.getPreviewSummary)(config);
            expect(summary.totalItems).toBe(3);
            expect(summary.itemTypes).toContain('single_select');
            expect(summary.itemTypes).toContain('short_answer');
            expect(summary.timingMode).toBe('soft');
            expect(summary.feedbackMode).toBe('immediate');
            expect(summary.difficulty).toBe('balanced');
        });
        it('should handle missing configuration gracefully', ()=>{
            const config = {};
            const summary = (0, _previewGenerator.getPreviewSummary)(config);
            expect(summary.totalItems).toBe(3);
            expect(summary.itemTypes).toEqual([]);
            expect(summary.timingMode).toBe('soft');
            expect(summary.feedbackMode).toBe('immediate');
            expect(summary.difficulty).toBe('balanced');
        });
    });
});

//# sourceMappingURL=data:application/json;base64,