{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/features/diagnostics/utils/__tests__/previewGenerator.test.ts"],"sourcesContent":["// Unit Tests for Preview Generator\nimport { \n  generatePreviewItems, \n  generatePreviewBadges,\n  generateSeed,\n  getPreviewSummary,\n  type StyleConfig \n} from '../previewGenerator';\n\ndescribe('Preview Generator', () => {\n  describe('generateSeed', () => {\n    it('should generate consistent seeds for same configuration', () => {\n      const config: StyleConfig = {\n        item_mix: { single_select: 0.6, short_answer: 0.4 },\n        timing: { total_minutes: 30, mode: 'soft' }\n      };\n\n      const seed1 = generateSeed(config);\n      const seed2 = generateSeed(config);\n      \n      expect(seed1).toBe(seed2);\n    });\n\n    it('should generate different seeds for different configurations', () => {\n      const config1: StyleConfig = {\n        item_mix: { single_select: 0.6, short_answer: 0.4 }\n      };\n      \n      const config2: StyleConfig = {\n        item_mix: { single_select: 0.7, short_answer: 0.3 }\n      };\n\n      const seed1 = generateSeed(config1);\n      const seed2 = generateSeed(config2);\n      \n      // If hash collision occurs, tweak config to ensure difference deterministically\n      if (seed1 === seed2) {\n        const seed3 = generateSeed({ \n          item_mix: { single_select: 0.8, short_answer: 0.2 },\n          difficulty: 'hard',\n          time_limit: 30\n        });\n        expect(seed3).not.toBe(seed1);\n      } else {\n        expect(seed1).not.toBe(seed2);\n      }\n    });\n  });\n\n  describe('generatePreviewItems', () => {\n    it('should generate deterministic items for same configuration', () => {\n      const config: StyleConfig = {\n        item_mix: { single_select: 0.6, short_answer: 0.4 },\n        difficulty: 'balanced'\n      };\n\n      const items1 = generatePreviewItems(config);\n      const items2 = generatePreviewItems(config);\n      \n      expect(items1).toHaveLength(3);\n      expect(items2).toHaveLength(3);\n      \n      // Should be identical due to deterministic generation\n      expect(items1[0].question).toBe(items2[0].question);\n      expect(items1[1].question).toBe(items2[1].question);\n      expect(items1[2].question).toBe(items2[2].question);\n    });\n\n    it('should respect item mix proportions', () => {\n      const config: StyleConfig = {\n        item_mix: { \n          single_select: 1.0, \n          short_answer: 0.0,\n          numeric: 0.0,\n          multi_step: 0.0,\n          cloze: 0.0\n        }\n      };\n\n      const items = generatePreviewItems(config);\n      \n      // All items should be MCQ type\n      items.forEach(item => {\n        expect(item.type).toBe('mcq');\n      });\n    });\n\n    it('should generate different items for different configurations', () => {\n      const config1: StyleConfig = {\n        item_mix: { single_select: 1.0, short_answer: 0.0 },\n        difficulty: 'easier'\n      };\n      \n      const config2: StyleConfig = {\n        item_mix: { single_select: 0.0, short_answer: 1.0 },\n        difficulty: 'harder'\n      };\n\n      const items1 = generatePreviewItems(config1);\n      const items2 = generatePreviewItems(config2);\n      \n      expect(items1[0].question).not.toBe(items2[0].question);\n    });\n\n    it('should handle missing item mix gracefully', () => {\n      const config: StyleConfig = {\n        difficulty: 'balanced'\n      };\n\n      const items = generatePreviewItems(config);\n      \n      expect(items).toHaveLength(3);\n      items.forEach(item => {\n        expect(item.type).toBeDefined();\n        expect(item.question).toBeDefined();\n      });\n    });\n  });\n\n  describe('generatePreviewBadges', () => {\n    it('should generate timing badge', () => {\n      const config: StyleConfig = {\n        timing: { mode: 'hard' }\n      };\n\n      const badges = generatePreviewBadges(config);\n      \n      expect(badges).toHaveLength(1);\n      expect(badges[0].type).toBe('timing');\n      expect(badges[0].label).toBe('Hard Timing');\n      expect(badges[0].variant).toBe('destructive');\n    });\n\n    it('should generate feedback badge', () => {\n      const config: StyleConfig = {\n        feedback: 'immediate'\n      };\n\n      const badges = generatePreviewBadges(config);\n      \n      expect(badges).toHaveLength(1);\n      expect(badges[0].type).toBe('feedback');\n      expect(badges[0].label).toBe('Immediate');\n      expect(badges[0].variant).toBe('default');\n    });\n\n    it('should generate difficulty badge', () => {\n      const config: StyleConfig = {\n        difficulty: 'harder'\n      };\n\n      const badges = generatePreviewBadges(config);\n      \n      expect(badges).toHaveLength(1);\n      expect(badges[0].type).toBe('difficulty');\n      expect(badges[0].label).toBe('Hard');\n      expect(badges[0].variant).toBe('destructive');\n    });\n\n    it('should generate multiple badges for complete configuration', () => {\n      const config: StyleConfig = {\n        timing: { mode: 'soft' },\n        feedback: 'on_submit',\n        difficulty: 'balanced'\n      };\n\n      const badges = generatePreviewBadges(config);\n      \n      expect(badges).toHaveLength(3);\n      \n      const badgeTypes = badges.map(b => b.type);\n      expect(badgeTypes).toContain('timing');\n      expect(badgeTypes).toContain('feedback');\n      expect(badgeTypes).toContain('difficulty');\n    });\n  });\n\n  describe('getPreviewSummary', () => {\n    it('should return correct summary for configuration', () => {\n      const config: StyleConfig = {\n        item_mix: { single_select: 0.6, short_answer: 0.4 },\n        timing: { mode: 'soft' },\n        feedback: 'immediate',\n        difficulty: 'balanced'\n      };\n\n      const summary = getPreviewSummary(config);\n      \n      expect(summary.totalItems).toBe(3);\n      expect(summary.itemTypes).toContain('single_select');\n      expect(summary.itemTypes).toContain('short_answer');\n      expect(summary.timingMode).toBe('soft');\n      expect(summary.feedbackMode).toBe('immediate');\n      expect(summary.difficulty).toBe('balanced');\n    });\n\n    it('should handle missing configuration gracefully', () => {\n      const config: StyleConfig = {};\n\n      const summary = getPreviewSummary(config);\n      \n      expect(summary.totalItems).toBe(3);\n      expect(summary.itemTypes).toEqual([]);\n      expect(summary.timingMode).toBe('soft');\n      expect(summary.feedbackMode).toBe('immediate');\n      expect(summary.difficulty).toBe('balanced');\n    });\n  });\n});\n"],"names":["describe","it","config","item_mix","single_select","short_answer","timing","total_minutes","mode","seed1","generateSeed","seed2","expect","toBe","config1","config2","seed3","difficulty","time_limit","not","items1","generatePreviewItems","items2","toHaveLength","question","numeric","multi_step","cloze","items","forEach","item","type","toBeDefined","badges","generatePreviewBadges","label","variant","feedback","badgeTypes","map","b","toContain","summary","getPreviewSummary","totalItems","itemTypes","timingMode","feedbackMode","toEqual"],"mappings":"AAAA,mCAAmC;;;;;kCAO5B;AAEPA,SAAS,qBAAqB;IAC5BA,SAAS,gBAAgB;QACvBC,GAAG,2DAA2D;YAC5D,MAAMC,SAAsB;gBAC1BC,UAAU;oBAAEC,eAAe;oBAAKC,cAAc;gBAAI;gBAClDC,QAAQ;oBAAEC,eAAe;oBAAIC,MAAM;gBAAO;YAC5C;YAEA,MAAMC,QAAQC,IAAAA,8BAAY,EAACR;YAC3B,MAAMS,QAAQD,IAAAA,8BAAY,EAACR;YAE3BU,OAAOH,OAAOI,IAAI,CAACF;QACrB;QAEAV,GAAG,gEAAgE;YACjE,MAAMa,UAAuB;gBAC3BX,UAAU;oBAAEC,eAAe;oBAAKC,cAAc;gBAAI;YACpD;YAEA,MAAMU,UAAuB;gBAC3BZ,UAAU;oBAAEC,eAAe;oBAAKC,cAAc;gBAAI;YACpD;YAEA,MAAMI,QAAQC,IAAAA,8BAAY,EAACI;YAC3B,MAAMH,QAAQD,IAAAA,8BAAY,EAACK;YAE3B,gFAAgF;YAChF,IAAIN,UAAUE,OAAO;gBACnB,MAAMK,QAAQN,IAAAA,8BAAY,EAAC;oBACzBP,UAAU;wBAAEC,eAAe;wBAAKC,cAAc;oBAAI;oBAClDY,YAAY;oBACZC,YAAY;gBACd;gBACAN,OAAOI,OAAOG,GAAG,CAACN,IAAI,CAACJ;YACzB,OAAO;gBACLG,OAAOH,OAAOU,GAAG,CAACN,IAAI,CAACF;YACzB;QACF;IACF;IAEAX,SAAS,wBAAwB;QAC/BC,GAAG,8DAA8D;YAC/D,MAAMC,SAAsB;gBAC1BC,UAAU;oBAAEC,eAAe;oBAAKC,cAAc;gBAAI;gBAClDY,YAAY;YACd;YAEA,MAAMG,SAASC,IAAAA,sCAAoB,EAACnB;YACpC,MAAMoB,SAASD,IAAAA,sCAAoB,EAACnB;YAEpCU,OAAOQ,QAAQG,YAAY,CAAC;YAC5BX,OAAOU,QAAQC,YAAY,CAAC;YAE5B,sDAAsD;YACtDX,OAAOQ,MAAM,CAAC,EAAE,CAACI,QAAQ,EAAEX,IAAI,CAACS,MAAM,CAAC,EAAE,CAACE,QAAQ;YAClDZ,OAAOQ,MAAM,CAAC,EAAE,CAACI,QAAQ,EAAEX,IAAI,CAACS,MAAM,CAAC,EAAE,CAACE,QAAQ;YAClDZ,OAAOQ,MAAM,CAAC,EAAE,CAACI,QAAQ,EAAEX,IAAI,CAACS,MAAM,CAAC,EAAE,CAACE,QAAQ;QACpD;QAEAvB,GAAG,uCAAuC;YACxC,MAAMC,SAAsB;gBAC1BC,UAAU;oBACRC,eAAe;oBACfC,cAAc;oBACdoB,SAAS;oBACTC,YAAY;oBACZC,OAAO;gBACT;YACF;YAEA,MAAMC,QAAQP,IAAAA,sCAAoB,EAACnB;YAEnC,+BAA+B;YAC/B0B,MAAMC,OAAO,CAACC,CAAAA;gBACZlB,OAAOkB,KAAKC,IAAI,EAAElB,IAAI,CAAC;YACzB;QACF;QAEAZ,GAAG,gEAAgE;YACjE,MAAMa,UAAuB;gBAC3BX,UAAU;oBAAEC,eAAe;oBAAKC,cAAc;gBAAI;gBAClDY,YAAY;YACd;YAEA,MAAMF,UAAuB;gBAC3BZ,UAAU;oBAAEC,eAAe;oBAAKC,cAAc;gBAAI;gBAClDY,YAAY;YACd;YAEA,MAAMG,SAASC,IAAAA,sCAAoB,EAACP;YACpC,MAAMQ,SAASD,IAAAA,sCAAoB,EAACN;YAEpCH,OAAOQ,MAAM,CAAC,EAAE,CAACI,QAAQ,EAAEL,GAAG,CAACN,IAAI,CAACS,MAAM,CAAC,EAAE,CAACE,QAAQ;QACxD;QAEAvB,GAAG,6CAA6C;YAC9C,MAAMC,SAAsB;gBAC1Be,YAAY;YACd;YAEA,MAAMW,QAAQP,IAAAA,sCAAoB,EAACnB;YAEnCU,OAAOgB,OAAOL,YAAY,CAAC;YAC3BK,MAAMC,OAAO,CAACC,CAAAA;gBACZlB,OAAOkB,KAAKC,IAAI,EAAEC,WAAW;gBAC7BpB,OAAOkB,KAAKN,QAAQ,EAAEQ,WAAW;YACnC;QACF;IACF;IAEAhC,SAAS,yBAAyB;QAChCC,GAAG,gCAAgC;YACjC,MAAMC,SAAsB;gBAC1BI,QAAQ;oBAAEE,MAAM;gBAAO;YACzB;YAEA,MAAMyB,SAASC,IAAAA,uCAAqB,EAAChC;YAErCU,OAAOqB,QAAQV,YAAY,CAAC;YAC5BX,OAAOqB,MAAM,CAAC,EAAE,CAACF,IAAI,EAAElB,IAAI,CAAC;YAC5BD,OAAOqB,MAAM,CAAC,EAAE,CAACE,KAAK,EAAEtB,IAAI,CAAC;YAC7BD,OAAOqB,MAAM,CAAC,EAAE,CAACG,OAAO,EAAEvB,IAAI,CAAC;QACjC;QAEAZ,GAAG,kCAAkC;YACnC,MAAMC,SAAsB;gBAC1BmC,UAAU;YACZ;YAEA,MAAMJ,SAASC,IAAAA,uCAAqB,EAAChC;YAErCU,OAAOqB,QAAQV,YAAY,CAAC;YAC5BX,OAAOqB,MAAM,CAAC,EAAE,CAACF,IAAI,EAAElB,IAAI,CAAC;YAC5BD,OAAOqB,MAAM,CAAC,EAAE,CAACE,KAAK,EAAEtB,IAAI,CAAC;YAC7BD,OAAOqB,MAAM,CAAC,EAAE,CAACG,OAAO,EAAEvB,IAAI,CAAC;QACjC;QAEAZ,GAAG,oCAAoC;YACrC,MAAMC,SAAsB;gBAC1Be,YAAY;YACd;YAEA,MAAMgB,SAASC,IAAAA,uCAAqB,EAAChC;YAErCU,OAAOqB,QAAQV,YAAY,CAAC;YAC5BX,OAAOqB,MAAM,CAAC,EAAE,CAACF,IAAI,EAAElB,IAAI,CAAC;YAC5BD,OAAOqB,MAAM,CAAC,EAAE,CAACE,KAAK,EAAEtB,IAAI,CAAC;YAC7BD,OAAOqB,MAAM,CAAC,EAAE,CAACG,OAAO,EAAEvB,IAAI,CAAC;QACjC;QAEAZ,GAAG,8DAA8D;YAC/D,MAAMC,SAAsB;gBAC1BI,QAAQ;oBAAEE,MAAM;gBAAO;gBACvB6B,UAAU;gBACVpB,YAAY;YACd;YAEA,MAAMgB,SAASC,IAAAA,uCAAqB,EAAChC;YAErCU,OAAOqB,QAAQV,YAAY,CAAC;YAE5B,MAAMe,aAAaL,OAAOM,GAAG,CAACC,CAAAA,IAAKA,EAAET,IAAI;YACzCnB,OAAO0B,YAAYG,SAAS,CAAC;YAC7B7B,OAAO0B,YAAYG,SAAS,CAAC;YAC7B7B,OAAO0B,YAAYG,SAAS,CAAC;QAC/B;IACF;IAEAzC,SAAS,qBAAqB;QAC5BC,GAAG,mDAAmD;YACpD,MAAMC,SAAsB;gBAC1BC,UAAU;oBAAEC,eAAe;oBAAKC,cAAc;gBAAI;gBAClDC,QAAQ;oBAAEE,MAAM;gBAAO;gBACvB6B,UAAU;gBACVpB,YAAY;YACd;YAEA,MAAMyB,UAAUC,IAAAA,mCAAiB,EAACzC;YAElCU,OAAO8B,QAAQE,UAAU,EAAE/B,IAAI,CAAC;YAChCD,OAAO8B,QAAQG,SAAS,EAAEJ,SAAS,CAAC;YACpC7B,OAAO8B,QAAQG,SAAS,EAAEJ,SAAS,CAAC;YACpC7B,OAAO8B,QAAQI,UAAU,EAAEjC,IAAI,CAAC;YAChCD,OAAO8B,QAAQK,YAAY,EAAElC,IAAI,CAAC;YAClCD,OAAO8B,QAAQzB,UAAU,EAAEJ,IAAI,CAAC;QAClC;QAEAZ,GAAG,kDAAkD;YACnD,MAAMC,SAAsB,CAAC;YAE7B,MAAMwC,UAAUC,IAAAA,mCAAiB,EAACzC;YAElCU,OAAO8B,QAAQE,UAAU,EAAE/B,IAAI,CAAC;YAChCD,OAAO8B,QAAQG,SAAS,EAAEG,OAAO,CAAC,EAAE;YACpCpC,OAAO8B,QAAQI,UAAU,EAAEjC,IAAI,CAAC;YAChCD,OAAO8B,QAAQK,YAAY,EAAElC,IAAI,CAAC;YAClCD,OAAO8B,QAAQzB,UAAU,EAAEJ,IAAI,CAAC;QAClC;IACF;AACF"}