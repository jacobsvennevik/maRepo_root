{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/features/projects/components/__tests__/pdf-processing-integration-optimized.test.tsx"],"sourcesContent":["import React from 'react';\nimport { screen, fireEvent, waitFor } from '@testing-library/react';\nimport '@testing-library/jest-dom';\n\n// Import new centralized utilities\nimport {\n  renderWithProviders,\n  setupFullTestEnvironment,\n  testFactories,\n  standardMocks\n} from '../../../../../src/test-utils';\n\n// Setup test environment\nconst testEnv = setupFullTestEnvironment({\n  timeout: 10000,\n  includeAPI: true,\n  includeStorage: true,\n  includeNavigation: true\n});\n\nconst { apiMocks } = standardMocks;\n\ndescribe('PDF Processing Integration - Optimized', () => {\n  beforeEach(() => {\n    testEnv.mocks.resetAll();\n    \n    // Setup default API responses for PDF processing\n    apiMocks.setupMockResponses({\n      'POST:/backend/api/upload/': {\n        ok: true,\n        status: 200,\n        json: async () => ({ id: 123, status: 'processing' })\n      },\n      'GET:/backend/api/extract/': {\n        ok: true,\n        status: 200,\n        json: async () => ({ \n          id: 123, \n          status: 'completed',\n          extracted_data: { course_name: 'Test Course', topics: ['Topic 1', 'Topic 2'] }\n        })\n      }\n    });\n  });\n\n  describe('Step Navigation Order', () => {\n    it('should have uploadSyllabus step before extractionResults step', () => {\n      // Import the steps to validate order\n      const { SETUP_STEPS } = require('../../services/steps');\n      \n      const uploadSyllabusIndex = SETUP_STEPS.findIndex((step: any) => step.id === 'uploadSyllabus');\n      const extractionResultsIndex = SETUP_STEPS.findIndex((step: any) => step.id === 'extractionResults');\n      const testUploadIndex = SETUP_STEPS.findIndex((step: any) => step.id === 'testUpload');\n      \n      // Validate the step order is correct\n      expect(uploadSyllabusIndex).toBeGreaterThan(-1);\n      expect(extractionResultsIndex).toBeGreaterThan(-1);\n      expect(testUploadIndex).toBeGreaterThan(-1);\n      \n      // uploadSyllabus should come before extractionResults\n      expect(uploadSyllabusIndex).toBeLessThan(extractionResultsIndex);\n      \n      // extractionResults should come before testUpload\n      expect(extractionResultsIndex).toBeLessThan(testUploadIndex);\n    });\n\n    it('should have all required steps for PDF processing flow', () => {\n      const { SETUP_STEPS } = require('../../services/steps');\n      \n      const stepIds = SETUP_STEPS.map((step: any) => step.id);\n      \n      expect(stepIds).toContain('uploadSyllabus');\n      expect(stepIds).toContain('extractionResults');\n      expect(stepIds).toContain('testUpload');\n    });\n\n    it('should have proper step dependencies', () => {\n      const { SETUP_STEPS } = require('../../services/steps');\n      \n      const uploadSyllabusStep = SETUP_STEPS.find((step: any) => step.id === 'uploadSyllabus');\n      const extractionResultsStep = SETUP_STEPS.find((step: any) => step.id === 'extractionResults');\n      \n      expect(uploadSyllabusStep).toBeDefined();\n      expect(extractionResultsStep).toBeDefined();\n      \n      // extractionResults should depend on uploadSyllabus\n      expect(extractionResultsStep.dependencies).toContain('uploadSyllabus');\n    });\n  });\n\n  describe('Mock Data Structure', () => {\n    it('should have properly structured mock data for testing', () => {\n      // Use factory to create test data\n      const { createProjectSetupTest } = testFactories;\n      const mockData = createProjectSetupTest({\n        courseName: 'Test Course',\n        topics: ['Topic 1', 'Topic 2'],\n        status: 'completed'\n      });\n      \n      expect(mockData).toHaveProperty('id');\n      expect(mockData).toHaveProperty('original_text');\n      expect(mockData).toHaveProperty('metadata');\n      expect(mockData).toHaveProperty('status');\n      expect(mockData.metadata).toHaveProperty('course_name');\n    });\n\n    it('should validate mock data consistency', () => {\n      const { createProjectSetupTest } = testFactories;\n      const mockData = createProjectSetupTest({\n        courseName: 'Advanced Mathematics',\n        topics: ['Algebra', 'Calculus', 'Statistics'],\n        status: 'completed'\n      });\n      \n      expect(mockData.metadata.course_name).toBe('Advanced Mathematics');\n      expect(mockData.metadata.topics).toHaveLength(3);\n      expect(mockData.status).toBe('completed');\n    });\n\n    it('should handle different file types in mock data', () => {\n      const { createFileUploadTest } = testFactories;\n      \n      const pdfFile = createFileUploadTest({ \n        fileName: 'syllabus.pdf', \n        fileType: 'application/pdf' \n      });\n      const docFile = createFileUploadTest({ \n        fileName: 'course.doc', \n        fileType: 'application/msword' \n      });\n      \n      expect(pdfFile.file.type).toBe('application/pdf');\n      expect(docFile.file.type).toBe('application/msword');\n    });\n  });\n\n  describe('API Integration', () => {\n    it('should handle PDF upload API calls', async () => {\n      const { createFileUploadTest } = testFactories;\n      const { file } = createFileUploadTest({ \n        fileName: 'test-syllabus.pdf',\n        fileType: 'application/pdf'\n      });\n\n      // Simulate file upload\n      const formData = new FormData();\n      formData.append('file', file);\n\n      const response = await apiMocks.mockFetch('/backend/api/upload/', {\n        method: 'POST',\n        body: formData\n      });\n\n      expect(response.ok).toBe(true);\n      expect(apiMocks.mockFetch).toHaveBeenCalledWith(\n        '/backend/api/upload/',\n        expect.objectContaining({\n          method: 'POST'\n        })\n      );\n    });\n\n    it('should handle extraction API calls', async () => {\n      const response = await apiMocks.mockFetch('/backend/api/extract/123');\n      \n      expect(response.ok).toBe(true);\n      const data = await response.json();\n      expect(data.status).toBe('completed');\n      expect(data.extracted_data).toHaveProperty('course_name');\n    });\n\n    it('should handle API errors gracefully', async () => {\n      // Mock API error\n      apiMocks.mockFetch.mockResolvedValueOnce({\n        ok: false,\n        status: 500,\n        json: async () => ({ error: 'Processing failed' })\n      });\n\n      const response = await apiMocks.mockFetch('/backend/api/upload/', {\n        method: 'POST',\n        body: new FormData()\n      });\n\n      expect(response.ok).toBe(false);\n      const errorData = await response.json();\n      expect(errorData.error).toBe('Processing failed');\n    });\n  });\n\n  describe('File Processing Pipeline', () => {\n    it('should validate file types for PDF processing', () => {\n      const { createFileUploadTest } = testFactories;\n      \n      const validFiles = [\n        createFileUploadTest({ fileName: 'test.pdf', fileType: 'application/pdf' }),\n        createFileUploadTest({ fileName: 'test.doc', fileType: 'application/msword' }),\n        createFileUploadTest({ fileName: 'test.docx', fileType: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' })\n      ];\n\n      validFiles.forEach(({ file }) => {\n        expect(['application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'])\n          .toContain(file.type);\n      });\n    });\n\n    it('should handle file size validation', () => {\n      const { createFileUploadTest } = testFactories;\n      \n      const smallFile = createFileUploadTest({ fileSize: 1024 * 1024 }); // 1MB\n      const largeFile = createFileUploadTest({ fileSize: 50 * 1024 * 1024 }); // 50MB\n      \n      expect(smallFile.file.size).toBeLessThan(25 * 1024 * 1024); // Under 25MB limit\n      expect(largeFile.file.size).toBeGreaterThan(25 * 1024 * 1024); // Over 25MB limit\n    });\n\n    it('should process multiple files in sequence', async () => {\n      const { createFileUploadTest } = testFactories;\n      \n      const files = [\n        createFileUploadTest({ fileName: 'syllabus.pdf' }),\n        createFileUploadTest({ fileName: 'course-content.pdf' }),\n        createFileUploadTest({ fileName: 'tests.pdf' })\n      ];\n\n      // Simulate sequential processing\n      for (const { file } of files) {\n        const formData = new FormData();\n        formData.append('file', file);\n        \n        const response = await apiMocks.mockFetch('/backend/api/upload/', {\n          method: 'POST',\n          body: formData\n        });\n        \n        expect(response.ok).toBe(true);\n      }\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle network errors', async () => {\n      // Mock network error\n      apiMocks.mockFetch.mockRejectedValueOnce(new Error('Network error'));\n\n      try {\n        await apiMocks.mockFetch('/backend/api/upload/', {\n          method: 'POST',\n          body: new FormData()\n        });\n      } catch (error) {\n        expect(error.message).toBe('Network error');\n      }\n    });\n\n    it('should handle timeout errors', async () => {\n      // Mock timeout\n      apiMocks.mockFetch.mockImplementationOnce(() => \n        new Promise((_, reject) => \n          setTimeout(() => reject(new Error('Request timeout')), 100)\n        )\n      );\n\n      try {\n        await apiMocks.mockFetch('/backend/api/extract/123');\n      } catch (error) {\n        expect(error.message).toBe('Request timeout');\n      }\n    });\n\n    it('should handle malformed response data', async () => {\n      // Mock malformed response\n      apiMocks.mockFetch.mockResolvedValueOnce({\n        ok: true,\n        status: 200,\n        json: async () => { throw new Error('Invalid JSON'); }\n      });\n\n      const response = await apiMocks.mockFetch('/backend/api/extract/123');\n      \n      try {\n        await response.json();\n      } catch (error) {\n        expect(error.message).toBe('Invalid JSON');\n      }\n    });\n  });\n\n  describe('Performance', () => {\n    it('should handle concurrent file uploads', async () => {\n      const { createFileUploadTest } = testFactories;\n      \n      const files = Array.from({ length: 5 }, (_, i) => \n        createFileUploadTest({ fileName: `file-${i}.pdf` })\n      );\n\n      // Simulate concurrent uploads\n      const uploadPromises = files.map(({ file }) => {\n        const formData = new FormData();\n        formData.append('file', file);\n        return apiMocks.mockFetch('/backend/api/upload/', {\n          method: 'POST',\n          body: formData\n        });\n      });\n\n      const responses = await Promise.all(uploadPromises);\n      \n      responses.forEach(response => {\n        expect(response.ok).toBe(true);\n      });\n    });\n\n    it('should validate processing time limits', async () => {\n      const startTime = Date.now();\n      \n      await apiMocks.mockFetch('/backend/api/extract/123');\n      \n      const processingTime = Date.now() - startTime;\n      expect(processingTime).toBeLessThan(5000); // Should complete within 5 seconds\n    });\n  });\n});\n"],"names":["testEnv","setupFullTestEnvironment","timeout","includeAPI","includeStorage","includeNavigation","apiMocks","standardMocks","describe","beforeEach","mocks","resetAll","setupMockResponses","ok","status","json","id","extracted_data","course_name","topics","it","SETUP_STEPS","require","uploadSyllabusIndex","findIndex","step","extractionResultsIndex","testUploadIndex","expect","toBeGreaterThan","toBeLessThan","stepIds","map","toContain","uploadSyllabusStep","find","extractionResultsStep","toBeDefined","dependencies","createProjectSetupTest","testFactories","mockData","courseName","toHaveProperty","metadata","toBe","toHaveLength","createFileUploadTest","pdfFile","fileName","fileType","docFile","file","type","formData","FormData","append","response","mockFetch","method","body","toHaveBeenCalledWith","objectContaining","data","mockResolvedValueOnce","error","errorData","validFiles","forEach","smallFile","fileSize","largeFile","size","files","mockRejectedValueOnce","Error","message","mockImplementationOnce","Promise","_","reject","setTimeout","Array","from","length","i","uploadPromises","responses","all","startTime","Date","now","processingTime"],"mappings":"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"}