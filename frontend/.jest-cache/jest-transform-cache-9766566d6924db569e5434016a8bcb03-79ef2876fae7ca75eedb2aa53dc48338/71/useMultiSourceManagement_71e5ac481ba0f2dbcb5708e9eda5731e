bd334db49b06c52bae610ee02a276e79
/**
 * Enhanced Multi-Source Management Hook
 * 
 * Handles flashcards, files, and study materials selection
 * for wizard components. Extends the existing useFileManagement
 * pattern to support multiple source types.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return _default;
    },
    useMultiSourceManagement: function() {
        return useMultiSourceManagement;
    }
});
const _react = require("react");
const _axiosapi = require("../../../lib/axios-api");
const _projectApi = require("../../../lib/projectApi");
const _uploadutils = require("../../../features/projects/services/upload-utils");
// ============================================================================
// Default Values
// ============================================================================
const DEFAULT_SELECTED_SOURCES = {
    flashcards: {
        ids: [],
        groundOnly: false
    },
    files: {
        ids: [],
        groundOnly: false
    },
    studyMaterials: {
        ids: [],
        groundOnly: false
    }
};
const useMultiSourceManagement = ({ projectId, supportedTypes = [
    'flashcards',
    'files',
    'studyMaterials'
], onSourcesChange, autoLoad = true })=>{
    const [flashcards, setFlashcards] = (0, _react.useState)([]);
    const [files, setFiles] = (0, _react.useState)([]);
    const [studyMaterials, setStudyMaterials] = (0, _react.useState)([]);
    const [uploadedFiles, setUploadedFiles] = (0, _react.useState)([]);
    const [isLoadingFlashcards, setIsLoadingFlashcards] = (0, _react.useState)(false);
    const [isLoadingFiles, setIsLoadingFiles] = (0, _react.useState)(false);
    const [isLoadingStudyMaterials, setIsLoadingStudyMaterials] = (0, _react.useState)(false);
    const [selectedSources, setSelectedSourcesState] = (0, _react.useState)(DEFAULT_SELECTED_SOURCES);
    const [searchTerm, setSearchTerm] = (0, _react.useState)('');
    const loadFlashcards = (0, _react.useCallback)(async ()=>{
        if (!supportedTypes.includes('flashcards')) return;
        setIsLoadingFlashcards(true);
        try {
            const data = await (0, _projectApi.getProjectScoped)(`flashcard-decks/`, projectId, _axiosapi.axiosApi);
            const flashcardData = (Array.isArray(data) ? data : data?.results || []).map((deck)=>({
                    id: deck.id,
                    title: deck.title,
                    description: deck.description,
                    flashcard_count: deck.flashcard_count || 0,
                    created_at: deck.created_at,
                    updated_at: deck.updated_at,
                    type: 'flashcard'
                }));
            setFlashcards(flashcardData);
        } catch (error) {
            console.error('Failed to load flashcards:', error);
            if ((0, _uploadutils.isTestMode)() && (error?.code === 'ERR_NETWORK' || !error?.response)) {
                setFlashcards([]);
            } else {
                setFlashcards([]);
            }
        } finally{
            setIsLoadingFlashcards(false);
        }
    }, [
        projectId,
        supportedTypes
    ]);
    const loadFiles = (0, _react.useCallback)(async ()=>{
        if (!supportedTypes.includes('files')) return;
        setIsLoadingFiles(true);
        try {
            const data = await (0, _projectApi.getProjectScoped)(`files/`, projectId, _axiosapi.axiosApi);
            const fileData = (Array.isArray(data) ? data : data?.results || []).map((file)=>({
                    id: file.id,
                    name: file.name,
                    description: file.description,
                    size: file.file_size,
                    file_type: file.file_type,
                    created_at: file.created_at || file.uploaded_at,
                    type: 'file'
                }));
            setFiles(fileData);
        } catch (error) {
            console.error('Failed to load files:', error);
            if ((0, _uploadutils.isTestMode)() && (error?.code === 'ERR_NETWORK' || !error?.response)) {
                setFiles([]);
            } else {
                setFiles([]);
            }
        } finally{
            setIsLoadingFiles(false);
        }
    }, [
        projectId,
        supportedTypes
    ]);
    const loadStudyMaterials = (0, _react.useCallback)(async ()=>{
        if (!supportedTypes.includes('studyMaterials')) return;
        setIsLoadingStudyMaterials(true);
        try {
            const data = await (0, _projectApi.getProjectScoped)(`study-materials/`, projectId, _axiosapi.axiosApi);
            const materialData = (Array.isArray(data) ? data : data?.results || []).map((material)=>({
                    id: material.id,
                    title: material.title,
                    name: material.name,
                    description: material.description,
                    created_at: material.created_at,
                    updated_at: material.updated_at,
                    type: 'study_material'
                }));
            setStudyMaterials(materialData);
        } catch (error) {
            console.error('Failed to load study materials:', error);
            if ((0, _uploadutils.isTestMode)() && (error?.code === 'ERR_NETWORK' || !error?.response)) {
                setStudyMaterials([]);
            } else {
                setStudyMaterials([]);
            }
        } finally{
            setIsLoadingStudyMaterials(false);
        }
    }, [
        projectId,
        supportedTypes
    ]);
    const handleFileUpload = (0, _react.useCallback)(async (files)=>{
        setUploadedFiles((prev)=>[
                ...prev,
                ...files
            ]);
        try {
            for (const file of files){
                const formData = new FormData();
                formData.append('file', file);
                const response = await _axiosapi.axiosApi.post(`projects/${projectId}/upload_file/`, formData, {
                    headers: {
                        'Content-Type': 'multipart/form-data'
                    }
                });
                if (response.status === 200 || response.status === 201) {
                    console.log('✅ File uploaded successfully:', file.name);
                }
            }
            setTimeout(()=>{
                loadFiles();
            }, 1000);
        } catch (error) {
            console.error('❌ File upload failed:', error);
        }
    }, [
        projectId,
        loadFiles
    ]);
    const removeUploadedFile = (0, _react.useCallback)((index)=>{
        setUploadedFiles((prev)=>prev.filter((_, i)=>i !== index));
    }, []);
    const setSelectedSources = (0, _react.useCallback)((sources)=>{
        setSelectedSourcesState(sources);
        onSourcesChange?.(sources);
    }, [
        onSourcesChange
    ]);
    const clearSelection = (0, _react.useCallback)(()=>{
        setSelectedSources(DEFAULT_SELECTED_SOURCES);
        setUploadedFiles([]);
        setSearchTerm('');
    }, [
        setSelectedSources
    ]);
    const refreshSources = (0, _react.useCallback)(async ()=>{
        await Promise.all([
            loadFlashcards(),
            loadFiles(),
            loadStudyMaterials()
        ]);
    }, [
        loadFlashcards,
        loadFiles,
        loadStudyMaterials
    ]);
    (0, _react.useEffect)(()=>{
        if (autoLoad && projectId) {
            refreshSources();
        }
    }, [
        autoLoad,
        projectId,
        refreshSources
    ]);
    const totalSelectedCount = selectedSources.flashcards.ids.length + selectedSources.files.ids.length + selectedSources.studyMaterials.ids.length + uploadedFiles.length;
    const hasMinimumSelection = totalSelectedCount >= 1;
    const isAnyLoading = isLoadingFlashcards || isLoadingFiles || isLoadingStudyMaterials;
    return {
        flashcards,
        files,
        studyMaterials,
        uploadedFiles,
        isLoadingFlashcards,
        isLoadingFiles,
        isLoadingStudyMaterials,
        selectedSources,
        searchTerm,
        setSelectedSources,
        setSearchTerm,
        handleFileUpload,
        removeUploadedFile,
        refreshSources,
        clearSelection,
        totalSelectedCount,
        hasMinimumSelection,
        isAnyLoading
    };
};
const _default = useMultiSourceManagement;

//# sourceMappingURL=data:application/json;base64,