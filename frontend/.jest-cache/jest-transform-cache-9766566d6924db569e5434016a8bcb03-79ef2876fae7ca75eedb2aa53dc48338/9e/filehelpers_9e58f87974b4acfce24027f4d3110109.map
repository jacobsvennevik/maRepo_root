{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/test-utils/helpers/file-helpers.ts"],"sourcesContent":["/**\n * File Upload Test Helpers\n * \n * Reusable helper functions for file upload testing scenarios.\n */\n\nimport { screen, fireEvent, waitFor, act } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { renderWithProviders } from '../setup/shared-setup';\nimport { testFactories } from '../factories';\n\n// ============================================================================\n// File Upload Helpers\n// ============================================================================\n\nexport const fileUploadHelpers = {\n  /**\n   * Create test files with different configurations\n   */\n  createTestFiles: (configs: Array<{\n    name: string;\n    content?: string;\n    type?: string;\n    size?: number;\n  }>) => {\n    return configs.map(config => \n      testFactories.createTestFile(\n        config.name,\n        config.content || 'test content',\n        config.type || 'application/pdf',\n        config.size\n      )\n    );\n  },\n\n  /**\n   * Upload files via file input\n   */\n  uploadFiles: async (files: File[]) => {\n    const user = userEvent.setup();\n    const fileInput = screen.getByTestId('file-input');\n    \n    await act(async () => {\n      await user.upload(fileInput, files);\n    });\n\n    return user;\n  },\n\n  /**\n   * Upload files via drag and drop\n   */\n  uploadFilesViaDragDrop: async (files: File[]) => {\n    const dropzone = screen.getByText(\"Drag & drop files here\").closest(\"div\");\n    \n    if (!dropzone) {\n      throw new Error('Dropzone not found');\n    }\n\n    const dataTransfer = {\n      files: files,\n      items: files.map(file => ({\n        kind: \"file\",\n        type: file.type,\n        getAsFile: () => file,\n      })),\n      types: [\"Files\"],\n    };\n\n    fireEvent.dragOver(dropzone);\n    fireEvent.drop(dropzone, { dataTransfer });\n  },\n\n  /**\n   * Remove file from list\n   */\n  removeFile: async (fileName: string) => {\n    const user = userEvent.setup();\n    const removeButton = screen.getByTestId(`remove-${fileName}`);\n    \n    await act(async () => {\n      await user.click(removeButton);\n    });\n  },\n\n  /**\n   * Verify file is in list\n   */\n  verifyFileInList: (fileName: string) => {\n    expect(screen.getByTestId(`file-item-${fileName}`)).toBeInTheDocument();\n  },\n\n  /**\n   * Verify file is not in list\n   */\n  verifyFileNotInList: (fileName: string) => {\n    expect(screen.queryByTestId(`file-item-${fileName}`)).not.toBeInTheDocument();\n  },\n\n  /**\n   * Verify error message is displayed\n   */\n  verifyErrorMessage: (expectedMessage: string) => {\n    expect(screen.getByTestId('error-message')).toHaveTextContent(new RegExp(expectedMessage, 'i'));\n  },\n\n  /**\n   * Verify no error message is displayed\n   */\n  verifyNoErrorMessage: () => {\n    expect(screen.queryByTestId('error-message')).not.toBeInTheDocument();\n  },\n\n  /**\n   * Verify upload progress\n   */\n  verifyUploadProgress: (fileName: string, expectedProgress: number) => {\n    const progressBar = screen.getByLabelText(new RegExp(`upload progress for ${fileName}`, 'i'));\n    expect(progressBar).toHaveAttribute('aria-valuenow', expectedProgress.toString());\n  },\n\n  /**\n   * Verify file count\n   */\n  verifyFileCount: (expectedCount: number) => {\n    expect(screen.getByTestId('upload-stats')).toHaveTextContent(`Total files: ${expectedCount}`);\n  }\n};\n\n// ============================================================================\n// File Validation Helpers\n// ============================================================================\n\nexport const fileValidationHelpers = {\n  /**\n   * Test file validation scenarios\n   */\n  testValidationScenarios: async (scenarios: Array<{\n    name: string;\n    file: { name: string; content: string; type: string };\n    shouldPass: boolean;\n    expectedError?: string;\n  }>) => {\n    for (const scenario of scenarios) {\n      const testFile = testFactories.createTestFile(\n        scenario.file.name,\n        scenario.file.content,\n        scenario.file.type\n      );\n\n      await fileUploadHelpers.uploadFiles([testFile]);\n\n      if (scenario.shouldPass) {\n        fileUploadHelpers.verifyFileInList(scenario.file.name);\n        fileUploadHelpers.verifyNoErrorMessage();\n      } else {\n        fileUploadHelpers.verifyFileNotInList(scenario.file.name);\n        if (scenario.expectedError) {\n          fileUploadHelpers.verifyErrorMessage(scenario.expectedError);\n        }\n      }\n\n      // Clean up for next iteration\n      jest.clearAllMocks();\n    }\n  },\n\n  /**\n   * Test mixed valid and invalid files\n   */\n  testMixedFileValidation: async () => {\n    const validFile = testFactories.createTestFile('valid.pdf', 'content', 'application/pdf');\n    const invalidFile = testFactories.createTestFile('invalid.txt', 'content', 'text/plain');\n\n    await fileUploadHelpers.uploadFiles([validFile, invalidFile]);\n\n    // Only valid file should be accepted\n    fileUploadHelpers.verifyFileInList('valid.pdf');\n    fileUploadHelpers.verifyFileNotInList('invalid.txt');\n    \n    // Error message should be shown\n    fileUploadHelpers.verifyErrorMessage('is not a supported file type');\n  }\n};\n\n// ============================================================================\n// File Upload Test Scenarios\n// ============================================================================\n\nexport const fileUploadScenarios = {\n  validFiles: [\n    { name: 'test1.pdf', content: 'PDF content', type: 'application/pdf' },\n    { name: 'test2.docx', content: 'DOCX content', type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' },\n    { name: 'test3.pptx', content: 'PPTX content', type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation' }\n  ],\n\n  invalidFiles: [\n    { name: 'test.txt', content: 'TXT content', type: 'text/plain' },\n    { name: 'test.jpg', content: 'JPG content', type: 'image/jpeg' },\n    { name: 'large.pdf', content: 'x'.repeat(26 * 1024 * 1024), type: 'application/pdf' }\n  ],\n\n  validationScenarios: [\n    {\n      name: 'Valid PDF file',\n      file: { name: 'valid.pdf', content: 'content', type: 'application/pdf' },\n      shouldPass: true\n    },\n    {\n      name: 'Valid DOCX file',\n      file: { name: 'valid.docx', content: 'content', type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' },\n      shouldPass: true\n    },\n    {\n      name: 'Invalid TXT file',\n      file: { name: 'invalid.txt', content: 'content', type: 'text/plain' },\n      shouldPass: false,\n      expectedError: 'is not a supported file type'\n    },\n    {\n      name: 'File too large',\n      file: { name: 'large.pdf', content: 'x'.repeat(26 * 1024 * 1024), type: 'application/pdf' },\n      shouldPass: false,\n      expectedError: 'File is too large'\n    }\n  ]\n};\n\n// ============================================================================\n// File Upload Test Utilities\n// ============================================================================\n\nexport const fileUploadTestUtils = {\n  /**\n   * Create a complete file upload test suite\n   */\n  createFileUploadTestSuite: (component: React.ComponentType<any>, props: any = {}) => {\n    return {\n      async testFileUpload() {\n        const files = fileUploadHelpers.createTestFiles(fileUploadScenarios.validFiles);\n        await fileUploadHelpers.uploadFiles(files);\n        \n        files.forEach(file => {\n          fileUploadHelpers.verifyFileInList(file.name);\n        });\n      },\n\n      async testFileValidation() {\n        await fileValidationHelpers.testValidationScenarios(fileUploadScenarios.validationScenarios);\n      },\n\n      async testDragAndDrop() {\n        const files = fileUploadHelpers.createTestFiles([fileUploadScenarios.validFiles[0]]);\n        await fileUploadHelpers.uploadFilesViaDragDrop(files);\n        \n        fileUploadHelpers.verifyFileInList(files[0].name);\n      },\n\n      async testFileRemoval() {\n        const files = fileUploadHelpers.createTestFiles([fileUploadScenarios.validFiles[0]]);\n        await fileUploadHelpers.uploadFiles(files);\n        \n        fileUploadHelpers.verifyFileInList(files[0].name);\n        await fileUploadHelpers.removeFile(files[0].name);\n        fileUploadHelpers.verifyFileNotInList(files[0].name);\n      },\n\n      async testUploadProgress() {\n        const files = fileUploadHelpers.createTestFiles([fileUploadScenarios.validFiles[0]]);\n        \n        renderWithProviders(\n          React.createElement(component, {\n            ...props,\n            files: files,\n            uploadProgress: { [files[0].name]: 50 }\n          })\n        );\n\n        fileUploadHelpers.verifyUploadProgress(files[0].name, 50);\n      },\n\n      async testErrorHandling() {\n        const invalidFile = fileUploadScenarios.invalidFiles[0];\n        const testFile = testFactories.createTestFile(invalidFile.name, invalidFile.content, invalidFile.type);\n        \n        await fileUploadHelpers.uploadFiles([testFile]);\n        fileUploadHelpers.verifyErrorMessage('is not a supported file type');\n      },\n\n      async testAccessibility() {\n        renderWithProviders(React.createElement(component, props));\n        \n        const fileInput = screen.getByTestId('file-input');\n        expect(fileInput).toHaveAttribute('type', 'file');\n        expect(fileInput).toHaveAttribute('multiple');\n      },\n\n      async testPerformance() {\n        const startTime = performance.now();\n        renderWithProviders(React.createElement(component, props));\n        const endTime = performance.now();\n        \n        expect(endTime - startTime).toBeLessThan(100);\n      }\n    };\n  }\n};\n"],"names":["fileUploadHelpers","fileUploadScenarios","fileUploadTestUtils","fileValidationHelpers","createTestFiles","configs","map","config","testFactories","createTestFile","name","content","type","size","uploadFiles","files","user","userEvent","setup","fileInput","screen","getByTestId","act","upload","uploadFilesViaDragDrop","dropzone","getByText","closest","Error","dataTransfer","items","file","kind","getAsFile","types","fireEvent","dragOver","drop","removeFile","fileName","removeButton","click","verifyFileInList","expect","toBeInTheDocument","verifyFileNotInList","queryByTestId","not","verifyErrorMessage","expectedMessage","toHaveTextContent","RegExp","verifyNoErrorMessage","verifyUploadProgress","expectedProgress","progressBar","getByLabelText","toHaveAttribute","toString","verifyFileCount","expectedCount","testValidationScenarios","scenarios","scenario","testFile","shouldPass","expectedError","jest","clearAllMocks","testMixedFileValidation","validFile","invalidFile","validFiles","invalidFiles","repeat","validationScenarios","createFileUploadTestSuite","component","props","testFileUpload","forEach","testFileValidation","testDragAndDrop","testFileRemoval","testUploadProgress","renderWithProviders","React","createElement","uploadProgress","testErrorHandling","testAccessibility","testPerformance","startTime","performance","now","endTime","toBeLessThan"],"mappings":"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"}