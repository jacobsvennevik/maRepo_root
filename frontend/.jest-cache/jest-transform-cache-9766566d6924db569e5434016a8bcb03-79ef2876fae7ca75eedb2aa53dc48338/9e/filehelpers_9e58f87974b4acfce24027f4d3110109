d7031e8cc3406cb873e8d0588d8efe07
/**
 * File Upload Test Helpers
 * 
 * Reusable helper functions for file upload testing scenarios.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    fileUploadHelpers: function() {
        return fileUploadHelpers;
    },
    fileUploadScenarios: function() {
        return fileUploadScenarios;
    },
    fileUploadTestUtils: function() {
        return fileUploadTestUtils;
    },
    fileValidationHelpers: function() {
        return fileValidationHelpers;
    }
});
const _react = require("@testing-library/react");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
const _sharedsetup = require("../setup/shared-setup");
const _factories = require("../factories");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const fileUploadHelpers = {
    /**
   * Create test files with different configurations
   */ createTestFiles: (configs)=>{
        return configs.map((config)=>_factories.testFactories.createTestFile(config.name, config.content || 'test content', config.type || 'application/pdf', config.size));
    },
    /**
   * Upload files via file input
   */ uploadFiles: async (files)=>{
        const user = _userevent.default.setup();
        const fileInput = _react.screen.getByTestId('file-input');
        await (0, _react.act)(async ()=>{
            await user.upload(fileInput, files);
        });
        return user;
    },
    /**
   * Upload files via drag and drop
   */ uploadFilesViaDragDrop: async (files)=>{
        const dropzone = _react.screen.getByText("Drag & drop files here").closest("div");
        if (!dropzone) {
            throw new Error('Dropzone not found');
        }
        const dataTransfer = {
            files: files,
            items: files.map((file)=>({
                    kind: "file",
                    type: file.type,
                    getAsFile: ()=>file
                })),
            types: [
                "Files"
            ]
        };
        _react.fireEvent.dragOver(dropzone);
        _react.fireEvent.drop(dropzone, {
            dataTransfer
        });
    },
    /**
   * Remove file from list
   */ removeFile: async (fileName)=>{
        const user = _userevent.default.setup();
        const removeButton = _react.screen.getByTestId(`remove-${fileName}`);
        await (0, _react.act)(async ()=>{
            await user.click(removeButton);
        });
    },
    /**
   * Verify file is in list
   */ verifyFileInList: (fileName)=>{
        expect(_react.screen.getByTestId(`file-item-${fileName}`)).toBeInTheDocument();
    },
    /**
   * Verify file is not in list
   */ verifyFileNotInList: (fileName)=>{
        expect(_react.screen.queryByTestId(`file-item-${fileName}`)).not.toBeInTheDocument();
    },
    /**
   * Verify error message is displayed
   */ verifyErrorMessage: (expectedMessage)=>{
        expect(_react.screen.getByTestId('error-message')).toHaveTextContent(new RegExp(expectedMessage, 'i'));
    },
    /**
   * Verify no error message is displayed
   */ verifyNoErrorMessage: ()=>{
        expect(_react.screen.queryByTestId('error-message')).not.toBeInTheDocument();
    },
    /**
   * Verify upload progress
   */ verifyUploadProgress: (fileName, expectedProgress)=>{
        const progressBar = _react.screen.getByLabelText(new RegExp(`upload progress for ${fileName}`, 'i'));
        expect(progressBar).toHaveAttribute('aria-valuenow', expectedProgress.toString());
    },
    /**
   * Verify file count
   */ verifyFileCount: (expectedCount)=>{
        expect(_react.screen.getByTestId('upload-stats')).toHaveTextContent(`Total files: ${expectedCount}`);
    }
};
const fileValidationHelpers = {
    /**
   * Test file validation scenarios
   */ testValidationScenarios: async (scenarios)=>{
        for (const scenario of scenarios){
            const testFile = _factories.testFactories.createTestFile(scenario.file.name, scenario.file.content, scenario.file.type);
            await fileUploadHelpers.uploadFiles([
                testFile
            ]);
            if (scenario.shouldPass) {
                fileUploadHelpers.verifyFileInList(scenario.file.name);
                fileUploadHelpers.verifyNoErrorMessage();
            } else {
                fileUploadHelpers.verifyFileNotInList(scenario.file.name);
                if (scenario.expectedError) {
                    fileUploadHelpers.verifyErrorMessage(scenario.expectedError);
                }
            }
            // Clean up for next iteration
            jest.clearAllMocks();
        }
    },
    /**
   * Test mixed valid and invalid files
   */ testMixedFileValidation: async ()=>{
        const validFile = _factories.testFactories.createTestFile('valid.pdf', 'content', 'application/pdf');
        const invalidFile = _factories.testFactories.createTestFile('invalid.txt', 'content', 'text/plain');
        await fileUploadHelpers.uploadFiles([
            validFile,
            invalidFile
        ]);
        // Only valid file should be accepted
        fileUploadHelpers.verifyFileInList('valid.pdf');
        fileUploadHelpers.verifyFileNotInList('invalid.txt');
        // Error message should be shown
        fileUploadHelpers.verifyErrorMessage('is not a supported file type');
    }
};
const fileUploadScenarios = {
    validFiles: [
        {
            name: 'test1.pdf',
            content: 'PDF content',
            type: 'application/pdf'
        },
        {
            name: 'test2.docx',
            content: 'DOCX content',
            type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
        },
        {
            name: 'test3.pptx',
            content: 'PPTX content',
            type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation'
        }
    ],
    invalidFiles: [
        {
            name: 'test.txt',
            content: 'TXT content',
            type: 'text/plain'
        },
        {
            name: 'test.jpg',
            content: 'JPG content',
            type: 'image/jpeg'
        },
        {
            name: 'large.pdf',
            content: 'x'.repeat(26 * 1024 * 1024),
            type: 'application/pdf'
        }
    ],
    validationScenarios: [
        {
            name: 'Valid PDF file',
            file: {
                name: 'valid.pdf',
                content: 'content',
                type: 'application/pdf'
            },
            shouldPass: true
        },
        {
            name: 'Valid DOCX file',
            file: {
                name: 'valid.docx',
                content: 'content',
                type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
            },
            shouldPass: true
        },
        {
            name: 'Invalid TXT file',
            file: {
                name: 'invalid.txt',
                content: 'content',
                type: 'text/plain'
            },
            shouldPass: false,
            expectedError: 'is not a supported file type'
        },
        {
            name: 'File too large',
            file: {
                name: 'large.pdf',
                content: 'x'.repeat(26 * 1024 * 1024),
                type: 'application/pdf'
            },
            shouldPass: false,
            expectedError: 'File is too large'
        }
    ]
};
const fileUploadTestUtils = {
    /**
   * Create a complete file upload test suite
   */ createFileUploadTestSuite: (component, props = {})=>{
        return {
            async testFileUpload () {
                const files = fileUploadHelpers.createTestFiles(fileUploadScenarios.validFiles);
                await fileUploadHelpers.uploadFiles(files);
                files.forEach((file)=>{
                    fileUploadHelpers.verifyFileInList(file.name);
                });
            },
            async testFileValidation () {
                await fileValidationHelpers.testValidationScenarios(fileUploadScenarios.validationScenarios);
            },
            async testDragAndDrop () {
                const files = fileUploadHelpers.createTestFiles([
                    fileUploadScenarios.validFiles[0]
                ]);
                await fileUploadHelpers.uploadFilesViaDragDrop(files);
                fileUploadHelpers.verifyFileInList(files[0].name);
            },
            async testFileRemoval () {
                const files = fileUploadHelpers.createTestFiles([
                    fileUploadScenarios.validFiles[0]
                ]);
                await fileUploadHelpers.uploadFiles(files);
                fileUploadHelpers.verifyFileInList(files[0].name);
                await fileUploadHelpers.removeFile(files[0].name);
                fileUploadHelpers.verifyFileNotInList(files[0].name);
            },
            async testUploadProgress () {
                const files = fileUploadHelpers.createTestFiles([
                    fileUploadScenarios.validFiles[0]
                ]);
                (0, _sharedsetup.renderWithProviders)(React.createElement(component, {
                    ...props,
                    files: files,
                    uploadProgress: {
                        [files[0].name]: 50
                    }
                }));
                fileUploadHelpers.verifyUploadProgress(files[0].name, 50);
            },
            async testErrorHandling () {
                const invalidFile = fileUploadScenarios.invalidFiles[0];
                const testFile = _factories.testFactories.createTestFile(invalidFile.name, invalidFile.content, invalidFile.type);
                await fileUploadHelpers.uploadFiles([
                    testFile
                ]);
                fileUploadHelpers.verifyErrorMessage('is not a supported file type');
            },
            async testAccessibility () {
                (0, _sharedsetup.renderWithProviders)(React.createElement(component, props));
                const fileInput = _react.screen.getByTestId('file-input');
                expect(fileInput).toHaveAttribute('type', 'file');
                expect(fileInput).toHaveAttribute('multiple');
            },
            async testPerformance () {
                const startTime = performance.now();
                (0, _sharedsetup.renderWithProviders)(React.createElement(component, props));
                const endTime = performance.now();
                expect(endTime - startTime).toBeLessThan(100);
            }
        };
    }
};

//# sourceMappingURL=data:application/json;base64,