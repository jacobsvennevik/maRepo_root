{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/components/wizard/shared/__tests__/useMultiSourceManagement.integration.test.tsx"],"sourcesContent":["import { renderHook, act } from '@testing-library/react'\nimport useMultiSourceManagement from '../useMultiSourceManagement'\n\njest.mock('@/lib/axios-api', () => ({ axiosApi: { get: jest.fn(), post: jest.fn() } }))\nconst { axiosApi } = jest.requireMock('@/lib/axios-api') as { axiosApi: { get: jest.Mock, post: jest.Mock } }\n\ndescribe('useMultiSourceManagement - integration', () => {\n  const projectId = '203062be-58d0-4f98-bbd4-33b4ce081276'\n\n  beforeEach(() => {\n    axiosApi.get.mockReset()\n    axiosApi.post.mockReset()\n    process.env.NODE_ENV = 'test'\n  })\n\n  it('calls expected URLs for flashcards/files/study-materials', async () => {\n    axiosApi.get\n      .mockResolvedValueOnce({ data: [] }) // flashcard-decks\n      .mockResolvedValueOnce({ data: [] }) // files\n      .mockResolvedValueOnce({ data: [] }) // study-materials\n\n    renderHook(() => useMultiSourceManagement({ projectId, autoLoad: true }))\n\n    await act(async () => {})\n\n    const calls = axiosApi.get.mock.calls.map((c: any[]) => c[0])\n    expect(calls).toContain(`projects/${projectId}/flashcard-decks/`)\n    expect(calls).toContain(`projects/${projectId}/files/`)\n    expect(calls).toContain(`projects/${projectId}/study-materials/`)\n  })\n\n  it('returns empty arrays on network error in test mode', async () => {\n    const netErr: any = new Error('Network Error')\n    netErr.code = 'ERR_NETWORK'\n    axiosApi.get\n      .mockRejectedValueOnce(netErr)\n      .mockRejectedValueOnce(netErr)\n      .mockRejectedValueOnce(netErr)\n\n    const { result } = renderHook(() => useMultiSourceManagement({ projectId, autoLoad: true }))\n\n    await act(async () => {})\n\n    expect(result.current.flashcards).toEqual([])\n    expect(result.current.files).toEqual([])\n    expect(result.current.studyMaterials).toEqual([])\n  })\n})\n"],"names":["jest","mock","axiosApi","get","fn","post","requireMock","describe","projectId","beforeEach","mockReset","process","env","NODE_ENV","it","mockResolvedValueOnce","data","renderHook","useMultiSourceManagement","autoLoad","act","calls","map","c","expect","toContain","netErr","Error","code","mockRejectedValueOnce","result","current","flashcards","toEqual","files","studyMaterials"],"mappings":";AAGAA,KAAKC,IAAI,CAAC,mBAAmB,IAAO,CAAA;QAAEC,UAAU;YAAEC,KAAKH,KAAKI,EAAE;YAAIC,MAAML,KAAKI,EAAE;QAAG;IAAE,CAAA;;;;uBAHpD;iFACK;;;;;;AAGrC,MAAM,EAAEF,QAAQ,EAAE,GAAGF,KAAKM,WAAW,CAAC;AAEtCC,SAAS,0CAA0C;IACjD,MAAMC,YAAY;IAElBC,WAAW;QACTP,SAASC,GAAG,CAACO,SAAS;QACtBR,SAASG,IAAI,CAACK,SAAS;QACvBC,QAAQC,GAAG,CAACC,QAAQ,GAAG;IACzB;IAEAC,GAAG,4DAA4D;QAC7DZ,SAASC,GAAG,CACTY,qBAAqB,CAAC;YAAEC,MAAM,EAAE;QAAC,GAAG,kBAAkB;SACtDD,qBAAqB,CAAC;YAAEC,MAAM,EAAE;QAAC,GAAG,QAAQ;SAC5CD,qBAAqB,CAAC;YAAEC,MAAM,EAAE;QAAC,GAAG,kBAAkB;;QAEzDC,IAAAA,iBAAU,EAAC,IAAMC,IAAAA,iCAAwB,EAAC;gBAAEV;gBAAWW,UAAU;YAAK;QAEtE,MAAMC,IAAAA,UAAG,EAAC,WAAa;QAEvB,MAAMC,QAAQnB,SAASC,GAAG,CAACF,IAAI,CAACoB,KAAK,CAACC,GAAG,CAAC,CAACC,IAAaA,CAAC,CAAC,EAAE;QAC5DC,OAAOH,OAAOI,SAAS,CAAC,CAAC,SAAS,EAAEjB,UAAU,iBAAiB,CAAC;QAChEgB,OAAOH,OAAOI,SAAS,CAAC,CAAC,SAAS,EAAEjB,UAAU,OAAO,CAAC;QACtDgB,OAAOH,OAAOI,SAAS,CAAC,CAAC,SAAS,EAAEjB,UAAU,iBAAiB,CAAC;IAClE;IAEAM,GAAG,sDAAsD;QACvD,MAAMY,SAAc,IAAIC,MAAM;QAC9BD,OAAOE,IAAI,GAAG;QACd1B,SAASC,GAAG,CACT0B,qBAAqB,CAACH,QACtBG,qBAAqB,CAACH,QACtBG,qBAAqB,CAACH;QAEzB,MAAM,EAAEI,MAAM,EAAE,GAAGb,IAAAA,iBAAU,EAAC,IAAMC,IAAAA,iCAAwB,EAAC;gBAAEV;gBAAWW,UAAU;YAAK;QAEzF,MAAMC,IAAAA,UAAG,EAAC,WAAa;QAEvBI,OAAOM,OAAOC,OAAO,CAACC,UAAU,EAAEC,OAAO,CAAC,EAAE;QAC5CT,OAAOM,OAAOC,OAAO,CAACG,KAAK,EAAED,OAAO,CAAC,EAAE;QACvCT,OAAOM,OAAOC,OAAO,CAACI,cAAc,EAAEF,OAAO,CAAC,EAAE;IAClD;AACF"}