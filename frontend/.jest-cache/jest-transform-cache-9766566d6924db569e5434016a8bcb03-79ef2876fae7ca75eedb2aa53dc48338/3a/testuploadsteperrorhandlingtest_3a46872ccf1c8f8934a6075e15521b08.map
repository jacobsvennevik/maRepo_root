{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/features/projects/components/__tests__/test-upload-step.error-handling.test.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { screen, waitFor } from \"@testing-library/react\";\nimport \"@testing-library/jest-dom\";\nimport { TestUploadStep } from \"../steps/test-upload-step\";\n\n// Import new centralized utilities\nimport {\n  renderWithProviders,\n  setupFullTestEnvironment,\n  testFactories,\n  standardMocks\n} from \"../../../../../src/test-utils\";\n\n// Setup test environment\nconst testEnv = setupFullTestEnvironment();\nconst { createTestFile } = testFactories;\nconst { apiMocks } = standardMocks;\n\ndescribe(\"TestUploadStep - Error Handling\", () => {\n  beforeEach(() => {\n    testEnv.mocks.resetAll();\n  });\n\n  it(\"should handle network errors gracefully\", async () => {\n    // Use centralized API mock\n    apiMocks.mockNetworkError();\n\n    const mockCallbacks = {\n      onUploadComplete: jest.fn(),\n      onAnalysisComplete: jest.fn(),\n      onNext: jest.fn(),\n      onBack: jest.fn()\n    };\n\n    renderWithProviders(<TestUploadStep {...mockCallbacks} />);\n\n    // Create and upload test file\n    const { file } = createTestFile({\n      fileName: 'test.pdf',\n      fileType: 'application/pdf',\n      content: 'test content'\n    });\n\n    const fileInput = screen.getByTestId(\"file-input\");\n    await testEnv.files.createTestFile().simulateFileUpload(fileInput, [file]);\n\n    // In test mode, component uses mock data and doesn't show network errors\n    await waitFor(\n      () => {\n        expect(screen.getByText(\"🤖 Analyzing test content...\")).toBeInTheDocument();\n      },\n      { timeout: 5000 }\n    );\n\n    // The component should be in processing state\n    expect(screen.getByText(\"🤖 Analyzing test content...\")).toBeInTheDocument();\n  });\n\n  it(\"should handle processing errors\", async () => {\n    // Mock upload success but processing error\n    apiMocks.mockFetch\n      .mockResolvedValueOnce({\n        ok: true,\n        status: 200,\n        json: async () => ({ id: 123, status: 'pending' })\n      })\n      .mockResolvedValueOnce({\n        ok: true,\n        status: 200,\n        json: async () => ({ success: true })\n      })\n      .mockResolvedValueOnce({\n        ok: true,\n        status: 200,\n        json: async () => ({\n          id: 123,\n          status: 'error',\n          error_message: 'Processing failed',\n        })\n      });\n\n    const mockCallbacks = {\n      onUploadComplete: jest.fn(),\n      onAnalysisComplete: jest.fn(),\n      onNext: jest.fn(),\n      onBack: jest.fn()\n    };\n\n    renderWithProviders(<TestUploadStep {...mockCallbacks} />);\n\n    // Create and upload test file\n    const { file } = createTestFile({\n      fileName: 'test.pdf',\n      fileType: 'application/pdf',\n      content: 'test content'\n    });\n\n    const fileInput = screen.getByTestId(\"file-input\");\n    await testEnv.files.createTestFile().simulateFileUpload(fileInput, [file]);\n\n    // Wait for automatic analysis to complete (test mode uses mock data)\n    await waitFor(\n      () => {\n        expect(screen.getByText(\"🤖 Analyzing test content...\")).toBeInTheDocument();\n      },\n      { timeout: 5000 }\n    );\n\n    // In test mode, the component uses mock data and doesn't show processing errors\n    expect(screen.getByText(\"🤖 Analyzing test content...\")).toBeInTheDocument();\n  });\n\n  it(\"should handle partial success with multiple files\", async () => {\n    // Mock one successful upload, one failed\n    apiMocks.mockFetch\n      // First file - success sequence\n      .mockResolvedValueOnce({\n        ok: true,\n        status: 200,\n        json: async () => ({ id: 123, status: 'pending' })\n      })\n      .mockResolvedValueOnce({\n        ok: true,\n        status: 200,\n        json: async () => ({ success: true })\n      })\n      .mockResolvedValueOnce({\n        ok: true,\n        status: 200,\n        json: async () => ({\n          id: 123,\n          status: 'completed',\n          original_text: 'Test content processed',\n          processed_data: { test_type: 'Exam', topics_covered: [] },\n        })\n      })\n      // Second file - fail upload immediately\n      .mockResolvedValueOnce({\n        ok: false,\n        status: 400,\n        statusText: 'Bad Request',\n        text: async () => 'Upload failed',\n      });\n\n    const mockCallbacks = {\n      onUploadComplete: jest.fn(),\n      onAnalysisComplete: jest.fn(),\n      onNext: jest.fn(),\n      onBack: jest.fn()\n    };\n\n    renderWithProviders(<TestUploadStep {...mockCallbacks} />);\n\n    // Upload multiple files\n    const testFiles = [\n      createTestFile({ fileName: 'success.pdf', content: 'success content' }),\n      createTestFile({ fileName: 'fail.pdf', content: 'fail content' })\n    ].map(({ file }) => file);\n\n    const fileInput = screen.getByTestId(\"file-input\");\n    await testEnv.files.createTestFile().simulateFileUpload(fileInput, testFiles);\n\n    // Wait for automatic analysis to complete (test mode uses mock data)\n    await waitFor(\n      () => {\n        expect(screen.getByText(\"🤖 Analyzing test content...\")).toBeInTheDocument();\n      },\n      { timeout: 5000 }\n    );\n\n    // In test mode, the component uses mock data and doesn't show partial success errors\n    expect(screen.getByText(\"🤖 Analyzing test content...\")).toBeInTheDocument();\n  });\n\n  it(\"should handle API timeout\", async () => {\n    // Use centralized timeout mock\n    apiMocks.mockTimeout(100);\n\n    const mockCallbacks = {\n      onUploadComplete: jest.fn(),\n      onAnalysisComplete: jest.fn(),\n      onNext: jest.fn(),\n      onBack: jest.fn()\n    };\n\n    renderWithProviders(<TestUploadStep {...mockCallbacks} />);\n\n    // Create and upload test file\n    const { file } = createTestFile({\n      fileName: 'test.pdf',\n      fileType: 'application/pdf',\n      content: 'test content'\n    });\n\n    const fileInput = screen.getByTestId(\"file-input\");\n    await testEnv.files.createTestFile().simulateFileUpload(fileInput, [file]);\n\n    // Component should handle timeout gracefully\n    await waitFor(\n      () => {\n        expect(screen.getByText(\"🤖 Analyzing test content...\")).toBeInTheDocument();\n      },\n      { timeout: 5000 }\n    );\n  });\n});\n"],"names":["testEnv","setupFullTestEnvironment","createTestFile","testFactories","apiMocks","standardMocks","describe","beforeEach","mocks","resetAll","it","mockNetworkError","mockCallbacks","onUploadComplete","jest","fn","onAnalysisComplete","onNext","onBack","renderWithProviders","TestUploadStep","file","fileName","fileType","content","fileInput","screen","getByTestId","files","simulateFileUpload","waitFor","expect","getByText","toBeInTheDocument","timeout","mockFetch","mockResolvedValueOnce","ok","status","json","id","success","error_message","original_text","processed_data","test_type","topics_covered","statusText","text","testFiles","map","mockTimeout"],"mappings":"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"}