29d8768f5df7c0cdca6f93e2c0f04ae6
// Data transformation utilities for flashcard hooks
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    calculateFlashcardStats: function() {
        return calculateFlashcardStats;
    },
    refreshFlashcardSets: function() {
        return refreshFlashcardSets;
    },
    unwrapFlashcardSets: function() {
        return unwrapFlashcardSets;
    }
});
const _axios = require("../../../../../lib/axios");
function unwrapFlashcardSets(payload) {
    return Array.isArray(payload) ? payload : Array.isArray(payload?.results) ? payload.results : [];
}
async function refreshFlashcardSets(projectId) {
    const response = await _axios.axiosGeneration.get(`projects/${projectId}/flashcard-sets/`);
    return unwrapFlashcardSets(response.data);
}
function calculateFlashcardStats(sets) {
    const totalCards = sets.reduce((sum, set)=>sum + set.total_cards, 0);
    const dueToday = sets.reduce((sum, set)=>sum + set.due_cards, 0);
    const learningCards = sets.reduce((sum, set)=>sum + set.learning_cards, 0);
    const reviewCards = sets.reduce((sum, set)=>sum + set.review_cards, 0);
    const avgAccuracy = sets.length > 0 ? sets.reduce((sum, set)=>sum + set.average_accuracy, 0) / sets.length : 0;
    return {
        total_sets: sets.length,
        total_cards: totalCards,
        due_today: dueToday,
        learning_cards: learningCards,
        mastered_cards: reviewCards,
        average_accuracy: avgAccuracy
    };
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9qYWNvYmhvcm5zdmVubmV2aWsvRG9jdW1lbnRzL0dpdEh1Yi9tYVJlcG9fcm9vdC9mcm9udGVuZC9zcmMvYXBwL3Byb2plY3RzL1twcm9qZWN0SWRdL2ZsYXNoY2FyZHMvdXRpbHMvZGF0YS10cmFuc2Zvcm1hdGlvbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBEYXRhIHRyYW5zZm9ybWF0aW9uIHV0aWxpdGllcyBmb3IgZmxhc2hjYXJkIGhvb2tzXG5pbXBvcnQgeyBheGlvc0dlbmVyYXRpb24gfSBmcm9tIFwiQC9saWIvYXhpb3NcIjtcbmltcG9ydCB0eXBlIHsgUGFnaW5hdGVkIH0gZnJvbSBcIkAvbGliL2FwaS9wYWdpbmF0aW9uXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRmxhc2hjYXJkU2V0QXBpIHtcbiAgaWQ6IG51bWJlcjtcbiAgdGl0bGU6IHN0cmluZztcbiAgdG90YWxfY2FyZHM6IG51bWJlcjtcbiAgZHVlX2NhcmRzOiBudW1iZXI7XG4gIGxlYXJuaW5nX2NhcmRzOiBudW1iZXI7XG4gIHJldmlld19jYXJkczogbnVtYmVyO1xuICBuZXdfY2FyZHM6IG51bWJlcjtcbiAgYXZlcmFnZV9hY2N1cmFjeTogbnVtYmVyO1xuICBjcmVhdGVkX2F0OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1bndyYXBGbGFzaGNhcmRTZXRzKHBheWxvYWQ6IGFueSk6IEZsYXNoY2FyZFNldEFwaVtdIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkocGF5bG9hZClcbiAgICA/IHBheWxvYWRcbiAgICA6IEFycmF5LmlzQXJyYXkocGF5bG9hZD8ucmVzdWx0cylcbiAgICA/IHBheWxvYWQucmVzdWx0c1xuICAgIDogW107XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZWZyZXNoRmxhc2hjYXJkU2V0cyhwcm9qZWN0SWQ6IHN0cmluZyk6IFByb21pc2U8Rmxhc2hjYXJkU2V0QXBpW10+IHtcbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvc0dlbmVyYXRpb24uZ2V0PEZsYXNoY2FyZFNldEFwaVtdIHwgUGFnaW5hdGVkPEZsYXNoY2FyZFNldEFwaT4+KFxuICAgIGBwcm9qZWN0cy8ke3Byb2plY3RJZH0vZmxhc2hjYXJkLXNldHMvYFxuICApO1xuICByZXR1cm4gdW53cmFwRmxhc2hjYXJkU2V0cyhyZXNwb25zZS5kYXRhKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhbGN1bGF0ZUZsYXNoY2FyZFN0YXRzKHNldHM6IEZsYXNoY2FyZFNldEFwaVtdKSB7XG4gIGNvbnN0IHRvdGFsQ2FyZHMgPSBzZXRzLnJlZHVjZSgoc3VtLCBzZXQpID0+IHN1bSArIHNldC50b3RhbF9jYXJkcywgMCk7XG4gIGNvbnN0IGR1ZVRvZGF5ID0gc2V0cy5yZWR1Y2UoKHN1bSwgc2V0KSA9PiBzdW0gKyBzZXQuZHVlX2NhcmRzLCAwKTtcbiAgY29uc3QgbGVhcm5pbmdDYXJkcyA9IHNldHMucmVkdWNlKChzdW0sIHNldCkgPT4gc3VtICsgc2V0LmxlYXJuaW5nX2NhcmRzLCAwKTtcbiAgY29uc3QgcmV2aWV3Q2FyZHMgPSBzZXRzLnJlZHVjZSgoc3VtLCBzZXQpID0+IHN1bSArIHNldC5yZXZpZXdfY2FyZHMsIDApO1xuICBjb25zdCBhdmdBY2N1cmFjeSA9IHNldHMubGVuZ3RoID4gMFxuICAgID8gc2V0cy5yZWR1Y2UoKHN1bSwgc2V0KSA9PiBzdW0gKyBzZXQuYXZlcmFnZV9hY2N1cmFjeSwgMCkgLyBzZXRzLmxlbmd0aFxuICAgIDogMDtcblxuICByZXR1cm4ge1xuICAgIHRvdGFsX3NldHM6IHNldHMubGVuZ3RoLFxuICAgIHRvdGFsX2NhcmRzOiB0b3RhbENhcmRzLFxuICAgIGR1ZV90b2RheTogZHVlVG9kYXksXG4gICAgbGVhcm5pbmdfY2FyZHM6IGxlYXJuaW5nQ2FyZHMsXG4gICAgbWFzdGVyZWRfY2FyZHM6IHJldmlld0NhcmRzLFxuICAgIGF2ZXJhZ2VfYWNjdXJhY3k6IGF2Z0FjY3VyYWN5LFxuICB9O1xufVxuIl0sIm5hbWVzIjpbImNhbGN1bGF0ZUZsYXNoY2FyZFN0YXRzIiwicmVmcmVzaEZsYXNoY2FyZFNldHMiLCJ1bndyYXBGbGFzaGNhcmRTZXRzIiwicGF5bG9hZCIsIkFycmF5IiwiaXNBcnJheSIsInJlc3VsdHMiLCJwcm9qZWN0SWQiLCJyZXNwb25zZSIsImF4aW9zR2VuZXJhdGlvbiIsImdldCIsImRhdGEiLCJzZXRzIiwidG90YWxDYXJkcyIsInJlZHVjZSIsInN1bSIsInNldCIsInRvdGFsX2NhcmRzIiwiZHVlVG9kYXkiLCJkdWVfY2FyZHMiLCJsZWFybmluZ0NhcmRzIiwibGVhcm5pbmdfY2FyZHMiLCJyZXZpZXdDYXJkcyIsInJldmlld19jYXJkcyIsImF2Z0FjY3VyYWN5IiwibGVuZ3RoIiwiYXZlcmFnZV9hY2N1cmFjeSIsInRvdGFsX3NldHMiLCJkdWVfdG9kYXkiLCJtYXN0ZXJlZF9jYXJkcyJdLCJtYXBwaW5ncyI6IkFBQUEsb0RBQW9EOzs7Ozs7Ozs7Ozs7SUErQnBDQSx1QkFBdUI7ZUFBdkJBOztJQVBNQyxvQkFBb0I7ZUFBcEJBOztJQVJOQyxtQkFBbUI7ZUFBbkJBOzs7dUJBZmdCO0FBZXpCLFNBQVNBLG9CQUFvQkMsT0FBWTtJQUM5QyxPQUFPQyxNQUFNQyxPQUFPLENBQUNGLFdBQ2pCQSxVQUNBQyxNQUFNQyxPQUFPLENBQUNGLFNBQVNHLFdBQ3ZCSCxRQUFRRyxPQUFPLEdBQ2YsRUFBRTtBQUNSO0FBRU8sZUFBZUwscUJBQXFCTSxTQUFpQjtJQUMxRCxNQUFNQyxXQUFXLE1BQU1DLHNCQUFlLENBQUNDLEdBQUcsQ0FDeEMsQ0FBQyxTQUFTLEVBQUVILFVBQVUsZ0JBQWdCLENBQUM7SUFFekMsT0FBT0wsb0JBQW9CTSxTQUFTRyxJQUFJO0FBQzFDO0FBRU8sU0FBU1gsd0JBQXdCWSxJQUF1QjtJQUM3RCxNQUFNQyxhQUFhRCxLQUFLRSxNQUFNLENBQUMsQ0FBQ0MsS0FBS0MsTUFBUUQsTUFBTUMsSUFBSUMsV0FBVyxFQUFFO0lBQ3BFLE1BQU1DLFdBQVdOLEtBQUtFLE1BQU0sQ0FBQyxDQUFDQyxLQUFLQyxNQUFRRCxNQUFNQyxJQUFJRyxTQUFTLEVBQUU7SUFDaEUsTUFBTUMsZ0JBQWdCUixLQUFLRSxNQUFNLENBQUMsQ0FBQ0MsS0FBS0MsTUFBUUQsTUFBTUMsSUFBSUssY0FBYyxFQUFFO0lBQzFFLE1BQU1DLGNBQWNWLEtBQUtFLE1BQU0sQ0FBQyxDQUFDQyxLQUFLQyxNQUFRRCxNQUFNQyxJQUFJTyxZQUFZLEVBQUU7SUFDdEUsTUFBTUMsY0FBY1osS0FBS2EsTUFBTSxHQUFHLElBQzlCYixLQUFLRSxNQUFNLENBQUMsQ0FBQ0MsS0FBS0MsTUFBUUQsTUFBTUMsSUFBSVUsZ0JBQWdCLEVBQUUsS0FBS2QsS0FBS2EsTUFBTSxHQUN0RTtJQUVKLE9BQU87UUFDTEUsWUFBWWYsS0FBS2EsTUFBTTtRQUN2QlIsYUFBYUo7UUFDYmUsV0FBV1Y7UUFDWEcsZ0JBQWdCRDtRQUNoQlMsZ0JBQWdCUDtRQUNoQkksa0JBQWtCRjtJQUNwQjtBQUNGIn0=