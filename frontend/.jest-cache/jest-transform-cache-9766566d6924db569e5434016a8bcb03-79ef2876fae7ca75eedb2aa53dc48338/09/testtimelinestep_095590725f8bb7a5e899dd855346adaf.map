{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/features/projects/components/steps/test-timeline-step.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useRef, useCallback, useEffect } from 'react';\nimport { Label } from \"@/components/ui/label\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Upload, FileText, HelpCircle, CalendarDays, Plus, X, Loader2 } from \"lucide-react\";\nimport dynamic from 'next/dynamic';\nimport { AIPreview, AILoading } from \"../ai\";\nimport { analyzeUploadedFiles, DetectedDate } from \"../../services/ai-analysis\";\n\nconst ReactCalendar = dynamic(() => import('react-calendar'), { \n  ssr: false,\n  loading: () => <div className=\"w-full h-64 bg-gray-100 rounded-lg animate-pulse flex items-center justify-center\">Loading calendar...</div>\n});\n\ninterface ImportantDate {\n  date: string;\n  description: string;\n  type: string;\n}\n\ninterface DateTypeOption {\n  value: string;\n  label: string;\n  color: string;\n}\n\ninterface TestTimelineStepProps {\n  testFiles: File[];\n  importantDates: ImportantDate[];\n  onTestFilesChange: (files: File[]) => void;\n  onTestFileRemove: (index: number) => void;\n  onAddDate: () => void;\n  onRemoveDate: (index: number) => void;\n  onApplyAITopics: (topics: string[]) => void;\n  onApplyAIDates: (dates: DetectedDate[]) => void;\n  onApplyAITestTypes: (types: string[]) => void;\n  onApplyAIRecommendations: (recommendations: any[]) => void;\n  dateTypeOptions: DateTypeOption[];\n}\n\nexport function TestTimelineStep({\n  testFiles,\n  importantDates,\n  onTestFilesChange,\n  onTestFileRemove,\n  onAddDate,\n  onRemoveDate,\n  onApplyAITopics,\n  onApplyAIDates,\n  onApplyAITestTypes,\n  onApplyAIRecommendations,\n  dateTypeOptions\n}: TestTimelineStepProps) {\n  const [isTestDragOver, setIsTestDragOver] = useState(false);\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n  const [showAIPreview, setShowAIPreview] = useState(false);\n  const [aiResults, setAiResults] = useState<{\n    topics: any[];\n    dates: any[];\n    testTypes: any[];\n  }>({ topics: [], dates: [], testTypes: [] });\n  const [newDate, setNewDate] = useState({ date: '', description: '', type: 'exam' });\n  const testFileInputRef = useRef<HTMLInputElement>(null);\n\n  // Trigger AI analysis when test files are uploaded\n  useEffect(() => {\n    if (testFiles.length > 0 && !isAnalyzing && !showAIPreview) {\n      analyzeTestFiles();\n    }\n  }, [testFiles]);\n\n  const analyzeTestFiles = async () => {\n    if (testFiles.length === 0) return;\n    \n    setIsAnalyzing(true);\n    try {\n      const results = await analyzeUploadedFiles(testFiles);\n      setAiResults(results);\n      setShowAIPreview(true);\n    } catch (error) {\n      console.error('AI analysis failed:', error);\n    } finally {\n      setIsAnalyzing(false);\n    }\n  };\n\n  const handleTestDragOver = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    setIsTestDragOver(true);\n  }, []);\n\n  const handleTestDragLeave = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    setIsTestDragOver(false);\n  }, []);\n\n  const handleTestDrop = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    setIsTestDragOver(false);\n    const droppedFiles = Array.from(e.dataTransfer.files);\n    onTestFilesChange([...testFiles, ...droppedFiles]);\n  }, [testFiles, onTestFilesChange]);\n\n  const handleTestFileSelect = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const selectedFiles = Array.from(e.target.files || []);\n    onTestFilesChange([...testFiles, ...selectedFiles]);\n  }, [testFiles, onTestFilesChange]);\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('en-US', { \n      weekday: 'short', \n      year: 'numeric', \n      month: 'short', \n      day: 'numeric' \n    });\n  };\n\n  const getDateTypeLabel = (value: string) => {\n    return dateTypeOptions.find(opt => opt.value === value)?.label || value;\n  };\n\n  const getDateTypeColor = (value: string) => {\n    return dateTypeOptions.find(opt => opt.value === value)?.color || 'bg-gray-100 text-gray-800';\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <Tabs defaultValue=\"tests\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"tests\" className=\"flex items-center gap-2\">\n            <FileText className=\"h-4 w-4\" />\n            Previous Tests\n          </TabsTrigger>\n          <TabsTrigger value=\"timeline\" className=\"flex items-center gap-2\">\n            <CalendarDays className=\"h-4 w-4\" />\n            Important Dates\n          </TabsTrigger>\n        </TabsList>\n\n        {/* Test Upload Tab */}\n        <TabsContent value=\"tests\" className=\"space-y-4\">\n          <div className=\"space-y-4\">\n            <Label className=\"text-sm sm:text-base font-medium\">\n              Upload Previous Tests/Exams\n            </Label>\n            <div\n              className={`border-2 border-dashed rounded-lg p-6 text-center transition-all duration-300 ${\n                isTestDragOver \n                  ? 'border-blue-400 bg-blue-50/50 scale-105' \n                  : 'border-gray-300 hover:border-blue-300 hover:bg-gray-50/50'\n              }`}\n              onDragOver={handleTestDragOver}\n              onDragLeave={handleTestDragLeave}\n              onDrop={handleTestDrop}\n            >\n              <div className=\"space-y-3\">\n                <div className=\"mx-auto w-12 h-12 bg-gradient-to-r from-purple-400 to-pink-600 rounded-full flex items-center justify-center\">\n                  <Upload className=\"h-6 w-6 text-white\" />\n                </div>\n                <div>\n                  <h4 className=\"text-base font-semibold text-slate-900 mb-2\">\n                    {isTestDragOver ? 'Drop your test files here!' : 'Upload previous tests and exams'}\n                  </h4>\n                  <p className=\"text-slate-600 mb-3\">\n                    Upload previous exams, quizzes, practice tests, or sample questions to help with preparation.\n                  </p>\n                  <p className=\"text-xs text-gray-500 mb-3\">\n                    Supported formats: PDF, DOCX, PPTX, TXT, PNG, JPG\n                  </p>\n                  <Button \n                    variant=\"outline\" \n                    onClick={() => testFileInputRef.current?.click()}\n                    className=\"border-purple-200 text-purple-600 hover:bg-purple-50\"\n                  >\n                    Browse test files\n                  </Button>\n                </div>\n              </div>\n            </div>\n\n            {/* Hidden test file input */}\n            <input\n              ref={testFileInputRef}\n              type=\"file\"\n              multiple\n              className=\"hidden\"\n              onChange={handleTestFileSelect}\n              accept=\".pdf,.docx,.pptx,.txt,.png,.jpg,.jpeg\"\n            />\n\n            {/* Uploaded Test Files List */}\n            {testFiles.length > 0 && (\n              <div className=\"space-y-3\">\n                <h4 className=\"font-medium text-slate-900\">Test Documents ({testFiles.length})</h4>\n                <div className=\"space-y-2 max-h-40 overflow-y-auto\">\n                  {testFiles.map((file, index) => (\n                    <div key={index} className=\"flex items-center justify-between p-3 bg-purple-50 border border-purple-200 rounded-lg\">\n                      <div className=\"flex items-center space-x-3\">\n                        <FileText className=\"h-5 w-5 text-purple-600\" />\n                        <div>\n                          <p className=\"text-sm font-medium text-slate-900\">{file.name}</p>\n                          <p className=\"text-xs text-gray-500\">{formatFileSize(file.size)}</p>\n                        </div>\n                      </div>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => onTestFileRemove(index)}\n                        className=\"text-red-500 hover:text-red-700 hover:bg-red-50\"\n                      >\n                        Remove\n                      </Button>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {/* AI Analysis Loading */}\n            {isAnalyzing && (\n              <AILoading \n                message=\"Analyzing your test files...\"\n                subMessage=\"Extracting question types, difficulty patterns, and key topics\"\n                variant=\"purple\"\n              />\n            )}\n\n            {/* AI Preview */}\n            {showAIPreview && (\n              <AIPreview\n                detectedTopics={aiResults.topics}\n                detectedDates={aiResults.dates}\n                detectedTestTypes={aiResults.testTypes}\n                onApplyTopics={onApplyAITopics}\n                onApplyDates={onApplyAIDates}\n                onApplyTestTypes={onApplyAITestTypes}\n                onApplyRecommendations={onApplyAIRecommendations}\n                onDismiss={() => setShowAIPreview(false)}\n              />\n            )}\n\n            <div className=\"text-xs sm:text-sm text-gray-600 bg-purple-50 p-3 rounded-lg border border-purple-200\">\n              <HelpCircle className=\"inline h-4 w-4 mr-1 text-purple-600\" />\n              <span className=\"text-purple-800\">\n                <strong>AI Enhancement:</strong> Uploading previous tests helps our AI understand the format, difficulty level, \n                and question types you'll encounter, enabling better study recommendations!\n              </span>\n            </div>\n          </div>\n        </TabsContent>\n\n        {/* Important Dates Tab */}\n        <TabsContent value=\"timeline\" className=\"space-y-4\">\n          <div className=\"space-y-4\">\n            <Label className=\"text-sm sm:text-base font-medium\">Schedule your important dates</Label>\n            <p className=\"text-sm text-gray-600\">Add key dates like exams, assignments, and deadlines</p>\n\n            {/* Add New Date Form */}\n            <div className=\"space-y-3 p-4 bg-gray-50 rounded-lg border\">\n              <h4 className=\"font-medium text-slate-900\">Add New Date</h4>\n              <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-3\">\n                <div>\n                  <Label className=\"text-xs font-medium\">Date</Label>\n                  <Input\n                    type=\"date\"\n                    value={newDate.date}\n                    onChange={(e) => setNewDate(prev => ({ ...prev, date: e.target.value }))}\n                    className=\"text-sm\"\n                  />\n                </div>\n                <div>\n                  <Label className=\"text-xs font-medium\">Type</Label>\n                  <select\n                    value={newDate.type}\n                    onChange={(e) => setNewDate(prev => ({ ...prev, type: e.target.value }))}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  >\n                    {dateTypeOptions.map((option) => (\n                      <option key={option.value} value={option.value}>\n                        {option.label}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n                <div>\n                  <Label className=\"text-xs font-medium\">Description</Label>\n                  <Input\n                    placeholder=\"e.g., Midterm Exam\"\n                    value={newDate.description}\n                    onChange={(e) => setNewDate(prev => ({ ...prev, description: e.target.value }))}\n                    className=\"text-sm\"\n                  />\n                </div>\n              </div>\n              <Button \n                onClick={onAddDate}\n                disabled={!newDate.date || !newDate.description}\n                className=\"w-full sm:w-auto\"\n              >\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Date\n              </Button>\n            </div>\n\n            {/* Important Dates List */}\n            {importantDates.length > 0 && (\n              <div className=\"space-y-3\">\n                <h4 className=\"font-medium text-slate-900\">Important Dates ({importantDates.length})</h4>\n                <div className=\"space-y-2 max-h-60 overflow-y-auto\">\n                  {importantDates.map((date, index) => (\n                    <div key={index} className=\"flex items-center justify-between p-3 bg-white border border-gray-200 rounded-lg shadow-sm\">\n                      <div className=\"flex items-center space-x-3\">\n                        <CalendarDays className=\"h-5 w-5 text-blue-600\" />\n                        <div>\n                          <p className=\"text-sm font-medium text-slate-900\">{formatDate(date.date)}</p>\n                          <p className=\"text-sm text-gray-600\">{date.description}</p>\n                        </div>\n                        <Badge className={`text-xs ${getDateTypeColor(date.type)}`}>\n                          {getDateTypeLabel(date.type)}\n                        </Badge>\n                      </div>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => onRemoveDate(index)}\n                        className=\"text-red-500 hover:text-red-700 hover:bg-red-50\"\n                      >\n                        <X className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {importantDates.length === 0 && (\n              <div className=\"text-center py-8 text-gray-500\">\n                <CalendarDays className=\"h-12 w-12 mx-auto mb-3 text-gray-300\" />\n                <p>No important dates added yet</p>\n                <p className=\"text-sm\">Add your first date above to get started</p>\n              </div>\n            )}\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n"],"names":["TestTimelineStep","ReactCalendar","dynamic","ssr","loading","div","className","testFiles","importantDates","onTestFilesChange","onTestFileRemove","onAddDate","onRemoveDate","onApplyAITopics","onApplyAIDates","onApplyAITestTypes","onApplyAIRecommendations","dateTypeOptions","isTestDragOver","setIsTestDragOver","useState","isAnalyzing","setIsAnalyzing","showAIPreview","setShowAIPreview","aiResults","setAiResults","topics","dates","testTypes","newDate","setNewDate","date","description","type","testFileInputRef","useRef","useEffect","length","analyzeTestFiles","results","analyzeUploadedFiles","error","console","handleTestDragOver","useCallback","e","preventDefault","handleTestDragLeave","handleTestDrop","droppedFiles","Array","from","dataTransfer","files","handleTestFileSelect","selectedFiles","target","formatFileSize","bytes","k","sizes","i","Math","floor","log","parseFloat","pow","toFixed","formatDate","dateString","Date","toLocaleDateString","weekday","year","month","day","getDateTypeLabel","value","find","opt","label","getDateTypeColor","color","Tabs","defaultValue","TabsList","TabsTrigger","FileText","CalendarDays","TabsContent","Label","onDragOver","onDragLeave","onDrop","Upload","h4","p","Button","variant","onClick","current","click","input","ref","multiple","onChange","accept","map","file","index","name","size","AILoading","message","subMessage","AIPreview","detectedTopics","detectedDates","detectedTestTypes","onApplyTopics","onApplyDates","onApplyTestTypes","onApplyRecommendations","onDismiss","HelpCircle","span","strong","Input","prev","select","option","placeholder","disabled","Plus","Badge","X"],"mappings":"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"}