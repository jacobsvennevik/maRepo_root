b05f9268bbaa7d88f08c114abc979435
// Shared test utilities for upload step tests
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    createAPIErrorMock: function() {
        return createAPIErrorMock;
    },
    createAPIServiceMock: function() {
        return createAPIServiceMock;
    },
    createFileUploadMock: function() {
        return createFileUploadMock;
    },
    createMockFetch: function() {
        return createMockFetch;
    },
    createNavigationMock: function() {
        return createNavigationMock;
    },
    createUIComponentMocks: function() {
        return createUIComponentMocks;
    },
    createUploadFailureMock: function() {
        return createUploadFailureMock;
    },
    createUploadProgressMock: function() {
        return createUploadProgressMock;
    },
    createUploadTestSetup: function() {
        return createUploadTestSetup;
    },
    expectTestModeBanner: function() {
        return expectTestModeBanner;
    },
    expectUploadComplete: function() {
        return expectUploadComplete;
    },
    mockProcessEnv: function() {
        return mockProcessEnv;
    },
    mockWindow: function() {
        return mockWindow;
    },
    setupTestCleanup: function() {
        return setupTestCleanup;
    }
});
const _globals = require("@jest/globals");
require("@testing-library/jest-dom");
const mockProcessEnv = (isTestMode)=>{
    const originalEnv = process.env;
    process.env = {
        ...originalEnv,
        NODE_ENV: isTestMode ? 'development' : 'production',
        NEXT_PUBLIC_TEST_MODE: isTestMode ? 'true' : 'false'
    };
    return originalEnv;
};
const mockWindow = (isTestMode)=>{
    Object.defineProperty(window, 'location', {
        value: {
            hostname: isTestMode ? 'localhost' : 'production.app'
        },
        writable: true
    });
};
const createAPIErrorMock = ()=>{
    return _globals.jest.fn().mockImplementation((...args)=>{
        const message = args[0];
        const status = args[1];
        const error = new Error(message);
        error.status = status;
        error.statusCode = status;
        return error;
    });
};
const createAPIServiceMock = ()=>({
        uploadFileWithProgress: _globals.jest.fn(),
        APIError: createAPIErrorMock(),
        createProject: _globals.jest.fn()
    });
const createFileUploadMock = ()=>{
    const React = require('react');
    return {
        FileUpload: ({ onUpload, onRemove, files, uploadProgress, title, description, accept, error })=>React.createElement('div', {
                'data-testid': 'file-upload'
            }, React.createElement('h3', null, title), React.createElement('p', null, description), React.createElement('div', {
                'data-testid': 'accepted-types'
            }, accept), error && React.createElement('div', {
                'data-testid': 'error-message',
                className: 'bg-red-50 border border-red-200 rounded-lg p-3'
            }, React.createElement('div', {
                className: 'flex items-center space-x-2'
            }, React.createElement('span', {
                className: 'text-red-600 text-sm'
            }, '⚠️'), React.createElement('span', {
                className: 'text-red-800 text-sm font-medium'
            }, error))), React.createElement('input', {
                type: 'file',
                'data-testid': 'file-input',
                onChange: (e)=>{
                    if (e.target.files) {
                        onUpload(Array.from(e.target.files));
                    }
                },
                multiple: true,
                accept: accept
            }), React.createElement('div', {
                'data-testid': 'file-list'
            }, (files || []).map((file, index)=>React.createElement('div', {
                    key: file.name,
                    'data-testid': `file-item-${file.name}`
                }, React.createElement('span', {
                    'data-testid': `filename-${file.name}`
                }, file.name), React.createElement('button', {
                    'data-testid': `remove-${file.name}`,
                    onClick: ()=>onRemove(file)
                }, 'Remove'), (uploadProgress || {})[file.name] && React.createElement('div', {
                    'data-testid': `progress-${file.name}`
                }, (uploadProgress || {})[file.name] + '%')))))
    };
};
const createNavigationMock = ()=>({
        useRouter: ()=>({
                push: _globals.jest.fn(),
                back: _globals.jest.fn(),
                forward: _globals.jest.fn(),
                refresh: _globals.jest.fn(),
                replace: _globals.jest.fn()
            })
    });
const createUIComponentMocks = ()=>{
    const React = require('react');
    return {
        Card: ({ children, className })=>React.createElement('div', {
                className,
                'data-testid': 'card'
            }, children),
        CardHeader: ({ children, className, onClick })=>React.createElement('div', {
                className,
                onClick,
                'data-testid': 'card-header'
            }, children),
        CardContent: ({ children, className })=>React.createElement('div', {
                className,
                'data-testid': 'card-content'
            }, children),
        CardTitle: ({ children, className })=>React.createElement('div', {
                className,
                'data-testid': 'card-title'
            }, children),
        Button: ({ children, onClick, className, variant, size, disabled })=>React.createElement('button', {
                onClick,
                className,
                disabled,
                'data-testid': `button-${variant || 'default'}-${size || 'default'}`
            }, children)
    };
};
const setupTestCleanup = (mocks = [])=>{
    beforeEach(()=>{
        _globals.jest.clearAllMocks();
        mocks.forEach((mock)=>{
            if (mock && typeof mock.mockClear === "function") {
                mock.mockClear();
            }
        });
    });
};
const createMockFetch = ()=>{
    const mockFetch = _globals.jest.fn();
    global.fetch = mockFetch;
    return mockFetch;
};
const createUploadTestSetup = (options = {})=>{
    const { timeout = 30000, includeNavigation = true, includeUIComponents = false } = options;
    // Set jest timeout
    _globals.jest.setTimeout(timeout);
    // Create mocks
    const mocks = {
        onUploadComplete: _globals.jest.fn(),
        onAnalysisComplete: _globals.jest.fn(),
        onNext: _globals.jest.fn(),
        onBack: _globals.jest.fn(),
        originalEnv: process.env
    };
    const createBeforeEach = (isTestMode)=>()=>{
            // Reset mocks
            Object.values(mocks).forEach((mock)=>{
                if (typeof mock === 'function' && mock.mockReset) {
                    mock.mockReset();
                }
            });
            _globals.jest.clearAllMocks();
            // Setup environment
            mockProcessEnv(isTestMode);
            mockWindow(isTestMode);
            // Setup localStorage
            Object.defineProperty(window, 'localStorage', {
                value: {
                    getItem: _globals.jest.fn(),
                    setItem: _globals.jest.fn(),
                    removeItem: _globals.jest.fn(),
                    clear: _globals.jest.fn()
                }
            });
        };
    const createAfterEach = ()=>()=>{
            process.env = mocks.originalEnv;
        };
    return {
        mocks,
        createBeforeEach,
        createAfterEach
    };
};
const createUploadProgressMock = (responses, progressSteps = [
    0,
    50,
    100
])=>{
    return _globals.jest.fn().mockImplementation(async (...args)=>{
        const file = args[0];
        const onProgress = args[1];
        // Simulate progress
        for (const step of progressSteps){
            onProgress(step);
            await new Promise((resolve)=>setTimeout(resolve, 50));
        }
        // Find matching response based on filename
        const response = responses.find((r)=>r.metadata?.source_file === file.name || responses.length === 1) || responses[0];
        return response;
    });
};
const createUploadFailureMock = (errorMessage, delay = 100)=>{
    return _globals.jest.fn().mockImplementation(async (...args)=>{
        const file = args[0];
        const onProgress = args[1];
        onProgress(0);
        await new Promise((resolve)=>setTimeout(resolve, delay));
        onProgress(50);
        await new Promise((resolve)=>setTimeout(resolve, delay));
        throw new Error(errorMessage);
    });
};
const expectUploadComplete = (mockFn, expectedFiles, expectedMetadata)=>{
    (0, _globals.expect)(mockFn).toHaveBeenCalledWith(_globals.expect.arrayContaining(expectedFiles.map((fileName)=>_globals.expect.objectContaining({
            metadata: _globals.expect.objectContaining({
                source_file: fileName,
                ...expectedMetadata
            })
        }))), expectedFiles);
};
const expectTestModeBanner = (shouldExist = true)=>{
    const banner = document.querySelector('[data-testid="test-mode-banner"]');
    if (shouldExist) {
        (0, _globals.expect)(banner).not.toBeNull();
        (0, _globals.expect)(banner?.textContent).toMatch(/Test Mode Active/i);
    } else {
        (0, _globals.expect)(banner).toBeNull();
    }
};

//# sourceMappingURL=data:application/json;base64,