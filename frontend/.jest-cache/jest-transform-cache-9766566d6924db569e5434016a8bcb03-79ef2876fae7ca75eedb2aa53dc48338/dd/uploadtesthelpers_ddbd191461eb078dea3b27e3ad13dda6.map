{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/test-utils/upload-test-helpers.tsx"],"sourcesContent":["// Shared test utilities for upload step tests\nimport { jest, expect } from '@jest/globals';\nimport '@testing-library/jest-dom';\n\n/**\n * Environment setup utilities\n */\nexport const mockProcessEnv = (isTestMode: boolean) => {\n  const originalEnv = process.env;\n  process.env = {\n    ...originalEnv,\n    NODE_ENV: isTestMode ? 'development' : 'production',\n    NEXT_PUBLIC_TEST_MODE: isTestMode ? 'true' : 'false'\n  };\n  return originalEnv;\n};\n\nexport const mockWindow = (isTestMode: boolean) => {\n  Object.defineProperty(window, 'location', {\n    value: {\n      hostname: isTestMode ? 'localhost' : 'production.app'\n    },\n    writable: true\n  });\n};\n\n/**\n * API mocking utilities\n */\nexport const createAPIErrorMock = () => {\n  return jest.fn().mockImplementation((...args: unknown[]) => {\n    const message = args[0] as string;\n    const status = args[1] as number;\n    const error = new Error(message) as Error & { status: number; statusCode: number };\n    error.status = status;\n    error.statusCode = status;\n    return error;\n  });\n};\n\nexport const createAPIServiceMock = () => ({\n  uploadFileWithProgress: jest.fn(),\n  APIError: createAPIErrorMock(),\n  createProject: jest.fn()\n});\n\n/**\n * Component mocking utilities\n */\nexport const createFileUploadMock = () => {\n  const React = require('react');\n  return {\n    FileUpload: ({ onUpload, onRemove, files, uploadProgress, title, description, accept, error }: any) => \n      React.createElement('div', { 'data-testid': 'file-upload' },\n        React.createElement('h3', null, title),\n        React.createElement('p', null, description),\n        React.createElement('div', { 'data-testid': 'accepted-types' }, accept),\n        error && React.createElement('div', { \n          'data-testid': 'error-message', \n          className: 'bg-red-50 border border-red-200 rounded-lg p-3' \n        },\n          React.createElement('div', { className: 'flex items-center space-x-2' },\n            React.createElement('span', { className: 'text-red-600 text-sm' }, '⚠️'),\n            React.createElement('span', { className: 'text-red-800 text-sm font-medium' }, error)\n          )\n        ),\n        React.createElement('input', {\n          type: 'file',\n          'data-testid': 'file-input',\n          onChange: (e: any) => {\n            if (e.target.files) {\n              onUpload(Array.from(e.target.files));\n            }\n          },\n          multiple: true,\n          accept: accept\n        }),\n        React.createElement('div', { 'data-testid': 'file-list' },\n          (files || []).map((file: File, index: number) =>\n            React.createElement('div', { key: file.name, 'data-testid': `file-item-${file.name}` },\n              React.createElement('span', { 'data-testid': `filename-${file.name}` }, file.name),\n              React.createElement('button', { \n                'data-testid': `remove-${file.name}`, \n                onClick: () => onRemove(file) \n              }, 'Remove'),\n              (uploadProgress || {})[file.name] && \n                React.createElement('div', { 'data-testid': `progress-${file.name}` }, \n                  (uploadProgress || {})[file.name] + '%'\n                )\n            )\n          )\n        )\n      )\n  };\n};\n\nexport const createNavigationMock = () => ({\n  useRouter: () => ({\n    push: jest.fn(),\n    back: jest.fn(),\n    forward: jest.fn(),\n    refresh: jest.fn(),\n    replace: jest.fn()\n  })\n});\n\nexport const createUIComponentMocks = () => {\n  const React = require('react');\n  return {\n    Card: ({ children, className }: any) => \n      React.createElement('div', { className, 'data-testid': 'card' }, children),\n    CardHeader: ({ children, className, onClick }: any) => \n      React.createElement('div', { className, onClick, 'data-testid': 'card-header' }, children),\n    CardContent: ({ children, className }: any) => \n      React.createElement('div', { className, 'data-testid': 'card-content' }, children),\n    CardTitle: ({ children, className }: any) => \n      React.createElement('div', { className, 'data-testid': 'card-title' }, children),\n    Button: ({ children, onClick, className, variant, size, disabled }: any) => \n      React.createElement('button', {\n        onClick,\n        className,\n        disabled,\n        'data-testid': `button-${variant || 'default'}-${size || 'default'}`\n      }, children)\n  };\n};\n\n/**\n * Sets up common test environment cleanup\n */\nexport const setupTestCleanup = (mocks: any[] = []) => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    mocks.forEach((mock) => {\n      if (mock && typeof mock.mockClear === \"function\") {\n        mock.mockClear();\n      }\n    });\n  });\n};\n\n/**\n * Creates a mock fetch implementation for API testing\n */\nexport const createMockFetch = () => {\n  const mockFetch = jest.fn();\n  global.fetch = mockFetch as jest.MockedFunction<typeof fetch>;\n  return mockFetch;\n};\n\n/**\n * Test setup utilities\n */\nexport const createUploadTestSetup = (options: {\n  timeout?: number;\n  includeNavigation?: boolean;\n  includeUIComponents?: boolean;\n} = {}) => {\n  const {\n    timeout = 30000,\n    includeNavigation = true,\n    includeUIComponents = false\n  } = options;\n\n  // Set jest timeout\n  jest.setTimeout(timeout);\n\n  // Create mocks\n  const mocks = {\n    onUploadComplete: jest.fn(),\n    onAnalysisComplete: jest.fn(),\n    onNext: jest.fn(),\n    onBack: jest.fn(),\n    originalEnv: process.env\n  };\n\n  const createBeforeEach = (isTestMode: boolean) => () => {\n    // Reset mocks\n    Object.values(mocks).forEach(mock => {\n      if (typeof mock === 'function' && mock.mockReset) {\n        mock.mockReset();\n      }\n    });\n    jest.clearAllMocks();\n\n    // Setup environment\n    mockProcessEnv(isTestMode);\n    mockWindow(isTestMode);\n\n    // Setup localStorage\n    Object.defineProperty(window, 'localStorage', {\n      value: {\n        getItem: jest.fn(),\n        setItem: jest.fn(),\n        removeItem: jest.fn(),\n        clear: jest.fn()\n      }\n    });\n  };\n\n  const createAfterEach = () => () => {\n    process.env = mocks.originalEnv;\n  };\n\n  return {\n    mocks,\n    createBeforeEach,\n    createAfterEach\n  };\n}\n\n/**\n * Upload progress mock utilities\n */\nexport const createUploadProgressMock = (\n  responses: Array<{ id: number; status: string; metadata?: any; original_text?: string }>,\n  progressSteps: number[] = [0, 50, 100]\n) => {\n  return jest.fn().mockImplementation(async (...args: unknown[]) => {\n    const file = args[0] as File;\n    const onProgress = args[1] as (progress: number) => void;\n    // Simulate progress\n    for (const step of progressSteps) {\n      onProgress(step);\n      await new Promise(resolve => setTimeout(resolve, 50));\n    }\n\n    // Find matching response based on filename\n    const response = responses.find(r => \n      r.metadata?.source_file === file.name || \n      responses.length === 1\n    ) || responses[0];\n\n    return response;\n  });\n};\n\n/**\n * Upload failure mock utilities\n */\nexport const createUploadFailureMock = (errorMessage: string, delay: number = 100) => {\n  return jest.fn().mockImplementation(async (...args: unknown[]) => {\n    const file = args[0] as File;\n    const onProgress = args[1] as (progress: number) => void;\n    onProgress(0);\n    await new Promise(resolve => setTimeout(resolve, delay));\n    onProgress(50);\n    await new Promise(resolve => setTimeout(resolve, delay));\n    throw new Error(errorMessage);\n  });\n};\n\n/**\n * Common test assertion utilities\n */\nexport const expectUploadComplete = (\n  mockFn: jest.Mock,\n  expectedFiles: string[],\n  expectedMetadata?: any\n) => {\n  expect(mockFn).toHaveBeenCalledWith(\n    expect.arrayContaining(\n      expectedFiles.map(fileName => \n        expect.objectContaining({\n          metadata: expect.objectContaining({\n            source_file: fileName,\n            ...expectedMetadata\n          })\n        })\n      )\n    ),\n    expectedFiles\n  );\n};\n\n/**\n * Test mode detection utilities\n */\nexport const expectTestModeBanner = (shouldExist: boolean = true) => {\n  const banner = document.querySelector('[data-testid=\"test-mode-banner\"]');\n  if (shouldExist) {\n    expect(banner).not.toBeNull();\n    expect(banner?.textContent).toMatch(/Test Mode Active/i);\n  } else {\n    expect(banner).toBeNull();\n  }\n};\n"],"names":["createAPIErrorMock","createAPIServiceMock","createFileUploadMock","createMockFetch","createNavigationMock","createUIComponentMocks","createUploadFailureMock","createUploadProgressMock","createUploadTestSetup","expectTestModeBanner","expectUploadComplete","mockProcessEnv","mockWindow","setupTestCleanup","isTestMode","originalEnv","process","env","NODE_ENV","NEXT_PUBLIC_TEST_MODE","Object","defineProperty","window","value","hostname","writable","jest","fn","mockImplementation","args","message","status","error","Error","statusCode","uploadFileWithProgress","APIError","createProject","React","require","FileUpload","onUpload","onRemove","files","uploadProgress","title","description","accept","createElement","className","type","onChange","e","target","Array","from","multiple","map","file","index","key","name","onClick","useRouter","push","back","forward","refresh","replace","Card","children","CardHeader","CardContent","CardTitle","Button","variant","size","disabled","mocks","beforeEach","clearAllMocks","forEach","mock","mockClear","mockFetch","global","fetch","options","timeout","includeNavigation","includeUIComponents","setTimeout","onUploadComplete","onAnalysisComplete","onNext","onBack","createBeforeEach","values","mockReset","getItem","setItem","removeItem","clear","createAfterEach","responses","progressSteps","onProgress","step","Promise","resolve","response","find","r","metadata","source_file","length","errorMessage","delay","mockFn","expectedFiles","expectedMetadata","expect","toHaveBeenCalledWith","arrayContaining","fileName","objectContaining","shouldExist","banner","document","querySelector","not","toBeNull","textContent","toMatch"],"mappings":"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"}