b81ff14b31443e1ee5c4fbbfe722cd11
"use strict";
// Mock Next.js navigation
jest.mock('next/navigation', ()=>({
        useParams: jest.fn(),
        useRouter: jest.fn()
    }));
// Mock axios instances
jest.mock('@/lib/axios', ()=>({
        axiosGeneration: {
            get: jest.fn()
        }
    }));
// Mock FlashcardCarousel component as named export
jest.mock('@/features/flashcards/components/FlashcardCarousel', ()=>({
        FlashcardCarousel: ({ flashcardSet })=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                "data-testid": "flashcard-carousel",
                children: [
                    "Flashcard Set: ",
                    flashcardSet.title
                ]
            })
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("@testing-library/react");
const _navigation = require("next/navigation");
const _page = /*#__PURE__*/ _interop_require_default(require("../page"));
const _axios = require("../../../../../../lib/axios");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const mockUseParams = _navigation.useParams;
const mockUseRouter = _navigation.useRouter;
const mockAxiosGeneration = _axios.axiosGeneration;
describe('FlashcardSetCarouselPage', ()=>{
    const mockProjectId = '203062be-58d0-4f98-bbd4-33b4ce081276';
    const mockSetId = '9';
    const mockRouter = {
        push: jest.fn(),
        back: jest.fn(),
        forward: jest.fn(),
        refresh: jest.fn(),
        replace: jest.fn()
    };
    beforeEach(()=>{
        jest.clearAllMocks();
        mockUseParams.mockReturnValue({
            projectId: mockProjectId,
            setId: mockSetId
        });
        mockUseRouter.mockReturnValue(mockRouter);
    });
    describe('Real flashcard set loading', ()=>{
        it('should use axiosGeneration for real flashcard set requests', async ()=>{
            const mockFlashcardSet = {
                id: 9,
                title: 'Test Flashcard Set',
                description: 'Test description',
                owner: 1,
                difficulty_level: 'INTERMEDIATE',
                target_audience: 'Students',
                estimated_study_time: 15,
                tags: [
                    'test'
                ],
                created_at: '2024-01-01T00:00:00Z',
                updated_at: '2024-01-01T00:00:00Z',
                flashcard_count: 3,
                is_public: false,
                study_stats: {
                    total_cards: 3,
                    due_cards: 3,
                    mastered_cards: 0,
                    learning_cards: 0,
                    review_cards: 0,
                    retention_rate: 0,
                    streak_days: 0,
                    next_review: '2024-01-01T00:00:00Z'
                },
                flashcards: []
            };
            mockAxiosGeneration.get.mockResolvedValue({
                data: mockFlashcardSet
            });
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            await (0, _react.waitFor)(()=>{
                expect(mockAxiosGeneration.get).toHaveBeenCalledWith(`projects/${mockProjectId}/flashcard-sets/${mockSetId}/`);
            });
            expect(_react.screen.getByTestId('flashcard-carousel')).toBeInTheDocument();
            expect(_react.screen.getByText('Flashcard Set: Test Flashcard Set')).toBeInTheDocument();
        });
        it('should show loading state initially', ()=>{
            mockAxiosGeneration.get.mockImplementation(()=>new Promise(()=>{}));
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            // check for spinner container existence
            expect(document.querySelector('.animate-spin')).toBeTruthy();
        });
    });
    describe('Mock flashcard set handling', ()=>{
        it('should handle mock flashcard sets correctly', async ()=>{
            mockUseParams.mockReturnValue({
                projectId: mockProjectId,
                setId: 'mock_test'
            });
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByTestId('flashcard-carousel')).toBeInTheDocument();
                expect(_react.screen.getByText('Flashcard Set: Mock Flashcard Set')).toBeInTheDocument();
            });
        });
    });
    describe('URL routing validation', ()=>{
        it('should use correct API endpoint for flashcard sets', async ()=>{
            const mockFlashcardSet = {
                id: 9,
                title: 'Test Set',
                description: 'Test',
                owner: 1,
                difficulty_level: 'INTERMEDIATE',
                target_audience: 'Students',
                estimated_study_time: 15,
                tags: [
                    'test'
                ],
                created_at: '2024-01-01T00:00:00Z',
                updated_at: '2024-01-01T00:00:00Z',
                flashcard_count: 0,
                is_public: false,
                study_stats: {
                    total_cards: 0,
                    due_cards: 0,
                    mastered_cards: 0,
                    learning_cards: 0,
                    review_cards: 0,
                    retention_rate: 0,
                    streak_days: 0,
                    next_review: '2024-01-01T00:00:00Z'
                },
                flashcards: []
            };
            mockAxiosGeneration.get.mockResolvedValue({
                data: mockFlashcardSet
            });
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            await (0, _react.waitFor)(()=>{
                expect(mockAxiosGeneration.get).toHaveBeenCalledWith(`projects/${mockProjectId}/flashcard-sets/${mockSetId}/`);
            });
        });
    });
    describe('Error handling', ()=>{
        it('should display error message when flashcard set is not found', async ()=>{
            const notFoundError = new Error('Not found');
            notFoundError.response = {
                status: 404,
                data: {
                    detail: 'Not found'
                }
            };
            mockAxiosGeneration.get.mockRejectedValue(notFoundError);
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText('Not found')).toBeInTheDocument();
            });
        });
        it('should display generic error message when no specific error is provided', async ()=>{
            mockAxiosGeneration.get.mockRejectedValue(new Error());
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText('Failed to load flashcard set')).toBeInTheDocument();
            });
        });
    });
    describe('Invalid setId handling', ()=>{
        it('should not render anything for invalid setId', ()=>{
            mockUseParams.mockReturnValue({
                projectId: mockProjectId,
                setId: 'invalid'
            });
            const { container } = (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            expect(container.firstChild).toBeNull();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,