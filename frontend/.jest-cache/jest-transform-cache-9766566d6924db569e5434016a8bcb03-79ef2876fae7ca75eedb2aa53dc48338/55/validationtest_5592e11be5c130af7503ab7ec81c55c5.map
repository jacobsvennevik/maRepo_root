{"version":3,"sources":["/Users/jacobhornsvennevik/Documents/GitHub/maRepo_root/frontend/src/test-utils/patterns/forms/validation.test.ts"],"sourcesContent":["/**\n * Form Testing Patterns\n * \n * Reusable patterns for testing form functionality, validation,\n * user interactions, and accessibility across different components.\n */\n\nimport React from 'react';\nimport { screen, fireEvent, waitFor, act } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { renderWithProviders } from '../../setup/shared-setup';\nimport { testFactories } from '../../factories';\nimport { standardMocks } from '../../mocks';\n\n// ============================================================================\n// Form Test Patterns\n// ============================================================================\n\nexport interface FormTestConfig {\n  component: React.ComponentType<any>;\n  props?: any;\n  fields: FormField[];\n  validationRules?: ValidationRule[];\n}\n\nexport interface FormField {\n  name: string;\n  type: 'text' | 'email' | 'password' | 'number' | 'select' | 'checkbox' | 'textarea';\n  label: string;\n  required?: boolean;\n  placeholder?: string;\n}\n\nexport interface ValidationRule {\n  field: string;\n  rule: 'required' | 'email' | 'minLength' | 'maxLength' | 'pattern';\n  value?: any;\n  message: string;\n}\n\n// ============================================================================\n// Form Rendering Testing Pattern\n// ============================================================================\n\nexport const createFormRenderingTest = (config: FormTestConfig) => {\n  return {\n    testFormRenders() {\n      renderWithProviders(React.createElement(config.component, config.props));\n      \n      config.fields.forEach(field => {\n        if (field.type === 'checkbox') {\n          expect(screen.getByRole('checkbox', { name: field.label })).toBeInTheDocument();\n        } else if (field.type === 'select') {\n          expect(screen.getByRole('combobox', { name: field.label })).toBeInTheDocument();\n        } else {\n          expect(screen.getByLabelText(field.label)).toBeInTheDocument();\n        }\n      });\n    },\n\n    testFormAccessibility() {\n      renderWithProviders(React.createElement(config.component, config.props));\n      \n      config.fields.forEach(field => {\n        const element = field.type === 'checkbox' \n          ? screen.getByRole('checkbox', { name: field.label })\n          : screen.getByLabelText(field.label);\n        \n        expect(element).toBeInTheDocument();\n        \n        if (field.required) {\n          expect(element).toHaveAttribute('required');\n        }\n      });\n    },\n\n    testFormStructure() {\n      renderWithProviders(React.createElement(config.component, config.props));\n      \n      const form = screen.getByRole('form');\n      expect(form).toBeInTheDocument();\n      \n      const submitButton = screen.getByRole('button', { name: /submit|save|create/i });\n      expect(submitButton).toBeInTheDocument();\n    }\n  };\n};\n\n// ============================================================================\n// Form Validation Testing Pattern\n// ============================================================================\n\nexport const createFormValidationTest = (config: FormTestConfig) => {\n  return {\n    async testRequiredFieldValidation() {\n      const user = userEvent.setup();\n      renderWithProviders(React.createElement(config.component, config.props));\n\n      const submitButton = screen.getByRole('button', { name: /submit|save|create/i });\n      await user.click(submitButton);\n\n      config.fields\n        .filter(field => field.required)\n        .forEach(field => {\n          expect(screen.getByText(new RegExp(`${field.label}.*required`, 'i'))).toBeInTheDocument();\n        });\n    },\n\n    async testFieldValidation() {\n      const user = userEvent.setup();\n      \n      if (!config.validationRules) return;\n\n      for (const rule of config.validationRules) {\n        renderWithProviders(React.createElement(config.component, config.props));\n\n        const field = config.fields.find(f => f.name === rule.field);\n        if (!field) continue;\n\n        const fieldElement = screen.getByLabelText(field.label);\n\n        switch (rule.rule) {\n          case 'email':\n            await user.type(fieldElement, 'invalid-email');\n            break;\n          case 'minLength':\n            await user.type(fieldElement, 'a'.repeat((rule.value || 8) - 1));\n            break;\n          case 'maxLength':\n            await user.type(fieldElement, 'a'.repeat((rule.value || 100) + 1));\n            break;\n          case 'pattern':\n            await user.type(fieldElement, 'invalid-pattern');\n            break;\n        }\n\n        await user.tab(); // Trigger validation\n\n        await waitFor(() => {\n          expect(screen.getByText(rule.message)).toBeInTheDocument();\n        });\n\n        jest.clearAllMocks();\n      }\n    },\n\n    async testRealTimeValidation() {\n      const user = userEvent.setup();\n      renderWithProviders(React.createElement(config.component, config.props));\n\n      const emailField = config.fields.find(f => f.type === 'email');\n      if (emailField) {\n        const fieldElement = screen.getByLabelText(emailField.label);\n        \n        await user.type(fieldElement, 'invalid');\n        await user.blur(fieldElement);\n\n        await waitFor(() => {\n          expect(screen.getByText(/please enter a valid email address/i)).toBeInTheDocument();\n        });\n      }\n    }\n  };\n};\n\n// ============================================================================\n// Form Interaction Testing Pattern\n// ============================================================================\n\nexport const createFormInteractionTest = (config: FormTestConfig) => {\n  return {\n    async testFormSubmission() {\n      const user = userEvent.setup();\n      const mockOnSubmit = jest.fn();\n      \n      renderWithProviders(React.createElement(config.component, { ...config.props, onSubmit: mockOnSubmit }));\n\n      // Fill all required fields\n      for (const field of config.fields.filter(f => f.required)) {\n        const fieldElement = screen.getByLabelText(field.label);\n        \n        switch (field.type) {\n          case 'text':\n          case 'email':\n          case 'password':\n            await user.type(fieldElement, `test-${field.name}`);\n            break;\n          case 'number':\n            await user.type(fieldElement, '123');\n            break;\n          case 'checkbox':\n            await user.click(fieldElement);\n            break;\n          case 'select':\n            await user.selectOptions(fieldElement, fieldElement.querySelector('option')?.value || '');\n            break;\n        }\n      }\n\n      const submitButton = screen.getByRole('button', { name: /submit|save|create/i });\n      await user.click(submitButton);\n\n      expect(mockOnSubmit).toHaveBeenCalled();\n    },\n\n    async testKeyboardNavigation() {\n      const user = userEvent.setup();\n      renderWithProviders(React.createElement(config.component, config.props));\n\n      // Tab through all fields\n      for (const field of config.fields) {\n        await user.tab();\n        \n        const fieldElement = field.type === 'checkbox' \n          ? screen.getByRole('checkbox', { name: field.label })\n          : screen.getByLabelText(field.label);\n        \n        expect(fieldElement).toHaveFocus();\n      }\n    },\n\n    async testFormReset() {\n      const user = userEvent.setup();\n      renderWithProviders(React.createElement(config.component, config.props));\n\n      // Fill some fields\n      const firstField = config.fields[0];\n      if (firstField) {\n        const fieldElement = screen.getByLabelText(firstField.label);\n        await user.type(fieldElement, 'test value');\n        expect(fieldElement).toHaveValue('test value');\n      }\n\n      // Reset form\n      const resetButton = screen.getByRole('button', { name: /reset|clear/i });\n      await user.click(resetButton);\n\n      // Verify fields are cleared\n      for (const field of config.fields) {\n        const fieldElement = field.type === 'checkbox' \n          ? screen.getByRole('checkbox', { name: field.label })\n          : screen.getByLabelText(field.label);\n        \n        if (field.type === 'checkbox') {\n          expect(fieldElement).not.toBeChecked();\n        } else {\n          expect(fieldElement).toHaveValue('');\n        }\n      }\n    },\n\n    async testRapidSubmission() {\n      const user = userEvent.setup();\n      const mockOnSubmit = jest.fn();\n      \n      renderWithProviders(React.createElement(config.component, { ...config.props, onSubmit: mockOnSubmit }));\n\n      const submitButton = screen.getByRole('button', { name: /submit|save|create/i });\n      \n      // Rapid clicks should be handled gracefully\n      await user.click(submitButton);\n      await user.click(submitButton);\n      await user.click(submitButton);\n\n      // Should only submit once or handle multiple submissions appropriately\n      expect(mockOnSubmit).toHaveBeenCalled();\n    }\n  };\n};\n\n// ============================================================================\n// Form State Testing Pattern\n// ============================================================================\n\nexport const createFormStateTest = (config: FormTestConfig) => {\n  return {\n    testInitialState() {\n      renderWithProviders(React.createElement(config.component, config.props));\n\n      config.fields.forEach(field => {\n        const fieldElement = field.type === 'checkbox' \n          ? screen.getByRole('checkbox', { name: field.label })\n          : screen.getByLabelText(field.label);\n        \n        if (field.type === 'checkbox') {\n          expect(fieldElement).not.toBeChecked();\n        } else {\n          expect(fieldElement).toHaveValue('');\n        }\n      });\n    },\n\n    testLoadingState() {\n      renderWithProviders(React.createElement(config.component, { ...config.props, loading: true }));\n\n      const submitButton = screen.getByRole('button', { name: /submit|save|create/i });\n      expect(submitButton).toBeDisabled();\n      expect(screen.getByText(/loading/i)).toBeInTheDocument();\n    },\n\n    testDisabledState() {\n      renderWithProviders(React.createElement(config.component, { ...config.props, disabled: true }));\n\n      config.fields.forEach(field => {\n        const fieldElement = field.type === 'checkbox' \n          ? screen.getByRole('checkbox', { name: field.label })\n          : screen.getByLabelText(field.label);\n        \n        expect(fieldElement).toBeDisabled();\n      });\n\n      const submitButton = screen.getByRole('button', { name: /submit|save|create/i });\n      expect(submitButton).toBeDisabled();\n    },\n\n    testErrorState() {\n      const errorMessage = 'Form submission failed';\n      renderWithProviders(React.createElement(config.component, { ...config.props, error: errorMessage }));\n\n      expect(screen.getByText(errorMessage)).toBeInTheDocument();\n    }\n  };\n};\n\n// ============================================================================\n// Form Accessibility Testing Pattern\n// ============================================================================\n\nexport const createFormAccessibilityTest = (config: FormTestConfig) => {\n  return {\n    testARIALabels() {\n      renderWithProviders(React.createElement(config.component, config.props));\n\n      config.fields.forEach(field => {\n        const fieldElement = field.type === 'checkbox' \n          ? screen.getByRole('checkbox', { name: field.label })\n          : screen.getByLabelText(field.label);\n        \n        expect(fieldElement).toBeInTheDocument();\n      });\n    },\n\n    async testErrorAnnouncements() {\n      const user = userEvent.setup();\n      renderWithProviders(React.createElement(config.component, config.props));\n\n      const submitButton = screen.getByRole('button', { name: /submit|save|create/i });\n      await user.click(submitButton);\n\n      // Check for error announcements\n      const errorElements = screen.getAllByRole('alert');\n      expect(errorElements.length).toBeGreaterThan(0);\n    },\n\n    testScreenReaderSupport() {\n      renderWithProviders(React.createElement(config.component, config.props));\n\n      // Check for proper form structure\n      const form = screen.getByRole('form');\n      expect(form).toBeInTheDocument();\n\n      // Check for field descriptions\n      config.fields.forEach(field => {\n        if (field.placeholder) {\n          const fieldElement = screen.getByLabelText(field.label);\n          expect(fieldElement).toHaveAttribute('placeholder', field.placeholder);\n        }\n      });\n    }\n  };\n};\n\n// ============================================================================\n// Form Performance Testing Pattern\n// ============================================================================\n\nexport const createFormPerformanceTest = (config: FormTestConfig) => {\n  return {\n    testRenderPerformance() {\n      const startTime = performance.now();\n      renderWithProviders(React.createElement(config.component, config.props));\n      const endTime = performance.now();\n      \n      expect(endTime - startTime).toBeLessThan(100); // Should render in < 100ms\n    },\n\n    async testTypingPerformance() {\n      const user = userEvent.setup();\n      renderWithProviders(React.createElement(config.component, config.props));\n\n      const textField = config.fields.find(f => f.type === 'text');\n      if (!textField) return;\n\n      const fieldElement = screen.getByLabelText(textField.label);\n      const largeText = 'x'.repeat(1000);\n      \n      const startTime = performance.now();\n      await user.type(fieldElement, largeText);\n      const endTime = performance.now();\n      \n      expect(endTime - startTime).toBeLessThan(2000); // Should handle in < 2s\n    },\n\n    async testValidationPerformance() {\n      const user = userEvent.setup();\n      renderWithProviders(React.createElement(config.component, config.props));\n\n      const startTime = performance.now();\n      \n      // Rapid validation triggers\n      for (let i = 0; i < 10; i++) {\n        const field = config.fields[i % config.fields.length];\n        const fieldElement = screen.getByLabelText(field.label);\n        await user.type(fieldElement, 'test');\n        await user.clear(fieldElement);\n      }\n\n      const endTime = performance.now();\n      expect(endTime - startTime).toBeLessThan(1000); // Should handle in < 1s\n    }\n  };\n};\n"],"names":["createFormAccessibilityTest","createFormInteractionTest","createFormPerformanceTest","createFormRenderingTest","createFormStateTest","createFormValidationTest","config","testFormRenders","renderWithProviders","React","createElement","component","props","fields","forEach","field","type","expect","screen","getByRole","name","label","toBeInTheDocument","getByLabelText","testFormAccessibility","element","required","toHaveAttribute","testFormStructure","form","submitButton","testRequiredFieldValidation","user","userEvent","setup","click","filter","getByText","RegExp","testFieldValidation","validationRules","rule","find","f","fieldElement","repeat","value","tab","waitFor","message","jest","clearAllMocks","testRealTimeValidation","emailField","blur","testFormSubmission","mockOnSubmit","fn","onSubmit","selectOptions","querySelector","toHaveBeenCalled","testKeyboardNavigation","toHaveFocus","testFormReset","firstField","toHaveValue","resetButton","not","toBeChecked","testRapidSubmission","testInitialState","testLoadingState","loading","toBeDisabled","testDisabledState","disabled","testErrorState","errorMessage","error","testARIALabels","testErrorAnnouncements","errorElements","getAllByRole","length","toBeGreaterThan","testScreenReaderSupport","placeholder","testRenderPerformance","startTime","performance","now","endTime","toBeLessThan","testTypingPerformance","textField","largeText","testValidationPerformance","i","clear"],"mappings":"AAAA;;;;;CAKC;;;;;;;;;;;IAmUYA,2BAA2B;eAA3BA;;IA/JAC,yBAAyB;eAAzBA;;IA+MAC,yBAAyB;eAAzBA;;IA5UAC,uBAAuB;eAAvBA;;IAsOAC,mBAAmB;eAAnBA;;IAtLAC,wBAAwB;eAAxBA;;;8DArFK;wBAC8B;kEAC1B;6BACc;;;;;;AAkC7B,MAAMF,0BAA0B,CAACG;IACtC,OAAO;QACLC;YACEC,IAAAA,gCAAmB,EAACC,cAAK,CAACC,aAAa,CAACJ,OAAOK,SAAS,EAAEL,OAAOM,KAAK;YAEtEN,OAAOO,MAAM,CAACC,OAAO,CAACC,CAAAA;gBACpB,IAAIA,MAAMC,IAAI,KAAK,YAAY;oBAC7BC,OAAOC,cAAM,CAACC,SAAS,CAAC,YAAY;wBAAEC,MAAML,MAAMM,KAAK;oBAAC,IAAIC,iBAAiB;gBAC/E,OAAO,IAAIP,MAAMC,IAAI,KAAK,UAAU;oBAClCC,OAAOC,cAAM,CAACC,SAAS,CAAC,YAAY;wBAAEC,MAAML,MAAMM,KAAK;oBAAC,IAAIC,iBAAiB;gBAC/E,OAAO;oBACLL,OAAOC,cAAM,CAACK,cAAc,CAACR,MAAMM,KAAK,GAAGC,iBAAiB;gBAC9D;YACF;QACF;QAEAE;YACEhB,IAAAA,gCAAmB,EAACC,cAAK,CAACC,aAAa,CAACJ,OAAOK,SAAS,EAAEL,OAAOM,KAAK;YAEtEN,OAAOO,MAAM,CAACC,OAAO,CAACC,CAAAA;gBACpB,MAAMU,UAAUV,MAAMC,IAAI,KAAK,aAC3BE,cAAM,CAACC,SAAS,CAAC,YAAY;oBAAEC,MAAML,MAAMM,KAAK;gBAAC,KACjDH,cAAM,CAACK,cAAc,CAACR,MAAMM,KAAK;gBAErCJ,OAAOQ,SAASH,iBAAiB;gBAEjC,IAAIP,MAAMW,QAAQ,EAAE;oBAClBT,OAAOQ,SAASE,eAAe,CAAC;gBAClC;YACF;QACF;QAEAC;YACEpB,IAAAA,gCAAmB,EAACC,cAAK,CAACC,aAAa,CAACJ,OAAOK,SAAS,EAAEL,OAAOM,KAAK;YAEtE,MAAMiB,OAAOX,cAAM,CAACC,SAAS,CAAC;YAC9BF,OAAOY,MAAMP,iBAAiB;YAE9B,MAAMQ,eAAeZ,cAAM,CAACC,SAAS,CAAC,UAAU;gBAAEC,MAAM;YAAsB;YAC9EH,OAAOa,cAAcR,iBAAiB;QACxC;IACF;AACF;AAMO,MAAMjB,2BAA2B,CAACC;IACvC,OAAO;QACL,MAAMyB;YACJ,MAAMC,OAAOC,kBAAS,CAACC,KAAK;YAC5B1B,IAAAA,gCAAmB,EAACC,cAAK,CAACC,aAAa,CAACJ,OAAOK,SAAS,EAAEL,OAAOM,KAAK;YAEtE,MAAMkB,eAAeZ,cAAM,CAACC,SAAS,CAAC,UAAU;gBAAEC,MAAM;YAAsB;YAC9E,MAAMY,KAAKG,KAAK,CAACL;YAEjBxB,OAAOO,MAAM,CACVuB,MAAM,CAACrB,CAAAA,QAASA,MAAMW,QAAQ,EAC9BZ,OAAO,CAACC,CAAAA;gBACPE,OAAOC,cAAM,CAACmB,SAAS,CAAC,IAAIC,OAAO,GAAGvB,MAAMM,KAAK,CAAC,UAAU,CAAC,EAAE,OAAOC,iBAAiB;YACzF;QACJ;QAEA,MAAMiB;YACJ,MAAMP,OAAOC,kBAAS,CAACC,KAAK;YAE5B,IAAI,CAAC5B,OAAOkC,eAAe,EAAE;YAE7B,KAAK,MAAMC,QAAQnC,OAAOkC,eAAe,CAAE;gBACzChC,IAAAA,gCAAmB,EAACC,cAAK,CAACC,aAAa,CAACJ,OAAOK,SAAS,EAAEL,OAAOM,KAAK;gBAEtE,MAAMG,QAAQT,OAAOO,MAAM,CAAC6B,IAAI,CAACC,CAAAA,IAAKA,EAAEvB,IAAI,KAAKqB,KAAK1B,KAAK;gBAC3D,IAAI,CAACA,OAAO;gBAEZ,MAAM6B,eAAe1B,cAAM,CAACK,cAAc,CAACR,MAAMM,KAAK;gBAEtD,OAAQoB,KAAKA,IAAI;oBACf,KAAK;wBACH,MAAMT,KAAKhB,IAAI,CAAC4B,cAAc;wBAC9B;oBACF,KAAK;wBACH,MAAMZ,KAAKhB,IAAI,CAAC4B,cAAc,IAAIC,MAAM,CAAC,AAACJ,CAAAA,KAAKK,KAAK,IAAI,CAAA,IAAK;wBAC7D;oBACF,KAAK;wBACH,MAAMd,KAAKhB,IAAI,CAAC4B,cAAc,IAAIC,MAAM,CAAC,AAACJ,CAAAA,KAAKK,KAAK,IAAI,GAAE,IAAK;wBAC/D;oBACF,KAAK;wBACH,MAAMd,KAAKhB,IAAI,CAAC4B,cAAc;wBAC9B;gBACJ;gBAEA,MAAMZ,KAAKe,GAAG,IAAI,qBAAqB;gBAEvC,MAAMC,IAAAA,eAAO,EAAC;oBACZ/B,OAAOC,cAAM,CAACmB,SAAS,CAACI,KAAKQ,OAAO,GAAG3B,iBAAiB;gBAC1D;gBAEA4B,KAAKC,aAAa;YACpB;QACF;QAEA,MAAMC;YACJ,MAAMpB,OAAOC,kBAAS,CAACC,KAAK;YAC5B1B,IAAAA,gCAAmB,EAACC,cAAK,CAACC,aAAa,CAACJ,OAAOK,SAAS,EAAEL,OAAOM,KAAK;YAEtE,MAAMyC,aAAa/C,OAAOO,MAAM,CAAC6B,IAAI,CAACC,CAAAA,IAAKA,EAAE3B,IAAI,KAAK;YACtD,IAAIqC,YAAY;gBACd,MAAMT,eAAe1B,cAAM,CAACK,cAAc,CAAC8B,WAAWhC,KAAK;gBAE3D,MAAMW,KAAKhB,IAAI,CAAC4B,cAAc;gBAC9B,MAAMZ,KAAKsB,IAAI,CAACV;gBAEhB,MAAMI,IAAAA,eAAO,EAAC;oBACZ/B,OAAOC,cAAM,CAACmB,SAAS,CAAC,wCAAwCf,iBAAiB;gBACnF;YACF;QACF;IACF;AACF;AAMO,MAAMrB,4BAA4B,CAACK;IACxC,OAAO;QACL,MAAMiD;YACJ,MAAMvB,OAAOC,kBAAS,CAACC,KAAK;YAC5B,MAAMsB,eAAeN,KAAKO,EAAE;YAE5BjD,IAAAA,gCAAmB,EAACC,cAAK,CAACC,aAAa,CAACJ,OAAOK,SAAS,EAAE;gBAAE,GAAGL,OAAOM,KAAK;gBAAE8C,UAAUF;YAAa;YAEpG,2BAA2B;YAC3B,KAAK,MAAMzC,SAAST,OAAOO,MAAM,CAACuB,MAAM,CAACO,CAAAA,IAAKA,EAAEjB,QAAQ,EAAG;gBACzD,MAAMkB,eAAe1B,cAAM,CAACK,cAAc,CAACR,MAAMM,KAAK;gBAEtD,OAAQN,MAAMC,IAAI;oBAChB,KAAK;oBACL,KAAK;oBACL,KAAK;wBACH,MAAMgB,KAAKhB,IAAI,CAAC4B,cAAc,CAAC,KAAK,EAAE7B,MAAMK,IAAI,EAAE;wBAClD;oBACF,KAAK;wBACH,MAAMY,KAAKhB,IAAI,CAAC4B,cAAc;wBAC9B;oBACF,KAAK;wBACH,MAAMZ,KAAKG,KAAK,CAACS;wBACjB;oBACF,KAAK;wBACH,MAAMZ,KAAK2B,aAAa,CAACf,cAAcA,aAAagB,aAAa,CAAC,WAAWd,SAAS;wBACtF;gBACJ;YACF;YAEA,MAAMhB,eAAeZ,cAAM,CAACC,SAAS,CAAC,UAAU;gBAAEC,MAAM;YAAsB;YAC9E,MAAMY,KAAKG,KAAK,CAACL;YAEjBb,OAAOuC,cAAcK,gBAAgB;QACvC;QAEA,MAAMC;YACJ,MAAM9B,OAAOC,kBAAS,CAACC,KAAK;YAC5B1B,IAAAA,gCAAmB,EAACC,cAAK,CAACC,aAAa,CAACJ,OAAOK,SAAS,EAAEL,OAAOM,KAAK;YAEtE,yBAAyB;YACzB,KAAK,MAAMG,SAAST,OAAOO,MAAM,CAAE;gBACjC,MAAMmB,KAAKe,GAAG;gBAEd,MAAMH,eAAe7B,MAAMC,IAAI,KAAK,aAChCE,cAAM,CAACC,SAAS,CAAC,YAAY;oBAAEC,MAAML,MAAMM,KAAK;gBAAC,KACjDH,cAAM,CAACK,cAAc,CAACR,MAAMM,KAAK;gBAErCJ,OAAO2B,cAAcmB,WAAW;YAClC;QACF;QAEA,MAAMC;YACJ,MAAMhC,OAAOC,kBAAS,CAACC,KAAK;YAC5B1B,IAAAA,gCAAmB,EAACC,cAAK,CAACC,aAAa,CAACJ,OAAOK,SAAS,EAAEL,OAAOM,KAAK;YAEtE,mBAAmB;YACnB,MAAMqD,aAAa3D,OAAOO,MAAM,CAAC,EAAE;YACnC,IAAIoD,YAAY;gBACd,MAAMrB,eAAe1B,cAAM,CAACK,cAAc,CAAC0C,WAAW5C,KAAK;gBAC3D,MAAMW,KAAKhB,IAAI,CAAC4B,cAAc;gBAC9B3B,OAAO2B,cAAcsB,WAAW,CAAC;YACnC;YAEA,aAAa;YACb,MAAMC,cAAcjD,cAAM,CAACC,SAAS,CAAC,UAAU;gBAAEC,MAAM;YAAe;YACtE,MAAMY,KAAKG,KAAK,CAACgC;YAEjB,4BAA4B;YAC5B,KAAK,MAAMpD,SAAST,OAAOO,MAAM,CAAE;gBACjC,MAAM+B,eAAe7B,MAAMC,IAAI,KAAK,aAChCE,cAAM,CAACC,SAAS,CAAC,YAAY;oBAAEC,MAAML,MAAMM,KAAK;gBAAC,KACjDH,cAAM,CAACK,cAAc,CAACR,MAAMM,KAAK;gBAErC,IAAIN,MAAMC,IAAI,KAAK,YAAY;oBAC7BC,OAAO2B,cAAcwB,GAAG,CAACC,WAAW;gBACtC,OAAO;oBACLpD,OAAO2B,cAAcsB,WAAW,CAAC;gBACnC;YACF;QACF;QAEA,MAAMI;YACJ,MAAMtC,OAAOC,kBAAS,CAACC,KAAK;YAC5B,MAAMsB,eAAeN,KAAKO,EAAE;YAE5BjD,IAAAA,gCAAmB,EAACC,cAAK,CAACC,aAAa,CAACJ,OAAOK,SAAS,EAAE;gBAAE,GAAGL,OAAOM,KAAK;gBAAE8C,UAAUF;YAAa;YAEpG,MAAM1B,eAAeZ,cAAM,CAACC,SAAS,CAAC,UAAU;gBAAEC,MAAM;YAAsB;YAE9E,4CAA4C;YAC5C,MAAMY,KAAKG,KAAK,CAACL;YACjB,MAAME,KAAKG,KAAK,CAACL;YACjB,MAAME,KAAKG,KAAK,CAACL;YAEjB,uEAAuE;YACvEb,OAAOuC,cAAcK,gBAAgB;QACvC;IACF;AACF;AAMO,MAAMzD,sBAAsB,CAACE;IAClC,OAAO;QACLiE;YACE/D,IAAAA,gCAAmB,EAACC,cAAK,CAACC,aAAa,CAACJ,OAAOK,SAAS,EAAEL,OAAOM,KAAK;YAEtEN,OAAOO,MAAM,CAACC,OAAO,CAACC,CAAAA;gBACpB,MAAM6B,eAAe7B,MAAMC,IAAI,KAAK,aAChCE,cAAM,CAACC,SAAS,CAAC,YAAY;oBAAEC,MAAML,MAAMM,KAAK;gBAAC,KACjDH,cAAM,CAACK,cAAc,CAACR,MAAMM,KAAK;gBAErC,IAAIN,MAAMC,IAAI,KAAK,YAAY;oBAC7BC,OAAO2B,cAAcwB,GAAG,CAACC,WAAW;gBACtC,OAAO;oBACLpD,OAAO2B,cAAcsB,WAAW,CAAC;gBACnC;YACF;QACF;QAEAM;YACEhE,IAAAA,gCAAmB,EAACC,cAAK,CAACC,aAAa,CAACJ,OAAOK,SAAS,EAAE;gBAAE,GAAGL,OAAOM,KAAK;gBAAE6D,SAAS;YAAK;YAE3F,MAAM3C,eAAeZ,cAAM,CAACC,SAAS,CAAC,UAAU;gBAAEC,MAAM;YAAsB;YAC9EH,OAAOa,cAAc4C,YAAY;YACjCzD,OAAOC,cAAM,CAACmB,SAAS,CAAC,aAAaf,iBAAiB;QACxD;QAEAqD;YACEnE,IAAAA,gCAAmB,EAACC,cAAK,CAACC,aAAa,CAACJ,OAAOK,SAAS,EAAE;gBAAE,GAAGL,OAAOM,KAAK;gBAAEgE,UAAU;YAAK;YAE5FtE,OAAOO,MAAM,CAACC,OAAO,CAACC,CAAAA;gBACpB,MAAM6B,eAAe7B,MAAMC,IAAI,KAAK,aAChCE,cAAM,CAACC,SAAS,CAAC,YAAY;oBAAEC,MAAML,MAAMM,KAAK;gBAAC,KACjDH,cAAM,CAACK,cAAc,CAACR,MAAMM,KAAK;gBAErCJ,OAAO2B,cAAc8B,YAAY;YACnC;YAEA,MAAM5C,eAAeZ,cAAM,CAACC,SAAS,CAAC,UAAU;gBAAEC,MAAM;YAAsB;YAC9EH,OAAOa,cAAc4C,YAAY;QACnC;QAEAG;YACE,MAAMC,eAAe;YACrBtE,IAAAA,gCAAmB,EAACC,cAAK,CAACC,aAAa,CAACJ,OAAOK,SAAS,EAAE;gBAAE,GAAGL,OAAOM,KAAK;gBAAEmE,OAAOD;YAAa;YAEjG7D,OAAOC,cAAM,CAACmB,SAAS,CAACyC,eAAexD,iBAAiB;QAC1D;IACF;AACF;AAMO,MAAMtB,8BAA8B,CAACM;IAC1C,OAAO;QACL0E;YACExE,IAAAA,gCAAmB,EAACC,cAAK,CAACC,aAAa,CAACJ,OAAOK,SAAS,EAAEL,OAAOM,KAAK;YAEtEN,OAAOO,MAAM,CAACC,OAAO,CAACC,CAAAA;gBACpB,MAAM6B,eAAe7B,MAAMC,IAAI,KAAK,aAChCE,cAAM,CAACC,SAAS,CAAC,YAAY;oBAAEC,MAAML,MAAMM,KAAK;gBAAC,KACjDH,cAAM,CAACK,cAAc,CAACR,MAAMM,KAAK;gBAErCJ,OAAO2B,cAActB,iBAAiB;YACxC;QACF;QAEA,MAAM2D;YACJ,MAAMjD,OAAOC,kBAAS,CAACC,KAAK;YAC5B1B,IAAAA,gCAAmB,EAACC,cAAK,CAACC,aAAa,CAACJ,OAAOK,SAAS,EAAEL,OAAOM,KAAK;YAEtE,MAAMkB,eAAeZ,cAAM,CAACC,SAAS,CAAC,UAAU;gBAAEC,MAAM;YAAsB;YAC9E,MAAMY,KAAKG,KAAK,CAACL;YAEjB,gCAAgC;YAChC,MAAMoD,gBAAgBhE,cAAM,CAACiE,YAAY,CAAC;YAC1ClE,OAAOiE,cAAcE,MAAM,EAAEC,eAAe,CAAC;QAC/C;QAEAC;YACE9E,IAAAA,gCAAmB,EAACC,cAAK,CAACC,aAAa,CAACJ,OAAOK,SAAS,EAAEL,OAAOM,KAAK;YAEtE,kCAAkC;YAClC,MAAMiB,OAAOX,cAAM,CAACC,SAAS,CAAC;YAC9BF,OAAOY,MAAMP,iBAAiB;YAE9B,+BAA+B;YAC/BhB,OAAOO,MAAM,CAACC,OAAO,CAACC,CAAAA;gBACpB,IAAIA,MAAMwE,WAAW,EAAE;oBACrB,MAAM3C,eAAe1B,cAAM,CAACK,cAAc,CAACR,MAAMM,KAAK;oBACtDJ,OAAO2B,cAAcjB,eAAe,CAAC,eAAeZ,MAAMwE,WAAW;gBACvE;YACF;QACF;IACF;AACF;AAMO,MAAMrF,4BAA4B,CAACI;IACxC,OAAO;QACLkF;YACE,MAAMC,YAAYC,YAAYC,GAAG;YACjCnF,IAAAA,gCAAmB,EAACC,cAAK,CAACC,aAAa,CAACJ,OAAOK,SAAS,EAAEL,OAAOM,KAAK;YACtE,MAAMgF,UAAUF,YAAYC,GAAG;YAE/B1E,OAAO2E,UAAUH,WAAWI,YAAY,CAAC,MAAM,2BAA2B;QAC5E;QAEA,MAAMC;YACJ,MAAM9D,OAAOC,kBAAS,CAACC,KAAK;YAC5B1B,IAAAA,gCAAmB,EAACC,cAAK,CAACC,aAAa,CAACJ,OAAOK,SAAS,EAAEL,OAAOM,KAAK;YAEtE,MAAMmF,YAAYzF,OAAOO,MAAM,CAAC6B,IAAI,CAACC,CAAAA,IAAKA,EAAE3B,IAAI,KAAK;YACrD,IAAI,CAAC+E,WAAW;YAEhB,MAAMnD,eAAe1B,cAAM,CAACK,cAAc,CAACwE,UAAU1E,KAAK;YAC1D,MAAM2E,YAAY,IAAInD,MAAM,CAAC;YAE7B,MAAM4C,YAAYC,YAAYC,GAAG;YACjC,MAAM3D,KAAKhB,IAAI,CAAC4B,cAAcoD;YAC9B,MAAMJ,UAAUF,YAAYC,GAAG;YAE/B1E,OAAO2E,UAAUH,WAAWI,YAAY,CAAC,OAAO,wBAAwB;QAC1E;QAEA,MAAMI;YACJ,MAAMjE,OAAOC,kBAAS,CAACC,KAAK;YAC5B1B,IAAAA,gCAAmB,EAACC,cAAK,CAACC,aAAa,CAACJ,OAAOK,SAAS,EAAEL,OAAOM,KAAK;YAEtE,MAAM6E,YAAYC,YAAYC,GAAG;YAEjC,4BAA4B;YAC5B,IAAK,IAAIO,IAAI,GAAGA,IAAI,IAAIA,IAAK;gBAC3B,MAAMnF,QAAQT,OAAOO,MAAM,CAACqF,IAAI5F,OAAOO,MAAM,CAACuE,MAAM,CAAC;gBACrD,MAAMxC,eAAe1B,cAAM,CAACK,cAAc,CAACR,MAAMM,KAAK;gBACtD,MAAMW,KAAKhB,IAAI,CAAC4B,cAAc;gBAC9B,MAAMZ,KAAKmE,KAAK,CAACvD;YACnB;YAEA,MAAMgD,UAAUF,YAAYC,GAAG;YAC/B1E,OAAO2E,UAAUH,WAAWI,YAAY,CAAC,OAAO,wBAAwB;QAC1E;IACF;AACF"}