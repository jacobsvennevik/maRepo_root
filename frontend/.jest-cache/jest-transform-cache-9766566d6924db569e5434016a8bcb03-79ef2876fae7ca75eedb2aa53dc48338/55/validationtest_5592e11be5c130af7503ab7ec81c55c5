323117e7ae3adc16465fbffbb35b9b2c
/**
 * Form Testing Patterns
 * 
 * Reusable patterns for testing form functionality, validation,
 * user interactions, and accessibility across different components.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    createFormAccessibilityTest: function() {
        return createFormAccessibilityTest;
    },
    createFormInteractionTest: function() {
        return createFormInteractionTest;
    },
    createFormPerformanceTest: function() {
        return createFormPerformanceTest;
    },
    createFormRenderingTest: function() {
        return createFormRenderingTest;
    },
    createFormStateTest: function() {
        return createFormStateTest;
    },
    createFormValidationTest: function() {
        return createFormValidationTest;
    }
});
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
const _sharedsetup = require("../../setup/shared-setup");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const createFormRenderingTest = (config)=>{
    return {
        testFormRenders () {
            (0, _sharedsetup.renderWithProviders)(_react.default.createElement(config.component, config.props));
            config.fields.forEach((field)=>{
                if (field.type === 'checkbox') {
                    expect(_react1.screen.getByRole('checkbox', {
                        name: field.label
                    })).toBeInTheDocument();
                } else if (field.type === 'select') {
                    expect(_react1.screen.getByRole('combobox', {
                        name: field.label
                    })).toBeInTheDocument();
                } else {
                    expect(_react1.screen.getByLabelText(field.label)).toBeInTheDocument();
                }
            });
        },
        testFormAccessibility () {
            (0, _sharedsetup.renderWithProviders)(_react.default.createElement(config.component, config.props));
            config.fields.forEach((field)=>{
                const element = field.type === 'checkbox' ? _react1.screen.getByRole('checkbox', {
                    name: field.label
                }) : _react1.screen.getByLabelText(field.label);
                expect(element).toBeInTheDocument();
                if (field.required) {
                    expect(element).toHaveAttribute('required');
                }
            });
        },
        testFormStructure () {
            (0, _sharedsetup.renderWithProviders)(_react.default.createElement(config.component, config.props));
            const form = _react1.screen.getByRole('form');
            expect(form).toBeInTheDocument();
            const submitButton = _react1.screen.getByRole('button', {
                name: /submit|save|create/i
            });
            expect(submitButton).toBeInTheDocument();
        }
    };
};
const createFormValidationTest = (config)=>{
    return {
        async testRequiredFieldValidation () {
            const user = _userevent.default.setup();
            (0, _sharedsetup.renderWithProviders)(_react.default.createElement(config.component, config.props));
            const submitButton = _react1.screen.getByRole('button', {
                name: /submit|save|create/i
            });
            await user.click(submitButton);
            config.fields.filter((field)=>field.required).forEach((field)=>{
                expect(_react1.screen.getByText(new RegExp(`${field.label}.*required`, 'i'))).toBeInTheDocument();
            });
        },
        async testFieldValidation () {
            const user = _userevent.default.setup();
            if (!config.validationRules) return;
            for (const rule of config.validationRules){
                (0, _sharedsetup.renderWithProviders)(_react.default.createElement(config.component, config.props));
                const field = config.fields.find((f)=>f.name === rule.field);
                if (!field) continue;
                const fieldElement = _react1.screen.getByLabelText(field.label);
                switch(rule.rule){
                    case 'email':
                        await user.type(fieldElement, 'invalid-email');
                        break;
                    case 'minLength':
                        await user.type(fieldElement, 'a'.repeat((rule.value || 8) - 1));
                        break;
                    case 'maxLength':
                        await user.type(fieldElement, 'a'.repeat((rule.value || 100) + 1));
                        break;
                    case 'pattern':
                        await user.type(fieldElement, 'invalid-pattern');
                        break;
                }
                await user.tab(); // Trigger validation
                await (0, _react1.waitFor)(()=>{
                    expect(_react1.screen.getByText(rule.message)).toBeInTheDocument();
                });
                jest.clearAllMocks();
            }
        },
        async testRealTimeValidation () {
            const user = _userevent.default.setup();
            (0, _sharedsetup.renderWithProviders)(_react.default.createElement(config.component, config.props));
            const emailField = config.fields.find((f)=>f.type === 'email');
            if (emailField) {
                const fieldElement = _react1.screen.getByLabelText(emailField.label);
                await user.type(fieldElement, 'invalid');
                await user.blur(fieldElement);
                await (0, _react1.waitFor)(()=>{
                    expect(_react1.screen.getByText(/please enter a valid email address/i)).toBeInTheDocument();
                });
            }
        }
    };
};
const createFormInteractionTest = (config)=>{
    return {
        async testFormSubmission () {
            const user = _userevent.default.setup();
            const mockOnSubmit = jest.fn();
            (0, _sharedsetup.renderWithProviders)(_react.default.createElement(config.component, {
                ...config.props,
                onSubmit: mockOnSubmit
            }));
            // Fill all required fields
            for (const field of config.fields.filter((f)=>f.required)){
                const fieldElement = _react1.screen.getByLabelText(field.label);
                switch(field.type){
                    case 'text':
                    case 'email':
                    case 'password':
                        await user.type(fieldElement, `test-${field.name}`);
                        break;
                    case 'number':
                        await user.type(fieldElement, '123');
                        break;
                    case 'checkbox':
                        await user.click(fieldElement);
                        break;
                    case 'select':
                        await user.selectOptions(fieldElement, fieldElement.querySelector('option')?.value || '');
                        break;
                }
            }
            const submitButton = _react1.screen.getByRole('button', {
                name: /submit|save|create/i
            });
            await user.click(submitButton);
            expect(mockOnSubmit).toHaveBeenCalled();
        },
        async testKeyboardNavigation () {
            const user = _userevent.default.setup();
            (0, _sharedsetup.renderWithProviders)(_react.default.createElement(config.component, config.props));
            // Tab through all fields
            for (const field of config.fields){
                await user.tab();
                const fieldElement = field.type === 'checkbox' ? _react1.screen.getByRole('checkbox', {
                    name: field.label
                }) : _react1.screen.getByLabelText(field.label);
                expect(fieldElement).toHaveFocus();
            }
        },
        async testFormReset () {
            const user = _userevent.default.setup();
            (0, _sharedsetup.renderWithProviders)(_react.default.createElement(config.component, config.props));
            // Fill some fields
            const firstField = config.fields[0];
            if (firstField) {
                const fieldElement = _react1.screen.getByLabelText(firstField.label);
                await user.type(fieldElement, 'test value');
                expect(fieldElement).toHaveValue('test value');
            }
            // Reset form
            const resetButton = _react1.screen.getByRole('button', {
                name: /reset|clear/i
            });
            await user.click(resetButton);
            // Verify fields are cleared
            for (const field of config.fields){
                const fieldElement = field.type === 'checkbox' ? _react1.screen.getByRole('checkbox', {
                    name: field.label
                }) : _react1.screen.getByLabelText(field.label);
                if (field.type === 'checkbox') {
                    expect(fieldElement).not.toBeChecked();
                } else {
                    expect(fieldElement).toHaveValue('');
                }
            }
        },
        async testRapidSubmission () {
            const user = _userevent.default.setup();
            const mockOnSubmit = jest.fn();
            (0, _sharedsetup.renderWithProviders)(_react.default.createElement(config.component, {
                ...config.props,
                onSubmit: mockOnSubmit
            }));
            const submitButton = _react1.screen.getByRole('button', {
                name: /submit|save|create/i
            });
            // Rapid clicks should be handled gracefully
            await user.click(submitButton);
            await user.click(submitButton);
            await user.click(submitButton);
            // Should only submit once or handle multiple submissions appropriately
            expect(mockOnSubmit).toHaveBeenCalled();
        }
    };
};
const createFormStateTest = (config)=>{
    return {
        testInitialState () {
            (0, _sharedsetup.renderWithProviders)(_react.default.createElement(config.component, config.props));
            config.fields.forEach((field)=>{
                const fieldElement = field.type === 'checkbox' ? _react1.screen.getByRole('checkbox', {
                    name: field.label
                }) : _react1.screen.getByLabelText(field.label);
                if (field.type === 'checkbox') {
                    expect(fieldElement).not.toBeChecked();
                } else {
                    expect(fieldElement).toHaveValue('');
                }
            });
        },
        testLoadingState () {
            (0, _sharedsetup.renderWithProviders)(_react.default.createElement(config.component, {
                ...config.props,
                loading: true
            }));
            const submitButton = _react1.screen.getByRole('button', {
                name: /submit|save|create/i
            });
            expect(submitButton).toBeDisabled();
            expect(_react1.screen.getByText(/loading/i)).toBeInTheDocument();
        },
        testDisabledState () {
            (0, _sharedsetup.renderWithProviders)(_react.default.createElement(config.component, {
                ...config.props,
                disabled: true
            }));
            config.fields.forEach((field)=>{
                const fieldElement = field.type === 'checkbox' ? _react1.screen.getByRole('checkbox', {
                    name: field.label
                }) : _react1.screen.getByLabelText(field.label);
                expect(fieldElement).toBeDisabled();
            });
            const submitButton = _react1.screen.getByRole('button', {
                name: /submit|save|create/i
            });
            expect(submitButton).toBeDisabled();
        },
        testErrorState () {
            const errorMessage = 'Form submission failed';
            (0, _sharedsetup.renderWithProviders)(_react.default.createElement(config.component, {
                ...config.props,
                error: errorMessage
            }));
            expect(_react1.screen.getByText(errorMessage)).toBeInTheDocument();
        }
    };
};
const createFormAccessibilityTest = (config)=>{
    return {
        testARIALabels () {
            (0, _sharedsetup.renderWithProviders)(_react.default.createElement(config.component, config.props));
            config.fields.forEach((field)=>{
                const fieldElement = field.type === 'checkbox' ? _react1.screen.getByRole('checkbox', {
                    name: field.label
                }) : _react1.screen.getByLabelText(field.label);
                expect(fieldElement).toBeInTheDocument();
            });
        },
        async testErrorAnnouncements () {
            const user = _userevent.default.setup();
            (0, _sharedsetup.renderWithProviders)(_react.default.createElement(config.component, config.props));
            const submitButton = _react1.screen.getByRole('button', {
                name: /submit|save|create/i
            });
            await user.click(submitButton);
            // Check for error announcements
            const errorElements = _react1.screen.getAllByRole('alert');
            expect(errorElements.length).toBeGreaterThan(0);
        },
        testScreenReaderSupport () {
            (0, _sharedsetup.renderWithProviders)(_react.default.createElement(config.component, config.props));
            // Check for proper form structure
            const form = _react1.screen.getByRole('form');
            expect(form).toBeInTheDocument();
            // Check for field descriptions
            config.fields.forEach((field)=>{
                if (field.placeholder) {
                    const fieldElement = _react1.screen.getByLabelText(field.label);
                    expect(fieldElement).toHaveAttribute('placeholder', field.placeholder);
                }
            });
        }
    };
};
const createFormPerformanceTest = (config)=>{
    return {
        testRenderPerformance () {
            const startTime = performance.now();
            (0, _sharedsetup.renderWithProviders)(_react.default.createElement(config.component, config.props));
            const endTime = performance.now();
            expect(endTime - startTime).toBeLessThan(100); // Should render in < 100ms
        },
        async testTypingPerformance () {
            const user = _userevent.default.setup();
            (0, _sharedsetup.renderWithProviders)(_react.default.createElement(config.component, config.props));
            const textField = config.fields.find((f)=>f.type === 'text');
            if (!textField) return;
            const fieldElement = _react1.screen.getByLabelText(textField.label);
            const largeText = 'x'.repeat(1000);
            const startTime = performance.now();
            await user.type(fieldElement, largeText);
            const endTime = performance.now();
            expect(endTime - startTime).toBeLessThan(2000); // Should handle in < 2s
        },
        async testValidationPerformance () {
            const user = _userevent.default.setup();
            (0, _sharedsetup.renderWithProviders)(_react.default.createElement(config.component, config.props));
            const startTime = performance.now();
            // Rapid validation triggers
            for(let i = 0; i < 10; i++){
                const field = config.fields[i % config.fields.length];
                const fieldElement = _react1.screen.getByLabelText(field.label);
                await user.type(fieldElement, 'test');
                await user.clear(fieldElement);
            }
            const endTime = performance.now();
            expect(endTime - startTime).toBeLessThan(1000); // Should handle in < 1s
        }
    };
};

//# sourceMappingURL=data:application/json;base64,