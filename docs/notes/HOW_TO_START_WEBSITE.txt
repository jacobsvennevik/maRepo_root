Running the OceanLearn Website Locally
====================================
Quick Start
-----------
1. Start Redis (if not already running):
   ```bash
   brew services start redis   # macOS with Homebrew
   sudo service redis start    # Linux
   ```

2. Start Django server (from root folder):
   ```bash
   source myenv/bin/activate
   python manage.py runserver
   ```

3. Start Celery worker (in a new terminal):
   ```bash
   source myenv/bin/activate
   python -m celery -A backend worker -l info
   ```

4. Start Next.js dev server (in a new terminal):
   ```bash
   cd frontend
   npm run dev
   ```

5. Go to http://localhost:3000/


Running tests
------------
Frontend tests:
```bash
cd frontend
npm run test
```


Prerequisites
-------------
1. Python 3.10+ (tested with 3.11)
2. Node.js 18+ and npm (or yarn/pnpm)
3. PostgreSQL (or change DATABASE settings for SQLite)
4. Redis (required for Celery/background tasks)

Backend (Django)
----------------
1. Create & activate a virtual-environment (from the project root):

   ```bash
   python3 -m venv myenv
   source myenv/bin/activate   # Windows: myenv\Scripts\activate
   ```

2. Install dependencies:

   ```bash
   pip install -r backend/requirements.txt
   # For tests / dev helpers:
   pip install -r backend/requirements-dev.txt
   ```

3. Create a `.env` file at the project root and fill in the required variables (the app uses `python-decouple`). A minimal example:

   ```env
   SECRET_KEY=replace-me
   DEBUG=True
   ALLOWED_HOSTS=localhost,127.0.0.1

   # PostgreSQL
   DB_NAME=oceanlearn
   DB_USER=postgres
   DB_PASSWORD=postgres
   DB_HOST=localhost
   DB_PORT=5432

   # Redis (Celery broker & cache)
   REDIS_URL=redis://127.0.0.1:6379/0
   ```

4. Apply database migrations & (optionally) create an admin user:

   ```bash
   python manage.py migrate
   python manage.py createsuperuser
   ```

5. Run the development server:

   ```bash
   python manage.py runserver 0.0.0.0:8000
   ```

   The backend API is now available at http://localhost:8000/ .

6. Start Celery worker (REQUIRED for file processing):
   In a new terminal, activate the virtual environment and start Celery:

   ```bash
   source myenv/bin/activate
   python -m celery -A backend worker -l info
   ```

   Optional Celery components:
   ```bash
   # For scheduled tasks (if used):
   celery -A backend beat -l info
   
   # For monitoring (Flower dashboard):
   flower -A backend --port=5555
   ```

   Note: Celery is REQUIRED for processing uploaded files. Without it running,
   file uploads will timeout after 5 minutes.


-----
# 1. Deactivate current environment
deactivate
deactivate  # Run twice since you have (myenv) (myenv)

# 2. Remove the corrupted virtual environment
rm -rf myenv

# 3. Create a fresh virtual environment
python3 -m venv myenv

# 4. Activate it
source myenv/bin/activate

# 5. Install the requirements
pip install -r backend/requirements.txt

# 6. Now try running the server
python manage.py runserver

Frontend (Next.js / React)
--------------------------
1. From the project root, move into the `frontend` directory and install packages:

   ```bash
   cd frontend
   npm install   # or: yarn install
   ```

2. Copy the environment template & adjust variables if necessary:

   ```bash
   cp env.local .env.local
   # edit .env.local as needed (API_URL etc.)
   ```

3. Start the development server:

   ```bash
   npm run dev
   ```

   The site will be served at http://localhost:3000/ . The dev server auto-reloads on code changes.


Shutting down
-------------
1. Press `CTRL+C` in each terminal that is running a dev server or Celery worker
2. Stop Redis if needed:
   ```bash
   brew services stop redis    # macOS with Homebrew
   sudo service redis stop     # Linux
   ```


Troubleshooting
---------------
* "SECRET_KEY not set" → make sure your `.env` file is in place and the variable name matches exactly.
* Database connection errors → verify PostgreSQL is running and credentials in `.env` are correct.
* Port already in use → change the port via `python manage.py runserver 8001` or `npm run dev -- --port 3001`.
* File upload timeouts → ensure Celery worker is running and Redis is accessible.
* "celery command not found" → use `python -m celery` instead of just `celery`.

Enjoy hacking on OceanLearn!  
— The Dev Team 